
AAquad_c++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001c3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  00001c3e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000363e  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001391  00000000  00000000  000054e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fe4  00000000  00000000  00006877  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005dc  00000000  00000000  0000785c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e0a  00000000  00000000  00007e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ff1  00000000  00000000  00008c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00009c33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_1>
       8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_2>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 44 02 	jmp	0x488	; 0x488 <__vector_4>
      14:	0c 94 82 02 	jmp	0x504	; 0x504 <__vector_5>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      68:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      6c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      70:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      74:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      78:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      7c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      80:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      84:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      88:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      8c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      90:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      94:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      98:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      9c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      ac:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      b0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      b4:	03 6e       	ori	r16, 0xE3	; 227
      b6:	db 36       	cpi	r29, 0x6B	; 107
      b8:	3d 9a       	sbi	0x07, 5	; 7
      ba:	99 99       	sbic	0x13, 1	; 19
      bc:	99 3d       	cpi	r25, 0xD9	; 217
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	3e 00       	.word	0x003e	; ????
      c4:	00 00       	nop
      c6:	80 3f       	cpi	r24, 0xF0	; 240
      c8:	07 2c       	mov	r0, r7
      ca:	7a a5       	ldd	r23, Y+42	; 0x2a
      cc:	ba 6c       	ori	r27, 0xCA	; 202
      ce:	c5 90       	lpm	r12, Z+
      d0:	da 3b       	cpi	r29, 0xBA	; 186
      d2:	93 65       	ori	r25, 0x53	; 83
      d4:	fc 8b       	std	Y+20, r31	; 0x14
      d6:	bc 53       	subi	r27, 0x3C	; 60
      d8:	f8 10       	cpse	r15, r8
      da:	fd 3c       	cpi	r31, 0xCD	; 205
      dc:	56 92       	lac	Z, r5
      de:	83 4d       	sbci	r24, 0xD3	; 211
      e0:	bd 87       	std	Y+13, r27	; 0x0d
      e2:	9d 3a       	cpi	r25, 0xAD	; 173
      e4:	b6 3d       	cpi	r27, 0xD6	; 214
      e6:	cb c9       	rjmp	.-3178   	; 0xfffff47e <__eeprom_end+0xff7ef47e>
      e8:	bf 5b       	subi	r27, 0xBF	; 191
      ea:	be 73       	andi	r27, 0x3E	; 62
      ec:	da 0f       	add	r29, r26
      ee:	c9 3f       	cpi	r28, 0xF9	; 249

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d8 e0       	ldi	r29, 0x08	; 8
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_clear_bss>:
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	a8 31       	cpi	r26, 0x18	; 24
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 8c 00 	call	0x118	; 0x118 <main>
     110:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <main>:

	volatile uint16_t requested_throttle_pos = 0;
	volatile uint16_t temp_timer_throttle = 0; 


int main(void){
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	c1 5d       	subi	r28, 0xD1	; 209
     122:	d1 09       	sbc	r29, r1
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	de bf       	out	0x3e, r29	; 62
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	cd bf       	out	0x3d, r28	; 61

	initialize::timers();
     12e:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN10initialize6timersEv>
	initialize::interrupts();
     132:	0e 94 11 03 	call	0x622	; 0x622 <_ZN10initialize10interruptsEv>
	
	// gathers and processes the pilot's wishes
	pilot_instructions pilot;
	pilot.set_max_angle(30);
     136:	6e e1       	ldi	r22, 0x1E	; 30
     138:	ce 01       	movw	r24, r28
     13a:	c9 96       	adiw	r24, 0x39	; 57
     13c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <_ZN18pilot_instructions13set_max_angleEh>
	pilot.set_max_yaw_rate(45);
     140:	6d e2       	ldi	r22, 0x2D	; 45
     142:	ce 01       	movw	r24, r28
     144:	c9 96       	adiw	r24, 0x39	; 57
     146:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN18pilot_instructions16set_max_yaw_rateEh>
	
	//handles all sensor data gathering and processing
	sensors sense;
     14a:	ce 01       	movw	r24, r28
     14c:	8e 5b       	subi	r24, 0xBE	; 190
     14e:	9f 4f       	sbci	r25, 0xFF	; 255
     150:	0e 94 cc 07 	call	0xf98	; 0xf98 <_ZN7sensorsC1Ev>
	
	// initialisation of the chip responsible for talking directly to the esc's
	pwm_chip pwm(121);
     154:	69 e7       	ldi	r22, 0x79	; 121
     156:	ce 01       	movw	r24, r28
     158:	84 5a       	subi	r24, 0xA4	; 164
     15a:	9f 4f       	sbci	r25, 0xFF	; 255
     15c:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN8pwm_chipC1Eh>



	// processes current position and requested position into a number proportional to motor strength
	// This is only for the bank (tilted left or right) angle
	PID bank_pid;
     160:	ce 01       	movw	r24, r28
     162:	82 5a       	subi	r24, 0xA2	; 162
     164:	9f 4f       	sbci	r25, 0xFF	; 255
     166:	0e 94 34 03 	call	0x668	; 0x668 <_ZN3PIDC1Ev>
	bank_pid.setWeights(2,0.08,0.05);
     16a:	0f 2e       	mov	r0, r31
     16c:	fd ec       	ldi	r31, 0xCD	; 205
     16e:	4f 2e       	mov	r4, r31
     170:	fc ec       	ldi	r31, 0xCC	; 204
     172:	5f 2e       	mov	r5, r31
     174:	fc e4       	ldi	r31, 0x4C	; 76
     176:	6f 2e       	mov	r6, r31
     178:	fd e3       	ldi	r31, 0x3D	; 61
     17a:	7f 2e       	mov	r7, r31
     17c:	f0 2d       	mov	r31, r0
     17e:	4d aa       	std	Y+53, r4	; 0x35
     180:	5e aa       	std	Y+54, r5	; 0x36
     182:	6f aa       	std	Y+55, r6	; 0x37
     184:	78 ae       	std	Y+56, r7	; 0x38
     186:	0f 2e       	mov	r0, r31
     188:	fa e0       	ldi	r31, 0x0A	; 10
     18a:	8f 2e       	mov	r8, r31
     18c:	f7 ed       	ldi	r31, 0xD7	; 215
     18e:	9f 2e       	mov	r9, r31
     190:	f3 ea       	ldi	r31, 0xA3	; 163
     192:	af 2e       	mov	r10, r31
     194:	fd e3       	ldi	r31, 0x3D	; 61
     196:	bf 2e       	mov	r11, r31
     198:	f0 2d       	mov	r31, r0
     19a:	89 aa       	std	Y+49, r8	; 0x31
     19c:	9a aa       	std	Y+50, r9	; 0x32
     19e:	ab aa       	std	Y+51, r10	; 0x33
     1a0:	bc aa       	std	Y+52, r11	; 0x34
     1a2:	c1 2c       	mov	r12, r1
     1a4:	d1 2c       	mov	r13, r1
     1a6:	76 01       	movw	r14, r12
     1a8:	68 94       	set
     1aa:	f6 f8       	bld	r15, 6
     1ac:	cd a6       	std	Y+45, r12	; 0x2d
     1ae:	de a6       	std	Y+46, r13	; 0x2e
     1b0:	ef a6       	std	Y+47, r14	; 0x2f
     1b2:	f8 aa       	std	Y+48, r15	; 0x30
     1b4:	9e 01       	movw	r18, r28
     1b6:	2b 5c       	subi	r18, 0xCB	; 203
     1b8:	3f 4f       	sbci	r19, 0xFF	; 255
     1ba:	ae 01       	movw	r20, r28
     1bc:	4f 5c       	subi	r20, 0xCF	; 207
     1be:	5f 4f       	sbci	r21, 0xFF	; 255
     1c0:	be 01       	movw	r22, r28
     1c2:	63 5d       	subi	r22, 0xD3	; 211
     1c4:	7f 4f       	sbci	r23, 0xFF	; 255
     1c6:	ce 01       	movw	r24, r28
     1c8:	82 5a       	subi	r24, 0xA2	; 162
     1ca:	9f 4f       	sbci	r25, 0xFF	; 255
     1cc:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN3PID10setWeightsERKfS1_S1_>
	bank_pid.setOutputLowerLimit(-50);
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	a8 e4       	ldi	r26, 0x48	; 72
     1d6:	b2 ec       	ldi	r27, 0xC2	; 194
     1d8:	89 a7       	std	Y+41, r24	; 0x29
     1da:	9a a7       	std	Y+42, r25	; 0x2a
     1dc:	ab a7       	std	Y+43, r26	; 0x2b
     1de:	bc a7       	std	Y+44, r27	; 0x2c
     1e0:	be 01       	movw	r22, r28
     1e2:	67 5d       	subi	r22, 0xD7	; 215
     1e4:	7f 4f       	sbci	r23, 0xFF	; 255
     1e6:	ce 01       	movw	r24, r28
     1e8:	82 5a       	subi	r24, 0xA2	; 162
     1ea:	9f 4f       	sbci	r25, 0xFF	; 255
     1ec:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN3PID19setOutputLowerLimitERKf>
	bank_pid.setOutputUpperLimit(50);
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	a8 e4       	ldi	r26, 0x48	; 72
     1f6:	b2 e4       	ldi	r27, 0x42	; 66
     1f8:	8d a3       	std	Y+37, r24	; 0x25
     1fa:	9e a3       	std	Y+38, r25	; 0x26
     1fc:	af a3       	std	Y+39, r26	; 0x27
     1fe:	b8 a7       	std	Y+40, r27	; 0x28
     200:	be 01       	movw	r22, r28
     202:	6b 5d       	subi	r22, 0xDB	; 219
     204:	7f 4f       	sbci	r23, 0xFF	; 255
     206:	ce 01       	movw	r24, r28
     208:	82 5a       	subi	r24, 0xA2	; 162
     20a:	9f 4f       	sbci	r25, 0xFF	; 255
     20c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3PID19setOutputUpperLimitERKf>

	//Same as on top but for the pitch (tilted forward or back) angle
	PID pitch_pid;
     210:	ce 01       	movw	r24, r28
     212:	88 56       	subi	r24, 0x68	; 104
     214:	9f 4f       	sbci	r25, 0xFF	; 255
     216:	0e 94 34 03 	call	0x668	; 0x668 <_ZN3PIDC1Ev>
	pitch_pid.setWeights(2,0.08,0.05);
     21a:	49 a2       	std	Y+33, r4	; 0x21
     21c:	5a a2       	std	Y+34, r5	; 0x22
     21e:	6b a2       	std	Y+35, r6	; 0x23
     220:	7c a2       	std	Y+36, r7	; 0x24
     222:	8d 8e       	std	Y+29, r8	; 0x1d
     224:	9e 8e       	std	Y+30, r9	; 0x1e
     226:	af 8e       	std	Y+31, r10	; 0x1f
     228:	b8 a2       	std	Y+32, r11	; 0x20
     22a:	c9 8e       	std	Y+25, r12	; 0x19
     22c:	da 8e       	std	Y+26, r13	; 0x1a
     22e:	eb 8e       	std	Y+27, r14	; 0x1b
     230:	fc 8e       	std	Y+28, r15	; 0x1c
     232:	9e 01       	movw	r18, r28
     234:	2f 5d       	subi	r18, 0xDF	; 223
     236:	3f 4f       	sbci	r19, 0xFF	; 255
     238:	ae 01       	movw	r20, r28
     23a:	43 5e       	subi	r20, 0xE3	; 227
     23c:	5f 4f       	sbci	r21, 0xFF	; 255
     23e:	be 01       	movw	r22, r28
     240:	67 5e       	subi	r22, 0xE7	; 231
     242:	7f 4f       	sbci	r23, 0xFF	; 255
     244:	ce 01       	movw	r24, r28
     246:	88 56       	subi	r24, 0x68	; 104
     248:	9f 4f       	sbci	r25, 0xFF	; 255
     24a:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN3PID10setWeightsERKfS1_S1_>
	pitch_pid.setOutputLowerLimit(-50);
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	a8 e4       	ldi	r26, 0x48	; 72
     254:	b2 ec       	ldi	r27, 0xC2	; 194
     256:	8d 8b       	std	Y+21, r24	; 0x15
     258:	9e 8b       	std	Y+22, r25	; 0x16
     25a:	af 8b       	std	Y+23, r26	; 0x17
     25c:	b8 8f       	std	Y+24, r27	; 0x18
     25e:	be 01       	movw	r22, r28
     260:	6b 5e       	subi	r22, 0xEB	; 235
     262:	7f 4f       	sbci	r23, 0xFF	; 255
     264:	ce 01       	movw	r24, r28
     266:	88 56       	subi	r24, 0x68	; 104
     268:	9f 4f       	sbci	r25, 0xFF	; 255
     26a:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN3PID19setOutputLowerLimitERKf>
	pitch_pid.setOutputUpperLimit(50);
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	a8 e4       	ldi	r26, 0x48	; 72
     274:	b2 e4       	ldi	r27, 0x42	; 66
     276:	89 8b       	std	Y+17, r24	; 0x11
     278:	9a 8b       	std	Y+18, r25	; 0x12
     27a:	ab 8b       	std	Y+19, r26	; 0x13
     27c:	bc 8b       	std	Y+20, r27	; 0x14
     27e:	be 01       	movw	r22, r28
     280:	6f 5e       	subi	r22, 0xEF	; 239
     282:	7f 4f       	sbci	r23, 0xFF	; 255
     284:	ce 01       	movw	r24, r28
     286:	88 56       	subi	r24, 0x68	; 104
     288:	9f 4f       	sbci	r25, 0xFF	; 255
     28a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN3PID19setOutputUpperLimitERKf>

	

	
	// Initialisation finished. Interupts enabled, ready to begin
	sei();
     28e:	78 94       	sei

	
	while(1){
		
		// sensor data gathered
		sense.read_acc();
     290:	ce 01       	movw	r24, r28
     292:	8e 5b       	subi	r24, 0xBE	; 190
     294:	9f 4f       	sbci	r25, 0xFF	; 255
     296:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN7sensors8read_accEv>
		sense.read_gyro();
     29a:	ce 01       	movw	r24, r28
     29c:	8e 5b       	subi	r24, 0xBE	; 190
     29e:	9f 4f       	sbci	r25, 0xFF	; 255
     2a0:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZN7sensors9read_gyroEv>
			
		// all sensor data received and processed
		sense.compute_position();
     2a4:	ce 01       	movw	r24, r28
     2a6:	8e 5b       	subi	r24, 0xBE	; 190
     2a8:	9f 4f       	sbci	r25, 0xFF	; 255
     2aa:	0e 94 29 09 	call	0x1252	; 0x1252 <_ZN7sensors16compute_positionEv>
		
	
	
	
		// all pilot data received and processed
		pilot.compute();	
     2ae:	ce 01       	movw	r24, r28
     2b0:	c9 96       	adiw	r24, 0x39	; 57
     2b2:	0e 94 b6 05 	call	0xb6c	; 0xb6c <_ZN18pilot_instructions7computeEv>
		
	
	
		// pilot commands passed to PID object
		bank_pid.setDesiredPoint(pilot.get_bank_angle());	
     2b6:	ce 01       	movw	r24, r28
     2b8:	c9 96       	adiw	r24, 0x39	; 57
     2ba:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZNK18pilot_instructions14get_bank_angleEv>
     2be:	bc 01       	movw	r22, r24
     2c0:	99 0f       	add	r25, r25
     2c2:	88 0b       	sbc	r24, r24
     2c4:	99 0b       	sbc	r25, r25
     2c6:	0e 94 07 0c 	call	0x180e	; 0x180e <__floatsisf>
     2ca:	6d 87       	std	Y+13, r22	; 0x0d
     2cc:	7e 87       	std	Y+14, r23	; 0x0e
     2ce:	8f 87       	std	Y+15, r24	; 0x0f
     2d0:	98 8b       	std	Y+16, r25	; 0x10
     2d2:	be 01       	movw	r22, r28
     2d4:	63 5f       	subi	r22, 0xF3	; 243
     2d6:	7f 4f       	sbci	r23, 0xFF	; 255
     2d8:	ce 01       	movw	r24, r28
     2da:	82 5a       	subi	r24, 0xA2	; 162
     2dc:	9f 4f       	sbci	r25, 0xFF	; 255
     2de:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN3PID15setDesiredPointERKf>
		pitch_pid.setDesiredPoint(pilot.get_pitch_angle());
     2e2:	ce 01       	movw	r24, r28
     2e4:	c9 96       	adiw	r24, 0x39	; 57
     2e6:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZNK18pilot_instructions15get_pitch_angleEv>
     2ea:	bc 01       	movw	r22, r24
     2ec:	99 0f       	add	r25, r25
     2ee:	88 0b       	sbc	r24, r24
     2f0:	99 0b       	sbc	r25, r25
     2f2:	0e 94 07 0c 	call	0x180e	; 0x180e <__floatsisf>
     2f6:	69 87       	std	Y+9, r22	; 0x09
     2f8:	7a 87       	std	Y+10, r23	; 0x0a
     2fa:	8b 87       	std	Y+11, r24	; 0x0b
     2fc:	9c 87       	std	Y+12, r25	; 0x0c
     2fe:	be 01       	movw	r22, r28
     300:	67 5f       	subi	r22, 0xF7	; 247
     302:	7f 4f       	sbci	r23, 0xFF	; 255
     304:	ce 01       	movw	r24, r28
     306:	88 56       	subi	r24, 0x68	; 104
     308:	9f 4f       	sbci	r25, 0xFF	; 255
     30a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_ZN3PID15setDesiredPointERKf>
	
		// Combination of pilot and sensor data into individual percentages of full pwer for each motor
		PID::combine_data(bank_pid.refresh(sense.get_roll()), pitch_pid.refresh(sense.get_pitch()), pilot.get_throttle_power());
     30e:	ce 01       	movw	r24, r28
     310:	c9 96       	adiw	r24, 0x39	; 57
     312:	0e 94 b3 05 	call	0xb66	; 0xb66 <_ZNK18pilot_instructions18get_throttle_powerEv>
     316:	f8 2e       	mov	r15, r24
     318:	ce 01       	movw	r24, r28
     31a:	8e 5b       	subi	r24, 0xBE	; 190
     31c:	9f 4f       	sbci	r25, 0xFF	; 255
     31e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <_ZNK7sensors9get_pitchEv>
     322:	6d 83       	std	Y+5, r22	; 0x05
     324:	7e 83       	std	Y+6, r23	; 0x06
     326:	8f 83       	std	Y+7, r24	; 0x07
     328:	98 87       	std	Y+8, r25	; 0x08
     32a:	be 01       	movw	r22, r28
     32c:	6b 5f       	subi	r22, 0xFB	; 251
     32e:	7f 4f       	sbci	r23, 0xFF	; 255
     330:	ce 01       	movw	r24, r28
     332:	88 56       	subi	r24, 0x68	; 104
     334:	9f 4f       	sbci	r25, 0xFF	; 255
     336:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN3PID7refreshERKf>
     33a:	2b 01       	movw	r4, r22
     33c:	3c 01       	movw	r6, r24
     33e:	ce 01       	movw	r24, r28
     340:	8e 5b       	subi	r24, 0xBE	; 190
     342:	9f 4f       	sbci	r25, 0xFF	; 255
     344:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZNK7sensors8get_rollEv>
     348:	69 83       	std	Y+1, r22	; 0x01
     34a:	7a 83       	std	Y+2, r23	; 0x02
     34c:	8b 83       	std	Y+3, r24	; 0x03
     34e:	9c 83       	std	Y+4, r25	; 0x04
     350:	be 01       	movw	r22, r28
     352:	6f 5f       	subi	r22, 0xFF	; 255
     354:	7f 4f       	sbci	r23, 0xFF	; 255
     356:	ce 01       	movw	r24, r28
     358:	82 5a       	subi	r24, 0xA2	; 162
     35a:	9f 4f       	sbci	r25, 0xFF	; 255
     35c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_ZN3PID7refreshERKf>
     360:	4b 01       	movw	r8, r22
     362:	5c 01       	movw	r10, r24
     364:	6f 2d       	mov	r22, r15
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 05 0c 	call	0x180a	; 0x180a <__floatunsisf>
     370:	7b 01       	movw	r14, r22
     372:	8c 01       	movw	r16, r24
     374:	a3 01       	movw	r20, r6
     376:	92 01       	movw	r18, r4
     378:	c5 01       	movw	r24, r10
     37a:	b4 01       	movw	r22, r8
     37c:	0e 94 07 05 	call	0xa0e	; 0xa0e <_ZN3PID12combine_dataEfff>

		// data encoded into PWM chip language and sent to the esc's
		pwm.pass(PID::motor);	
     380:	60 e1       	ldi	r22, 0x10	; 16
     382:	71 e0       	ldi	r23, 0x01	; 1
     384:	ce 01       	movw	r24, r28
     386:	84 5a       	subi	r24, 0xA4	; 164
     388:	9f 4f       	sbci	r25, 0xFF	; 255
     38a:	0e 94 09 07 	call	0xe12	; 0xe12 <_ZN8pwm_chip4passEPi>
     38e:	80 cf       	rjmp	.-256    	; 0x290 <main+0x178>

00000390 <__vector_1>:

}



ISR(INT0_vect){
     390:	1f 92       	push	r1
     392:	0f 92       	push	r0
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	0f 92       	push	r0
     398:	11 24       	eor	r1, r1
     39a:	2f 93       	push	r18
     39c:	3f 93       	push	r19
     39e:	4f 93       	push	r20
     3a0:	5f 93       	push	r21
     3a2:	8f 93       	push	r24
     3a4:	9f 93       	push	r25
	
		uint16_t temp = TCNT1;
     3a6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     3aa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

		if ( temp < temp_timer_aileron){	// timer overflow
     3ae:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <temp_timer_aileron>
     3b2:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <temp_timer_aileron+0x1>
     3b6:	82 17       	cp	r24, r18
     3b8:	93 07       	cpc	r25, r19
     3ba:	70 f4       	brcc	.+28     	; 0x3d8 <__vector_1+0x48>

			requested_aileron_pos = (0xffff - temp_timer_aileron) + temp ;
     3bc:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <temp_timer_aileron>
     3c0:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <temp_timer_aileron+0x1>
     3c4:	9c 01       	movw	r18, r24
     3c6:	21 50       	subi	r18, 0x01	; 1
     3c8:	31 09       	sbc	r19, r1
     3ca:	24 1b       	sub	r18, r20
     3cc:	35 0b       	sbc	r19, r21
     3ce:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <requested_aileron_pos+0x1>
     3d2:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <requested_aileron_pos>
     3d6:	0b c0       	rjmp	.+22     	; 0x3ee <__vector_1+0x5e>
		}

		else {	// regular case
	
			requested_aileron_pos = temp - temp_timer_aileron;
     3d8:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <temp_timer_aileron>
     3dc:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <temp_timer_aileron+0x1>
     3e0:	ac 01       	movw	r20, r24
     3e2:	42 1b       	sub	r20, r18
     3e4:	53 0b       	sbc	r21, r19
     3e6:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <requested_aileron_pos+0x1>
     3ea:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp;
     3ee:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <temp_timer_aileron+0x1>
     3f2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <temp_timer_aileron>
		
		
		// here, there is a chance that the value stored in requested aileron is actually (0xffff - actual requested aileron) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
		// this is true with all interrupts below
}
     3f6:	9f 91       	pop	r25
     3f8:	8f 91       	pop	r24
     3fa:	5f 91       	pop	r21
     3fc:	4f 91       	pop	r20
     3fe:	3f 91       	pop	r19
     400:	2f 91       	pop	r18
     402:	0f 90       	pop	r0
     404:	0f be       	out	0x3f, r0	; 63
     406:	0f 90       	pop	r0
     408:	1f 90       	pop	r1
     40a:	18 95       	reti

0000040c <__vector_2>:

ISR(INT1_vect){
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	2f 93       	push	r18
     418:	3f 93       	push	r19
     41a:	4f 93       	push	r20
     41c:	5f 93       	push	r21
     41e:	8f 93       	push	r24
     420:	9f 93       	push	r25
	
		uint16_t temp = TCNT1;
     422:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     426:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

		if ( temp < temp_timer_throttle){	// timer overflow
     42a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     42e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
     432:	82 17       	cp	r24, r18
     434:	93 07       	cpc	r25, r19
     436:	70 f4       	brcc	.+28     	; 0x454 <__vector_2+0x48>

			requested_throttle_pos = (0xffff - temp_timer_throttle) + temp ;
     438:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
     43c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
     440:	9c 01       	movw	r18, r24
     442:	21 50       	subi	r18, 0x01	; 1
     444:	31 09       	sbc	r19, r1
     446:	24 1b       	sub	r18, r20
     448:	35 0b       	sbc	r19, r21
     44a:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <requested_throttle_pos+0x1>
     44e:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <requested_throttle_pos>
     452:	0b c0       	rjmp	.+22     	; 0x46a <__vector_2+0x5e>
		}

		else {	// regular case
	
			requested_throttle_pos = temp - temp_timer_throttle;
     454:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     458:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
     45c:	ac 01       	movw	r20, r24
     45e:	42 1b       	sub	r20, r18
     460:	53 0b       	sbc	r21, r19
     462:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <requested_throttle_pos+0x1>
     466:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <requested_throttle_pos>
			
		}
	
		
		temp_timer_throttle = temp;
     46a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
     46e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		
		
}
     472:	9f 91       	pop	r25
     474:	8f 91       	pop	r24
     476:	5f 91       	pop	r21
     478:	4f 91       	pop	r20
     47a:	3f 91       	pop	r19
     47c:	2f 91       	pop	r18
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <__vector_4>:




ISR(PCINT1_vect){
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	2f 93       	push	r18
     494:	3f 93       	push	r19
     496:	4f 93       	push	r20
     498:	5f 93       	push	r21
     49a:	8f 93       	push	r24
     49c:	9f 93       	push	r25

	uint16_t temp = TCNT1;
     49e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     4a2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

	if ( temp < temp_timer_rudder){	// timer overflow
     4a6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <temp_timer_rudder>
     4aa:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <temp_timer_rudder+0x1>
     4ae:	82 17       	cp	r24, r18
     4b0:	93 07       	cpc	r25, r19
     4b2:	70 f4       	brcc	.+28     	; 0x4d0 <__vector_4+0x48>

		requested_rudder_pos = (0xffff - temp_timer_rudder) + temp ;
     4b4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <temp_timer_rudder>
     4b8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <temp_timer_rudder+0x1>
     4bc:	9c 01       	movw	r18, r24
     4be:	21 50       	subi	r18, 0x01	; 1
     4c0:	31 09       	sbc	r19, r1
     4c2:	24 1b       	sub	r18, r20
     4c4:	35 0b       	sbc	r19, r21
     4c6:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <requested_rudder_pos+0x1>
     4ca:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <requested_rudder_pos>
     4ce:	0b c0       	rjmp	.+22     	; 0x4e6 <__vector_4+0x5e>
	}

	else {	// regular case

		requested_rudder_pos = temp - temp_timer_rudder;
     4d0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <temp_timer_rudder>
     4d4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <temp_timer_rudder+0x1>
     4d8:	ac 01       	movw	r20, r24
     4da:	42 1b       	sub	r20, r18
     4dc:	53 0b       	sbc	r21, r19
     4de:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <requested_rudder_pos+0x1>
     4e2:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <requested_rudder_pos>
		
	}

	
	temp_timer_rudder = temp;
     4e6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <temp_timer_rudder+0x1>
     4ea:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_timer_rudder>
	
	

}
     4ee:	9f 91       	pop	r25
     4f0:	8f 91       	pop	r24
     4f2:	5f 91       	pop	r21
     4f4:	4f 91       	pop	r20
     4f6:	3f 91       	pop	r19
     4f8:	2f 91       	pop	r18
     4fa:	0f 90       	pop	r0
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	0f 90       	pop	r0
     500:	1f 90       	pop	r1
     502:	18 95       	reti

00000504 <__vector_5>:

ISR(PCINT2_vect){
     504:	1f 92       	push	r1
     506:	0f 92       	push	r0
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	0f 92       	push	r0
     50c:	11 24       	eor	r1, r1
     50e:	2f 93       	push	r18
     510:	3f 93       	push	r19
     512:	4f 93       	push	r20
     514:	5f 93       	push	r21
     516:	8f 93       	push	r24
     518:	9f 93       	push	r25

	uint16_t temp = TCNT1;
     51a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     51e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	

	if ( temp < temp_timer_elevator){	// timer overflow
     522:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temp_timer_elevator>
     526:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temp_timer_elevator+0x1>
     52a:	82 17       	cp	r24, r18
     52c:	93 07       	cpc	r25, r19
     52e:	70 f4       	brcc	.+28     	; 0x54c <__vector_5+0x48>

		requested_elevator_pos = (0xffff - temp_timer_elevator) + temp ;
     530:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <temp_timer_elevator>
     534:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <temp_timer_elevator+0x1>
     538:	9c 01       	movw	r18, r24
     53a:	21 50       	subi	r18, 0x01	; 1
     53c:	31 09       	sbc	r19, r1
     53e:	24 1b       	sub	r18, r20
     540:	35 0b       	sbc	r19, r21
     542:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <requested_elevator_pos+0x1>
     546:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <requested_elevator_pos>
     54a:	0b c0       	rjmp	.+22     	; 0x562 <__vector_5+0x5e>
	}

	else {	// regular case

		requested_elevator_pos = temp - temp_timer_elevator;
     54c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temp_timer_elevator>
     550:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temp_timer_elevator+0x1>
     554:	ac 01       	movw	r20, r24
     556:	42 1b       	sub	r20, r18
     558:	53 0b       	sbc	r21, r19
     55a:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <requested_elevator_pos+0x1>
     55e:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <requested_elevator_pos>
		
	}

	
	temp_timer_elevator = temp;
     562:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <temp_timer_elevator+0x1>
     566:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <temp_timer_elevator>
	
	

}
     56a:	9f 91       	pop	r25
     56c:	8f 91       	pop	r24
     56e:	5f 91       	pop	r21
     570:	4f 91       	pop	r20
     572:	3f 91       	pop	r19
     574:	2f 91       	pop	r18
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <_ZN9I2C_328pbC1Ei>:

I2C_328pb::I2C_328pb(int bit_rate){

	// takes care of any and all initialsation

	TWBR0 = bit_rate;
     580:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	
	PORTC |= ( (1 << 4) | (1 << 5) );
     584:	88 b1       	in	r24, 0x08	; 8
     586:	80 63       	ori	r24, 0x30	; 48
     588:	88 b9       	out	0x08, r24	; 8
     58a:	08 95       	ret

0000058c <_ZN9I2C_328pb5startEv>:



void I2C_328pb::start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
     58c:	84 ea       	ldi	r24, 0xA4	; 164
     58e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     592:	ec eb       	ldi	r30, 0xBC	; 188
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	88 23       	and	r24, r24
     59a:	ec f7       	brge	.-6      	; 0x596 <_ZN9I2C_328pb5startEv+0xa>
		return 0; 
	}

	return 1;
*/
}
     59c:	08 95       	ret

0000059e <_ZN9I2C_328pb12repeat_startEv>:


void I2C_328pb::repeat_start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
     59e:	84 ea       	ldi	r24, 0xA4	; 164
     5a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     5a4:	ec eb       	ldi	r30, 0xBC	; 188
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	88 23       	and	r24, r24
     5ac:	ec f7       	brge	.-6      	; 0x5a8 <_ZN9I2C_328pb12repeat_startEv+0xa>
		return 0; 
	}

	return 1;
*/
}
     5ae:	08 95       	ret

000005b0 <_ZN9I2C_328pb10send_slaveEi>:

void I2C_328pb::send_slave(int address){

	// send slave address + write bit

	TWDR0 = address;
     5b0:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
     5b4:	84 e8       	ldi	r24, 0x84	; 132
     5b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     5ba:	ec eb       	ldi	r30, 0xBC	; 188
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	88 23       	and	r24, r24
     5c2:	ec f7       	brge	.-6      	; 0x5be <_ZN9I2C_328pb10send_slaveEi+0xe>
	}

	return 1;
*/

}
     5c4:	08 95       	ret

000005c6 <_ZN9I2C_328pb8send_regEi>:

void I2C_328pb::send_reg(int reg){

	// send  address of register to be written

	TWDR0 = reg; 
     5c6:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

  	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
     5ca:	84 e8       	ldi	r24, 0x84	; 132
     5cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     5d0:	ec eb       	ldi	r30, 0xBC	; 188
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	80 81       	ld	r24, Z
     5d6:	88 23       	and	r24, r24
     5d8:	ec f7       	brge	.-6      	; 0x5d4 <_ZN9I2C_328pb8send_regEi+0xe>
	}

	return 1;
*/

}
     5da:	08 95       	ret

000005dc <_ZN9I2C_328pb4sendEi>:


void I2C_328pb::send(int data){

	TWDR0 = data;
     5dc:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ((1 << TWINT) | (1 << TWEN));
     5e0:	84 e8       	ldi	r24, 0x84	; 132
     5e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     5e6:	ec eb       	ldi	r30, 0xBC	; 188
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	80 81       	ld	r24, Z
     5ec:	88 23       	and	r24, r24
     5ee:	ec f7       	brge	.-6      	; 0x5ea <_ZN9I2C_328pb4sendEi+0xe>
	}

	return 1;
*/

}
     5f0:	08 95       	ret

000005f2 <_ZN9I2C_328pb13get_next_byteEv>:

void I2C_328pb::get_next_byte(){


	TWCR0 = ( (1 << TWEN) | (1 << TWINT) | (1 << TWEA));
     5f2:	84 ec       	ldi	r24, 0xC4	; 196
     5f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while (! (TWCR0 & (1 << TWINT)) );
     5f8:	ec eb       	ldi	r30, 0xBC	; 188
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	80 81       	ld	r24, Z
     5fe:	88 23       	and	r24, r24
     600:	ec f7       	brge	.-6      	; 0x5fc <_ZN9I2C_328pb13get_next_byteEv+0xa>
	return 1;

*/


}
     602:	08 95       	ret

00000604 <_ZN9I2C_328pb13end_data_readEv>:

void I2C_328pb::end_data_read(){


	TWCR0 = ( (1 << TWEN) | (1 << TWINT) );
     604:	84 e8       	ldi	r24, 0x84	; 132
     606:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while (! (TWCR0 & (1 << TWINT)) );
     60a:	ec eb       	ldi	r30, 0xBC	; 188
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	80 81       	ld	r24, Z
     610:	88 23       	and	r24, r24
     612:	ec f7       	brge	.-6      	; 0x60e <_ZN9I2C_328pb13end_data_readEv+0xa>


}
     614:	08 95       	ret

00000616 <_ZN9I2C_328pb4stopEv>:

void I2C_328pb::stop(){


	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) ); 
     616:	ec eb       	ldi	r30, 0xBC	; 188
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	84 69       	ori	r24, 0x94	; 148
     61e:	80 83       	st	Z, r24
     620:	08 95       	ret

00000622 <_ZN10initialize10interruptsEv>:


void initialize::interrupts(){

	// external int 0
	EIMSK |= (1 << INT0); // enable the int0 interrupt												
     622:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC00);	// will fire at any logical change
     624:	e9 e6       	ldi	r30, 0x69	; 105
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	80 81       	ld	r24, Z
     62a:	81 60       	ori	r24, 0x01	; 1
     62c:	80 83       	st	Z, r24

	// external int 1
	EIMSK |= (1 << INT1); // enable the int0 interrupt
     62e:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= (1 << ISC10);	// will fire at any logical change
     630:	80 81       	ld	r24, Z
     632:	84 60       	ori	r24, 0x04	; 4
     634:	80 83       	st	Z, r24

	// pcint 1 (for pin C3)
	PCICR |= (1 << PCIE1);
     636:	e8 e6       	ldi	r30, 0x68	; 104
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	80 81       	ld	r24, Z
     63c:	82 60       	ori	r24, 0x02	; 2
     63e:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);
     640:	ac e6       	ldi	r26, 0x6C	; 108
     642:	b0 e0       	ldi	r27, 0x00	; 0
     644:	8c 91       	ld	r24, X
     646:	88 60       	ori	r24, 0x08	; 8
     648:	8c 93       	st	X, r24

	//pcint 2 (for pin B1)
	PCICR |= (1 << PCIE2);
     64a:	80 81       	ld	r24, Z
     64c:	84 60       	ori	r24, 0x04	; 4
     64e:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT17);
     650:	ed e6       	ldi	r30, 0x6D	; 109
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	82 60       	ori	r24, 0x02	; 2
     658:	80 83       	st	Z, r24
     65a:	08 95       	ret

0000065c <_ZN10initialize6timersEv>:
}

void initialize::timers(){

	// by default the timer is set to normal mode
	TCCR1B |= ( (1 << CS10));	// timer will run without prescaler and willoverrun 15 times/second on a 1MHz clock
     65c:	e1 e8       	ldi	r30, 0x81	; 129
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	81 60       	ori	r24, 0x01	; 1
     664:	80 83       	st	Z, r24
     666:	08 95       	ret

00000668 <_ZN3PIDC1Ev>:
#include "PID.h"



PID::PID(){
     668:	fc 01       	movw	r30, r24

    last_error = 0;
     66a:	14 82       	std	Z+4, r1	; 0x04
     66c:	15 82       	std	Z+5, r1	; 0x05
     66e:	16 82       	std	Z+6, r1	; 0x06
     670:	17 82       	std	Z+7, r1	; 0x07
	current_error = 0;
     672:	10 82       	st	Z, r1
     674:	11 82       	std	Z+1, r1	; 0x01
     676:	12 82       	std	Z+2, r1	; 0x02
     678:	13 82       	std	Z+3, r1	; 0x03
    last_output = 0;
     67a:	14 86       	std	Z+12, r1	; 0x0c
     67c:	15 86       	std	Z+13, r1	; 0x0d
     67e:	16 86       	std	Z+14, r1	; 0x0e
     680:	17 86       	std	Z+15, r1	; 0x0f
    integral = 0;
     682:	10 a2       	std	Z+32, r1	; 0x20
     684:	11 a2       	std	Z+33, r1	; 0x21
     686:	12 a2       	std	Z+34, r1	; 0x22
     688:	13 a2       	std	Z+35, r1	; 0x23
     68a:	08 95       	ret

0000068c <_ZN3PID10setWeightsERKfS1_S1_>:
        
// initialisation of this satic array		
int PID::motor[4] = {0};


void PID::setWeights(const float &Kp, const float &Ki, const float &Kd) {
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	fc 01       	movw	r30, r24
	this->Kp = Kp;
     692:	eb 01       	movw	r28, r22
     694:	88 81       	ld	r24, Y
     696:	99 81       	ldd	r25, Y+1	; 0x01
     698:	aa 81       	ldd	r26, Y+2	; 0x02
     69a:	bb 81       	ldd	r27, Y+3	; 0x03
     69c:	84 8b       	std	Z+20, r24	; 0x14
     69e:	95 8b       	std	Z+21, r25	; 0x15
     6a0:	a6 8b       	std	Z+22, r26	; 0x16
     6a2:	b7 8b       	std	Z+23, r27	; 0x17
	this->Ki = Ki;
     6a4:	ea 01       	movw	r28, r20
     6a6:	88 81       	ld	r24, Y
     6a8:	99 81       	ldd	r25, Y+1	; 0x01
     6aa:	aa 81       	ldd	r26, Y+2	; 0x02
     6ac:	bb 81       	ldd	r27, Y+3	; 0x03
     6ae:	80 8f       	std	Z+24, r24	; 0x18
     6b0:	91 8f       	std	Z+25, r25	; 0x19
     6b2:	a2 8f       	std	Z+26, r26	; 0x1a
     6b4:	b3 8f       	std	Z+27, r27	; 0x1b
	this->Kd = Kd;
     6b6:	e9 01       	movw	r28, r18
     6b8:	88 81       	ld	r24, Y
     6ba:	99 81       	ldd	r25, Y+1	; 0x01
     6bc:	aa 81       	ldd	r26, Y+2	; 0x02
     6be:	bb 81       	ldd	r27, Y+3	; 0x03
     6c0:	84 8f       	std	Z+28, r24	; 0x1c
     6c2:	95 8f       	std	Z+29, r25	; 0x1d
     6c4:	a6 8f       	std	Z+30, r26	; 0x1e
     6c6:	b7 8f       	std	Z+31, r27	; 0x1f
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <_ZN3PID19setOutputLowerLimitERKf>:
void PID::setErrorThreshold(const float &error_threshold) {
	this->error_threshold = error_threshold;
}
*/
void PID::setOutputLowerLimit(const float &output_lower_limit) {
	this->output_lower_limit = output_lower_limit;
     6ce:	fb 01       	movw	r30, r22
     6d0:	40 81       	ld	r20, Z
     6d2:	51 81       	ldd	r21, Z+1	; 0x01
     6d4:	62 81       	ldd	r22, Z+2	; 0x02
     6d6:	73 81       	ldd	r23, Z+3	; 0x03
     6d8:	fc 01       	movw	r30, r24
     6da:	40 ab       	std	Z+48, r20	; 0x30
     6dc:	51 ab       	std	Z+49, r21	; 0x31
     6de:	62 ab       	std	Z+50, r22	; 0x32
     6e0:	73 ab       	std	Z+51, r23	; 0x33
     6e2:	08 95       	ret

000006e4 <_ZN3PID19setOutputUpperLimitERKf>:
}

void PID::setOutputUpperLimit(const float &output_upper_limit) {
	this->output_upper_limit = output_upper_limit;
     6e4:	fb 01       	movw	r30, r22
     6e6:	40 81       	ld	r20, Z
     6e8:	51 81       	ldd	r21, Z+1	; 0x01
     6ea:	62 81       	ldd	r22, Z+2	; 0x02
     6ec:	73 81       	ldd	r23, Z+3	; 0x03
     6ee:	fc 01       	movw	r30, r24
     6f0:	44 a7       	std	Z+44, r20	; 0x2c
     6f2:	55 a7       	std	Z+45, r21	; 0x2d
     6f4:	66 a7       	std	Z+46, r22	; 0x2e
     6f6:	77 a7       	std	Z+47, r23	; 0x2f
     6f8:	08 95       	ret

000006fa <_ZN3PID15setDesiredPointERKf>:
}

void PID::setDesiredPoint(const float &desired_point) {
	set_point = desired_point;
     6fa:	fb 01       	movw	r30, r22
     6fc:	40 81       	ld	r20, Z
     6fe:	51 81       	ldd	r21, Z+1	; 0x01
     700:	62 81       	ldd	r22, Z+2	; 0x02
     702:	73 81       	ldd	r23, Z+3	; 0x03
     704:	fc 01       	movw	r30, r24
     706:	40 8b       	std	Z+16, r20	; 0x10
     708:	51 8b       	std	Z+17, r21	; 0x11
     70a:	62 8b       	std	Z+18, r22	; 0x12
     70c:	73 8b       	std	Z+19, r23	; 0x13
     70e:	08 95       	ret

00000710 <_ZN3PID11update_timeEv>:
}




void PID::update_time(){ 
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	00 d0       	rcall	.+0      	; 0x71e <_ZN3PID11update_timeEv+0xe>
     71e:	00 d0       	rcall	.+0      	; 0x720 <_ZN3PID11update_timeEv+0x10>
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	8c 01       	movw	r16, r24

		
	uint16_t time = TCNT1;
     726:	e4 e8       	ldi	r30, 0x84	; 132
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	e0 80       	ld	r14, Z
     72c:	f1 80       	ldd	r15, Z+1	; 0x01
	
	volatile float result;
	

	if (TCNT1 < time_of_previous_scan){
     72e:	20 81       	ld	r18, Z
     730:	31 81       	ldd	r19, Z+1	; 0x01
     732:	fc 01       	movw	r30, r24
     734:	80 ad       	ldd	r24, Z+56	; 0x38
     736:	91 ad       	ldd	r25, Z+57	; 0x39
     738:	28 17       	cp	r18, r24
     73a:	39 07       	cpc	r19, r25
     73c:	70 f4       	brcc	.+28     	; 0x75a <_ZN3PID11update_timeEv+0x4a>

		result = 0xffff - time_of_previous_scan + time ;
     73e:	b7 01       	movw	r22, r14
     740:	61 50       	subi	r22, 0x01	; 1
     742:	71 09       	sbc	r23, r1
     744:	68 1b       	sub	r22, r24
     746:	79 0b       	sbc	r23, r25
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 05 0c 	call	0x180a	; 0x180a <__floatunsisf>
     750:	69 83       	std	Y+1, r22	; 0x01
     752:	7a 83       	std	Y+2, r23	; 0x02
     754:	8b 83       	std	Y+3, r24	; 0x03
     756:	9c 83       	std	Y+4, r25	; 0x04
     758:	0b c0       	rjmp	.+22     	; 0x770 <_ZN3PID11update_timeEv+0x60>

	}

	else{

		result = time - time_of_previous_scan;
     75a:	b7 01       	movw	r22, r14
     75c:	68 1b       	sub	r22, r24
     75e:	79 0b       	sbc	r23, r25
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 05 0c 	call	0x180a	; 0x180a <__floatunsisf>
     768:	69 83       	std	Y+1, r22	; 0x01
     76a:	7a 83       	std	Y+2, r23	; 0x02
     76c:	8b 83       	std	Y+3, r24	; 0x03
     76e:	9c 83       	std	Y+4, r25	; 0x04
	}


	result /= (float)TIMER_BIT_RATE;
     770:	69 81       	ldd	r22, Y+1	; 0x01
     772:	7a 81       	ldd	r23, Y+2	; 0x02
     774:	8b 81       	ldd	r24, Y+3	; 0x03
     776:	9c 81       	ldd	r25, Y+4	; 0x04
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	34 e2       	ldi	r19, 0x24	; 36
     77c:	44 e7       	ldi	r20, 0x74	; 116
     77e:	59 e4       	ldi	r21, 0x49	; 73
     780:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__divsf3>
     784:	69 83       	std	Y+1, r22	; 0x01
     786:	7a 83       	std	Y+2, r23	; 0x02
     788:	8b 83       	std	Y+3, r24	; 0x03
     78a:	9c 83       	std	Y+4, r25	; 0x04

	time_of_previous_scan = time;
     78c:	f8 01       	movw	r30, r16
     78e:	f1 ae       	std	Z+57, r15	; 0x39
     790:	e0 ae       	std	Z+56, r14	; 0x38

	time_elapsed = result;
     792:	89 81       	ldd	r24, Y+1	; 0x01
     794:	9a 81       	ldd	r25, Y+2	; 0x02
     796:	ab 81       	ldd	r26, Y+3	; 0x03
     798:	bc 81       	ldd	r27, Y+4	; 0x04
     79a:	84 ab       	std	Z+52, r24	; 0x34
     79c:	95 ab       	std	Z+53, r25	; 0x35
     79e:	a6 ab       	std	Z+54, r26	; 0x36
     7a0:	b7 ab       	std	Z+55, r27	; 0x37
	
	
}
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	08 95       	ret

000007b8 <_ZN3PID7refreshERKf>:

void PID::setDesiredPoint(const float &desired_point) {
	set_point = desired_point;
}

float PID::refresh(const float &feedback_input) {
     7b8:	4f 92       	push	r4
     7ba:	5f 92       	push	r5
     7bc:	6f 92       	push	r6
     7be:	7f 92       	push	r7
     7c0:	8f 92       	push	r8
     7c2:	9f 92       	push	r9
     7c4:	af 92       	push	r10
     7c6:	bf 92       	push	r11
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	00 d0       	rcall	.+0      	; 0x7d6 <_ZN3PID7refreshERKf+0x1e>
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <_ZN3PID7refreshERKf+0x20>
     7d8:	00 d0       	rcall	.+0      	; 0x7da <_ZN3PID7refreshERKf+0x22>
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	9e 83       	std	Y+6, r25	; 0x06
     7e0:	8d 83       	std	Y+5, r24	; 0x05
     7e2:	7b 01       	movw	r14, r22

	update_time();	// get the time for integral and derivative purposes
     7e4:	0e 94 88 03 	call	0x710	; 0x710 <_ZN3PID11update_timeEv>



	// if any of the inputs are entirely unreasonable, nothing gets updated and the previous output is kept
	// effectively throws away an entire cycle of the main loop
	if ((fabs(set_point) > 100) || (fabs(feedback_input) > 100)){
     7e8:	ed 81       	ldd	r30, Y+5	; 0x05
     7ea:	fe 81       	ldd	r31, Y+6	; 0x06
     7ec:	80 88       	ldd	r8, Z+16	; 0x10
     7ee:	91 88       	ldd	r9, Z+17	; 0x11
     7f0:	a2 88       	ldd	r10, Z+18	; 0x12
     7f2:	b3 88       	ldd	r11, Z+19	; 0x13
     7f4:	c5 01       	movw	r24, r10
     7f6:	b4 01       	movw	r22, r8
     7f8:	9f 77       	andi	r25, 0x7F	; 127
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	48 ec       	ldi	r20, 0xC8	; 200
     800:	52 e4       	ldi	r21, 0x42	; 66
     802:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__gesf2>
     806:	18 16       	cp	r1, r24
     808:	84 f0       	brlt	.+32     	; 0x82a <_ZN3PID7refreshERKf+0x72>
     80a:	f7 01       	movw	r30, r14
     80c:	80 81       	ld	r24, Z
     80e:	91 81       	ldd	r25, Z+1	; 0x01
     810:	a2 81       	ldd	r26, Z+2	; 0x02
     812:	b3 81       	ldd	r27, Z+3	; 0x03
     814:	bc 01       	movw	r22, r24
     816:	cd 01       	movw	r24, r26
     818:	9f 77       	andi	r25, 0x7F	; 127
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	48 ec       	ldi	r20, 0xC8	; 200
     820:	52 e4       	ldi	r21, 0x42	; 66
     822:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__gesf2>
     826:	18 16       	cp	r1, r24
     828:	3c f4       	brge	.+14     	; 0x838 <_ZN3PID7refreshERKf+0x80>
		
		return output;
     82a:	ed 81       	ldd	r30, Y+5	; 0x05
     82c:	fe 81       	ldd	r31, Y+6	; 0x06
     82e:	60 85       	ldd	r22, Z+8	; 0x08
     830:	71 85       	ldd	r23, Z+9	; 0x09
     832:	82 85       	ldd	r24, Z+10	; 0x0a
     834:	93 85       	ldd	r25, Z+11	; 0x0b
     836:	d6 c0       	rjmp	.+428    	; 0x9e4 <__stack+0xe5>
	}

	// things are updated	
	last_error = current_error;
     838:	ed 81       	ldd	r30, Y+5	; 0x05
     83a:	fe 81       	ldd	r31, Y+6	; 0x06
     83c:	40 80       	ld	r4, Z
     83e:	51 80       	ldd	r5, Z+1	; 0x01
     840:	62 80       	ldd	r6, Z+2	; 0x02
     842:	73 80       	ldd	r7, Z+3	; 0x03
     844:	44 82       	std	Z+4, r4	; 0x04
     846:	55 82       	std	Z+5, r5	; 0x05
     848:	66 82       	std	Z+6, r6	; 0x06
     84a:	77 82       	std	Z+7, r7	; 0x07
	last_output = output;		
     84c:	80 85       	ldd	r24, Z+8	; 0x08
     84e:	91 85       	ldd	r25, Z+9	; 0x09
     850:	a2 85       	ldd	r26, Z+10	; 0x0a
     852:	b3 85       	ldd	r27, Z+11	; 0x0b
     854:	84 87       	std	Z+12, r24	; 0x0c
     856:	95 87       	std	Z+13, r25	; 0x0d
     858:	a6 87       	std	Z+14, r26	; 0x0e
     85a:	b7 87       	std	Z+15, r27	; 0x0f
	current_error = set_point - feedback_input;	
     85c:	f7 01       	movw	r30, r14
     85e:	20 81       	ld	r18, Z
     860:	31 81       	ldd	r19, Z+1	; 0x01
     862:	42 81       	ldd	r20, Z+2	; 0x02
     864:	53 81       	ldd	r21, Z+3	; 0x03
     866:	c5 01       	movw	r24, r10
     868:	b4 01       	movw	r22, r8
     86a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
     86e:	6b 01       	movw	r12, r22
     870:	7c 01       	movw	r14, r24
     872:	ed 81       	ldd	r30, Y+5	; 0x05
     874:	fe 81       	ldd	r31, Y+6	; 0x06
     876:	60 83       	st	Z, r22
     878:	71 83       	std	Z+1, r23	; 0x01
     87a:	82 83       	std	Z+2, r24	; 0x02
     87c:	93 83       	std	Z+3, r25	; 0x03
	
	
	
	// To orevet corruptig he integral with noise spikes, updates willonly be made if they are reasonable
	if (  fabs((current_error + last_error) * time_elapsed /2.f) < 1 ){
     87e:	84 a8       	ldd	r8, Z+52	; 0x34
     880:	95 a8       	ldd	r9, Z+53	; 0x35
     882:	a6 a8       	ldd	r10, Z+54	; 0x36
     884:	b7 a8       	ldd	r11, Z+55	; 0x37
     886:	9b 01       	movw	r18, r22
     888:	ac 01       	movw	r20, r24
     88a:	c3 01       	movw	r24, r6
     88c:	b2 01       	movw	r22, r4
     88e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__addsf3>
     892:	a5 01       	movw	r20, r10
     894:	94 01       	movw	r18, r8
     896:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	5f e3       	ldi	r21, 0x3F	; 63
     8a2:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	9f 77       	andi	r25, 0x7F	; 127
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 e8       	ldi	r20, 0x80	; 128
     8b6:	5f e3       	ldi	r21, 0x3F	; 63
     8b8:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__cmpsf2>
     8bc:	88 23       	and	r24, r24
     8be:	94 f4       	brge	.+36     	; 0x8e4 <_ZN3PID7refreshERKf+0x12c>
		
		integral += (current_error + last_error) * time_elapsed /2.f;
     8c0:	29 81       	ldd	r18, Y+1	; 0x01
     8c2:	3a 81       	ldd	r19, Y+2	; 0x02
     8c4:	4b 81       	ldd	r20, Y+3	; 0x03
     8c6:	5c 81       	ldd	r21, Y+4	; 0x04
     8c8:	ed 81       	ldd	r30, Y+5	; 0x05
     8ca:	fe 81       	ldd	r31, Y+6	; 0x06
     8cc:	60 a1       	ldd	r22, Z+32	; 0x20
     8ce:	71 a1       	ldd	r23, Z+33	; 0x21
     8d0:	82 a1       	ldd	r24, Z+34	; 0x22
     8d2:	93 a1       	ldd	r25, Z+35	; 0x23
     8d4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__addsf3>
     8d8:	ed 81       	ldd	r30, Y+5	; 0x05
     8da:	fe 81       	ldd	r31, Y+6	; 0x06
     8dc:	60 a3       	std	Z+32, r22	; 0x20
     8de:	71 a3       	std	Z+33, r23	; 0x21
     8e0:	82 a3       	std	Z+34, r24	; 0x22
     8e2:	93 a3       	std	Z+35, r25	; 0x23
	}
	
	
	// Same with the derivative
	if ( fabs((current_error-last_error)/time_elapsed) < 20 ){
     8e4:	a3 01       	movw	r20, r6
     8e6:	92 01       	movw	r18, r4
     8e8:	c7 01       	movw	r24, r14
     8ea:	b6 01       	movw	r22, r12
     8ec:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
     8f0:	a5 01       	movw	r20, r10
     8f2:	94 01       	movw	r18, r8
     8f4:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__divsf3>
     8f8:	4b 01       	movw	r8, r22
     8fa:	5c 01       	movw	r10, r24
     8fc:	9f 77       	andi	r25, 0x7F	; 127
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	40 ea       	ldi	r20, 0xA0	; 160
     904:	51 e4       	ldi	r21, 0x41	; 65
     906:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__cmpsf2>
     90a:	88 23       	and	r24, r24
     90c:	34 f4       	brge	.+12     	; 0x91a <__stack+0x1b>
		
		derivative = (current_error-last_error)/time_elapsed;
     90e:	ed 81       	ldd	r30, Y+5	; 0x05
     910:	fe 81       	ldd	r31, Y+6	; 0x06
     912:	84 a2       	std	Z+36, r8	; 0x24
     914:	95 a2       	std	Z+37, r9	; 0x25
     916:	a6 a2       	std	Z+38, r10	; 0x26
     918:	b7 a2       	std	Z+39, r11	; 0x27
	}
	
	
	// calculate the new output
	output = Kp*current_error + Ki*integral + Kd* derivative;
     91a:	ed 81       	ldd	r30, Y+5	; 0x05
     91c:	fe 81       	ldd	r31, Y+6	; 0x06
     91e:	20 a1       	ldd	r18, Z+32	; 0x20
     920:	31 a1       	ldd	r19, Z+33	; 0x21
     922:	42 a1       	ldd	r20, Z+34	; 0x22
     924:	53 a1       	ldd	r21, Z+35	; 0x23
     926:	60 8d       	ldd	r22, Z+24	; 0x18
     928:	71 8d       	ldd	r23, Z+25	; 0x19
     92a:	82 8d       	ldd	r24, Z+26	; 0x1a
     92c:	93 8d       	ldd	r25, Z+27	; 0x1b
     92e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
     932:	4b 01       	movw	r8, r22
     934:	5c 01       	movw	r10, r24
     936:	ed 81       	ldd	r30, Y+5	; 0x05
     938:	fe 81       	ldd	r31, Y+6	; 0x06
     93a:	24 89       	ldd	r18, Z+20	; 0x14
     93c:	35 89       	ldd	r19, Z+21	; 0x15
     93e:	46 89       	ldd	r20, Z+22	; 0x16
     940:	57 89       	ldd	r21, Z+23	; 0x17
     942:	c7 01       	movw	r24, r14
     944:	b6 01       	movw	r22, r12
     946:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
     94a:	9b 01       	movw	r18, r22
     94c:	ac 01       	movw	r20, r24
     94e:	c5 01       	movw	r24, r10
     950:	b4 01       	movw	r22, r8
     952:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__addsf3>
     956:	6b 01       	movw	r12, r22
     958:	7c 01       	movw	r14, r24
     95a:	ed 81       	ldd	r30, Y+5	; 0x05
     95c:	fe 81       	ldd	r31, Y+6	; 0x06
     95e:	24 a1       	ldd	r18, Z+36	; 0x24
     960:	35 a1       	ldd	r19, Z+37	; 0x25
     962:	46 a1       	ldd	r20, Z+38	; 0x26
     964:	57 a1       	ldd	r21, Z+39	; 0x27
     966:	64 8d       	ldd	r22, Z+28	; 0x1c
     968:	75 8d       	ldd	r23, Z+29	; 0x1d
     96a:	86 8d       	ldd	r24, Z+30	; 0x1e
     96c:	97 8d       	ldd	r25, Z+31	; 0x1f
     96e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
     972:	9b 01       	movw	r18, r22
     974:	ac 01       	movw	r20, r24
     976:	c7 01       	movw	r24, r14
     978:	b6 01       	movw	r22, r12
     97a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__addsf3>
     97e:	6b 01       	movw	r12, r22
     980:	7c 01       	movw	r14, r24
     982:	ed 81       	ldd	r30, Y+5	; 0x05
     984:	fe 81       	ldd	r31, Y+6	; 0x06
     986:	60 87       	std	Z+8, r22	; 0x08
     988:	71 87       	std	Z+9, r23	; 0x09
     98a:	82 87       	std	Z+10, r24	; 0x0a
     98c:	93 87       	std	Z+11, r25	; 0x0b


	// check wether output is maxed in either direction
	if (output < output_lower_limit){
     98e:	80 a8       	ldd	r8, Z+48	; 0x30
     990:	91 a8       	ldd	r9, Z+49	; 0x31
     992:	a2 a8       	ldd	r10, Z+50	; 0x32
     994:	b3 a8       	ldd	r11, Z+51	; 0x33
     996:	a5 01       	movw	r20, r10
     998:	94 01       	movw	r18, r8
     99a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__cmpsf2>
     99e:	88 23       	and	r24, r24
     9a0:	3c f4       	brge	.+14     	; 0x9b0 <__stack+0xb1>
		
		output = output_lower_limit;
     9a2:	ed 81       	ldd	r30, Y+5	; 0x05
     9a4:	fe 81       	ldd	r31, Y+6	; 0x06
     9a6:	80 86       	std	Z+8, r8	; 0x08
     9a8:	91 86       	std	Z+9, r9	; 0x09
     9aa:	a2 86       	std	Z+10, r10	; 0x0a
     9ac:	b3 86       	std	Z+11, r11	; 0x0b
     9ae:	14 c0       	rjmp	.+40     	; 0x9d8 <__stack+0xd9>
	}
	
	else if (output > output_upper_limit){
     9b0:	ed 81       	ldd	r30, Y+5	; 0x05
     9b2:	fe 81       	ldd	r31, Y+6	; 0x06
     9b4:	84 a4       	ldd	r8, Z+44	; 0x2c
     9b6:	95 a4       	ldd	r9, Z+45	; 0x2d
     9b8:	a6 a4       	ldd	r10, Z+46	; 0x2e
     9ba:	b7 a4       	ldd	r11, Z+47	; 0x2f
     9bc:	a5 01       	movw	r20, r10
     9be:	94 01       	movw	r18, r8
     9c0:	c7 01       	movw	r24, r14
     9c2:	b6 01       	movw	r22, r12
     9c4:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__gesf2>
     9c8:	18 16       	cp	r1, r24
     9ca:	34 f4       	brge	.+12     	; 0x9d8 <__stack+0xd9>
		
		output = output_upper_limit;
     9cc:	ed 81       	ldd	r30, Y+5	; 0x05
     9ce:	fe 81       	ldd	r31, Y+6	; 0x06
     9d0:	80 86       	std	Z+8, r8	; 0x08
     9d2:	91 86       	std	Z+9, r9	; 0x09
     9d4:	a2 86       	std	Z+10, r10	; 0x0a
     9d6:	b3 86       	std	Z+11, r11	; 0x0b
	}
	
			
	return output;
     9d8:	ed 81       	ldd	r30, Y+5	; 0x05
     9da:	fe 81       	ldd	r31, Y+6	; 0x06
     9dc:	60 85       	ldd	r22, Z+8	; 0x08
     9de:	71 85       	ldd	r23, Z+9	; 0x09
     9e0:	82 85       	ldd	r24, Z+10	; 0x0a
     9e2:	93 85       	ldd	r25, Z+11	; 0x0b
}
     9e4:	26 96       	adiw	r28, 0x06	; 6
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	df 90       	pop	r13
     9fa:	cf 90       	pop	r12
     9fc:	bf 90       	pop	r11
     9fe:	af 90       	pop	r10
     a00:	9f 90       	pop	r9
     a02:	8f 90       	pop	r8
     a04:	7f 90       	pop	r7
     a06:	6f 90       	pop	r6
     a08:	5f 90       	pop	r5
     a0a:	4f 90       	pop	r4
     a0c:	08 95       	ret

00000a0e <_ZN3PID12combine_dataEfff>:
	
}



void PID::combine_data(float bank_percentage, float pitch_percentage, float throttle_percentage){
     a0e:	4f 92       	push	r4
     a10:	5f 92       	push	r5
     a12:	6f 92       	push	r6
     a14:	7f 92       	push	r7
     a16:	8f 92       	push	r8
     a18:	9f 92       	push	r9
     a1a:	af 92       	push	r10
     a1c:	bf 92       	push	r11
     a1e:	cf 92       	push	r12
     a20:	df 92       	push	r13
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	4b 01       	movw	r8, r22
     a30:	5c 01       	movw	r10, r24
     a32:	29 01       	movw	r4, r18
     a34:	3a 01       	movw	r6, r20
     a36:	67 01       	movw	r12, r14
     a38:	78 01       	movw	r14, r16
	motor[2] = (int) (-bank_percentage + pitch_percentage) * throttle_percentage / 200;
	motor[3] = (int) (-bank_percentage - pitch_percentage) * throttle_percentage / 200;
	
	
	// numbers were in the range [-50, 50], this effectively turns them into a percentage
	motor[0] += 50;
     a3a:	c0 e1       	ldi	r28, 0x10	; 16
     a3c:	d1 e0       	ldi	r29, 0x01	; 1
     a3e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__addsf3>
     a42:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fixsfsi>
     a46:	07 2e       	mov	r0, r23
     a48:	00 0c       	add	r0, r0
     a4a:	88 0b       	sbc	r24, r24
     a4c:	99 0b       	sbc	r25, r25
     a4e:	0e 94 07 0c 	call	0x180e	; 0x180e <__floatsisf>
     a52:	a7 01       	movw	r20, r14
     a54:	96 01       	movw	r18, r12
     a56:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	48 e4       	ldi	r20, 0x48	; 72
     a60:	53 e4       	ldi	r21, 0x43	; 67
     a62:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__divsf3>
     a66:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fixsfsi>
     a6a:	6e 5c       	subi	r22, 0xCE	; 206
     a6c:	7f 4f       	sbci	r23, 0xFF	; 255
     a6e:	79 83       	std	Y+1, r23	; 0x01
     a70:	68 83       	st	Y, r22
	motor[1] += 50;
     a72:	a3 01       	movw	r20, r6
     a74:	92 01       	movw	r18, r4
     a76:	c5 01       	movw	r24, r10
     a78:	b4 01       	movw	r22, r8
     a7a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
     a7e:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fixsfsi>
     a82:	07 2e       	mov	r0, r23
     a84:	00 0c       	add	r0, r0
     a86:	88 0b       	sbc	r24, r24
     a88:	99 0b       	sbc	r25, r25
     a8a:	0e 94 07 0c 	call	0x180e	; 0x180e <__floatsisf>
     a8e:	a7 01       	movw	r20, r14
     a90:	96 01       	movw	r18, r12
     a92:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	48 e4       	ldi	r20, 0x48	; 72
     a9c:	53 e4       	ldi	r21, 0x43	; 67
     a9e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__divsf3>
     aa2:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fixsfsi>
     aa6:	6e 5c       	subi	r22, 0xCE	; 206
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255
     aaa:	7b 83       	std	Y+3, r23	; 0x03
     aac:	6a 83       	std	Y+2, r22	; 0x02
	motor[2] += 50;
     aae:	a5 01       	movw	r20, r10
     ab0:	94 01       	movw	r18, r8
     ab2:	c3 01       	movw	r24, r6
     ab4:	b2 01       	movw	r22, r4
     ab6:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
     aba:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fixsfsi>
     abe:	07 2e       	mov	r0, r23
     ac0:	00 0c       	add	r0, r0
     ac2:	88 0b       	sbc	r24, r24
     ac4:	99 0b       	sbc	r25, r25
     ac6:	0e 94 07 0c 	call	0x180e	; 0x180e <__floatsisf>
     aca:	a7 01       	movw	r20, r14
     acc:	96 01       	movw	r18, r12
     ace:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	48 e4       	ldi	r20, 0x48	; 72
     ad8:	53 e4       	ldi	r21, 0x43	; 67
     ada:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__divsf3>
     ade:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fixsfsi>
     ae2:	6e 5c       	subi	r22, 0xCE	; 206
     ae4:	7f 4f       	sbci	r23, 0xFF	; 255
     ae6:	7d 83       	std	Y+5, r23	; 0x05
     ae8:	6c 83       	std	Y+4, r22	; 0x04
	motor[3] += 50;
     aea:	c5 01       	movw	r24, r10
     aec:	b4 01       	movw	r22, r8
     aee:	90 58       	subi	r25, 0x80	; 128
     af0:	a3 01       	movw	r20, r6
     af2:	92 01       	movw	r18, r4
     af4:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
     af8:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fixsfsi>
     afc:	07 2e       	mov	r0, r23
     afe:	00 0c       	add	r0, r0
     b00:	88 0b       	sbc	r24, r24
     b02:	99 0b       	sbc	r25, r25
     b04:	0e 94 07 0c 	call	0x180e	; 0x180e <__floatsisf>
     b08:	a7 01       	movw	r20, r14
     b0a:	96 01       	movw	r18, r12
     b0c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	48 e4       	ldi	r20, 0x48	; 72
     b16:	53 e4       	ldi	r21, 0x43	; 67
     b18:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__divsf3>
     b1c:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fixsfsi>
     b20:	6e 5c       	subi	r22, 0xCE	; 206
     b22:	7f 4f       	sbci	r23, 0xFF	; 255
     b24:	7f 83       	std	Y+7, r23	; 0x07
     b26:	6e 83       	std	Y+6, r22	; 0x06
	

}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	bf 90       	pop	r11
     b3a:	af 90       	pop	r10
     b3c:	9f 90       	pop	r9
     b3e:	8f 90       	pop	r8
     b40:	7f 90       	pop	r7
     b42:	6f 90       	pop	r6
     b44:	5f 90       	pop	r5
     b46:	4f 90       	pop	r4
     b48:	08 95       	ret

00000b4a <_ZN18pilot_instructions13set_max_angleEh>:
}

int pilot_instructions::get_yaw_rate() const{

	return yaw_rate;
}
     b4a:	fc 01       	movw	r30, r24
     b4c:	60 83       	st	Z, r22
     b4e:	08 95       	ret

00000b50 <_ZN18pilot_instructions16set_max_yaw_rateEh>:
     b50:	fc 01       	movw	r30, r24
     b52:	61 83       	std	Z+1, r22	; 0x01
     b54:	08 95       	ret

00000b56 <_ZNK18pilot_instructions14get_bank_angleEv>:
     b56:	fc 01       	movw	r30, r24
     b58:	82 81       	ldd	r24, Z+2	; 0x02
     b5a:	93 81       	ldd	r25, Z+3	; 0x03
     b5c:	08 95       	ret

00000b5e <_ZNK18pilot_instructions15get_pitch_angleEv>:
     b5e:	fc 01       	movw	r30, r24
     b60:	84 81       	ldd	r24, Z+4	; 0x04
     b62:	95 81       	ldd	r25, Z+5	; 0x05
     b64:	08 95       	ret

00000b66 <_ZNK18pilot_instructions18get_throttle_powerEv>:


uint8_t pilot_instructions::get_throttle_power() const{

	return throttle_power;
}
     b66:	fc 01       	movw	r30, r24
     b68:	80 85       	ldd	r24, Z+8	; 0x08
     b6a:	08 95       	ret

00000b6c <_ZN18pilot_instructions7computeEv>:



void pilot_instructions::compute(void){
     b6c:	4f 92       	push	r4
     b6e:	5f 92       	push	r5
     b70:	6f 92       	push	r6
     b72:	7f 92       	push	r7
     b74:	8f 92       	push	r8
     b76:	9f 92       	push	r9
     b78:	af 92       	push	r10
     b7a:	bf 92       	push	r11
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	2c 97       	sbiw	r28, 0x0c	; 12
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61
     b98:	7c 01       	movw	r14, r24
	extern volatile uint16_t requested_elevator_pos;
	extern volatile uint16_t requested_rudder_pos;
	extern volatile uint16_t requested_throttle_pos;

	// so the math doesent get fucked up, stop interrupts dring this process
	cli();
     b9a:	f8 94       	cli

	// Some of the time the data provided by the interrupts is the low period of the pwm
	// In this case, it needs to be substracted from the total period to get the 
	// I was having some problems comparing 16 bit numbers, so until further notice, i compare only their high byte.

	if ( *((uint8_t*)&(requested_aileron_pos)+1) > 0x9){
     b9c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <requested_aileron_pos+0x1>
     ba0:	8a 30       	cpi	r24, 0x0A	; 10
     ba2:	50 f0       	brcs	.+20     	; 0xbb8 <_ZN18pilot_instructions7computeEv+0x4c>
			
		requested_aileron_pos = 0xffff - requested_aileron_pos;
     ba4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <requested_aileron_pos>
     ba8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <requested_aileron_pos+0x1>
     bac:	80 95       	com	r24
     bae:	90 95       	com	r25
     bb0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <requested_aileron_pos+0x1>
     bb4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <requested_aileron_pos>
	}

	if ( *((uint8_t*)&(requested_elevator_pos)+1) > 0x9 ){
     bb8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <requested_elevator_pos+0x1>
     bbc:	8a 30       	cpi	r24, 0x0A	; 10
     bbe:	50 f0       	brcs	.+20     	; 0xbd4 <_ZN18pilot_instructions7computeEv+0x68>
			
		requested_elevator_pos = 0xffff - requested_elevator_pos;
     bc0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <requested_elevator_pos>
     bc4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <requested_elevator_pos+0x1>
     bc8:	80 95       	com	r24
     bca:	90 95       	com	r25
     bcc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <requested_elevator_pos+0x1>
     bd0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <requested_elevator_pos>
	}

	if ( *((uint8_t*)&(requested_rudder_pos)+1) > 0x9 ){
     bd4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <requested_rudder_pos+0x1>
     bd8:	8a 30       	cpi	r24, 0x0A	; 10
     bda:	50 f0       	brcs	.+20     	; 0xbf0 <_ZN18pilot_instructions7computeEv+0x84>
			
		requested_rudder_pos = 0xffff - requested_rudder_pos;
     bdc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <requested_rudder_pos>
     be0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <requested_rudder_pos+0x1>
     be4:	80 95       	com	r24
     be6:	90 95       	com	r25
     be8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <requested_rudder_pos+0x1>
     bec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <requested_rudder_pos>
	}

	if ( *((uint8_t*)&(requested_throttle_pos)+1) > 0x9){
     bf0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <requested_throttle_pos+0x1>
     bf4:	8a 30       	cpi	r24, 0x0A	; 10
     bf6:	50 f0       	brcs	.+20     	; 0xc0c <_ZN18pilot_instructions7computeEv+0xa0>
			
		requested_throttle_pos = 0xffff - requested_throttle_pos;
     bf8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <requested_throttle_pos>
     bfc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <requested_throttle_pos+0x1>
     c00:	80 95       	com	r24
     c02:	90 95       	com	r25
     c04:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <requested_throttle_pos+0x1>
     c08:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <requested_throttle_pos>





	throttle_power = ((requested_throttle_pos - 1015) / 8);	// computes the percentage of the max the pilot wants
     c0c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <requested_throttle_pos>
     c10:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <requested_throttle_pos+0x1>
     c14:	87 5f       	subi	r24, 0xF7	; 247
     c16:	93 40       	sbci	r25, 0x03	; 3
     c18:	96 95       	lsr	r25
     c1a:	87 95       	ror	r24
     c1c:	96 95       	lsr	r25
     c1e:	87 95       	ror	r24
     c20:	96 95       	lsr	r25
     c22:	87 95       	ror	r24
     c24:	f7 01       	movw	r30, r14
     c26:	80 87       	std	Z+8, r24	; 0x08
	
	//Until physical testing, yaw rate controll is disabled
	//yaw_rate = ( requested_rudder_pos / 6553 ) * max_yaw_rate;	// computes the percentage of the max the pilot wants
	
	
	volatile float temp_pitch_angle = (requested_elevator_pos - 1110.f);	// computes the percentage of the max the pilot wants
     c28:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <requested_elevator_pos>
     c2c:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <requested_elevator_pos+0x1>
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 05 0c 	call	0x180a	; 0x180a <__floatunsisf>
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 ec       	ldi	r19, 0xC0	; 192
     c3c:	4a e8       	ldi	r20, 0x8A	; 138
     c3e:	54 e4       	ldi	r21, 0x44	; 68
     c40:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
     c44:	69 83       	std	Y+1, r22	; 0x01
     c46:	7a 83       	std	Y+2, r23	; 0x02
     c48:	8b 83       	std	Y+3, r24	; 0x03
     c4a:	9c 83       	std	Y+4, r25	; 0x04
	temp_pitch_angle /= 800;
     c4c:	69 81       	ldd	r22, Y+1	; 0x01
     c4e:	7a 81       	ldd	r23, Y+2	; 0x02
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	48 e4       	ldi	r20, 0x48	; 72
     c5a:	54 e4       	ldi	r21, 0x44	; 68
     c5c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__divsf3>
     c60:	69 83       	std	Y+1, r22	; 0x01
     c62:	7a 83       	std	Y+2, r23	; 0x02
     c64:	8b 83       	std	Y+3, r24	; 0x03
     c66:	9c 83       	std	Y+4, r25	; 0x04
	temp_pitch_angle *= 2 * max_angle;
     c68:	f7 01       	movw	r30, r14
     c6a:	00 81       	ld	r16, Z
     c6c:	10 e0       	ldi	r17, 0x00	; 0
     c6e:	b8 01       	movw	r22, r16
     c70:	66 0f       	add	r22, r22
     c72:	77 1f       	adc	r23, r23
     c74:	07 2e       	mov	r0, r23
     c76:	00 0c       	add	r0, r0
     c78:	88 0b       	sbc	r24, r24
     c7a:	99 0b       	sbc	r25, r25
     c7c:	0e 94 07 0c 	call	0x180e	; 0x180e <__floatsisf>
     c80:	4b 01       	movw	r8, r22
     c82:	5c 01       	movw	r10, r24
     c84:	29 81       	ldd	r18, Y+1	; 0x01
     c86:	3a 81       	ldd	r19, Y+2	; 0x02
     c88:	4b 81       	ldd	r20, Y+3	; 0x03
     c8a:	5c 81       	ldd	r21, Y+4	; 0x04
     c8c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
     c90:	69 83       	std	Y+1, r22	; 0x01
     c92:	7a 83       	std	Y+2, r23	; 0x02
     c94:	8b 83       	std	Y+3, r24	; 0x03
     c96:	9c 83       	std	Y+4, r25	; 0x04
	temp_pitch_angle -= max_angle;
     c98:	49 80       	ldd	r4, Y+1	; 0x01
     c9a:	5a 80       	ldd	r5, Y+2	; 0x02
     c9c:	6b 80       	ldd	r6, Y+3	; 0x03
     c9e:	7c 80       	ldd	r7, Y+4	; 0x04
     ca0:	b8 01       	movw	r22, r16
     ca2:	11 0f       	add	r17, r17
     ca4:	88 0b       	sbc	r24, r24
     ca6:	99 0b       	sbc	r25, r25
     ca8:	0e 94 07 0c 	call	0x180e	; 0x180e <__floatsisf>
     cac:	69 87       	std	Y+9, r22	; 0x09
     cae:	7a 87       	std	Y+10, r23	; 0x0a
     cb0:	8b 87       	std	Y+11, r24	; 0x0b
     cb2:	9c 87       	std	Y+12, r25	; 0x0c
     cb4:	9b 01       	movw	r18, r22
     cb6:	ac 01       	movw	r20, r24
     cb8:	c3 01       	movw	r24, r6
     cba:	b2 01       	movw	r22, r4
     cbc:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
     cc0:	69 83       	std	Y+1, r22	; 0x01
     cc2:	7a 83       	std	Y+2, r23	; 0x02
     cc4:	8b 83       	std	Y+3, r24	; 0x03
     cc6:	9c 83       	std	Y+4, r25	; 0x04
	pitch_angle = (int) temp_pitch_angle;
     cc8:	69 81       	ldd	r22, Y+1	; 0x01
     cca:	7a 81       	ldd	r23, Y+2	; 0x02
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fixsfsi>
     cd4:	f7 01       	movw	r30, r14
     cd6:	75 83       	std	Z+5, r23	; 0x05
     cd8:	64 83       	std	Z+4, r22	; 0x04
	
	

	volatile float temp_bank_angle = (requested_aileron_pos - 1120);	// computes the percentage of the max the pilot wants
     cda:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <requested_aileron_pos>
     cde:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <requested_aileron_pos+0x1>
     ce2:	60 56       	subi	r22, 0x60	; 96
     ce4:	74 40       	sbci	r23, 0x04	; 4
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 94 05 0c 	call	0x180a	; 0x180a <__floatunsisf>
     cee:	6d 83       	std	Y+5, r22	; 0x05
     cf0:	7e 83       	std	Y+6, r23	; 0x06
     cf2:	8f 83       	std	Y+7, r24	; 0x07
     cf4:	98 87       	std	Y+8, r25	; 0x08
	temp_bank_angle /= 800;
     cf6:	6d 81       	ldd	r22, Y+5	; 0x05
     cf8:	7e 81       	ldd	r23, Y+6	; 0x06
     cfa:	8f 81       	ldd	r24, Y+7	; 0x07
     cfc:	98 85       	ldd	r25, Y+8	; 0x08
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	48 e4       	ldi	r20, 0x48	; 72
     d04:	54 e4       	ldi	r21, 0x44	; 68
     d06:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__divsf3>
     d0a:	6d 83       	std	Y+5, r22	; 0x05
     d0c:	7e 83       	std	Y+6, r23	; 0x06
     d0e:	8f 83       	std	Y+7, r24	; 0x07
     d10:	98 87       	std	Y+8, r25	; 0x08
	temp_bank_angle *= 2 * max_angle;
     d12:	2d 81       	ldd	r18, Y+5	; 0x05
     d14:	3e 81       	ldd	r19, Y+6	; 0x06
     d16:	4f 81       	ldd	r20, Y+7	; 0x07
     d18:	58 85       	ldd	r21, Y+8	; 0x08
     d1a:	c5 01       	movw	r24, r10
     d1c:	b4 01       	movw	r22, r8
     d1e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
     d22:	6d 83       	std	Y+5, r22	; 0x05
     d24:	7e 83       	std	Y+6, r23	; 0x06
     d26:	8f 83       	std	Y+7, r24	; 0x07
     d28:	98 87       	std	Y+8, r25	; 0x08
	temp_bank_angle -= max_angle;
     d2a:	6d 81       	ldd	r22, Y+5	; 0x05
     d2c:	7e 81       	ldd	r23, Y+6	; 0x06
     d2e:	8f 81       	ldd	r24, Y+7	; 0x07
     d30:	98 85       	ldd	r25, Y+8	; 0x08
     d32:	29 85       	ldd	r18, Y+9	; 0x09
     d34:	3a 85       	ldd	r19, Y+10	; 0x0a
     d36:	4b 85       	ldd	r20, Y+11	; 0x0b
     d38:	5c 85       	ldd	r21, Y+12	; 0x0c
     d3a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
     d3e:	6d 83       	std	Y+5, r22	; 0x05
     d40:	7e 83       	std	Y+6, r23	; 0x06
     d42:	8f 83       	std	Y+7, r24	; 0x07
     d44:	98 87       	std	Y+8, r25	; 0x08
	bank_angle = (int) temp_bank_angle + 2;
     d46:	6d 81       	ldd	r22, Y+5	; 0x05
     d48:	7e 81       	ldd	r23, Y+6	; 0x06
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	98 85       	ldd	r25, Y+8	; 0x08
     d4e:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fixsfsi>
     d52:	6e 5f       	subi	r22, 0xFE	; 254
     d54:	7f 4f       	sbci	r23, 0xFF	; 255
     d56:	f7 01       	movw	r30, r14
     d58:	73 83       	std	Z+3, r23	; 0x03
     d5a:	62 83       	std	Z+2, r22	; 0x02
	
	sei();
     d5c:	78 94       	sei

     d5e:	2c 96       	adiw	r28, 0x0c	; 12
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	bf 90       	pop	r11
     d78:	af 90       	pop	r10
     d7a:	9f 90       	pop	r9
     d7c:	8f 90       	pop	r8
     d7e:	7f 90       	pop	r7
     d80:	6f 90       	pop	r6
     d82:	5f 90       	pop	r5
     d84:	4f 90       	pop	r4
     d86:	08 95       	ret

00000d88 <_ZN8pwm_chipC1Eh>:
#include "pwm_chip.h"



pwm_chip::pwm_chip( uint8_t prescaler): I2C_328pb(0x10){
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	ec 01       	movw	r28, r24
     d90:	16 2f       	mov	r17, r22
     d92:	60 e1       	ldi	r22, 0x10	; 16
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN9I2C_328pbC1Ei>
	
	
	DDRB |= (1 << 2);	// set OE to 0;
     d9a:	22 9a       	sbi	0x04, 2	; 4
	//This function sets the auto increment, the prescaler and any other necessary feature required for the pwm chip to run 

	//TWBR0 = (1 << 1); // I'll run the cpu at 1 MHz, this divides the value by 2 for 50 KHZ


	start();
     d9c:	ce 01       	movw	r24, r28
     d9e:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN9I2C_328pb5startEv>
	send_slave(0x9E);
     da2:	6e e9       	ldi	r22, 0x9E	; 158
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	ce 01       	movw	r24, r28
     da8:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN9I2C_328pb10send_slaveEi>
	send_reg(0xFE);	//pre scale register
     dac:	6e ef       	ldi	r22, 0xFE	; 254
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	ce 01       	movw	r24, r28
     db2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN9I2C_328pb8send_regEi>
	send(prescaler);	//prescaler
     db6:	61 2f       	mov	r22, r17
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	ce 01       	movw	r24, r28
     dbc:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	repeat_start();
     dc0:	ce 01       	movw	r24, r28
     dc2:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN9I2C_328pb12repeat_startEv>
	send_slave(0x9E);
     dc6:	6e e9       	ldi	r22, 0x9E	; 158
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	ce 01       	movw	r24, r28
     dcc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN9I2C_328pb10send_slaveEi>
	send_reg(0x0); // mode register 1
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	ce 01       	movw	r24, r28
     dd6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN9I2C_328pb8send_regEi>
	send(0x21); //clock on, autoincrement enable
     dda:	61 e2       	ldi	r22, 0x21	; 33
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	ce 01       	movw	r24, r28
     de0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	stop();
     de4:	ce 01       	movw	r24, r28
     de6:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN9I2C_328pb4stopEv>

}
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	08 95       	ret

00000df2 <_ZN8pwm_chip13encode_motorsEhPiPh>:

}

void pwm_chip::encode_motors(uint8_t motor, int* motors, uint8_t* instruction){
	
	uint16_t temp = motors[motor]*2;	// the actualslope of this curve is 2.05
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	66 0f       	add	r22, r22
     df6:	77 1f       	adc	r23, r23
     df8:	fa 01       	movw	r30, r20
     dfa:	e6 0f       	add	r30, r22
     dfc:	f7 1f       	adc	r31, r23
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
	
	temp += 205;	// 205 is the value corresponding to 0 for the esc
     e06:	83 53       	subi	r24, 0x33	; 51
     e08:	9f 4f       	sbci	r25, 0xFF	; 255
	
	instruction[0] = ( temp & 0xff );	// conserves only the low byte
     e0a:	f9 01       	movw	r30, r18
     e0c:	80 83       	st	Z, r24
	
	instruction[1] = ( temp >> 8);	// conserves only the high half-byte
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	08 95       	ret

00000e12 <_ZN8pwm_chip4passEPi>:
}




void pwm_chip::pass( int* motors){
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <_ZN8pwm_chip4passEPi+0xe>
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	8c 01       	movw	r16, r24
     e26:	7b 01       	movw	r14, r22

// this function will communicate over I2C to the pwmchip for final controll of the motors

	uint8_t instruction[2];
	
	encode_motors(0, motors, instruction);
     e28:	9e 01       	movw	r18, r28
     e2a:	2f 5f       	subi	r18, 0xFF	; 255
     e2c:	3f 4f       	sbci	r19, 0xFF	; 255
     e2e:	ab 01       	movw	r20, r22
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZN8pwm_chip13encode_motorsEhPiPh>

	start();
     e36:	c8 01       	movw	r24, r16
     e38:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN9I2C_328pb5startEv>
	send_slave(0x9E);
     e3c:	6e e9       	ldi	r22, 0x9E	; 158
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	c8 01       	movw	r24, r16
     e42:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN9I2C_328pb10send_slaveEi>
  	send_reg(0x06);		//LED0_ON_L
     e46:	66 e0       	ldi	r22, 0x06	; 6
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	c8 01       	movw	r24, r16
     e4c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN9I2C_328pb8send_regEi>
	send(0);
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	c8 01       	movw	r24, r16
     e56:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	send(0);
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	c8 01       	movw	r24, r16
     e60:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     e64:	69 81       	ldd	r22, Y+1	; 0x01
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	c8 01       	movw	r24, r16
     e6a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	send(instruction[1]);
     e6e:	6a 81       	ldd	r22, Y+2	; 0x02
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	c8 01       	movw	r24, r16
     e74:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	stop();
     e78:	c8 01       	movw	r24, r16
     e7a:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN9I2C_328pb4stopEv>


	encode_motors(1, motors, instruction);
     e7e:	9e 01       	movw	r18, r28
     e80:	2f 5f       	subi	r18, 0xFF	; 255
     e82:	3f 4f       	sbci	r19, 0xFF	; 255
     e84:	a7 01       	movw	r20, r14
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	c8 01       	movw	r24, r16
     e8a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZN8pwm_chip13encode_motorsEhPiPh>
	

	start();
     e8e:	c8 01       	movw	r24, r16
     e90:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN9I2C_328pb5startEv>
	send_slave(0x9E);
     e94:	6e e9       	ldi	r22, 0x9E	; 158
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	c8 01       	movw	r24, r16
     e9a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN9I2C_328pb10send_slaveEi>
	send_reg(0x16);		//LED4_ON_L
     e9e:	66 e1       	ldi	r22, 0x16	; 22
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	c8 01       	movw	r24, r16
     ea4:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN9I2C_328pb8send_regEi>
	send(0);
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	c8 01       	movw	r24, r16
     eae:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	send(0);
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	c8 01       	movw	r24, r16
     eb8:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     ebc:	69 81       	ldd	r22, Y+1	; 0x01
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	c8 01       	movw	r24, r16
     ec2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	send(instruction[1]);
     ec6:	6a 81       	ldd	r22, Y+2	; 0x02
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	c8 01       	movw	r24, r16
     ecc:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	stop();
     ed0:	c8 01       	movw	r24, r16
     ed2:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN9I2C_328pb4stopEv>

	
	encode_motors(2, motors, instruction);
     ed6:	9e 01       	movw	r18, r28
     ed8:	2f 5f       	subi	r18, 0xFF	; 255
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	a7 01       	movw	r20, r14
     ede:	62 e0       	ldi	r22, 0x02	; 2
     ee0:	c8 01       	movw	r24, r16
     ee2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZN8pwm_chip13encode_motorsEhPiPh>



	start();
     ee6:	c8 01       	movw	r24, r16
     ee8:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN9I2C_328pb5startEv>
	send_slave(0x9E);
     eec:	6e e9       	ldi	r22, 0x9E	; 158
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	c8 01       	movw	r24, r16
     ef2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN9I2C_328pb10send_slaveEi>
	send_reg(0x2E);		//LED8_ON_L
     ef6:	6e e2       	ldi	r22, 0x2E	; 46
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	c8 01       	movw	r24, r16
     efc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN9I2C_328pb8send_regEi>
	send(0);
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	c8 01       	movw	r24, r16
     f06:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	send(0);
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	c8 01       	movw	r24, r16
     f10:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     f14:	69 81       	ldd	r22, Y+1	; 0x01
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	c8 01       	movw	r24, r16
     f1a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	send(instruction[1]);
     f1e:	6a 81       	ldd	r22, Y+2	; 0x02
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	c8 01       	movw	r24, r16
     f24:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	stop();
     f28:	c8 01       	movw	r24, r16
     f2a:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN9I2C_328pb4stopEv>



	encode_motors(3, motors, instruction);
     f2e:	9e 01       	movw	r18, r28
     f30:	2f 5f       	subi	r18, 0xFF	; 255
     f32:	3f 4f       	sbci	r19, 0xFF	; 255
     f34:	a7 01       	movw	r20, r14
     f36:	63 e0       	ldi	r22, 0x03	; 3
     f38:	c8 01       	movw	r24, r16
     f3a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZN8pwm_chip13encode_motorsEhPiPh>


	start();
     f3e:	c8 01       	movw	r24, r16
     f40:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN9I2C_328pb5startEv>
	send_slave(0x9E);
     f44:	6e e9       	ldi	r22, 0x9E	; 158
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	c8 01       	movw	r24, r16
     f4a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN9I2C_328pb10send_slaveEi>
	send_reg(0x42);		//LED8_ON_L
     f4e:	62 e4       	ldi	r22, 0x42	; 66
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	c8 01       	movw	r24, r16
     f54:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN9I2C_328pb8send_regEi>
	send(0);
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	c8 01       	movw	r24, r16
     f5e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	send(0);
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	c8 01       	movw	r24, r16
     f68:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     f6c:	69 81       	ldd	r22, Y+1	; 0x01
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	c8 01       	movw	r24, r16
     f72:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	send(instruction[1]);
     f76:	6a 81       	ldd	r22, Y+2	; 0x02
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	c8 01       	movw	r24, r16
     f7c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	stop();
     f80:	c8 01       	movw	r24, r16
     f82:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN9I2C_328pb4stopEv>


}
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	ff 90       	pop	r15
     f94:	ef 90       	pop	r14
     f96:	08 95       	ret

00000f98 <_ZN7sensorsC1Ev>:
#include "sensors.h"



sensors::sensors() : I2C_328pb(0x10){
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	ec 01       	movw	r28, r24
     f9e:	60 e1       	ldi	r22, 0x10	; 16
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN9I2C_328pbC1Ei>

	start(); 
     fa6:	ce 01       	movw	r24, r28
     fa8:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN9I2C_328pb5startEv>
	send_slave(0x32);	// acc slave + w
     fac:	62 e3       	ldi	r22, 0x32	; 50
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	ce 01       	movw	r24, r28
     fb2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN9I2C_328pb10send_slaveEi>
	send_reg(0xA0);	// Control register 1 + autoincrement
     fb6:	60 ea       	ldi	r22, 0xA0	; 160
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	ce 01       	movw	r24, r28
     fbc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN9I2C_328pb8send_regEi>
	send(0x67);	// all axis enable data refresh rate is 200Hz
     fc0:	67 e6       	ldi	r22, 0x67	; 103
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	ce 01       	movw	r24, r28
     fc6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	send(0x0);	// CR2 default values
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	ce 01       	movw	r24, r28
     fd0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	send(0x0);	// CR3 default values
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	ce 01       	movw	r24, r28
     fda:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	send(0x10);	// CR4  +- 4g and 8mg/digit, The value 32767 corresponds to 4 g's
     fde:	60 e1       	ldi	r22, 0x10	; 16
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	ce 01       	movw	r24, r28
     fe4:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	stop();
     fe8:	ce 01       	movw	r24, r28
     fea:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN9I2C_328pb4stopEv>
	

////////////////////////////// accelerometer init above and gyro init below

	start();
     fee:	ce 01       	movw	r24, r28
     ff0:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN9I2C_328pb5startEv>
	send_slave(0xD6); // gyro slave + w
     ff4:	66 ed       	ldi	r22, 0xD6	; 214
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	ce 01       	movw	r24, r28
     ffa:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN9I2C_328pb10send_slaveEi>
	send_reg(0x20);	// Control register 1
     ffe:	60 e2       	ldi	r22, 0x20	; 32
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	ce 01       	movw	r24, r28
    1004:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN9I2C_328pb8send_regEi>
	send(0x0F);	// all axis enable data refresh rate is 100Hz (a lot of other params also affected)
    1008:	6f e0       	ldi	r22, 0x0F	; 15
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	ce 01       	movw	r24, r28
    100e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	stop();
    1012:	ce 01       	movw	r24, r28
    1014:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN9I2C_328pb4stopEv>

			// default sensitivity is 8.75 mdps/digit
			
			
	pitch = 0.f;
    1018:	1c 86       	std	Y+12, r1	; 0x0c
    101a:	1d 86       	std	Y+13, r1	; 0x0d
    101c:	1e 86       	std	Y+14, r1	; 0x0e
    101e:	1f 86       	std	Y+15, r1	; 0x0f
	roll = 0.f;
    1020:	18 8a       	std	Y+16, r1	; 0x10
    1022:	19 8a       	std	Y+17, r1	; 0x11
    1024:	1a 8a       	std	Y+18, r1	; 0x12
    1026:	1b 8a       	std	Y+19, r1	; 0x13
	yaw_rate = 0.f;
    1028:	1c 8a       	std	Y+20, r1	; 0x14
    102a:	1d 8a       	std	Y+21, r1	; 0x15
    102c:	1e 8a       	std	Y+22, r1	; 0x16
    102e:	1f 8a       	std	Y+23, r1	; 0x17

	time_of_previous_scan = TCNT1;
    1030:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1034:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1038:	99 8f       	std	Y+25, r25	; 0x19
    103a:	88 8f       	std	Y+24, r24	; 0x18

}
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	08 95       	ret

00001042 <_ZN7sensors8read_accEv>:



void sensors::read_acc(){
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	ec 01       	movw	r28, r24

	start(); 
    104c:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN9I2C_328pb5startEv>
	send_slave(0x32);	// acc slave + w
    1050:	62 e3       	ldi	r22, 0x32	; 50
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	ce 01       	movw	r24, r28
    1056:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN9I2C_328pb10send_slaveEi>
	send(0xA8);	// X_low +auto increment
    105a:	68 ea       	ldi	r22, 0xA8	; 168
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	ce 01       	movw	r24, r28
    1060:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	repeat_start();
    1064:	ce 01       	movw	r24, r28
    1066:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN9I2C_328pb12repeat_startEv>
	send_slave(0x33);	// acc slave + r
    106a:	63 e3       	ldi	r22, 0x33	; 51
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	ce 01       	movw	r24, r28
    1070:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN9I2C_328pb10send_slaveEi>

	get_next_byte();
    1074:	ce 01       	movw	r24, r28
    1076:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9I2C_328pb13get_next_byteEv>
	acc_x_data = TWDR0;	// read low byte
    107a:	0b eb       	ldi	r16, 0xBB	; 187
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	f8 01       	movw	r30, r16
    1080:	80 81       	ld	r24, Z
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	99 83       	std	Y+1, r25	; 0x01
    1086:	88 83       	st	Y, r24
	get_next_byte();
    1088:	ce 01       	movw	r24, r28
    108a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9I2C_328pb13get_next_byteEv>
	acc_x_data |= (TWDR0 << 8);	// read high byte
    108e:	f8 01       	movw	r30, r16
    1090:	20 81       	ld	r18, Z
    1092:	88 81       	ld	r24, Y
    1094:	99 81       	ldd	r25, Y+1	; 0x01
    1096:	92 2b       	or	r25, r18
    1098:	99 83       	std	Y+1, r25	; 0x01
    109a:	88 83       	st	Y, r24
	get_next_byte();
    109c:	ce 01       	movw	r24, r28
    109e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9I2C_328pb13get_next_byteEv>


	acc_y_data = TWDR0;	// read low byte
    10a2:	f8 01       	movw	r30, r16
    10a4:	80 81       	ld	r24, Z
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9b 83       	std	Y+3, r25	; 0x03
    10aa:	8a 83       	std	Y+2, r24	; 0x02
	get_next_byte();
    10ac:	ce 01       	movw	r24, r28
    10ae:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9I2C_328pb13get_next_byteEv>
	acc_y_data |= (TWDR0 << 8);	// read high byte
    10b2:	f8 01       	movw	r30, r16
    10b4:	20 81       	ld	r18, Z
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ba:	92 2b       	or	r25, r18
    10bc:	9b 83       	std	Y+3, r25	; 0x03
    10be:	8a 83       	std	Y+2, r24	; 0x02
	get_next_byte();
    10c0:	ce 01       	movw	r24, r28
    10c2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9I2C_328pb13get_next_byteEv>


	acc_z_data = TWDR0;	// read low byte
    10c6:	f8 01       	movw	r30, r16
    10c8:	80 81       	ld	r24, Z
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	9d 83       	std	Y+5, r25	; 0x05
    10ce:	8c 83       	std	Y+4, r24	; 0x04
	get_next_byte();
    10d0:	ce 01       	movw	r24, r28
    10d2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9I2C_328pb13get_next_byteEv>
	acc_z_data |= (TWDR0 << 8);	// read high byte
    10d6:	f8 01       	movw	r30, r16
    10d8:	20 81       	ld	r18, Z
    10da:	8c 81       	ldd	r24, Y+4	; 0x04
    10dc:	9d 81       	ldd	r25, Y+5	; 0x05
    10de:	92 2b       	or	r25, r18
    10e0:	9d 83       	std	Y+5, r25	; 0x05
    10e2:	8c 83       	std	Y+4, r24	; 0x04


	end_data_read();
    10e4:	ce 01       	movw	r24, r28
    10e6:	0e 94 02 03 	call	0x604	; 0x604 <_ZN9I2C_328pb13end_data_readEv>
	stop();
    10ea:	ce 01       	movw	r24, r28
    10ec:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN9I2C_328pb4stopEv>
}
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	08 95       	ret

000010fa <_ZN7sensors9read_gyroEv>:

void sensors::read_gyro(){
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	ec 01       	movw	r28, r24

	start(); 
    1104:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN9I2C_328pb5startEv>
	send_slave(0xD6);	// gyro slave + w
    1108:	66 ed       	ldi	r22, 0xD6	; 214
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	ce 01       	movw	r24, r28
    110e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN9I2C_328pb10send_slaveEi>
	send(0xA8);	// X_low +auto increment
    1112:	68 ea       	ldi	r22, 0xA8	; 168
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	ce 01       	movw	r24, r28
    1118:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_ZN9I2C_328pb4sendEi>
	repeat_start();
    111c:	ce 01       	movw	r24, r28
    111e:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN9I2C_328pb12repeat_startEv>
	send_slave(0xD7);	// gyro slave + r
    1122:	67 ed       	ldi	r22, 0xD7	; 215
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	ce 01       	movw	r24, r28
    1128:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZN9I2C_328pb10send_slaveEi>

	get_next_byte();
    112c:	ce 01       	movw	r24, r28
    112e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_x_data = TWDR0;	// read low byte
    1132:	0b eb       	ldi	r16, 0xBB	; 187
    1134:	10 e0       	ldi	r17, 0x00	; 0
    1136:	f8 01       	movw	r30, r16
    1138:	80 81       	ld	r24, Z
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	9f 83       	std	Y+7, r25	; 0x07
    113e:	8e 83       	std	Y+6, r24	; 0x06
	get_next_byte();
    1140:	ce 01       	movw	r24, r28
    1142:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_x_data |= (TWDR0 << 8);	// read high byte
    1146:	f8 01       	movw	r30, r16
    1148:	20 81       	ld	r18, Z
    114a:	8e 81       	ldd	r24, Y+6	; 0x06
    114c:	9f 81       	ldd	r25, Y+7	; 0x07
    114e:	92 2b       	or	r25, r18
    1150:	9f 83       	std	Y+7, r25	; 0x07
    1152:	8e 83       	std	Y+6, r24	; 0x06
	get_next_byte();
    1154:	ce 01       	movw	r24, r28
    1156:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9I2C_328pb13get_next_byteEv>


	gyro_y_data = TWDR0;	// read low byte
    115a:	f8 01       	movw	r30, r16
    115c:	80 81       	ld	r24, Z
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	99 87       	std	Y+9, r25	; 0x09
    1162:	88 87       	std	Y+8, r24	; 0x08
	get_next_byte();
    1164:	ce 01       	movw	r24, r28
    1166:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_y_data |= (TWDR0 << 8);	// read high byte
    116a:	f8 01       	movw	r30, r16
    116c:	20 81       	ld	r18, Z
    116e:	88 85       	ldd	r24, Y+8	; 0x08
    1170:	99 85       	ldd	r25, Y+9	; 0x09
    1172:	92 2b       	or	r25, r18
    1174:	99 87       	std	Y+9, r25	; 0x09
    1176:	88 87       	std	Y+8, r24	; 0x08
	get_next_byte();
    1178:	ce 01       	movw	r24, r28
    117a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9I2C_328pb13get_next_byteEv>

  
	gyro_z_data = TWDR0;	// read low byte
    117e:	f8 01       	movw	r30, r16
    1180:	80 81       	ld	r24, Z
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	9b 87       	std	Y+11, r25	; 0x0b
    1186:	8a 87       	std	Y+10, r24	; 0x0a
	get_next_byte();
    1188:	ce 01       	movw	r24, r28
    118a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_z_data |= (TWDR0 << 8);	// read high byte
    118e:	f8 01       	movw	r30, r16
    1190:	20 81       	ld	r18, Z
    1192:	8a 85       	ldd	r24, Y+10	; 0x0a
    1194:	9b 85       	ldd	r25, Y+11	; 0x0b
    1196:	92 2b       	or	r25, r18
    1198:	9b 87       	std	Y+11, r25	; 0x0b
    119a:	8a 87       	std	Y+10, r24	; 0x0a

	end_data_read();
    119c:	ce 01       	movw	r24, r28
    119e:	0e 94 02 03 	call	0x604	; 0x604 <_ZN9I2C_328pb13end_data_readEv>
	stop();
    11a2:	ce 01       	movw	r24, r28
    11a4:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN9I2C_328pb4stopEv>
}
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	08 95       	ret

000011b2 <_ZN7sensors8get_timeEv>:


}


float sensors:: get_time(){
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <_ZN7sensors8get_timeEv+0xe>
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <_ZN7sensors8get_timeEv+0x10>
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	8c 01       	movw	r16, r24

	uint16_t time = TCNT1;
    11c8:	e4 e8       	ldi	r30, 0x84	; 132
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	e0 80       	ld	r14, Z
    11ce:	f1 80       	ldd	r15, Z+1	; 0x01
	
	volatile float result;
	

	if (TCNT1 < time_of_previous_scan){
    11d0:	20 81       	ld	r18, Z
    11d2:	31 81       	ldd	r19, Z+1	; 0x01
    11d4:	fc 01       	movw	r30, r24
    11d6:	80 8d       	ldd	r24, Z+24	; 0x18
    11d8:	91 8d       	ldd	r25, Z+25	; 0x19
    11da:	28 17       	cp	r18, r24
    11dc:	39 07       	cpc	r19, r25
    11de:	70 f4       	brcc	.+28     	; 0x11fc <_ZN7sensors8get_timeEv+0x4a>

		result = 0xffff - time_of_previous_scan + time ;
    11e0:	b7 01       	movw	r22, r14
    11e2:	61 50       	subi	r22, 0x01	; 1
    11e4:	71 09       	sbc	r23, r1
    11e6:	68 1b       	sub	r22, r24
    11e8:	79 0b       	sbc	r23, r25
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 05 0c 	call	0x180a	; 0x180a <__floatunsisf>
    11f2:	69 83       	std	Y+1, r22	; 0x01
    11f4:	7a 83       	std	Y+2, r23	; 0x02
    11f6:	8b 83       	std	Y+3, r24	; 0x03
    11f8:	9c 83       	std	Y+4, r25	; 0x04
    11fa:	0b c0       	rjmp	.+22     	; 0x1212 <_ZN7sensors8get_timeEv+0x60>

	}

	else{

		result = time - time_of_previous_scan;
    11fc:	b7 01       	movw	r22, r14
    11fe:	68 1b       	sub	r22, r24
    1200:	79 0b       	sbc	r23, r25
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 05 0c 	call	0x180a	; 0x180a <__floatunsisf>
    120a:	69 83       	std	Y+1, r22	; 0x01
    120c:	7a 83       	std	Y+2, r23	; 0x02
    120e:	8b 83       	std	Y+3, r24	; 0x03
    1210:	9c 83       	std	Y+4, r25	; 0x04
	}


	result /= (float)TIMER_BIT_RATE;
    1212:	69 81       	ldd	r22, Y+1	; 0x01
    1214:	7a 81       	ldd	r23, Y+2	; 0x02
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	34 e2       	ldi	r19, 0x24	; 36
    121e:	44 e7       	ldi	r20, 0x74	; 116
    1220:	59 e4       	ldi	r21, 0x49	; 73
    1222:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__divsf3>
    1226:	69 83       	std	Y+1, r22	; 0x01
    1228:	7a 83       	std	Y+2, r23	; 0x02
    122a:	8b 83       	std	Y+3, r24	; 0x03
    122c:	9c 83       	std	Y+4, r25	; 0x04

	time_of_previous_scan = time;
    122e:	f8 01       	movw	r30, r16
    1230:	f1 8e       	std	Z+25, r15	; 0x19
    1232:	e0 8e       	std	Z+24, r14	; 0x18

	return result;
    1234:	69 81       	ldd	r22, Y+1	; 0x01
    1236:	7a 81       	ldd	r23, Y+2	; 0x02
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04


}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	08 95       	ret

00001252 <_ZN7sensors16compute_positionEv>:
}




void sensors::compute_position(){
    1252:	4f 92       	push	r4
    1254:	5f 92       	push	r5
    1256:	6f 92       	push	r6
    1258:	7f 92       	push	r7
    125a:	8f 92       	push	r8
    125c:	9f 92       	push	r9
    125e:	af 92       	push	r10
    1260:	bf 92       	push	r11
    1262:	cf 92       	push	r12
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	64 97       	sbiw	r28, 0x14	; 20
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	8c 01       	movw	r16, r24

	volatile float R;	// what the accelerometer thinks the total acceleration is
	volatile float trust_factor; // to what degree do I trust the accelerometer's readings
	const float time_between_measurements = get_time();
    1284:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <_ZN7sensors8get_timeEv>
    1288:	6b 01       	movw	r12, r22
    128a:	7c 01       	movw	r14, r24
 
	
	// first, the gyro's data is used to get arelative position to the previous position
	pitch += (gyro_y_data * GYRO_SENSITIVITY * time_between_measurements);
    128c:	f8 01       	movw	r30, r16
    128e:	60 85       	ldd	r22, Z+8	; 0x08
    1290:	71 85       	ldd	r23, Z+9	; 0x09
    1292:	07 2e       	mov	r0, r23
    1294:	00 0c       	add	r0, r0
    1296:	88 0b       	sbc	r24, r24
    1298:	99 0b       	sbc	r25, r25
    129a:	0e 94 07 0c 	call	0x180e	; 0x180e <__floatsisf>
    129e:	29 e2       	ldi	r18, 0x29	; 41
    12a0:	3c e5       	ldi	r19, 0x5C	; 92
    12a2:	4f e0       	ldi	r20, 0x0F	; 15
    12a4:	5c e3       	ldi	r21, 0x3C	; 60
    12a6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
    12aa:	a7 01       	movw	r20, r14
    12ac:	96 01       	movw	r18, r12
    12ae:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
    12b2:	f8 01       	movw	r30, r16
    12b4:	24 85       	ldd	r18, Z+12	; 0x0c
    12b6:	35 85       	ldd	r19, Z+13	; 0x0d
    12b8:	46 85       	ldd	r20, Z+14	; 0x0e
    12ba:	57 85       	ldd	r21, Z+15	; 0x0f
    12bc:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__addsf3>
    12c0:	4b 01       	movw	r8, r22
    12c2:	5c 01       	movw	r10, r24
    12c4:	f8 01       	movw	r30, r16
    12c6:	64 87       	std	Z+12, r22	; 0x0c
    12c8:	75 87       	std	Z+13, r23	; 0x0d
    12ca:	86 87       	std	Z+14, r24	; 0x0e
    12cc:	97 87       	std	Z+15, r25	; 0x0f
	roll += (gyro_x_data * GYRO_SENSITIVITY * time_between_measurements);
    12ce:	66 81       	ldd	r22, Z+6	; 0x06
    12d0:	77 81       	ldd	r23, Z+7	; 0x07
    12d2:	07 2e       	mov	r0, r23
    12d4:	00 0c       	add	r0, r0
    12d6:	88 0b       	sbc	r24, r24
    12d8:	99 0b       	sbc	r25, r25
    12da:	0e 94 07 0c 	call	0x180e	; 0x180e <__floatsisf>
    12de:	29 e2       	ldi	r18, 0x29	; 41
    12e0:	3c e5       	ldi	r19, 0x5C	; 92
    12e2:	4f e0       	ldi	r20, 0x0F	; 15
    12e4:	5c e3       	ldi	r21, 0x3C	; 60
    12e6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
    12ea:	a7 01       	movw	r20, r14
    12ec:	96 01       	movw	r18, r12
    12ee:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
    12f2:	f8 01       	movw	r30, r16
    12f4:	20 89       	ldd	r18, Z+16	; 0x10
    12f6:	31 89       	ldd	r19, Z+17	; 0x11
    12f8:	42 89       	ldd	r20, Z+18	; 0x12
    12fa:	53 89       	ldd	r21, Z+19	; 0x13
    12fc:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__addsf3>
    1300:	2b 01       	movw	r4, r22
    1302:	3c 01       	movw	r6, r24
    1304:	f8 01       	movw	r30, r16
    1306:	60 8b       	std	Z+16, r22	; 0x10
    1308:	71 8b       	std	Z+17, r23	; 0x11
    130a:	82 8b       	std	Z+18, r24	; 0x12
    130c:	93 8b       	std	Z+19, r25	; 0x13
	yaw_rate = (gyro_z_data * GYRO_SENSITIVITY );
    130e:	62 85       	ldd	r22, Z+10	; 0x0a
    1310:	73 85       	ldd	r23, Z+11	; 0x0b
    1312:	07 2e       	mov	r0, r23
    1314:	00 0c       	add	r0, r0
    1316:	88 0b       	sbc	r24, r24
    1318:	99 0b       	sbc	r25, r25
    131a:	0e 94 07 0c 	call	0x180e	; 0x180e <__floatsisf>
    131e:	29 e2       	ldi	r18, 0x29	; 41
    1320:	3c e5       	ldi	r19, 0x5C	; 92
    1322:	4f e0       	ldi	r20, 0x0F	; 15
    1324:	5c e3       	ldi	r21, 0x3C	; 60
    1326:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
    132a:	f8 01       	movw	r30, r16
    132c:	64 8b       	std	Z+20, r22	; 0x14
    132e:	75 8b       	std	Z+21, r23	; 0x15
    1330:	86 8b       	std	Z+22, r24	; 0x16
    1332:	97 8b       	std	Z+23, r25	; 0x17


	// Here, the total resulting acceleration is computed from the acc data
	R = sqrt( square( acc_x_data ) + square( acc_y_data ) + square( acc_z_data ) );
    1334:	60 81       	ld	r22, Z
    1336:	71 81       	ldd	r23, Z+1	; 0x01
    1338:	07 2e       	mov	r0, r23
    133a:	00 0c       	add	r0, r0
    133c:	88 0b       	sbc	r24, r24
    133e:	99 0b       	sbc	r25, r25
    1340:	0e 94 07 0c 	call	0x180e	; 0x180e <__floatsisf>
    1344:	6d 87       	std	Y+13, r22	; 0x0d
    1346:	7e 87       	std	Y+14, r23	; 0x0e
    1348:	8f 87       	std	Y+15, r24	; 0x0f
    134a:	98 8b       	std	Y+16, r25	; 0x10
    134c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <square>
    1350:	6b 01       	movw	r12, r22
    1352:	7c 01       	movw	r14, r24
    1354:	f8 01       	movw	r30, r16
    1356:	62 81       	ldd	r22, Z+2	; 0x02
    1358:	73 81       	ldd	r23, Z+3	; 0x03
    135a:	07 2e       	mov	r0, r23
    135c:	00 0c       	add	r0, r0
    135e:	88 0b       	sbc	r24, r24
    1360:	99 0b       	sbc	r25, r25
    1362:	0e 94 07 0c 	call	0x180e	; 0x180e <__floatsisf>
    1366:	69 8b       	std	Y+17, r22	; 0x11
    1368:	7a 8b       	std	Y+18, r23	; 0x12
    136a:	8b 8b       	std	Y+19, r24	; 0x13
    136c:	9c 8b       	std	Y+20, r25	; 0x14
    136e:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <square>
    1372:	9b 01       	movw	r18, r22
    1374:	ac 01       	movw	r20, r24
    1376:	c7 01       	movw	r24, r14
    1378:	b6 01       	movw	r22, r12
    137a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__addsf3>
    137e:	6b 01       	movw	r12, r22
    1380:	7c 01       	movw	r14, r24
    1382:	f8 01       	movw	r30, r16
    1384:	64 81       	ldd	r22, Z+4	; 0x04
    1386:	75 81       	ldd	r23, Z+5	; 0x05
    1388:	07 2e       	mov	r0, r23
    138a:	00 0c       	add	r0, r0
    138c:	88 0b       	sbc	r24, r24
    138e:	99 0b       	sbc	r25, r25
    1390:	0e 94 07 0c 	call	0x180e	; 0x180e <__floatsisf>
    1394:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <square>
    1398:	69 87       	std	Y+9, r22	; 0x09
    139a:	7a 87       	std	Y+10, r23	; 0x0a
    139c:	8b 87       	std	Y+11, r24	; 0x0b
    139e:	9c 87       	std	Y+12, r25	; 0x0c
    13a0:	29 85       	ldd	r18, Y+9	; 0x09
    13a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    13a4:	4b 85       	ldd	r20, Y+11	; 0x0b
    13a6:	5c 85       	ldd	r21, Y+12	; 0x0c
    13a8:	c7 01       	movw	r24, r14
    13aa:	b6 01       	movw	r22, r12
    13ac:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__addsf3>
    13b0:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <sqrt>
    13b4:	69 83       	std	Y+1, r22	; 0x01
    13b6:	7a 83       	std	Y+2, r23	; 0x02
    13b8:	8b 83       	std	Y+3, r24	; 0x03
    13ba:	9c 83       	std	Y+4, r25	; 0x04
	R *= ACC_SENSITIVITY;
    13bc:	69 81       	ldd	r22, Y+1	; 0x01
    13be:	7a 81       	ldd	r23, Y+2	; 0x02
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	20 e9       	ldi	r18, 0x90	; 144
    13c6:	39 ef       	ldi	r19, 0xF9	; 249
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	59 e3       	ldi	r21, 0x39	; 57
    13cc:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
    13d0:	69 83       	std	Y+1, r22	; 0x01
    13d2:	7a 83       	std	Y+2, r23	; 0x02
    13d4:	8b 83       	std	Y+3, r24	; 0x03
    13d6:	9c 83       	std	Y+4, r25	; 0x04
	
	
	// If the acc says that the resulting acceleration is more than 50% away from 1g, I have deemed that any reasults it gives are too biased to be of any use
	if ( R > 1.5 || R < 0.5 ){
    13d8:	69 81       	ldd	r22, Y+1	; 0x01
    13da:	7a 81       	ldd	r23, Y+2	; 0x02
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	9c 81       	ldd	r25, Y+4	; 0x04
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 ec       	ldi	r20, 0xC0	; 192
    13e6:	5f e3       	ldi	r21, 0x3F	; 63
    13e8:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__gesf2>
    13ec:	18 16       	cp	r1, r24
    13ee:	0c f4       	brge	.+2      	; 0x13f2 <_ZN7sensors16compute_positionEv+0x1a0>
    13f0:	b4 c0       	rjmp	.+360    	; 0x155a <_ZN7sensors16compute_positionEv+0x308>
    13f2:	69 81       	ldd	r22, Y+1	; 0x01
    13f4:	7a 81       	ldd	r23, Y+2	; 0x02
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	5f e3       	ldi	r21, 0x3F	; 63
    1402:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__cmpsf2>
    1406:	88 23       	and	r24, r24
    1408:	0c f4       	brge	.+2      	; 0x140c <_ZN7sensors16compute_positionEv+0x1ba>
    140a:	a7 c0       	rjmp	.+334    	; 0x155a <_ZN7sensors16compute_positionEv+0x308>
		return;	
	}

	// accounts for +- sign 0 is the level value
	// these functions return radians
	float acc_pitch_angle = asin(  acc_y_data / (R*INVERSE_ACC_SENSITIVITY) );	
    140c:	69 81       	ldd	r22, Y+1	; 0x01
    140e:	7a 81       	ldd	r23, Y+2	; 0x02
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e1       	ldi	r19, 0x10	; 16
    1418:	4e ef       	ldi	r20, 0xFE	; 254
    141a:	55 e4       	ldi	r21, 0x45	; 69
    141c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
    1420:	9b 01       	movw	r18, r22
    1422:	ac 01       	movw	r20, r24
    1424:	69 89       	ldd	r22, Y+17	; 0x11
    1426:	7a 89       	ldd	r23, Y+18	; 0x12
    1428:	8b 89       	ldd	r24, Y+19	; 0x13
    142a:	9c 89       	ldd	r25, Y+20	; 0x14
    142c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__divsf3>
    1430:	0e 94 3d 0b 	call	0x167a	; 0x167a <asin>
    1434:	69 87       	std	Y+9, r22	; 0x09
    1436:	7a 87       	std	Y+10, r23	; 0x0a
    1438:	8b 87       	std	Y+11, r24	; 0x0b
    143a:	9c 87       	std	Y+12, r25	; 0x0c
	float acc_roll_angle = asin( acc_x_data / (R*INVERSE_ACC_SENSITIVITY) );
    143c:	69 81       	ldd	r22, Y+1	; 0x01
    143e:	7a 81       	ldd	r23, Y+2	; 0x02
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	9c 81       	ldd	r25, Y+4	; 0x04
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e1       	ldi	r19, 0x10	; 16
    1448:	4e ef       	ldi	r20, 0xFE	; 254
    144a:	55 e4       	ldi	r21, 0x45	; 69
    144c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
    1450:	9b 01       	movw	r18, r22
    1452:	ac 01       	movw	r20, r24
    1454:	6d 85       	ldd	r22, Y+13	; 0x0d
    1456:	7e 85       	ldd	r23, Y+14	; 0x0e
    1458:	8f 85       	ldd	r24, Y+15	; 0x0f
    145a:	98 89       	ldd	r25, Y+16	; 0x10
    145c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__divsf3>
    1460:	0e 94 3d 0b 	call	0x167a	; 0x167a <asin>
    1464:	6d 87       	std	Y+13, r22	; 0x0d
    1466:	7e 87       	std	Y+14, r23	; 0x0e
    1468:	8f 87       	std	Y+15, r24	; 0x0f
    146a:	98 8b       	std	Y+16, r25	; 0x10
	acc_pitch_angle *= DEGREE_CONVERSION_FACTOR;
	acc_roll_angle *= DEGREE_CONVERSION_FACTOR;


	// The closer theaccelerometer is to 1g, the more influence it has in determing the angles at play
	trust_factor = ( 1 - fabs(1 - R) ) / 10;
    146c:	29 81       	ldd	r18, Y+1	; 0x01
    146e:	3a 81       	ldd	r19, Y+2	; 0x02
    1470:	4b 81       	ldd	r20, Y+3	; 0x03
    1472:	5c 81       	ldd	r21, Y+4	; 0x04
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	80 e8       	ldi	r24, 0x80	; 128
    147a:	9f e3       	ldi	r25, 0x3F	; 63
    147c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
    1480:	9b 01       	movw	r18, r22
    1482:	ac 01       	movw	r20, r24
    1484:	5f 77       	andi	r21, 0x7F	; 127
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	80 e8       	ldi	r24, 0x80	; 128
    148c:	9f e3       	ldi	r25, 0x3F	; 63
    148e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	40 e2       	ldi	r20, 0x20	; 32
    1498:	51 e4       	ldi	r21, 0x41	; 65
    149a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__divsf3>
    149e:	6d 83       	std	Y+5, r22	; 0x05
    14a0:	7e 83       	std	Y+6, r23	; 0x06
    14a2:	8f 83       	std	Y+7, r24	; 0x07
    14a4:	98 87       	std	Y+8, r25	; 0x08

	// readjustement of angle with input from accelerometer
	pitch = (pitch * (1 - trust_factor) + (acc_pitch_angle * trust_factor) );
    14a6:	2d 81       	ldd	r18, Y+5	; 0x05
    14a8:	3e 81       	ldd	r19, Y+6	; 0x06
    14aa:	4f 81       	ldd	r20, Y+7	; 0x07
    14ac:	58 85       	ldd	r21, Y+8	; 0x08
    14ae:	cd 80       	ldd	r12, Y+5	; 0x05
    14b0:	de 80       	ldd	r13, Y+6	; 0x06
    14b2:	ef 80       	ldd	r14, Y+7	; 0x07
    14b4:	f8 84       	ldd	r15, Y+8	; 0x08
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	80 e8       	ldi	r24, 0x80	; 128
    14bc:	9f e3       	ldi	r25, 0x3F	; 63
    14be:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
    14c2:	a5 01       	movw	r20, r10
    14c4:	94 01       	movw	r18, r8
    14c6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
    14ca:	4b 01       	movw	r8, r22
    14cc:	5c 01       	movw	r10, r24
    14ce:	23 e3       	ldi	r18, 0x33	; 51
    14d0:	33 e3       	ldi	r19, 0x33	; 51
    14d2:	45 e6       	ldi	r20, 0x65	; 101
    14d4:	52 e4       	ldi	r21, 0x42	; 66
    14d6:	69 85       	ldd	r22, Y+9	; 0x09
    14d8:	7a 85       	ldd	r23, Y+10	; 0x0a
    14da:	8b 85       	ldd	r24, Y+11	; 0x0b
    14dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    14de:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
    14e2:	a7 01       	movw	r20, r14
    14e4:	96 01       	movw	r18, r12
    14e6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
    14ea:	9b 01       	movw	r18, r22
    14ec:	ac 01       	movw	r20, r24
    14ee:	c5 01       	movw	r24, r10
    14f0:	b4 01       	movw	r22, r8
    14f2:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__addsf3>
    14f6:	f8 01       	movw	r30, r16
    14f8:	64 87       	std	Z+12, r22	; 0x0c
    14fa:	75 87       	std	Z+13, r23	; 0x0d
    14fc:	86 87       	std	Z+14, r24	; 0x0e
    14fe:	97 87       	std	Z+15, r25	; 0x0f
	roll = (roll * (1 - trust_factor) + (acc_roll_angle * trust_factor) );
    1500:	2d 81       	ldd	r18, Y+5	; 0x05
    1502:	3e 81       	ldd	r19, Y+6	; 0x06
    1504:	4f 81       	ldd	r20, Y+7	; 0x07
    1506:	58 85       	ldd	r21, Y+8	; 0x08
    1508:	8d 80       	ldd	r8, Y+5	; 0x05
    150a:	9e 80       	ldd	r9, Y+6	; 0x06
    150c:	af 80       	ldd	r10, Y+7	; 0x07
    150e:	b8 84       	ldd	r11, Y+8	; 0x08
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	80 e8       	ldi	r24, 0x80	; 128
    1516:	9f e3       	ldi	r25, 0x3F	; 63
    1518:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
    151c:	a3 01       	movw	r20, r6
    151e:	92 01       	movw	r18, r4
    1520:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
    1524:	2b 01       	movw	r4, r22
    1526:	3c 01       	movw	r6, r24
    1528:	23 e3       	ldi	r18, 0x33	; 51
    152a:	33 e3       	ldi	r19, 0x33	; 51
    152c:	45 e6       	ldi	r20, 0x65	; 101
    152e:	52 e4       	ldi	r21, 0x42	; 66
    1530:	6d 85       	ldd	r22, Y+13	; 0x0d
    1532:	7e 85       	ldd	r23, Y+14	; 0x0e
    1534:	8f 85       	ldd	r24, Y+15	; 0x0f
    1536:	98 89       	ldd	r25, Y+16	; 0x10
    1538:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
    153c:	a5 01       	movw	r20, r10
    153e:	94 01       	movw	r18, r8
    1540:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
    1544:	9b 01       	movw	r18, r22
    1546:	ac 01       	movw	r20, r24
    1548:	c3 01       	movw	r24, r6
    154a:	b2 01       	movw	r22, r4
    154c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__addsf3>
    1550:	f8 01       	movw	r30, r16
    1552:	60 8b       	std	Z+16, r22	; 0x10
    1554:	71 8b       	std	Z+17, r23	; 0x11
    1556:	82 8b       	std	Z+18, r24	; 0x12
    1558:	93 8b       	std	Z+19, r25	; 0x13

	
	return;


}
    155a:	64 96       	adiw	r28, 0x14	; 20
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	ff 90       	pop	r15
    1570:	ef 90       	pop	r14
    1572:	df 90       	pop	r13
    1574:	cf 90       	pop	r12
    1576:	bf 90       	pop	r11
    1578:	af 90       	pop	r10
    157a:	9f 90       	pop	r9
    157c:	8f 90       	pop	r8
    157e:	7f 90       	pop	r7
    1580:	6f 90       	pop	r6
    1582:	5f 90       	pop	r5
    1584:	4f 90       	pop	r4
    1586:	08 95       	ret

00001588 <_ZNK7sensors9get_pitchEv>:

}

float sensors::get_pitch() const{
	
	return pitch;
    1588:	fc 01       	movw	r30, r24
    158a:	64 85       	ldd	r22, Z+12	; 0x0c
    158c:	75 85       	ldd	r23, Z+13	; 0x0d
    158e:	86 85       	ldd	r24, Z+14	; 0x0e
    1590:	97 85       	ldd	r25, Z+15	; 0x0f
}
    1592:	08 95       	ret

00001594 <_ZNK7sensors8get_rollEv>:

float sensors::get_roll() const{
	
	return roll;
    1594:	fc 01       	movw	r30, r24
    1596:	60 89       	ldd	r22, Z+16	; 0x10
    1598:	71 89       	ldd	r23, Z+17	; 0x11
    159a:	82 89       	ldd	r24, Z+18	; 0x12
    159c:	93 89       	ldd	r25, Z+19	; 0x13
}
    159e:	08 95       	ret

000015a0 <__subsf3>:
    15a0:	50 58       	subi	r21, 0x80	; 128

000015a2 <__addsf3>:
    15a2:	bb 27       	eor	r27, r27
    15a4:	aa 27       	eor	r26, r26
    15a6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__addsf3x>
    15aa:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_round>
    15ae:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__fp_pscA>
    15b2:	38 f0       	brcs	.+14     	; 0x15c2 <__addsf3+0x20>
    15b4:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__fp_pscB>
    15b8:	20 f0       	brcs	.+8      	; 0x15c2 <__addsf3+0x20>
    15ba:	39 f4       	brne	.+14     	; 0x15ca <__addsf3+0x28>
    15bc:	9f 3f       	cpi	r25, 0xFF	; 255
    15be:	19 f4       	brne	.+6      	; 0x15c6 <__addsf3+0x24>
    15c0:	26 f4       	brtc	.+8      	; 0x15ca <__addsf3+0x28>
    15c2:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__fp_nan>
    15c6:	0e f4       	brtc	.+2      	; 0x15ca <__addsf3+0x28>
    15c8:	e0 95       	com	r30
    15ca:	e7 fb       	bst	r30, 7
    15cc:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__fp_inf>

000015d0 <__addsf3x>:
    15d0:	e9 2f       	mov	r30, r25
    15d2:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__fp_split3>
    15d6:	58 f3       	brcs	.-42     	; 0x15ae <__addsf3+0xc>
    15d8:	ba 17       	cp	r27, r26
    15da:	62 07       	cpc	r22, r18
    15dc:	73 07       	cpc	r23, r19
    15de:	84 07       	cpc	r24, r20
    15e0:	95 07       	cpc	r25, r21
    15e2:	20 f0       	brcs	.+8      	; 0x15ec <__addsf3x+0x1c>
    15e4:	79 f4       	brne	.+30     	; 0x1604 <__addsf3x+0x34>
    15e6:	a6 f5       	brtc	.+104    	; 0x1650 <__addsf3x+0x80>
    15e8:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_zero>
    15ec:	0e f4       	brtc	.+2      	; 0x15f0 <__addsf3x+0x20>
    15ee:	e0 95       	com	r30
    15f0:	0b 2e       	mov	r0, r27
    15f2:	ba 2f       	mov	r27, r26
    15f4:	a0 2d       	mov	r26, r0
    15f6:	0b 01       	movw	r0, r22
    15f8:	b9 01       	movw	r22, r18
    15fa:	90 01       	movw	r18, r0
    15fc:	0c 01       	movw	r0, r24
    15fe:	ca 01       	movw	r24, r20
    1600:	a0 01       	movw	r20, r0
    1602:	11 24       	eor	r1, r1
    1604:	ff 27       	eor	r31, r31
    1606:	59 1b       	sub	r21, r25
    1608:	99 f0       	breq	.+38     	; 0x1630 <__addsf3x+0x60>
    160a:	59 3f       	cpi	r21, 0xF9	; 249
    160c:	50 f4       	brcc	.+20     	; 0x1622 <__addsf3x+0x52>
    160e:	50 3e       	cpi	r21, 0xE0	; 224
    1610:	68 f1       	brcs	.+90     	; 0x166c <__addsf3x+0x9c>
    1612:	1a 16       	cp	r1, r26
    1614:	f0 40       	sbci	r31, 0x00	; 0
    1616:	a2 2f       	mov	r26, r18
    1618:	23 2f       	mov	r18, r19
    161a:	34 2f       	mov	r19, r20
    161c:	44 27       	eor	r20, r20
    161e:	58 5f       	subi	r21, 0xF8	; 248
    1620:	f3 cf       	rjmp	.-26     	; 0x1608 <__addsf3x+0x38>
    1622:	46 95       	lsr	r20
    1624:	37 95       	ror	r19
    1626:	27 95       	ror	r18
    1628:	a7 95       	ror	r26
    162a:	f0 40       	sbci	r31, 0x00	; 0
    162c:	53 95       	inc	r21
    162e:	c9 f7       	brne	.-14     	; 0x1622 <__addsf3x+0x52>
    1630:	7e f4       	brtc	.+30     	; 0x1650 <__addsf3x+0x80>
    1632:	1f 16       	cp	r1, r31
    1634:	ba 0b       	sbc	r27, r26
    1636:	62 0b       	sbc	r22, r18
    1638:	73 0b       	sbc	r23, r19
    163a:	84 0b       	sbc	r24, r20
    163c:	ba f0       	brmi	.+46     	; 0x166c <__addsf3x+0x9c>
    163e:	91 50       	subi	r25, 0x01	; 1
    1640:	a1 f0       	breq	.+40     	; 0x166a <__addsf3x+0x9a>
    1642:	ff 0f       	add	r31, r31
    1644:	bb 1f       	adc	r27, r27
    1646:	66 1f       	adc	r22, r22
    1648:	77 1f       	adc	r23, r23
    164a:	88 1f       	adc	r24, r24
    164c:	c2 f7       	brpl	.-16     	; 0x163e <__addsf3x+0x6e>
    164e:	0e c0       	rjmp	.+28     	; 0x166c <__addsf3x+0x9c>
    1650:	ba 0f       	add	r27, r26
    1652:	62 1f       	adc	r22, r18
    1654:	73 1f       	adc	r23, r19
    1656:	84 1f       	adc	r24, r20
    1658:	48 f4       	brcc	.+18     	; 0x166c <__addsf3x+0x9c>
    165a:	87 95       	ror	r24
    165c:	77 95       	ror	r23
    165e:	67 95       	ror	r22
    1660:	b7 95       	ror	r27
    1662:	f7 95       	ror	r31
    1664:	9e 3f       	cpi	r25, 0xFE	; 254
    1666:	08 f0       	brcs	.+2      	; 0x166a <__addsf3x+0x9a>
    1668:	b0 cf       	rjmp	.-160    	; 0x15ca <__addsf3+0x28>
    166a:	93 95       	inc	r25
    166c:	88 0f       	add	r24, r24
    166e:	08 f0       	brcs	.+2      	; 0x1672 <__addsf3x+0xa2>
    1670:	99 27       	eor	r25, r25
    1672:	ee 0f       	add	r30, r30
    1674:	97 95       	ror	r25
    1676:	87 95       	ror	r24
    1678:	08 95       	ret

0000167a <asin>:
    167a:	9f 93       	push	r25
    167c:	9f 77       	andi	r25, 0x7F	; 127
    167e:	ee e3       	ldi	r30, 0x3E	; 62
    1680:	89 37       	cpi	r24, 0x79	; 121
    1682:	9e 07       	cpc	r25, r30
    1684:	28 f4       	brcc	.+10     	; 0x1690 <asin+0x16>
    1686:	e4 eb       	ldi	r30, 0xB4	; 180
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fp_powsodd>
    168e:	0c c0       	rjmp	.+24     	; 0x16a8 <asin+0x2e>
    1690:	0e 94 42 0c 	call	0x1884	; 0x1884 <__fp_arccos>
    1694:	90 58       	subi	r25, 0x80	; 128
    1696:	a2 ea       	ldi	r26, 0xA2	; 162
    1698:	2a ed       	ldi	r18, 0xDA	; 218
    169a:	3f e0       	ldi	r19, 0x0F	; 15
    169c:	49 ec       	ldi	r20, 0xC9	; 201
    169e:	5f e3       	ldi	r21, 0x3F	; 63
    16a0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__addsf3x>
    16a4:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__fp_round>
    16a8:	0f 90       	pop	r0
    16aa:	07 fc       	sbrc	r0, 7
    16ac:	90 58       	subi	r25, 0x80	; 128
    16ae:	08 95       	ret

000016b0 <__cmpsf2>:
    16b0:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__fp_cmp>
    16b4:	08 f4       	brcc	.+2      	; 0x16b8 <__cmpsf2+0x8>
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	08 95       	ret

000016ba <__divsf3>:
    16ba:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__divsf3x>
    16be:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_round>
    16c2:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__fp_pscB>
    16c6:	58 f0       	brcs	.+22     	; 0x16de <__divsf3+0x24>
    16c8:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__fp_pscA>
    16cc:	40 f0       	brcs	.+16     	; 0x16de <__divsf3+0x24>
    16ce:	29 f4       	brne	.+10     	; 0x16da <__divsf3+0x20>
    16d0:	5f 3f       	cpi	r21, 0xFF	; 255
    16d2:	29 f0       	breq	.+10     	; 0x16de <__divsf3+0x24>
    16d4:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__fp_inf>
    16d8:	51 11       	cpse	r21, r1
    16da:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__fp_szero>
    16de:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__fp_nan>

000016e2 <__divsf3x>:
    16e2:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__fp_split3>
    16e6:	68 f3       	brcs	.-38     	; 0x16c2 <__divsf3+0x8>

000016e8 <__divsf3_pse>:
    16e8:	99 23       	and	r25, r25
    16ea:	b1 f3       	breq	.-20     	; 0x16d8 <__divsf3+0x1e>
    16ec:	55 23       	and	r21, r21
    16ee:	91 f3       	breq	.-28     	; 0x16d4 <__divsf3+0x1a>
    16f0:	95 1b       	sub	r25, r21
    16f2:	55 0b       	sbc	r21, r21
    16f4:	bb 27       	eor	r27, r27
    16f6:	aa 27       	eor	r26, r26
    16f8:	62 17       	cp	r22, r18
    16fa:	73 07       	cpc	r23, r19
    16fc:	84 07       	cpc	r24, r20
    16fe:	38 f0       	brcs	.+14     	; 0x170e <__divsf3_pse+0x26>
    1700:	9f 5f       	subi	r25, 0xFF	; 255
    1702:	5f 4f       	sbci	r21, 0xFF	; 255
    1704:	22 0f       	add	r18, r18
    1706:	33 1f       	adc	r19, r19
    1708:	44 1f       	adc	r20, r20
    170a:	aa 1f       	adc	r26, r26
    170c:	a9 f3       	breq	.-22     	; 0x16f8 <__divsf3_pse+0x10>
    170e:	35 d0       	rcall	.+106    	; 0x177a <__divsf3_pse+0x92>
    1710:	0e 2e       	mov	r0, r30
    1712:	3a f0       	brmi	.+14     	; 0x1722 <__divsf3_pse+0x3a>
    1714:	e0 e8       	ldi	r30, 0x80	; 128
    1716:	32 d0       	rcall	.+100    	; 0x177c <__divsf3_pse+0x94>
    1718:	91 50       	subi	r25, 0x01	; 1
    171a:	50 40       	sbci	r21, 0x00	; 0
    171c:	e6 95       	lsr	r30
    171e:	00 1c       	adc	r0, r0
    1720:	ca f7       	brpl	.-14     	; 0x1714 <__divsf3_pse+0x2c>
    1722:	2b d0       	rcall	.+86     	; 0x177a <__divsf3_pse+0x92>
    1724:	fe 2f       	mov	r31, r30
    1726:	29 d0       	rcall	.+82     	; 0x177a <__divsf3_pse+0x92>
    1728:	66 0f       	add	r22, r22
    172a:	77 1f       	adc	r23, r23
    172c:	88 1f       	adc	r24, r24
    172e:	bb 1f       	adc	r27, r27
    1730:	26 17       	cp	r18, r22
    1732:	37 07       	cpc	r19, r23
    1734:	48 07       	cpc	r20, r24
    1736:	ab 07       	cpc	r26, r27
    1738:	b0 e8       	ldi	r27, 0x80	; 128
    173a:	09 f0       	breq	.+2      	; 0x173e <__divsf3_pse+0x56>
    173c:	bb 0b       	sbc	r27, r27
    173e:	80 2d       	mov	r24, r0
    1740:	bf 01       	movw	r22, r30
    1742:	ff 27       	eor	r31, r31
    1744:	93 58       	subi	r25, 0x83	; 131
    1746:	5f 4f       	sbci	r21, 0xFF	; 255
    1748:	3a f0       	brmi	.+14     	; 0x1758 <__divsf3_pse+0x70>
    174a:	9e 3f       	cpi	r25, 0xFE	; 254
    174c:	51 05       	cpc	r21, r1
    174e:	78 f0       	brcs	.+30     	; 0x176e <__divsf3_pse+0x86>
    1750:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__fp_inf>
    1754:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__fp_szero>
    1758:	5f 3f       	cpi	r21, 0xFF	; 255
    175a:	e4 f3       	brlt	.-8      	; 0x1754 <__divsf3_pse+0x6c>
    175c:	98 3e       	cpi	r25, 0xE8	; 232
    175e:	d4 f3       	brlt	.-12     	; 0x1754 <__divsf3_pse+0x6c>
    1760:	86 95       	lsr	r24
    1762:	77 95       	ror	r23
    1764:	67 95       	ror	r22
    1766:	b7 95       	ror	r27
    1768:	f7 95       	ror	r31
    176a:	9f 5f       	subi	r25, 0xFF	; 255
    176c:	c9 f7       	brne	.-14     	; 0x1760 <__divsf3_pse+0x78>
    176e:	88 0f       	add	r24, r24
    1770:	91 1d       	adc	r25, r1
    1772:	96 95       	lsr	r25
    1774:	87 95       	ror	r24
    1776:	97 f9       	bld	r25, 7
    1778:	08 95       	ret
    177a:	e1 e0       	ldi	r30, 0x01	; 1
    177c:	66 0f       	add	r22, r22
    177e:	77 1f       	adc	r23, r23
    1780:	88 1f       	adc	r24, r24
    1782:	bb 1f       	adc	r27, r27
    1784:	62 17       	cp	r22, r18
    1786:	73 07       	cpc	r23, r19
    1788:	84 07       	cpc	r24, r20
    178a:	ba 07       	cpc	r27, r26
    178c:	20 f0       	brcs	.+8      	; 0x1796 <__divsf3_pse+0xae>
    178e:	62 1b       	sub	r22, r18
    1790:	73 0b       	sbc	r23, r19
    1792:	84 0b       	sbc	r24, r20
    1794:	ba 0b       	sbc	r27, r26
    1796:	ee 1f       	adc	r30, r30
    1798:	88 f7       	brcc	.-30     	; 0x177c <__divsf3_pse+0x94>
    179a:	e0 95       	com	r30
    179c:	08 95       	ret

0000179e <__fixsfsi>:
    179e:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__fixunssfsi>
    17a2:	68 94       	set
    17a4:	b1 11       	cpse	r27, r1
    17a6:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__fp_szero>
    17aa:	08 95       	ret

000017ac <__fixunssfsi>:
    17ac:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__fp_splitA>
    17b0:	88 f0       	brcs	.+34     	; 0x17d4 <__fixunssfsi+0x28>
    17b2:	9f 57       	subi	r25, 0x7F	; 127
    17b4:	98 f0       	brcs	.+38     	; 0x17dc <__fixunssfsi+0x30>
    17b6:	b9 2f       	mov	r27, r25
    17b8:	99 27       	eor	r25, r25
    17ba:	b7 51       	subi	r27, 0x17	; 23
    17bc:	b0 f0       	brcs	.+44     	; 0x17ea <__fixunssfsi+0x3e>
    17be:	e1 f0       	breq	.+56     	; 0x17f8 <__fixunssfsi+0x4c>
    17c0:	66 0f       	add	r22, r22
    17c2:	77 1f       	adc	r23, r23
    17c4:	88 1f       	adc	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	1a f0       	brmi	.+6      	; 0x17d0 <__fixunssfsi+0x24>
    17ca:	ba 95       	dec	r27
    17cc:	c9 f7       	brne	.-14     	; 0x17c0 <__fixunssfsi+0x14>
    17ce:	14 c0       	rjmp	.+40     	; 0x17f8 <__fixunssfsi+0x4c>
    17d0:	b1 30       	cpi	r27, 0x01	; 1
    17d2:	91 f0       	breq	.+36     	; 0x17f8 <__fixunssfsi+0x4c>
    17d4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__fp_zero>
    17d8:	b1 e0       	ldi	r27, 0x01	; 1
    17da:	08 95       	ret
    17dc:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__fp_zero>
    17e0:	67 2f       	mov	r22, r23
    17e2:	78 2f       	mov	r23, r24
    17e4:	88 27       	eor	r24, r24
    17e6:	b8 5f       	subi	r27, 0xF8	; 248
    17e8:	39 f0       	breq	.+14     	; 0x17f8 <__fixunssfsi+0x4c>
    17ea:	b9 3f       	cpi	r27, 0xF9	; 249
    17ec:	cc f3       	brlt	.-14     	; 0x17e0 <__fixunssfsi+0x34>
    17ee:	86 95       	lsr	r24
    17f0:	77 95       	ror	r23
    17f2:	67 95       	ror	r22
    17f4:	b3 95       	inc	r27
    17f6:	d9 f7       	brne	.-10     	; 0x17ee <__fixunssfsi+0x42>
    17f8:	3e f4       	brtc	.+14     	; 0x1808 <__fixunssfsi+0x5c>
    17fa:	90 95       	com	r25
    17fc:	80 95       	com	r24
    17fe:	70 95       	com	r23
    1800:	61 95       	neg	r22
    1802:	7f 4f       	sbci	r23, 0xFF	; 255
    1804:	8f 4f       	sbci	r24, 0xFF	; 255
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	08 95       	ret

0000180a <__floatunsisf>:
    180a:	e8 94       	clt
    180c:	09 c0       	rjmp	.+18     	; 0x1820 <__floatsisf+0x12>

0000180e <__floatsisf>:
    180e:	97 fb       	bst	r25, 7
    1810:	3e f4       	brtc	.+14     	; 0x1820 <__floatsisf+0x12>
    1812:	90 95       	com	r25
    1814:	80 95       	com	r24
    1816:	70 95       	com	r23
    1818:	61 95       	neg	r22
    181a:	7f 4f       	sbci	r23, 0xFF	; 255
    181c:	8f 4f       	sbci	r24, 0xFF	; 255
    181e:	9f 4f       	sbci	r25, 0xFF	; 255
    1820:	99 23       	and	r25, r25
    1822:	a9 f0       	breq	.+42     	; 0x184e <__floatsisf+0x40>
    1824:	f9 2f       	mov	r31, r25
    1826:	96 e9       	ldi	r25, 0x96	; 150
    1828:	bb 27       	eor	r27, r27
    182a:	93 95       	inc	r25
    182c:	f6 95       	lsr	r31
    182e:	87 95       	ror	r24
    1830:	77 95       	ror	r23
    1832:	67 95       	ror	r22
    1834:	b7 95       	ror	r27
    1836:	f1 11       	cpse	r31, r1
    1838:	f8 cf       	rjmp	.-16     	; 0x182a <__floatsisf+0x1c>
    183a:	fa f4       	brpl	.+62     	; 0x187a <__floatsisf+0x6c>
    183c:	bb 0f       	add	r27, r27
    183e:	11 f4       	brne	.+4      	; 0x1844 <__floatsisf+0x36>
    1840:	60 ff       	sbrs	r22, 0
    1842:	1b c0       	rjmp	.+54     	; 0x187a <__floatsisf+0x6c>
    1844:	6f 5f       	subi	r22, 0xFF	; 255
    1846:	7f 4f       	sbci	r23, 0xFF	; 255
    1848:	8f 4f       	sbci	r24, 0xFF	; 255
    184a:	9f 4f       	sbci	r25, 0xFF	; 255
    184c:	16 c0       	rjmp	.+44     	; 0x187a <__floatsisf+0x6c>
    184e:	88 23       	and	r24, r24
    1850:	11 f0       	breq	.+4      	; 0x1856 <__floatsisf+0x48>
    1852:	96 e9       	ldi	r25, 0x96	; 150
    1854:	11 c0       	rjmp	.+34     	; 0x1878 <__floatsisf+0x6a>
    1856:	77 23       	and	r23, r23
    1858:	21 f0       	breq	.+8      	; 0x1862 <__floatsisf+0x54>
    185a:	9e e8       	ldi	r25, 0x8E	; 142
    185c:	87 2f       	mov	r24, r23
    185e:	76 2f       	mov	r23, r22
    1860:	05 c0       	rjmp	.+10     	; 0x186c <__floatsisf+0x5e>
    1862:	66 23       	and	r22, r22
    1864:	71 f0       	breq	.+28     	; 0x1882 <__floatsisf+0x74>
    1866:	96 e8       	ldi	r25, 0x86	; 134
    1868:	86 2f       	mov	r24, r22
    186a:	70 e0       	ldi	r23, 0x00	; 0
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	2a f0       	brmi	.+10     	; 0x187a <__floatsisf+0x6c>
    1870:	9a 95       	dec	r25
    1872:	66 0f       	add	r22, r22
    1874:	77 1f       	adc	r23, r23
    1876:	88 1f       	adc	r24, r24
    1878:	da f7       	brpl	.-10     	; 0x1870 <__floatsisf+0x62>
    187a:	88 0f       	add	r24, r24
    187c:	96 95       	lsr	r25
    187e:	87 95       	ror	r24
    1880:	97 f9       	bld	r25, 7
    1882:	08 95       	ret

00001884 <__fp_arccos>:
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	1f 93       	push	r17
    188a:	0f 93       	push	r16
    188c:	8b 01       	movw	r16, r22
    188e:	ec 01       	movw	r28, r24
    1890:	e8 ec       	ldi	r30, 0xC8	; 200
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fp_powser>
    1898:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__fp_round>
    189c:	98 01       	movw	r18, r16
    189e:	ae 01       	movw	r20, r28
    18a0:	8b 01       	movw	r16, r22
    18a2:	ec 01       	movw	r28, r24
    18a4:	60 e0       	ldi	r22, 0x00	; 0
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	80 e8       	ldi	r24, 0x80	; 128
    18aa:	9f e3       	ldi	r25, 0x3F	; 63
    18ac:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
    18b0:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <sqrt>
    18b4:	98 01       	movw	r18, r16
    18b6:	ae 01       	movw	r20, r28
    18b8:	0f 91       	pop	r16
    18ba:	1f 91       	pop	r17
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__mulsf3x>

000018c4 <__fp_cmp>:
    18c4:	99 0f       	add	r25, r25
    18c6:	00 08       	sbc	r0, r0
    18c8:	55 0f       	add	r21, r21
    18ca:	aa 0b       	sbc	r26, r26
    18cc:	e0 e8       	ldi	r30, 0x80	; 128
    18ce:	fe ef       	ldi	r31, 0xFE	; 254
    18d0:	16 16       	cp	r1, r22
    18d2:	17 06       	cpc	r1, r23
    18d4:	e8 07       	cpc	r30, r24
    18d6:	f9 07       	cpc	r31, r25
    18d8:	c0 f0       	brcs	.+48     	; 0x190a <__fp_cmp+0x46>
    18da:	12 16       	cp	r1, r18
    18dc:	13 06       	cpc	r1, r19
    18de:	e4 07       	cpc	r30, r20
    18e0:	f5 07       	cpc	r31, r21
    18e2:	98 f0       	brcs	.+38     	; 0x190a <__fp_cmp+0x46>
    18e4:	62 1b       	sub	r22, r18
    18e6:	73 0b       	sbc	r23, r19
    18e8:	84 0b       	sbc	r24, r20
    18ea:	95 0b       	sbc	r25, r21
    18ec:	39 f4       	brne	.+14     	; 0x18fc <__fp_cmp+0x38>
    18ee:	0a 26       	eor	r0, r26
    18f0:	61 f0       	breq	.+24     	; 0x190a <__fp_cmp+0x46>
    18f2:	23 2b       	or	r18, r19
    18f4:	24 2b       	or	r18, r20
    18f6:	25 2b       	or	r18, r21
    18f8:	21 f4       	brne	.+8      	; 0x1902 <__fp_cmp+0x3e>
    18fa:	08 95       	ret
    18fc:	0a 26       	eor	r0, r26
    18fe:	09 f4       	brne	.+2      	; 0x1902 <__fp_cmp+0x3e>
    1900:	a1 40       	sbci	r26, 0x01	; 1
    1902:	a6 95       	lsr	r26
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	81 1d       	adc	r24, r1
    1908:	81 1d       	adc	r24, r1
    190a:	08 95       	ret

0000190c <__fp_inf>:
    190c:	97 f9       	bld	r25, 7
    190e:	9f 67       	ori	r25, 0x7F	; 127
    1910:	80 e8       	ldi	r24, 0x80	; 128
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	08 95       	ret

00001918 <__fp_nan>:
    1918:	9f ef       	ldi	r25, 0xFF	; 255
    191a:	80 ec       	ldi	r24, 0xC0	; 192
    191c:	08 95       	ret

0000191e <__fp_powser>:
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	1f 93       	push	r17
    1924:	0f 93       	push	r16
    1926:	ff 92       	push	r15
    1928:	ef 92       	push	r14
    192a:	df 92       	push	r13
    192c:	7b 01       	movw	r14, r22
    192e:	8c 01       	movw	r16, r24
    1930:	68 94       	set
    1932:	06 c0       	rjmp	.+12     	; 0x1940 <__fp_powser+0x22>
    1934:	da 2e       	mov	r13, r26
    1936:	ef 01       	movw	r28, r30
    1938:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3x>
    193c:	fe 01       	movw	r30, r28
    193e:	e8 94       	clt
    1940:	a5 91       	lpm	r26, Z+
    1942:	25 91       	lpm	r18, Z+
    1944:	35 91       	lpm	r19, Z+
    1946:	45 91       	lpm	r20, Z+
    1948:	55 91       	lpm	r21, Z+
    194a:	a6 f3       	brts	.-24     	; 0x1934 <__fp_powser+0x16>
    194c:	ef 01       	movw	r28, r30
    194e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__addsf3x>
    1952:	fe 01       	movw	r30, r28
    1954:	97 01       	movw	r18, r14
    1956:	a8 01       	movw	r20, r16
    1958:	da 94       	dec	r13
    195a:	69 f7       	brne	.-38     	; 0x1936 <__fp_powser+0x18>
    195c:	df 90       	pop	r13
    195e:	ef 90       	pop	r14
    1960:	ff 90       	pop	r15
    1962:	0f 91       	pop	r16
    1964:	1f 91       	pop	r17
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <__fp_powsodd>:
    196c:	9f 93       	push	r25
    196e:	8f 93       	push	r24
    1970:	7f 93       	push	r23
    1972:	6f 93       	push	r22
    1974:	ff 93       	push	r31
    1976:	ef 93       	push	r30
    1978:	9b 01       	movw	r18, r22
    197a:	ac 01       	movw	r20, r24
    197c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__mulsf3>
    1980:	ef 91       	pop	r30
    1982:	ff 91       	pop	r31
    1984:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fp_powser>
    1988:	2f 91       	pop	r18
    198a:	3f 91       	pop	r19
    198c:	4f 91       	pop	r20
    198e:	5f 91       	pop	r21
    1990:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <__mulsf3>

00001994 <__fp_pscA>:
    1994:	00 24       	eor	r0, r0
    1996:	0a 94       	dec	r0
    1998:	16 16       	cp	r1, r22
    199a:	17 06       	cpc	r1, r23
    199c:	18 06       	cpc	r1, r24
    199e:	09 06       	cpc	r0, r25
    19a0:	08 95       	ret

000019a2 <__fp_pscB>:
    19a2:	00 24       	eor	r0, r0
    19a4:	0a 94       	dec	r0
    19a6:	12 16       	cp	r1, r18
    19a8:	13 06       	cpc	r1, r19
    19aa:	14 06       	cpc	r1, r20
    19ac:	05 06       	cpc	r0, r21
    19ae:	08 95       	ret

000019b0 <__fp_round>:
    19b0:	09 2e       	mov	r0, r25
    19b2:	03 94       	inc	r0
    19b4:	00 0c       	add	r0, r0
    19b6:	11 f4       	brne	.+4      	; 0x19bc <__fp_round+0xc>
    19b8:	88 23       	and	r24, r24
    19ba:	52 f0       	brmi	.+20     	; 0x19d0 <__fp_round+0x20>
    19bc:	bb 0f       	add	r27, r27
    19be:	40 f4       	brcc	.+16     	; 0x19d0 <__fp_round+0x20>
    19c0:	bf 2b       	or	r27, r31
    19c2:	11 f4       	brne	.+4      	; 0x19c8 <__fp_round+0x18>
    19c4:	60 ff       	sbrs	r22, 0
    19c6:	04 c0       	rjmp	.+8      	; 0x19d0 <__fp_round+0x20>
    19c8:	6f 5f       	subi	r22, 0xFF	; 255
    19ca:	7f 4f       	sbci	r23, 0xFF	; 255
    19cc:	8f 4f       	sbci	r24, 0xFF	; 255
    19ce:	9f 4f       	sbci	r25, 0xFF	; 255
    19d0:	08 95       	ret

000019d2 <__fp_split3>:
    19d2:	57 fd       	sbrc	r21, 7
    19d4:	90 58       	subi	r25, 0x80	; 128
    19d6:	44 0f       	add	r20, r20
    19d8:	55 1f       	adc	r21, r21
    19da:	59 f0       	breq	.+22     	; 0x19f2 <__fp_splitA+0x10>
    19dc:	5f 3f       	cpi	r21, 0xFF	; 255
    19de:	71 f0       	breq	.+28     	; 0x19fc <__fp_splitA+0x1a>
    19e0:	47 95       	ror	r20

000019e2 <__fp_splitA>:
    19e2:	88 0f       	add	r24, r24
    19e4:	97 fb       	bst	r25, 7
    19e6:	99 1f       	adc	r25, r25
    19e8:	61 f0       	breq	.+24     	; 0x1a02 <__fp_splitA+0x20>
    19ea:	9f 3f       	cpi	r25, 0xFF	; 255
    19ec:	79 f0       	breq	.+30     	; 0x1a0c <__fp_splitA+0x2a>
    19ee:	87 95       	ror	r24
    19f0:	08 95       	ret
    19f2:	12 16       	cp	r1, r18
    19f4:	13 06       	cpc	r1, r19
    19f6:	14 06       	cpc	r1, r20
    19f8:	55 1f       	adc	r21, r21
    19fa:	f2 cf       	rjmp	.-28     	; 0x19e0 <__fp_split3+0xe>
    19fc:	46 95       	lsr	r20
    19fe:	f1 df       	rcall	.-30     	; 0x19e2 <__fp_splitA>
    1a00:	08 c0       	rjmp	.+16     	; 0x1a12 <__fp_splitA+0x30>
    1a02:	16 16       	cp	r1, r22
    1a04:	17 06       	cpc	r1, r23
    1a06:	18 06       	cpc	r1, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	f1 cf       	rjmp	.-30     	; 0x19ee <__fp_splitA+0xc>
    1a0c:	86 95       	lsr	r24
    1a0e:	71 05       	cpc	r23, r1
    1a10:	61 05       	cpc	r22, r1
    1a12:	08 94       	sec
    1a14:	08 95       	ret

00001a16 <__fp_zero>:
    1a16:	e8 94       	clt

00001a18 <__fp_szero>:
    1a18:	bb 27       	eor	r27, r27
    1a1a:	66 27       	eor	r22, r22
    1a1c:	77 27       	eor	r23, r23
    1a1e:	cb 01       	movw	r24, r22
    1a20:	97 f9       	bld	r25, 7
    1a22:	08 95       	ret

00001a24 <__gesf2>:
    1a24:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__fp_cmp>
    1a28:	08 f4       	brcc	.+2      	; 0x1a2c <__gesf2+0x8>
    1a2a:	8f ef       	ldi	r24, 0xFF	; 255
    1a2c:	08 95       	ret

00001a2e <__mulsf3>:
    1a2e:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3x>
    1a32:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_round>
    1a36:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__fp_pscA>
    1a3a:	38 f0       	brcs	.+14     	; 0x1a4a <__mulsf3+0x1c>
    1a3c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__fp_pscB>
    1a40:	20 f0       	brcs	.+8      	; 0x1a4a <__mulsf3+0x1c>
    1a42:	95 23       	and	r25, r21
    1a44:	11 f0       	breq	.+4      	; 0x1a4a <__mulsf3+0x1c>
    1a46:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__fp_inf>
    1a4a:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__fp_nan>
    1a4e:	11 24       	eor	r1, r1
    1a50:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__fp_szero>

00001a54 <__mulsf3x>:
    1a54:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__fp_split3>
    1a58:	70 f3       	brcs	.-36     	; 0x1a36 <__mulsf3+0x8>

00001a5a <__mulsf3_pse>:
    1a5a:	95 9f       	mul	r25, r21
    1a5c:	c1 f3       	breq	.-16     	; 0x1a4e <__mulsf3+0x20>
    1a5e:	95 0f       	add	r25, r21
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	55 1f       	adc	r21, r21
    1a64:	62 9f       	mul	r22, r18
    1a66:	f0 01       	movw	r30, r0
    1a68:	72 9f       	mul	r23, r18
    1a6a:	bb 27       	eor	r27, r27
    1a6c:	f0 0d       	add	r31, r0
    1a6e:	b1 1d       	adc	r27, r1
    1a70:	63 9f       	mul	r22, r19
    1a72:	aa 27       	eor	r26, r26
    1a74:	f0 0d       	add	r31, r0
    1a76:	b1 1d       	adc	r27, r1
    1a78:	aa 1f       	adc	r26, r26
    1a7a:	64 9f       	mul	r22, r20
    1a7c:	66 27       	eor	r22, r22
    1a7e:	b0 0d       	add	r27, r0
    1a80:	a1 1d       	adc	r26, r1
    1a82:	66 1f       	adc	r22, r22
    1a84:	82 9f       	mul	r24, r18
    1a86:	22 27       	eor	r18, r18
    1a88:	b0 0d       	add	r27, r0
    1a8a:	a1 1d       	adc	r26, r1
    1a8c:	62 1f       	adc	r22, r18
    1a8e:	73 9f       	mul	r23, r19
    1a90:	b0 0d       	add	r27, r0
    1a92:	a1 1d       	adc	r26, r1
    1a94:	62 1f       	adc	r22, r18
    1a96:	83 9f       	mul	r24, r19
    1a98:	a0 0d       	add	r26, r0
    1a9a:	61 1d       	adc	r22, r1
    1a9c:	22 1f       	adc	r18, r18
    1a9e:	74 9f       	mul	r23, r20
    1aa0:	33 27       	eor	r19, r19
    1aa2:	a0 0d       	add	r26, r0
    1aa4:	61 1d       	adc	r22, r1
    1aa6:	23 1f       	adc	r18, r19
    1aa8:	84 9f       	mul	r24, r20
    1aaa:	60 0d       	add	r22, r0
    1aac:	21 1d       	adc	r18, r1
    1aae:	82 2f       	mov	r24, r18
    1ab0:	76 2f       	mov	r23, r22
    1ab2:	6a 2f       	mov	r22, r26
    1ab4:	11 24       	eor	r1, r1
    1ab6:	9f 57       	subi	r25, 0x7F	; 127
    1ab8:	50 40       	sbci	r21, 0x00	; 0
    1aba:	9a f0       	brmi	.+38     	; 0x1ae2 <__mulsf3_pse+0x88>
    1abc:	f1 f0       	breq	.+60     	; 0x1afa <__mulsf3_pse+0xa0>
    1abe:	88 23       	and	r24, r24
    1ac0:	4a f0       	brmi	.+18     	; 0x1ad4 <__mulsf3_pse+0x7a>
    1ac2:	ee 0f       	add	r30, r30
    1ac4:	ff 1f       	adc	r31, r31
    1ac6:	bb 1f       	adc	r27, r27
    1ac8:	66 1f       	adc	r22, r22
    1aca:	77 1f       	adc	r23, r23
    1acc:	88 1f       	adc	r24, r24
    1ace:	91 50       	subi	r25, 0x01	; 1
    1ad0:	50 40       	sbci	r21, 0x00	; 0
    1ad2:	a9 f7       	brne	.-22     	; 0x1abe <__mulsf3_pse+0x64>
    1ad4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ad6:	51 05       	cpc	r21, r1
    1ad8:	80 f0       	brcs	.+32     	; 0x1afa <__mulsf3_pse+0xa0>
    1ada:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__fp_inf>
    1ade:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__fp_szero>
    1ae2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae4:	e4 f3       	brlt	.-8      	; 0x1ade <__mulsf3_pse+0x84>
    1ae6:	98 3e       	cpi	r25, 0xE8	; 232
    1ae8:	d4 f3       	brlt	.-12     	; 0x1ade <__mulsf3_pse+0x84>
    1aea:	86 95       	lsr	r24
    1aec:	77 95       	ror	r23
    1aee:	67 95       	ror	r22
    1af0:	b7 95       	ror	r27
    1af2:	f7 95       	ror	r31
    1af4:	e7 95       	ror	r30
    1af6:	9f 5f       	subi	r25, 0xFF	; 255
    1af8:	c1 f7       	brne	.-16     	; 0x1aea <__mulsf3_pse+0x90>
    1afa:	fe 2b       	or	r31, r30
    1afc:	88 0f       	add	r24, r24
    1afe:	91 1d       	adc	r25, r1
    1b00:	96 95       	lsr	r25
    1b02:	87 95       	ror	r24
    1b04:	97 f9       	bld	r25, 7
    1b06:	08 95       	ret
    1b08:	19 f4       	brne	.+6      	; 0x1b10 <__mulsf3_pse+0xb6>
    1b0a:	16 f4       	brtc	.+4      	; 0x1b10 <__mulsf3_pse+0xb6>
    1b0c:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__fp_nan>
    1b10:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__fp_mpack>

00001b14 <sqrt>:
    1b14:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__fp_splitA>
    1b18:	b8 f3       	brcs	.-18     	; 0x1b08 <__mulsf3_pse+0xae>
    1b1a:	99 23       	and	r25, r25
    1b1c:	c9 f3       	breq	.-14     	; 0x1b10 <__mulsf3_pse+0xb6>
    1b1e:	b6 f3       	brts	.-20     	; 0x1b0c <__mulsf3_pse+0xb2>
    1b20:	9f 57       	subi	r25, 0x7F	; 127
    1b22:	55 0b       	sbc	r21, r21
    1b24:	87 ff       	sbrs	r24, 7
    1b26:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fp_norm2>
    1b2a:	00 24       	eor	r0, r0
    1b2c:	a0 e6       	ldi	r26, 0x60	; 96
    1b2e:	40 ea       	ldi	r20, 0xA0	; 160
    1b30:	90 01       	movw	r18, r0
    1b32:	80 58       	subi	r24, 0x80	; 128
    1b34:	56 95       	lsr	r21
    1b36:	97 95       	ror	r25
    1b38:	28 f4       	brcc	.+10     	; 0x1b44 <sqrt+0x30>
    1b3a:	80 5c       	subi	r24, 0xC0	; 192
    1b3c:	66 0f       	add	r22, r22
    1b3e:	77 1f       	adc	r23, r23
    1b40:	88 1f       	adc	r24, r24
    1b42:	20 f0       	brcs	.+8      	; 0x1b4c <sqrt+0x38>
    1b44:	26 17       	cp	r18, r22
    1b46:	37 07       	cpc	r19, r23
    1b48:	48 07       	cpc	r20, r24
    1b4a:	30 f4       	brcc	.+12     	; 0x1b58 <sqrt+0x44>
    1b4c:	62 1b       	sub	r22, r18
    1b4e:	73 0b       	sbc	r23, r19
    1b50:	84 0b       	sbc	r24, r20
    1b52:	20 29       	or	r18, r0
    1b54:	31 29       	or	r19, r1
    1b56:	4a 2b       	or	r20, r26
    1b58:	a6 95       	lsr	r26
    1b5a:	17 94       	ror	r1
    1b5c:	07 94       	ror	r0
    1b5e:	20 25       	eor	r18, r0
    1b60:	31 25       	eor	r19, r1
    1b62:	4a 27       	eor	r20, r26
    1b64:	58 f7       	brcc	.-42     	; 0x1b3c <sqrt+0x28>
    1b66:	66 0f       	add	r22, r22
    1b68:	77 1f       	adc	r23, r23
    1b6a:	88 1f       	adc	r24, r24
    1b6c:	20 f0       	brcs	.+8      	; 0x1b76 <sqrt+0x62>
    1b6e:	26 17       	cp	r18, r22
    1b70:	37 07       	cpc	r19, r23
    1b72:	48 07       	cpc	r20, r24
    1b74:	30 f4       	brcc	.+12     	; 0x1b82 <sqrt+0x6e>
    1b76:	62 0b       	sbc	r22, r18
    1b78:	73 0b       	sbc	r23, r19
    1b7a:	84 0b       	sbc	r24, r20
    1b7c:	20 0d       	add	r18, r0
    1b7e:	31 1d       	adc	r19, r1
    1b80:	41 1d       	adc	r20, r1
    1b82:	a0 95       	com	r26
    1b84:	81 f7       	brne	.-32     	; 0x1b66 <sqrt+0x52>
    1b86:	b9 01       	movw	r22, r18
    1b88:	84 2f       	mov	r24, r20
    1b8a:	91 58       	subi	r25, 0x81	; 129
    1b8c:	88 0f       	add	r24, r24
    1b8e:	96 95       	lsr	r25
    1b90:	87 95       	ror	r24
    1b92:	08 95       	ret

00001b94 <square>:
    1b94:	9b 01       	movw	r18, r22
    1b96:	ac 01       	movw	r20, r24
    1b98:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <__mulsf3>

00001b9c <__fp_mpack>:
    1b9c:	9f 3f       	cpi	r25, 0xFF	; 255
    1b9e:	31 f0       	breq	.+12     	; 0x1bac <__fp_mpack_finite+0xc>

00001ba0 <__fp_mpack_finite>:
    1ba0:	91 50       	subi	r25, 0x01	; 1
    1ba2:	20 f4       	brcc	.+8      	; 0x1bac <__fp_mpack_finite+0xc>
    1ba4:	87 95       	ror	r24
    1ba6:	77 95       	ror	r23
    1ba8:	67 95       	ror	r22
    1baa:	b7 95       	ror	r27
    1bac:	88 0f       	add	r24, r24
    1bae:	91 1d       	adc	r25, r1
    1bb0:	96 95       	lsr	r25
    1bb2:	87 95       	ror	r24
    1bb4:	97 f9       	bld	r25, 7
    1bb6:	08 95       	ret

00001bb8 <__fp_norm2>:
    1bb8:	91 50       	subi	r25, 0x01	; 1
    1bba:	50 40       	sbci	r21, 0x00	; 0
    1bbc:	66 0f       	add	r22, r22
    1bbe:	77 1f       	adc	r23, r23
    1bc0:	88 1f       	adc	r24, r24
    1bc2:	d2 f7       	brpl	.-12     	; 0x1bb8 <__fp_norm2>
    1bc4:	08 95       	ret

00001bc6 <_exit>:
    1bc6:	f8 94       	cli

00001bc8 <__stop_program>:
    1bc8:	ff cf       	rjmp	.-2      	; 0x1bc8 <__stop_program>
