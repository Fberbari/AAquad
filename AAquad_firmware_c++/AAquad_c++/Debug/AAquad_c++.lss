
AAquad_c++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ccc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  00001d40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036a9  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013aa  00000000  00000000  00005651  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fe4  00000000  00000000  000069fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000614  00000000  00000000  000079e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e5a  00000000  00000000  00007ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001095  00000000  00000000  00008e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00009ee3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_1>
       8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_2>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 4a 02 	jmp	0x494	; 0x494 <__vector_4>
      14:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_5>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      68:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      6c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      70:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      74:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      78:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      7c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      80:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      84:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      88:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      8c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      90:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      94:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      98:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      9c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      ac:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      b0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      b4:	03 6e       	ori	r16, 0xE3	; 227
      b6:	db 36       	cpi	r29, 0x6B	; 107
      b8:	3d 9a       	sbi	0x07, 5	; 7
      ba:	99 99       	sbic	0x13, 1	; 19
      bc:	99 3d       	cpi	r25, 0xD9	; 217
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	3e 00       	.word	0x003e	; ????
      c4:	00 00       	nop
      c6:	80 3f       	cpi	r24, 0xF0	; 240
      c8:	07 2c       	mov	r0, r7
      ca:	7a a5       	ldd	r23, Y+42	; 0x2a
      cc:	ba 6c       	ori	r27, 0xCA	; 202
      ce:	c5 90       	lpm	r12, Z+
      d0:	da 3b       	cpi	r29, 0xBA	; 186
      d2:	93 65       	ori	r25, 0x53	; 83
      d4:	fc 8b       	std	Y+20, r31	; 0x14
      d6:	bc 53       	subi	r27, 0x3C	; 60
      d8:	f8 10       	cpse	r15, r8
      da:	fd 3c       	cpi	r31, 0xCD	; 205
      dc:	56 92       	lac	Z, r5
      de:	83 4d       	sbci	r24, 0xD3	; 211
      e0:	bd 87       	std	Y+13, r27	; 0x0d
      e2:	9d 3a       	cpi	r25, 0xAD	; 173
      e4:	b6 3d       	cpi	r27, 0xD6	; 214
      e6:	cb c9       	rjmp	.-3178   	; 0xfffff47e <__eeprom_end+0xff7ef47e>
      e8:	bf 5b       	subi	r27, 0xBF	; 191
      ea:	be 73       	andi	r27, 0x3E	; 62
      ec:	da 0f       	add	r29, r26
      ee:	c9 3f       	cpi	r28, 0xF9	; 249

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d8 e0       	ldi	r29, 0x08	; 8
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_clear_bss>:
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	a8 31       	cpi	r26, 0x18	; 24
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 8c 00 	call	0x118	; 0x118 <main>
     110:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <main>:

	volatile uint16_t requested_throttle_pos = 0;
	volatile uint16_t temp_timer_throttle = 0; 


int main(void){
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	c3 5d       	subi	r28, 0xD3	; 211
     122:	d1 09       	sbc	r29, r1
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	de bf       	out	0x3e, r29	; 62
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	cd bf       	out	0x3d, r28	; 61

	initialize::timers();
     12e:	0e 94 34 03 	call	0x668	; 0x668 <_ZN10initialize6timersEv>
	initialize::interrupts();
     132:	0e 94 17 03 	call	0x62e	; 0x62e <_ZN10initialize10interruptsEv>
	
	// this class will handleall the pilot's wishes
	pilot_instructions pilot;
	pilot.set_max_angle(30);
     136:	6e e1       	ldi	r22, 0x1E	; 30
     138:	ce 01       	movw	r24, r28
     13a:	c9 96       	adiw	r24, 0x39	; 57
     13c:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN18pilot_instructions13set_max_angleEh>
	pilot.set_max_yaw_rate(45);
     140:	6d e2       	ldi	r22, 0x2D	; 45
     142:	ce 01       	movw	r24, r28
     144:	c9 96       	adiw	r24, 0x39	; 57
     146:	0e 94 ae 05 	call	0xb5c	; 0xb5c <_ZN18pilot_instructions16set_max_yaw_rateEh>

	
	// I2C object created just for use in the sensor object
	//handles all sensor data processing
	I2C_328pb sensor_I2C(0x02);	
     14a:	62 e0       	ldi	r22, 0x02	; 2
     14c:	70 e0       	ldi	r23, 0x00	; 0
     14e:	ce 01       	movw	r24, r28
     150:	8e 5b       	subi	r24, 0xBE	; 190
     152:	9f 4f       	sbci	r25, 0xFF	; 255
     154:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN9I2C_328pbC1Ei>
	sensors sense(sensor_I2C);
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	ce 01       	movw	r24, r28
     15c:	8d 5b       	subi	r24, 0xBD	; 189
     15e:	9f 4f       	sbci	r25, 0xFF	; 255
     160:	0e 94 fa 07 	call	0xff4	; 0xff4 <_ZN7sensorsC1E9I2C_328pb>

	// processes current position and rqueste position into a number proportional to motor strength
	// This is only for the bank (tilted left or right) angle
	PID bank_pid;
     164:	ce 01       	movw	r24, r28
     166:	83 5a       	subi	r24, 0xA3	; 163
     168:	9f 4f       	sbci	r25, 0xFF	; 255
     16a:	0e 94 3a 03 	call	0x674	; 0x674 <_ZN3PIDC1Ev>
	bank_pid.setWeights(2,0.08,0.05);
     16e:	0f 2e       	mov	r0, r31
     170:	fd ec       	ldi	r31, 0xCD	; 205
     172:	4f 2e       	mov	r4, r31
     174:	fc ec       	ldi	r31, 0xCC	; 204
     176:	5f 2e       	mov	r5, r31
     178:	fc e4       	ldi	r31, 0x4C	; 76
     17a:	6f 2e       	mov	r6, r31
     17c:	fd e3       	ldi	r31, 0x3D	; 61
     17e:	7f 2e       	mov	r7, r31
     180:	f0 2d       	mov	r31, r0
     182:	4d aa       	std	Y+53, r4	; 0x35
     184:	5e aa       	std	Y+54, r5	; 0x36
     186:	6f aa       	std	Y+55, r6	; 0x37
     188:	78 ae       	std	Y+56, r7	; 0x38
     18a:	0f 2e       	mov	r0, r31
     18c:	fa e0       	ldi	r31, 0x0A	; 10
     18e:	8f 2e       	mov	r8, r31
     190:	f7 ed       	ldi	r31, 0xD7	; 215
     192:	9f 2e       	mov	r9, r31
     194:	f3 ea       	ldi	r31, 0xA3	; 163
     196:	af 2e       	mov	r10, r31
     198:	fd e3       	ldi	r31, 0x3D	; 61
     19a:	bf 2e       	mov	r11, r31
     19c:	f0 2d       	mov	r31, r0
     19e:	89 aa       	std	Y+49, r8	; 0x31
     1a0:	9a aa       	std	Y+50, r9	; 0x32
     1a2:	ab aa       	std	Y+51, r10	; 0x33
     1a4:	bc aa       	std	Y+52, r11	; 0x34
     1a6:	c1 2c       	mov	r12, r1
     1a8:	d1 2c       	mov	r13, r1
     1aa:	76 01       	movw	r14, r12
     1ac:	68 94       	set
     1ae:	f6 f8       	bld	r15, 6
     1b0:	cd a6       	std	Y+45, r12	; 0x2d
     1b2:	de a6       	std	Y+46, r13	; 0x2e
     1b4:	ef a6       	std	Y+47, r14	; 0x2f
     1b6:	f8 aa       	std	Y+48, r15	; 0x30
     1b8:	9e 01       	movw	r18, r28
     1ba:	2b 5c       	subi	r18, 0xCB	; 203
     1bc:	3f 4f       	sbci	r19, 0xFF	; 255
     1be:	ae 01       	movw	r20, r28
     1c0:	4f 5c       	subi	r20, 0xCF	; 207
     1c2:	5f 4f       	sbci	r21, 0xFF	; 255
     1c4:	be 01       	movw	r22, r28
     1c6:	63 5d       	subi	r22, 0xD3	; 211
     1c8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ca:	ce 01       	movw	r24, r28
     1cc:	83 5a       	subi	r24, 0xA3	; 163
     1ce:	9f 4f       	sbci	r25, 0xFF	; 255
     1d0:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN3PID10setWeightsERKfS1_S1_>
	bank_pid.setOutputLowerLimit(-50);
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	a8 e4       	ldi	r26, 0x48	; 72
     1da:	b2 ec       	ldi	r27, 0xC2	; 194
     1dc:	89 a7       	std	Y+41, r24	; 0x29
     1de:	9a a7       	std	Y+42, r25	; 0x2a
     1e0:	ab a7       	std	Y+43, r26	; 0x2b
     1e2:	bc a7       	std	Y+44, r27	; 0x2c
     1e4:	be 01       	movw	r22, r28
     1e6:	67 5d       	subi	r22, 0xD7	; 215
     1e8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ea:	ce 01       	movw	r24, r28
     1ec:	83 5a       	subi	r24, 0xA3	; 163
     1ee:	9f 4f       	sbci	r25, 0xFF	; 255
     1f0:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN3PID19setOutputLowerLimitERKf>
	bank_pid.setOutputUpperLimit(50);
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	a8 e4       	ldi	r26, 0x48	; 72
     1fa:	b2 e4       	ldi	r27, 0x42	; 66
     1fc:	8d a3       	std	Y+37, r24	; 0x25
     1fe:	9e a3       	std	Y+38, r25	; 0x26
     200:	af a3       	std	Y+39, r26	; 0x27
     202:	b8 a7       	std	Y+40, r27	; 0x28
     204:	be 01       	movw	r22, r28
     206:	6b 5d       	subi	r22, 0xDB	; 219
     208:	7f 4f       	sbci	r23, 0xFF	; 255
     20a:	ce 01       	movw	r24, r28
     20c:	83 5a       	subi	r24, 0xA3	; 163
     20e:	9f 4f       	sbci	r25, 0xFF	; 255
     210:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN3PID19setOutputUpperLimitERKf>

	//Same as on top but for the pitch (tilted forward or back) angle
	PID pitch_pid;
     214:	ce 01       	movw	r24, r28
     216:	89 56       	subi	r24, 0x69	; 105
     218:	9f 4f       	sbci	r25, 0xFF	; 255
     21a:	0e 94 3a 03 	call	0x674	; 0x674 <_ZN3PIDC1Ev>
	pitch_pid.setWeights(2,0.08,0.05);
     21e:	49 a2       	std	Y+33, r4	; 0x21
     220:	5a a2       	std	Y+34, r5	; 0x22
     222:	6b a2       	std	Y+35, r6	; 0x23
     224:	7c a2       	std	Y+36, r7	; 0x24
     226:	8d 8e       	std	Y+29, r8	; 0x1d
     228:	9e 8e       	std	Y+30, r9	; 0x1e
     22a:	af 8e       	std	Y+31, r10	; 0x1f
     22c:	b8 a2       	std	Y+32, r11	; 0x20
     22e:	c9 8e       	std	Y+25, r12	; 0x19
     230:	da 8e       	std	Y+26, r13	; 0x1a
     232:	eb 8e       	std	Y+27, r14	; 0x1b
     234:	fc 8e       	std	Y+28, r15	; 0x1c
     236:	9e 01       	movw	r18, r28
     238:	2f 5d       	subi	r18, 0xDF	; 223
     23a:	3f 4f       	sbci	r19, 0xFF	; 255
     23c:	ae 01       	movw	r20, r28
     23e:	43 5e       	subi	r20, 0xE3	; 227
     240:	5f 4f       	sbci	r21, 0xFF	; 255
     242:	be 01       	movw	r22, r28
     244:	67 5e       	subi	r22, 0xE7	; 231
     246:	7f 4f       	sbci	r23, 0xFF	; 255
     248:	ce 01       	movw	r24, r28
     24a:	89 56       	subi	r24, 0x69	; 105
     24c:	9f 4f       	sbci	r25, 0xFF	; 255
     24e:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN3PID10setWeightsERKfS1_S1_>
	pitch_pid.setOutputLowerLimit(-50);
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	a8 e4       	ldi	r26, 0x48	; 72
     258:	b2 ec       	ldi	r27, 0xC2	; 194
     25a:	8d 8b       	std	Y+21, r24	; 0x15
     25c:	9e 8b       	std	Y+22, r25	; 0x16
     25e:	af 8b       	std	Y+23, r26	; 0x17
     260:	b8 8f       	std	Y+24, r27	; 0x18
     262:	be 01       	movw	r22, r28
     264:	6b 5e       	subi	r22, 0xEB	; 235
     266:	7f 4f       	sbci	r23, 0xFF	; 255
     268:	ce 01       	movw	r24, r28
     26a:	89 56       	subi	r24, 0x69	; 105
     26c:	9f 4f       	sbci	r25, 0xFF	; 255
     26e:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN3PID19setOutputLowerLimitERKf>
	pitch_pid.setOutputUpperLimit(50);
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	a8 e4       	ldi	r26, 0x48	; 72
     278:	b2 e4       	ldi	r27, 0x42	; 66
     27a:	89 8b       	std	Y+17, r24	; 0x11
     27c:	9a 8b       	std	Y+18, r25	; 0x12
     27e:	ab 8b       	std	Y+19, r26	; 0x13
     280:	bc 8b       	std	Y+20, r27	; 0x14
     282:	be 01       	movw	r22, r28
     284:	6f 5e       	subi	r22, 0xEF	; 239
     286:	7f 4f       	sbci	r23, 0xFF	; 255
     288:	ce 01       	movw	r24, r28
     28a:	89 56       	subi	r24, 0x69	; 105
     28c:	9f 4f       	sbci	r25, 0xFF	; 255
     28e:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_ZN3PID19setOutputUpperLimitERKf>
	

	// initialisation of the chip responsible fortalking directly to the esc's
	I2C_328pb pwm_chip_I2c(0x02);
     292:	62 e0       	ldi	r22, 0x02	; 2
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	ce 01       	movw	r24, r28
     298:	8f 52       	subi	r24, 0x2F	; 47
     29a:	9f 4f       	sbci	r25, 0xFF	; 255
     29c:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN9I2C_328pbC1Ei>
	pwm_chip pwm(pwm_chip_I2c, 10);
     2a0:	4a e0       	ldi	r20, 0x0A	; 10
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	ce 01       	movw	r24, r28
     2a6:	8e 52       	subi	r24, 0x2E	; 46
     2a8:	9f 4f       	sbci	r25, 0xFF	; 255
     2aa:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN8pwm_chipC1E9I2C_328pbh>
	

	
	// Initialisation finished. Interupts enabled, ready to begin
	sei();
     2ae:	78 94       	sei

	
	while(1){
		
		// sensor data gathered
		sense.read_acc(sensor_I2C);
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	ce 01       	movw	r24, r28
     2b4:	8d 5b       	subi	r24, 0xBD	; 189
     2b6:	9f 4f       	sbci	r25, 0xFF	; 255
     2b8:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN7sensors8read_accE9I2C_328pb>
		sense.read_gyro(sensor_I2C);
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	ce 01       	movw	r24, r28
     2c0:	8d 5b       	subi	r24, 0xBD	; 189
     2c2:	9f 4f       	sbci	r25, 0xFF	; 255
     2c4:	0e 94 de 08 	call	0x11bc	; 0x11bc <_ZN7sensors9read_gyroE9I2C_328pb>
			
		// all sensor data received and processed
		sense.compute_position();
     2c8:	ce 01       	movw	r24, r28
     2ca:	8d 5b       	subi	r24, 0xBD	; 189
     2cc:	9f 4f       	sbci	r25, 0xFF	; 255
     2ce:	0e 94 aa 09 	call	0x1354	; 0x1354 <_ZN7sensors16compute_positionEv>
		
	
	
	
		// all pilot data received and processed
		pilot.compute();	
     2d2:	ce 01       	movw	r24, r28
     2d4:	c9 96       	adiw	r24, 0x39	; 57
     2d6:	0e 94 b9 05 	call	0xb72	; 0xb72 <_ZN18pilot_instructions7computeEv>
		
	
	
		// pilot commands passed to PID object
		bank_pid.setDesiredPoint(pilot.get_bank_angle());	
     2da:	ce 01       	movw	r24, r28
     2dc:	c9 96       	adiw	r24, 0x39	; 57
     2de:	0e 94 b1 05 	call	0xb62	; 0xb62 <_ZNK18pilot_instructions14get_bank_angleEv>
     2e2:	bc 01       	movw	r22, r24
     2e4:	99 0f       	add	r25, r25
     2e6:	88 0b       	sbc	r24, r24
     2e8:	99 0b       	sbc	r25, r25
     2ea:	0e 94 88 0c 	call	0x1910	; 0x1910 <__floatsisf>
     2ee:	6d 87       	std	Y+13, r22	; 0x0d
     2f0:	7e 87       	std	Y+14, r23	; 0x0e
     2f2:	8f 87       	std	Y+15, r24	; 0x0f
     2f4:	98 8b       	std	Y+16, r25	; 0x10
     2f6:	be 01       	movw	r22, r28
     2f8:	63 5f       	subi	r22, 0xF3	; 243
     2fa:	7f 4f       	sbci	r23, 0xFF	; 255
     2fc:	ce 01       	movw	r24, r28
     2fe:	83 5a       	subi	r24, 0xA3	; 163
     300:	9f 4f       	sbci	r25, 0xFF	; 255
     302:	0e 94 83 03 	call	0x706	; 0x706 <_ZN3PID15setDesiredPointERKf>
		pitch_pid.setDesiredPoint(pilot.get_pitch_angle());
     306:	ce 01       	movw	r24, r28
     308:	c9 96       	adiw	r24, 0x39	; 57
     30a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <_ZNK18pilot_instructions15get_pitch_angleEv>
     30e:	bc 01       	movw	r22, r24
     310:	99 0f       	add	r25, r25
     312:	88 0b       	sbc	r24, r24
     314:	99 0b       	sbc	r25, r25
     316:	0e 94 88 0c 	call	0x1910	; 0x1910 <__floatsisf>
     31a:	69 87       	std	Y+9, r22	; 0x09
     31c:	7a 87       	std	Y+10, r23	; 0x0a
     31e:	8b 87       	std	Y+11, r24	; 0x0b
     320:	9c 87       	std	Y+12, r25	; 0x0c
     322:	be 01       	movw	r22, r28
     324:	67 5f       	subi	r22, 0xF7	; 247
     326:	7f 4f       	sbci	r23, 0xFF	; 255
     328:	ce 01       	movw	r24, r28
     32a:	89 56       	subi	r24, 0x69	; 105
     32c:	9f 4f       	sbci	r25, 0xFF	; 255
     32e:	0e 94 83 03 	call	0x706	; 0x706 <_ZN3PID15setDesiredPointERKf>
	
		// Combination of pilot and sensor data into individual percentages of full pwer for each motor
		PID::combine_data(bank_pid.refresh(sense.get_roll()), pitch_pid.refresh(sense.get_pitch()), 60);
     332:	ce 01       	movw	r24, r28
     334:	8d 5b       	subi	r24, 0xBD	; 189
     336:	9f 4f       	sbci	r25, 0xFF	; 255
     338:	0e 94 45 0b 	call	0x168a	; 0x168a <_ZNK7sensors9get_pitchEv>
     33c:	6d 83       	std	Y+5, r22	; 0x05
     33e:	7e 83       	std	Y+6, r23	; 0x06
     340:	8f 83       	std	Y+7, r24	; 0x07
     342:	98 87       	std	Y+8, r25	; 0x08
     344:	be 01       	movw	r22, r28
     346:	6b 5f       	subi	r22, 0xFB	; 251
     348:	7f 4f       	sbci	r23, 0xFF	; 255
     34a:	ce 01       	movw	r24, r28
     34c:	89 56       	subi	r24, 0x69	; 105
     34e:	9f 4f       	sbci	r25, 0xFF	; 255
     350:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN3PID7refreshERKf>
     354:	4b 01       	movw	r8, r22
     356:	5c 01       	movw	r10, r24
     358:	ce 01       	movw	r24, r28
     35a:	8d 5b       	subi	r24, 0xBD	; 189
     35c:	9f 4f       	sbci	r25, 0xFF	; 255
     35e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_ZNK7sensors8get_rollEv>
     362:	69 83       	std	Y+1, r22	; 0x01
     364:	7a 83       	std	Y+2, r23	; 0x02
     366:	8b 83       	std	Y+3, r24	; 0x03
     368:	9c 83       	std	Y+4, r25	; 0x04
     36a:	be 01       	movw	r22, r28
     36c:	6f 5f       	subi	r22, 0xFF	; 255
     36e:	7f 4f       	sbci	r23, 0xFF	; 255
     370:	ce 01       	movw	r24, r28
     372:	83 5a       	subi	r24, 0xA3	; 163
     374:	9f 4f       	sbci	r25, 0xFF	; 255
     376:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN3PID7refreshERKf>
     37a:	e1 2c       	mov	r14, r1
     37c:	f1 2c       	mov	r15, r1
     37e:	00 e7       	ldi	r16, 0x70	; 112
     380:	12 e4       	ldi	r17, 0x42	; 66
     382:	a5 01       	movw	r20, r10
     384:	94 01       	movw	r18, r8
     386:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN3PID12combine_dataEfff>


		pwm.pass(pwm_chip_I2c, PID::motor);	// data encoded into PWM chip language and sent to the esc's
     38a:	40 e1       	ldi	r20, 0x10	; 16
     38c:	51 e0       	ldi	r21, 0x01	; 1
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	ce 01       	movw	r24, r28
     392:	8e 52       	subi	r24, 0x2E	; 46
     394:	9f 4f       	sbci	r25, 0xFF	; 255
     396:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN8pwm_chip4passE9I2C_328pbPi>
     39a:	8a cf       	rjmp	.-236    	; 0x2b0 <main+0x198>

0000039c <__vector_1>:

}



ISR(INT0_vect){
     39c:	1f 92       	push	r1
     39e:	0f 92       	push	r0
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	0f 92       	push	r0
     3a4:	11 24       	eor	r1, r1
     3a6:	2f 93       	push	r18
     3a8:	3f 93       	push	r19
     3aa:	4f 93       	push	r20
     3ac:	5f 93       	push	r21
     3ae:	8f 93       	push	r24
     3b0:	9f 93       	push	r25
	
		uint16_t temp = TCNT1;
     3b2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     3b6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

		if ( temp < temp_timer_aileron){	// timer overflow
     3ba:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <temp_timer_aileron>
     3be:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <temp_timer_aileron+0x1>
     3c2:	82 17       	cp	r24, r18
     3c4:	93 07       	cpc	r25, r19
     3c6:	70 f4       	brcc	.+28     	; 0x3e4 <__vector_1+0x48>

			requested_aileron_pos = (0xffff - temp_timer_aileron) + temp ;
     3c8:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <temp_timer_aileron>
     3cc:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <temp_timer_aileron+0x1>
     3d0:	9c 01       	movw	r18, r24
     3d2:	21 50       	subi	r18, 0x01	; 1
     3d4:	31 09       	sbc	r19, r1
     3d6:	24 1b       	sub	r18, r20
     3d8:	35 0b       	sbc	r19, r21
     3da:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <requested_aileron_pos+0x1>
     3de:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <requested_aileron_pos>
     3e2:	0b c0       	rjmp	.+22     	; 0x3fa <__vector_1+0x5e>
		}

		else {	// regular case
	
			requested_aileron_pos = temp - temp_timer_aileron;
     3e4:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <temp_timer_aileron>
     3e8:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <temp_timer_aileron+0x1>
     3ec:	ac 01       	movw	r20, r24
     3ee:	42 1b       	sub	r20, r18
     3f0:	53 0b       	sbc	r21, r19
     3f2:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <requested_aileron_pos+0x1>
     3f6:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp;
     3fa:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <temp_timer_aileron+0x1>
     3fe:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <temp_timer_aileron>
		
		
		// here, there is a chance that the value stored in requested aileron is actually (0xffff - actual requested aileron) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
		// this is true with all interrupts below
}
     402:	9f 91       	pop	r25
     404:	8f 91       	pop	r24
     406:	5f 91       	pop	r21
     408:	4f 91       	pop	r20
     40a:	3f 91       	pop	r19
     40c:	2f 91       	pop	r18
     40e:	0f 90       	pop	r0
     410:	0f be       	out	0x3f, r0	; 63
     412:	0f 90       	pop	r0
     414:	1f 90       	pop	r1
     416:	18 95       	reti

00000418 <__vector_2>:

ISR(INT1_vect){
     418:	1f 92       	push	r1
     41a:	0f 92       	push	r0
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	0f 92       	push	r0
     420:	11 24       	eor	r1, r1
     422:	2f 93       	push	r18
     424:	3f 93       	push	r19
     426:	4f 93       	push	r20
     428:	5f 93       	push	r21
     42a:	8f 93       	push	r24
     42c:	9f 93       	push	r25
	
		uint16_t temp = TCNT1;
     42e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     432:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

		if ( temp < temp_timer_throttle){	// timer overflow
     436:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     43a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
     43e:	82 17       	cp	r24, r18
     440:	93 07       	cpc	r25, r19
     442:	70 f4       	brcc	.+28     	; 0x460 <__vector_2+0x48>

			requested_throttle_pos = (0xffff - temp_timer_throttle) + temp ;
     444:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
     448:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
     44c:	9c 01       	movw	r18, r24
     44e:	21 50       	subi	r18, 0x01	; 1
     450:	31 09       	sbc	r19, r1
     452:	24 1b       	sub	r18, r20
     454:	35 0b       	sbc	r19, r21
     456:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <requested_throttle_pos+0x1>
     45a:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <requested_throttle_pos>
     45e:	0b c0       	rjmp	.+22     	; 0x476 <__vector_2+0x5e>
		}

		else {	// regular case
	
			requested_throttle_pos = temp - temp_timer_throttle;
     460:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     464:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
     468:	ac 01       	movw	r20, r24
     46a:	42 1b       	sub	r20, r18
     46c:	53 0b       	sbc	r21, r19
     46e:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <requested_throttle_pos+0x1>
     472:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <requested_throttle_pos>
			
		}
	
		
		temp_timer_throttle = temp;
     476:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
     47a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		
		
}
     47e:	9f 91       	pop	r25
     480:	8f 91       	pop	r24
     482:	5f 91       	pop	r21
     484:	4f 91       	pop	r20
     486:	3f 91       	pop	r19
     488:	2f 91       	pop	r18
     48a:	0f 90       	pop	r0
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	0f 90       	pop	r0
     490:	1f 90       	pop	r1
     492:	18 95       	reti

00000494 <__vector_4>:




ISR(PCINT1_vect){
     494:	1f 92       	push	r1
     496:	0f 92       	push	r0
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	0f 92       	push	r0
     49c:	11 24       	eor	r1, r1
     49e:	2f 93       	push	r18
     4a0:	3f 93       	push	r19
     4a2:	4f 93       	push	r20
     4a4:	5f 93       	push	r21
     4a6:	8f 93       	push	r24
     4a8:	9f 93       	push	r25

	uint16_t temp = TCNT1;
     4aa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     4ae:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

	if ( temp < temp_timer_rudder){	// timer overflow
     4b2:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <temp_timer_rudder>
     4b6:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <temp_timer_rudder+0x1>
     4ba:	82 17       	cp	r24, r18
     4bc:	93 07       	cpc	r25, r19
     4be:	70 f4       	brcc	.+28     	; 0x4dc <__vector_4+0x48>

		requested_rudder_pos = (0xffff - temp_timer_rudder) + temp ;
     4c0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <temp_timer_rudder>
     4c4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <temp_timer_rudder+0x1>
     4c8:	9c 01       	movw	r18, r24
     4ca:	21 50       	subi	r18, 0x01	; 1
     4cc:	31 09       	sbc	r19, r1
     4ce:	24 1b       	sub	r18, r20
     4d0:	35 0b       	sbc	r19, r21
     4d2:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <requested_rudder_pos+0x1>
     4d6:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <requested_rudder_pos>
     4da:	0b c0       	rjmp	.+22     	; 0x4f2 <__vector_4+0x5e>
	}

	else {	// regular case

		requested_rudder_pos = temp - temp_timer_rudder;
     4dc:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <temp_timer_rudder>
     4e0:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <temp_timer_rudder+0x1>
     4e4:	ac 01       	movw	r20, r24
     4e6:	42 1b       	sub	r20, r18
     4e8:	53 0b       	sbc	r21, r19
     4ea:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <requested_rudder_pos+0x1>
     4ee:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <requested_rudder_pos>
		
	}

	
	temp_timer_rudder = temp;
     4f2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <temp_timer_rudder+0x1>
     4f6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_timer_rudder>
	
	

}
     4fa:	9f 91       	pop	r25
     4fc:	8f 91       	pop	r24
     4fe:	5f 91       	pop	r21
     500:	4f 91       	pop	r20
     502:	3f 91       	pop	r19
     504:	2f 91       	pop	r18
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <__vector_5>:

ISR(PCINT2_vect){
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	4f 93       	push	r20
     520:	5f 93       	push	r21
     522:	8f 93       	push	r24
     524:	9f 93       	push	r25

	uint16_t temp = TCNT1;
     526:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     52a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	

	if ( temp < temp_timer_elevator){	// timer overflow
     52e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temp_timer_elevator>
     532:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temp_timer_elevator+0x1>
     536:	82 17       	cp	r24, r18
     538:	93 07       	cpc	r25, r19
     53a:	70 f4       	brcc	.+28     	; 0x558 <__vector_5+0x48>

		requested_elevator_pos = (0xffff - temp_timer_elevator) + temp ;
     53c:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <temp_timer_elevator>
     540:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <temp_timer_elevator+0x1>
     544:	9c 01       	movw	r18, r24
     546:	21 50       	subi	r18, 0x01	; 1
     548:	31 09       	sbc	r19, r1
     54a:	24 1b       	sub	r18, r20
     54c:	35 0b       	sbc	r19, r21
     54e:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <requested_elevator_pos+0x1>
     552:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <requested_elevator_pos>
     556:	0b c0       	rjmp	.+22     	; 0x56e <__vector_5+0x5e>
	}

	else {	// regular case

		requested_elevator_pos = temp - temp_timer_elevator;
     558:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temp_timer_elevator>
     55c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temp_timer_elevator+0x1>
     560:	ac 01       	movw	r20, r24
     562:	42 1b       	sub	r20, r18
     564:	53 0b       	sbc	r21, r19
     566:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <requested_elevator_pos+0x1>
     56a:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <requested_elevator_pos>
		
	}

	
	temp_timer_elevator = temp;
     56e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <temp_timer_elevator+0x1>
     572:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <temp_timer_elevator>
	
	

}
     576:	9f 91       	pop	r25
     578:	8f 91       	pop	r24
     57a:	5f 91       	pop	r21
     57c:	4f 91       	pop	r20
     57e:	3f 91       	pop	r19
     580:	2f 91       	pop	r18
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0
     588:	1f 90       	pop	r1
     58a:	18 95       	reti

0000058c <_ZN9I2C_328pbC1Ei>:

I2C_328pb::I2C_328pb(int bit_rate){

	// takes care of any and all initialsation

	TWBR0 = bit_rate;
     58c:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	
	PORTC |= ( (1 << 4) | (1 << 5) );
     590:	88 b1       	in	r24, 0x08	; 8
     592:	80 63       	ori	r24, 0x30	; 48
     594:	88 b9       	out	0x08, r24	; 8
     596:	08 95       	ret

00000598 <_ZN9I2C_328pb5startEv>:



void I2C_328pb::start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
     598:	84 ea       	ldi	r24, 0xA4	; 164
     59a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     59e:	ec eb       	ldi	r30, 0xBC	; 188
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	80 81       	ld	r24, Z
     5a4:	88 23       	and	r24, r24
     5a6:	ec f7       	brge	.-6      	; 0x5a2 <_ZN9I2C_328pb5startEv+0xa>
		return 0; 
	}

	return 1;
*/
}
     5a8:	08 95       	ret

000005aa <_ZN9I2C_328pb12repeat_startEv>:


void I2C_328pb::repeat_start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
     5aa:	84 ea       	ldi	r24, 0xA4	; 164
     5ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     5b0:	ec eb       	ldi	r30, 0xBC	; 188
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	80 81       	ld	r24, Z
     5b6:	88 23       	and	r24, r24
     5b8:	ec f7       	brge	.-6      	; 0x5b4 <_ZN9I2C_328pb12repeat_startEv+0xa>
		return 0; 
	}

	return 1;
*/
}
     5ba:	08 95       	ret

000005bc <_ZN9I2C_328pb10send_slaveEi>:

void I2C_328pb::send_slave(int address){

	// send slave address + write bit

	TWDR0 = address;
     5bc:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
     5c0:	84 e8       	ldi	r24, 0x84	; 132
     5c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     5c6:	ec eb       	ldi	r30, 0xBC	; 188
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	80 81       	ld	r24, Z
     5cc:	88 23       	and	r24, r24
     5ce:	ec f7       	brge	.-6      	; 0x5ca <_ZN9I2C_328pb10send_slaveEi+0xe>
	}

	return 1;
*/

}
     5d0:	08 95       	ret

000005d2 <_ZN9I2C_328pb8send_regEi>:

void I2C_328pb::send_reg(int reg){

	// send  address of register to be written

	TWDR0 = reg; 
     5d2:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

  	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
     5d6:	84 e8       	ldi	r24, 0x84	; 132
     5d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     5dc:	ec eb       	ldi	r30, 0xBC	; 188
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	88 23       	and	r24, r24
     5e4:	ec f7       	brge	.-6      	; 0x5e0 <_ZN9I2C_328pb8send_regEi+0xe>
	}

	return 1;
*/

}
     5e6:	08 95       	ret

000005e8 <_ZN9I2C_328pb4sendEi>:


void I2C_328pb::send(int data){

	TWDR0 = data;
     5e8:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ((1 << TWINT) | (1 << TWEN));
     5ec:	84 e8       	ldi	r24, 0x84	; 132
     5ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     5f2:	ec eb       	ldi	r30, 0xBC	; 188
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	88 23       	and	r24, r24
     5fa:	ec f7       	brge	.-6      	; 0x5f6 <_ZN9I2C_328pb4sendEi+0xe>
	}

	return 1;
*/

}
     5fc:	08 95       	ret

000005fe <_ZN9I2C_328pb13get_next_byteEv>:

void I2C_328pb::get_next_byte(){


	TWCR0 = ( (1 << TWEN) | (1 << TWINT) | (1 << TWEA));
     5fe:	84 ec       	ldi	r24, 0xC4	; 196
     600:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while (! (TWCR0 & (1 << TWINT)) );
     604:	ec eb       	ldi	r30, 0xBC	; 188
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	88 23       	and	r24, r24
     60c:	ec f7       	brge	.-6      	; 0x608 <_ZN9I2C_328pb13get_next_byteEv+0xa>
	return 1;

*/


}
     60e:	08 95       	ret

00000610 <_ZN9I2C_328pb13end_data_readEv>:

void I2C_328pb::end_data_read(){


	TWCR0 = ( (1 << TWEN) | (1 << TWINT) );
     610:	84 e8       	ldi	r24, 0x84	; 132
     612:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while (! (TWCR0 & (1 << TWINT)) );
     616:	ec eb       	ldi	r30, 0xBC	; 188
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	88 23       	and	r24, r24
     61e:	ec f7       	brge	.-6      	; 0x61a <_ZN9I2C_328pb13end_data_readEv+0xa>


}
     620:	08 95       	ret

00000622 <_ZN9I2C_328pb4stopEv>:

void I2C_328pb::stop(){


	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) ); 
     622:	ec eb       	ldi	r30, 0xBC	; 188
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	80 81       	ld	r24, Z
     628:	84 69       	ori	r24, 0x94	; 148
     62a:	80 83       	st	Z, r24
     62c:	08 95       	ret

0000062e <_ZN10initialize10interruptsEv>:


void initialize::interrupts(){

	// external int 0
	EIMSK |= (1 << INT0); // enable the int0 interrupt												
     62e:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC00);	// will fire at any logical change
     630:	e9 e6       	ldi	r30, 0x69	; 105
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	80 81       	ld	r24, Z
     636:	81 60       	ori	r24, 0x01	; 1
     638:	80 83       	st	Z, r24

	// external int 1
	EIMSK |= (1 << INT1); // enable the int0 interrupt
     63a:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= (1 << ISC10);	// will fire at any logical change
     63c:	80 81       	ld	r24, Z
     63e:	84 60       	ori	r24, 0x04	; 4
     640:	80 83       	st	Z, r24

	// pcint 1 (for pin C3)
	PCICR |= (1 << PCIE1);
     642:	e8 e6       	ldi	r30, 0x68	; 104
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	80 81       	ld	r24, Z
     648:	82 60       	ori	r24, 0x02	; 2
     64a:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);
     64c:	ac e6       	ldi	r26, 0x6C	; 108
     64e:	b0 e0       	ldi	r27, 0x00	; 0
     650:	8c 91       	ld	r24, X
     652:	88 60       	ori	r24, 0x08	; 8
     654:	8c 93       	st	X, r24

	//pcint 2 (for pin B1)
	PCICR |= (1 << PCIE2);
     656:	80 81       	ld	r24, Z
     658:	84 60       	ori	r24, 0x04	; 4
     65a:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT17);
     65c:	ed e6       	ldi	r30, 0x6D	; 109
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	82 60       	ori	r24, 0x02	; 2
     664:	80 83       	st	Z, r24
     666:	08 95       	ret

00000668 <_ZN10initialize6timersEv>:
}

void initialize::timers(){

	// by default the timer is set to normal mode
	TCCR1B |= ( (1 << CS10));	// timer will run without prescaler and willoverrun 15 times/second on a 1MHz clock
     668:	e1 e8       	ldi	r30, 0x81	; 129
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	81 60       	ori	r24, 0x01	; 1
     670:	80 83       	st	Z, r24
     672:	08 95       	ret

00000674 <_ZN3PIDC1Ev>:
#include "PID.h"



PID::PID(){
     674:	fc 01       	movw	r30, r24

    last_error = 0;
     676:	14 82       	std	Z+4, r1	; 0x04
     678:	15 82       	std	Z+5, r1	; 0x05
     67a:	16 82       	std	Z+6, r1	; 0x06
     67c:	17 82       	std	Z+7, r1	; 0x07
	current_error = 0;
     67e:	10 82       	st	Z, r1
     680:	11 82       	std	Z+1, r1	; 0x01
     682:	12 82       	std	Z+2, r1	; 0x02
     684:	13 82       	std	Z+3, r1	; 0x03
    last_output = 0;
     686:	14 86       	std	Z+12, r1	; 0x0c
     688:	15 86       	std	Z+13, r1	; 0x0d
     68a:	16 86       	std	Z+14, r1	; 0x0e
     68c:	17 86       	std	Z+15, r1	; 0x0f
    integral = 0;
     68e:	10 a2       	std	Z+32, r1	; 0x20
     690:	11 a2       	std	Z+33, r1	; 0x21
     692:	12 a2       	std	Z+34, r1	; 0x22
     694:	13 a2       	std	Z+35, r1	; 0x23
     696:	08 95       	ret

00000698 <_ZN3PID10setWeightsERKfS1_S1_>:
        
// initialisation of this satic array		
int PID::motor[4] = {0};


void PID::setWeights(const float &Kp, const float &Ki, const float &Kd) {
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	fc 01       	movw	r30, r24
	this->Kp = Kp;
     69e:	eb 01       	movw	r28, r22
     6a0:	88 81       	ld	r24, Y
     6a2:	99 81       	ldd	r25, Y+1	; 0x01
     6a4:	aa 81       	ldd	r26, Y+2	; 0x02
     6a6:	bb 81       	ldd	r27, Y+3	; 0x03
     6a8:	84 8b       	std	Z+20, r24	; 0x14
     6aa:	95 8b       	std	Z+21, r25	; 0x15
     6ac:	a6 8b       	std	Z+22, r26	; 0x16
     6ae:	b7 8b       	std	Z+23, r27	; 0x17
	this->Ki = Ki;
     6b0:	ea 01       	movw	r28, r20
     6b2:	88 81       	ld	r24, Y
     6b4:	99 81       	ldd	r25, Y+1	; 0x01
     6b6:	aa 81       	ldd	r26, Y+2	; 0x02
     6b8:	bb 81       	ldd	r27, Y+3	; 0x03
     6ba:	80 8f       	std	Z+24, r24	; 0x18
     6bc:	91 8f       	std	Z+25, r25	; 0x19
     6be:	a2 8f       	std	Z+26, r26	; 0x1a
     6c0:	b3 8f       	std	Z+27, r27	; 0x1b
	this->Kd = Kd;
     6c2:	e9 01       	movw	r28, r18
     6c4:	88 81       	ld	r24, Y
     6c6:	99 81       	ldd	r25, Y+1	; 0x01
     6c8:	aa 81       	ldd	r26, Y+2	; 0x02
     6ca:	bb 81       	ldd	r27, Y+3	; 0x03
     6cc:	84 8f       	std	Z+28, r24	; 0x1c
     6ce:	95 8f       	std	Z+29, r25	; 0x1d
     6d0:	a6 8f       	std	Z+30, r26	; 0x1e
     6d2:	b7 8f       	std	Z+31, r27	; 0x1f
}
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <_ZN3PID19setOutputLowerLimitERKf>:
void PID::setErrorThreshold(const float &error_threshold) {
	this->error_threshold = error_threshold;
}
*/
void PID::setOutputLowerLimit(const float &output_lower_limit) {
	this->output_lower_limit = output_lower_limit;
     6da:	fb 01       	movw	r30, r22
     6dc:	40 81       	ld	r20, Z
     6de:	51 81       	ldd	r21, Z+1	; 0x01
     6e0:	62 81       	ldd	r22, Z+2	; 0x02
     6e2:	73 81       	ldd	r23, Z+3	; 0x03
     6e4:	fc 01       	movw	r30, r24
     6e6:	40 ab       	std	Z+48, r20	; 0x30
     6e8:	51 ab       	std	Z+49, r21	; 0x31
     6ea:	62 ab       	std	Z+50, r22	; 0x32
     6ec:	73 ab       	std	Z+51, r23	; 0x33
     6ee:	08 95       	ret

000006f0 <_ZN3PID19setOutputUpperLimitERKf>:
}

void PID::setOutputUpperLimit(const float &output_upper_limit) {
	this->output_upper_limit = output_upper_limit;
     6f0:	fb 01       	movw	r30, r22
     6f2:	40 81       	ld	r20, Z
     6f4:	51 81       	ldd	r21, Z+1	; 0x01
     6f6:	62 81       	ldd	r22, Z+2	; 0x02
     6f8:	73 81       	ldd	r23, Z+3	; 0x03
     6fa:	fc 01       	movw	r30, r24
     6fc:	44 a7       	std	Z+44, r20	; 0x2c
     6fe:	55 a7       	std	Z+45, r21	; 0x2d
     700:	66 a7       	std	Z+46, r22	; 0x2e
     702:	77 a7       	std	Z+47, r23	; 0x2f
     704:	08 95       	ret

00000706 <_ZN3PID15setDesiredPointERKf>:
}

void PID::setDesiredPoint(const float &desired_point) {
	set_point = desired_point;
     706:	fb 01       	movw	r30, r22
     708:	40 81       	ld	r20, Z
     70a:	51 81       	ldd	r21, Z+1	; 0x01
     70c:	62 81       	ldd	r22, Z+2	; 0x02
     70e:	73 81       	ldd	r23, Z+3	; 0x03
     710:	fc 01       	movw	r30, r24
     712:	40 8b       	std	Z+16, r20	; 0x10
     714:	51 8b       	std	Z+17, r21	; 0x11
     716:	62 8b       	std	Z+18, r22	; 0x12
     718:	73 8b       	std	Z+19, r23	; 0x13
     71a:	08 95       	ret

0000071c <_ZN3PID11update_timeEv>:
}




void PID::update_time(){ 
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	00 d0       	rcall	.+0      	; 0x72a <_ZN3PID11update_timeEv+0xe>
     72a:	00 d0       	rcall	.+0      	; 0x72c <_ZN3PID11update_timeEv+0x10>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	8c 01       	movw	r16, r24

		
	uint16_t time = TCNT1;
     732:	e4 e8       	ldi	r30, 0x84	; 132
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	e0 80       	ld	r14, Z
     738:	f1 80       	ldd	r15, Z+1	; 0x01
	
	volatile float result;
	

	if (TCNT1 < time_of_previous_scan){
     73a:	20 81       	ld	r18, Z
     73c:	31 81       	ldd	r19, Z+1	; 0x01
     73e:	fc 01       	movw	r30, r24
     740:	80 ad       	ldd	r24, Z+56	; 0x38
     742:	91 ad       	ldd	r25, Z+57	; 0x39
     744:	28 17       	cp	r18, r24
     746:	39 07       	cpc	r19, r25
     748:	70 f4       	brcc	.+28     	; 0x766 <_ZN3PID11update_timeEv+0x4a>

		result = 0xffff - time_of_previous_scan + time ;
     74a:	b7 01       	movw	r22, r14
     74c:	61 50       	subi	r22, 0x01	; 1
     74e:	71 09       	sbc	r23, r1
     750:	68 1b       	sub	r22, r24
     752:	79 0b       	sbc	r23, r25
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 86 0c 	call	0x190c	; 0x190c <__floatunsisf>
     75c:	69 83       	std	Y+1, r22	; 0x01
     75e:	7a 83       	std	Y+2, r23	; 0x02
     760:	8b 83       	std	Y+3, r24	; 0x03
     762:	9c 83       	std	Y+4, r25	; 0x04
     764:	0b c0       	rjmp	.+22     	; 0x77c <_ZN3PID11update_timeEv+0x60>

	}

	else{

		result = time - time_of_previous_scan;
     766:	b7 01       	movw	r22, r14
     768:	68 1b       	sub	r22, r24
     76a:	79 0b       	sbc	r23, r25
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 86 0c 	call	0x190c	; 0x190c <__floatunsisf>
     774:	69 83       	std	Y+1, r22	; 0x01
     776:	7a 83       	std	Y+2, r23	; 0x02
     778:	8b 83       	std	Y+3, r24	; 0x03
     77a:	9c 83       	std	Y+4, r25	; 0x04
	}


	result /= (float)TIMER_BIT_RATE;
     77c:	69 81       	ldd	r22, Y+1	; 0x01
     77e:	7a 81       	ldd	r23, Y+2	; 0x02
     780:	8b 81       	ldd	r24, Y+3	; 0x03
     782:	9c 81       	ldd	r25, Y+4	; 0x04
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	34 e2       	ldi	r19, 0x24	; 36
     788:	44 e7       	ldi	r20, 0x74	; 116
     78a:	59 e4       	ldi	r21, 0x49	; 73
     78c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__divsf3>
     790:	69 83       	std	Y+1, r22	; 0x01
     792:	7a 83       	std	Y+2, r23	; 0x02
     794:	8b 83       	std	Y+3, r24	; 0x03
     796:	9c 83       	std	Y+4, r25	; 0x04

	time_of_previous_scan = time;
     798:	f8 01       	movw	r30, r16
     79a:	f1 ae       	std	Z+57, r15	; 0x39
     79c:	e0 ae       	std	Z+56, r14	; 0x38

	time_elapsed = result;
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	9a 81       	ldd	r25, Y+2	; 0x02
     7a2:	ab 81       	ldd	r26, Y+3	; 0x03
     7a4:	bc 81       	ldd	r27, Y+4	; 0x04
     7a6:	84 ab       	std	Z+52, r24	; 0x34
     7a8:	95 ab       	std	Z+53, r25	; 0x35
     7aa:	a6 ab       	std	Z+54, r26	; 0x36
     7ac:	b7 ab       	std	Z+55, r27	; 0x37
	
	
}
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	1f 91       	pop	r17
     7bc:	0f 91       	pop	r16
     7be:	ff 90       	pop	r15
     7c0:	ef 90       	pop	r14
     7c2:	08 95       	ret

000007c4 <_ZN3PID7refreshERKf>:

void PID::setDesiredPoint(const float &desired_point) {
	set_point = desired_point;
}

float PID::refresh(const float &feedback_input) {
     7c4:	4f 92       	push	r4
     7c6:	5f 92       	push	r5
     7c8:	6f 92       	push	r6
     7ca:	7f 92       	push	r7
     7cc:	8f 92       	push	r8
     7ce:	9f 92       	push	r9
     7d0:	af 92       	push	r10
     7d2:	bf 92       	push	r11
     7d4:	cf 92       	push	r12
     7d6:	df 92       	push	r13
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <_ZN3PID7refreshERKf+0x1e>
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <_ZN3PID7refreshERKf+0x20>
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <_ZN3PID7refreshERKf+0x22>
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	9e 83       	std	Y+6, r25	; 0x06
     7ec:	8d 83       	std	Y+5, r24	; 0x05
     7ee:	7b 01       	movw	r14, r22

	update_time();	// get the time for integral and derivative purposes
     7f0:	0e 94 8e 03 	call	0x71c	; 0x71c <_ZN3PID11update_timeEv>



	// if any of the inputs are entirely unreasonable, nothing gets updated and the previous output is kept
	// effectively throws away an entire cycle of the main loop
	if ((fabs(set_point) > 100) || (fabs(feedback_input) > 100)){
     7f4:	ed 81       	ldd	r30, Y+5	; 0x05
     7f6:	fe 81       	ldd	r31, Y+6	; 0x06
     7f8:	80 88       	ldd	r8, Z+16	; 0x10
     7fa:	91 88       	ldd	r9, Z+17	; 0x11
     7fc:	a2 88       	ldd	r10, Z+18	; 0x12
     7fe:	b3 88       	ldd	r11, Z+19	; 0x13
     800:	c5 01       	movw	r24, r10
     802:	b4 01       	movw	r22, r8
     804:	9f 77       	andi	r25, 0x7F	; 127
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	48 ec       	ldi	r20, 0xC8	; 200
     80c:	52 e4       	ldi	r21, 0x42	; 66
     80e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gesf2>
     812:	18 16       	cp	r1, r24
     814:	84 f0       	brlt	.+32     	; 0x836 <_ZN3PID7refreshERKf+0x72>
     816:	f7 01       	movw	r30, r14
     818:	80 81       	ld	r24, Z
     81a:	91 81       	ldd	r25, Z+1	; 0x01
     81c:	a2 81       	ldd	r26, Z+2	; 0x02
     81e:	b3 81       	ldd	r27, Z+3	; 0x03
     820:	bc 01       	movw	r22, r24
     822:	cd 01       	movw	r24, r26
     824:	9f 77       	andi	r25, 0x7F	; 127
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	48 ec       	ldi	r20, 0xC8	; 200
     82c:	52 e4       	ldi	r21, 0x42	; 66
     82e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gesf2>
     832:	18 16       	cp	r1, r24
     834:	3c f4       	brge	.+14     	; 0x844 <_ZN3PID7refreshERKf+0x80>
		
		return output;
     836:	ed 81       	ldd	r30, Y+5	; 0x05
     838:	fe 81       	ldd	r31, Y+6	; 0x06
     83a:	60 85       	ldd	r22, Z+8	; 0x08
     83c:	71 85       	ldd	r23, Z+9	; 0x09
     83e:	82 85       	ldd	r24, Z+10	; 0x0a
     840:	93 85       	ldd	r25, Z+11	; 0x0b
     842:	d6 c0       	rjmp	.+428    	; 0x9f0 <__stack+0xf1>
	}

	// things are updated	
	last_error = current_error;
     844:	ed 81       	ldd	r30, Y+5	; 0x05
     846:	fe 81       	ldd	r31, Y+6	; 0x06
     848:	40 80       	ld	r4, Z
     84a:	51 80       	ldd	r5, Z+1	; 0x01
     84c:	62 80       	ldd	r6, Z+2	; 0x02
     84e:	73 80       	ldd	r7, Z+3	; 0x03
     850:	44 82       	std	Z+4, r4	; 0x04
     852:	55 82       	std	Z+5, r5	; 0x05
     854:	66 82       	std	Z+6, r6	; 0x06
     856:	77 82       	std	Z+7, r7	; 0x07
	last_output = output;		
     858:	80 85       	ldd	r24, Z+8	; 0x08
     85a:	91 85       	ldd	r25, Z+9	; 0x09
     85c:	a2 85       	ldd	r26, Z+10	; 0x0a
     85e:	b3 85       	ldd	r27, Z+11	; 0x0b
     860:	84 87       	std	Z+12, r24	; 0x0c
     862:	95 87       	std	Z+13, r25	; 0x0d
     864:	a6 87       	std	Z+14, r26	; 0x0e
     866:	b7 87       	std	Z+15, r27	; 0x0f
	current_error = set_point - feedback_input;	
     868:	f7 01       	movw	r30, r14
     86a:	20 81       	ld	r18, Z
     86c:	31 81       	ldd	r19, Z+1	; 0x01
     86e:	42 81       	ldd	r20, Z+2	; 0x02
     870:	53 81       	ldd	r21, Z+3	; 0x03
     872:	c5 01       	movw	r24, r10
     874:	b4 01       	movw	r22, r8
     876:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__subsf3>
     87a:	6b 01       	movw	r12, r22
     87c:	7c 01       	movw	r14, r24
     87e:	ed 81       	ldd	r30, Y+5	; 0x05
     880:	fe 81       	ldd	r31, Y+6	; 0x06
     882:	60 83       	st	Z, r22
     884:	71 83       	std	Z+1, r23	; 0x01
     886:	82 83       	std	Z+2, r24	; 0x02
     888:	93 83       	std	Z+3, r25	; 0x03
	
	
	
	// To orevet corruptig he integral with noise spikes, updates willonly be made if they are reasonable
	if (  fabs((current_error + last_error) * time_elapsed /2.f) < 1 ){
     88a:	84 a8       	ldd	r8, Z+52	; 0x34
     88c:	95 a8       	ldd	r9, Z+53	; 0x35
     88e:	a6 a8       	ldd	r10, Z+54	; 0x36
     890:	b7 a8       	ldd	r11, Z+55	; 0x37
     892:	9b 01       	movw	r18, r22
     894:	ac 01       	movw	r20, r24
     896:	c3 01       	movw	r24, r6
     898:	b2 01       	movw	r22, r4
     89a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__addsf3>
     89e:	a5 01       	movw	r20, r10
     8a0:	94 01       	movw	r18, r8
     8a2:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	5f e3       	ldi	r21, 0x3F	; 63
     8ae:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
     8b2:	69 83       	std	Y+1, r22	; 0x01
     8b4:	7a 83       	std	Y+2, r23	; 0x02
     8b6:	8b 83       	std	Y+3, r24	; 0x03
     8b8:	9c 83       	std	Y+4, r25	; 0x04
     8ba:	9f 77       	andi	r25, 0x7F	; 127
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	40 e8       	ldi	r20, 0x80	; 128
     8c2:	5f e3       	ldi	r21, 0x3F	; 63
     8c4:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__cmpsf2>
     8c8:	88 23       	and	r24, r24
     8ca:	94 f4       	brge	.+36     	; 0x8f0 <_ZN3PID7refreshERKf+0x12c>
		
		integral += (current_error + last_error) * time_elapsed /2.f;
     8cc:	29 81       	ldd	r18, Y+1	; 0x01
     8ce:	3a 81       	ldd	r19, Y+2	; 0x02
     8d0:	4b 81       	ldd	r20, Y+3	; 0x03
     8d2:	5c 81       	ldd	r21, Y+4	; 0x04
     8d4:	ed 81       	ldd	r30, Y+5	; 0x05
     8d6:	fe 81       	ldd	r31, Y+6	; 0x06
     8d8:	60 a1       	ldd	r22, Z+32	; 0x20
     8da:	71 a1       	ldd	r23, Z+33	; 0x21
     8dc:	82 a1       	ldd	r24, Z+34	; 0x22
     8de:	93 a1       	ldd	r25, Z+35	; 0x23
     8e0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__addsf3>
     8e4:	ed 81       	ldd	r30, Y+5	; 0x05
     8e6:	fe 81       	ldd	r31, Y+6	; 0x06
     8e8:	60 a3       	std	Z+32, r22	; 0x20
     8ea:	71 a3       	std	Z+33, r23	; 0x21
     8ec:	82 a3       	std	Z+34, r24	; 0x22
     8ee:	93 a3       	std	Z+35, r25	; 0x23
	}
	
	
	// Same with the derivative
	if ( fabs((current_error-last_error)/time_elapsed) < 20 ){
     8f0:	a3 01       	movw	r20, r6
     8f2:	92 01       	movw	r18, r4
     8f4:	c7 01       	movw	r24, r14
     8f6:	b6 01       	movw	r22, r12
     8f8:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__subsf3>
     8fc:	a5 01       	movw	r20, r10
     8fe:	94 01       	movw	r18, r8
     900:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__divsf3>
     904:	4b 01       	movw	r8, r22
     906:	5c 01       	movw	r10, r24
     908:	9f 77       	andi	r25, 0x7F	; 127
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 ea       	ldi	r20, 0xA0	; 160
     910:	51 e4       	ldi	r21, 0x41	; 65
     912:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__cmpsf2>
     916:	88 23       	and	r24, r24
     918:	34 f4       	brge	.+12     	; 0x926 <__stack+0x27>
		
		derivative = (current_error-last_error)/time_elapsed;
     91a:	ed 81       	ldd	r30, Y+5	; 0x05
     91c:	fe 81       	ldd	r31, Y+6	; 0x06
     91e:	84 a2       	std	Z+36, r8	; 0x24
     920:	95 a2       	std	Z+37, r9	; 0x25
     922:	a6 a2       	std	Z+38, r10	; 0x26
     924:	b7 a2       	std	Z+39, r11	; 0x27
	}
	
	
	// calculate the new output
	output = Kp*current_error + Ki*integral + Kd* derivative;
     926:	ed 81       	ldd	r30, Y+5	; 0x05
     928:	fe 81       	ldd	r31, Y+6	; 0x06
     92a:	20 a1       	ldd	r18, Z+32	; 0x20
     92c:	31 a1       	ldd	r19, Z+33	; 0x21
     92e:	42 a1       	ldd	r20, Z+34	; 0x22
     930:	53 a1       	ldd	r21, Z+35	; 0x23
     932:	60 8d       	ldd	r22, Z+24	; 0x18
     934:	71 8d       	ldd	r23, Z+25	; 0x19
     936:	82 8d       	ldd	r24, Z+26	; 0x1a
     938:	93 8d       	ldd	r25, Z+27	; 0x1b
     93a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
     93e:	4b 01       	movw	r8, r22
     940:	5c 01       	movw	r10, r24
     942:	ed 81       	ldd	r30, Y+5	; 0x05
     944:	fe 81       	ldd	r31, Y+6	; 0x06
     946:	24 89       	ldd	r18, Z+20	; 0x14
     948:	35 89       	ldd	r19, Z+21	; 0x15
     94a:	46 89       	ldd	r20, Z+22	; 0x16
     94c:	57 89       	ldd	r21, Z+23	; 0x17
     94e:	c7 01       	movw	r24, r14
     950:	b6 01       	movw	r22, r12
     952:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
     956:	9b 01       	movw	r18, r22
     958:	ac 01       	movw	r20, r24
     95a:	c5 01       	movw	r24, r10
     95c:	b4 01       	movw	r22, r8
     95e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__addsf3>
     962:	6b 01       	movw	r12, r22
     964:	7c 01       	movw	r14, r24
     966:	ed 81       	ldd	r30, Y+5	; 0x05
     968:	fe 81       	ldd	r31, Y+6	; 0x06
     96a:	24 a1       	ldd	r18, Z+36	; 0x24
     96c:	35 a1       	ldd	r19, Z+37	; 0x25
     96e:	46 a1       	ldd	r20, Z+38	; 0x26
     970:	57 a1       	ldd	r21, Z+39	; 0x27
     972:	64 8d       	ldd	r22, Z+28	; 0x1c
     974:	75 8d       	ldd	r23, Z+29	; 0x1d
     976:	86 8d       	ldd	r24, Z+30	; 0x1e
     978:	97 8d       	ldd	r25, Z+31	; 0x1f
     97a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
     97e:	9b 01       	movw	r18, r22
     980:	ac 01       	movw	r20, r24
     982:	c7 01       	movw	r24, r14
     984:	b6 01       	movw	r22, r12
     986:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__addsf3>
     98a:	6b 01       	movw	r12, r22
     98c:	7c 01       	movw	r14, r24
     98e:	ed 81       	ldd	r30, Y+5	; 0x05
     990:	fe 81       	ldd	r31, Y+6	; 0x06
     992:	60 87       	std	Z+8, r22	; 0x08
     994:	71 87       	std	Z+9, r23	; 0x09
     996:	82 87       	std	Z+10, r24	; 0x0a
     998:	93 87       	std	Z+11, r25	; 0x0b


	// check wether output is maxed in either direction
	if (output < output_lower_limit){
     99a:	80 a8       	ldd	r8, Z+48	; 0x30
     99c:	91 a8       	ldd	r9, Z+49	; 0x31
     99e:	a2 a8       	ldd	r10, Z+50	; 0x32
     9a0:	b3 a8       	ldd	r11, Z+51	; 0x33
     9a2:	a5 01       	movw	r20, r10
     9a4:	94 01       	movw	r18, r8
     9a6:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__cmpsf2>
     9aa:	88 23       	and	r24, r24
     9ac:	3c f4       	brge	.+14     	; 0x9bc <__stack+0xbd>
		
		output = output_lower_limit;
     9ae:	ed 81       	ldd	r30, Y+5	; 0x05
     9b0:	fe 81       	ldd	r31, Y+6	; 0x06
     9b2:	80 86       	std	Z+8, r8	; 0x08
     9b4:	91 86       	std	Z+9, r9	; 0x09
     9b6:	a2 86       	std	Z+10, r10	; 0x0a
     9b8:	b3 86       	std	Z+11, r11	; 0x0b
     9ba:	14 c0       	rjmp	.+40     	; 0x9e4 <__stack+0xe5>
	}
	
	else if (output > output_upper_limit){
     9bc:	ed 81       	ldd	r30, Y+5	; 0x05
     9be:	fe 81       	ldd	r31, Y+6	; 0x06
     9c0:	84 a4       	ldd	r8, Z+44	; 0x2c
     9c2:	95 a4       	ldd	r9, Z+45	; 0x2d
     9c4:	a6 a4       	ldd	r10, Z+46	; 0x2e
     9c6:	b7 a4       	ldd	r11, Z+47	; 0x2f
     9c8:	a5 01       	movw	r20, r10
     9ca:	94 01       	movw	r18, r8
     9cc:	c7 01       	movw	r24, r14
     9ce:	b6 01       	movw	r22, r12
     9d0:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gesf2>
     9d4:	18 16       	cp	r1, r24
     9d6:	34 f4       	brge	.+12     	; 0x9e4 <__stack+0xe5>
		
		output = output_upper_limit;
     9d8:	ed 81       	ldd	r30, Y+5	; 0x05
     9da:	fe 81       	ldd	r31, Y+6	; 0x06
     9dc:	80 86       	std	Z+8, r8	; 0x08
     9de:	91 86       	std	Z+9, r9	; 0x09
     9e0:	a2 86       	std	Z+10, r10	; 0x0a
     9e2:	b3 86       	std	Z+11, r11	; 0x0b
	}
	
			
	return output;
     9e4:	ed 81       	ldd	r30, Y+5	; 0x05
     9e6:	fe 81       	ldd	r31, Y+6	; 0x06
     9e8:	60 85       	ldd	r22, Z+8	; 0x08
     9ea:	71 85       	ldd	r23, Z+9	; 0x09
     9ec:	82 85       	ldd	r24, Z+10	; 0x0a
     9ee:	93 85       	ldd	r25, Z+11	; 0x0b
}
     9f0:	26 96       	adiw	r28, 0x06	; 6
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	de bf       	out	0x3e, r29	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	cd bf       	out	0x3d, r28	; 61
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	bf 90       	pop	r11
     a0a:	af 90       	pop	r10
     a0c:	9f 90       	pop	r9
     a0e:	8f 90       	pop	r8
     a10:	7f 90       	pop	r7
     a12:	6f 90       	pop	r6
     a14:	5f 90       	pop	r5
     a16:	4f 90       	pop	r4
     a18:	08 95       	ret

00000a1a <_ZN3PID12combine_dataEfff>:
	
}



void PID::combine_data(float bank_percentage, float pitch_percentage, float throttle_percentage){
     a1a:	4f 92       	push	r4
     a1c:	5f 92       	push	r5
     a1e:	6f 92       	push	r6
     a20:	7f 92       	push	r7
     a22:	8f 92       	push	r8
     a24:	9f 92       	push	r9
     a26:	af 92       	push	r10
     a28:	bf 92       	push	r11
     a2a:	cf 92       	push	r12
     a2c:	df 92       	push	r13
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	4b 01       	movw	r8, r22
     a3c:	5c 01       	movw	r10, r24
     a3e:	29 01       	movw	r4, r18
     a40:	3a 01       	movw	r6, r20
     a42:	67 01       	movw	r12, r14
     a44:	78 01       	movw	r14, r16
	motor[2] = (int) (-bank_percentage + pitch_percentage) * throttle_percentage / 200;
	motor[3] = (int) (-bank_percentage - pitch_percentage) * throttle_percentage / 200;
	
	
	// numbers were in the range [-50, 50], this effectively turns them into a percentage
	motor[0] += 50;
     a46:	c0 e1       	ldi	r28, 0x10	; 16
     a48:	d1 e0       	ldi	r29, 0x01	; 1
     a4a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__addsf3>
     a4e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fixsfsi>
     a52:	07 2e       	mov	r0, r23
     a54:	00 0c       	add	r0, r0
     a56:	88 0b       	sbc	r24, r24
     a58:	99 0b       	sbc	r25, r25
     a5a:	0e 94 88 0c 	call	0x1910	; 0x1910 <__floatsisf>
     a5e:	a7 01       	movw	r20, r14
     a60:	96 01       	movw	r18, r12
     a62:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	48 e4       	ldi	r20, 0x48	; 72
     a6c:	53 e4       	ldi	r21, 0x43	; 67
     a6e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__divsf3>
     a72:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fixsfsi>
     a76:	6e 5c       	subi	r22, 0xCE	; 206
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	79 83       	std	Y+1, r23	; 0x01
     a7c:	68 83       	st	Y, r22
	motor[1] += 50;
     a7e:	a3 01       	movw	r20, r6
     a80:	92 01       	movw	r18, r4
     a82:	c5 01       	movw	r24, r10
     a84:	b4 01       	movw	r22, r8
     a86:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__subsf3>
     a8a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fixsfsi>
     a8e:	07 2e       	mov	r0, r23
     a90:	00 0c       	add	r0, r0
     a92:	88 0b       	sbc	r24, r24
     a94:	99 0b       	sbc	r25, r25
     a96:	0e 94 88 0c 	call	0x1910	; 0x1910 <__floatsisf>
     a9a:	a7 01       	movw	r20, r14
     a9c:	96 01       	movw	r18, r12
     a9e:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	48 e4       	ldi	r20, 0x48	; 72
     aa8:	53 e4       	ldi	r21, 0x43	; 67
     aaa:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__divsf3>
     aae:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fixsfsi>
     ab2:	6e 5c       	subi	r22, 0xCE	; 206
     ab4:	7f 4f       	sbci	r23, 0xFF	; 255
     ab6:	7b 83       	std	Y+3, r23	; 0x03
     ab8:	6a 83       	std	Y+2, r22	; 0x02
	motor[2] += 50;
     aba:	a5 01       	movw	r20, r10
     abc:	94 01       	movw	r18, r8
     abe:	c3 01       	movw	r24, r6
     ac0:	b2 01       	movw	r22, r4
     ac2:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__subsf3>
     ac6:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fixsfsi>
     aca:	07 2e       	mov	r0, r23
     acc:	00 0c       	add	r0, r0
     ace:	88 0b       	sbc	r24, r24
     ad0:	99 0b       	sbc	r25, r25
     ad2:	0e 94 88 0c 	call	0x1910	; 0x1910 <__floatsisf>
     ad6:	a7 01       	movw	r20, r14
     ad8:	96 01       	movw	r18, r12
     ada:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	48 e4       	ldi	r20, 0x48	; 72
     ae4:	53 e4       	ldi	r21, 0x43	; 67
     ae6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__divsf3>
     aea:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fixsfsi>
     aee:	6e 5c       	subi	r22, 0xCE	; 206
     af0:	7f 4f       	sbci	r23, 0xFF	; 255
     af2:	7d 83       	std	Y+5, r23	; 0x05
     af4:	6c 83       	std	Y+4, r22	; 0x04
	motor[3] += 50;
     af6:	c5 01       	movw	r24, r10
     af8:	b4 01       	movw	r22, r8
     afa:	90 58       	subi	r25, 0x80	; 128
     afc:	a3 01       	movw	r20, r6
     afe:	92 01       	movw	r18, r4
     b00:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__subsf3>
     b04:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fixsfsi>
     b08:	07 2e       	mov	r0, r23
     b0a:	00 0c       	add	r0, r0
     b0c:	88 0b       	sbc	r24, r24
     b0e:	99 0b       	sbc	r25, r25
     b10:	0e 94 88 0c 	call	0x1910	; 0x1910 <__floatsisf>
     b14:	a7 01       	movw	r20, r14
     b16:	96 01       	movw	r18, r12
     b18:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	48 e4       	ldi	r20, 0x48	; 72
     b22:	53 e4       	ldi	r21, 0x43	; 67
     b24:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__divsf3>
     b28:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fixsfsi>
     b2c:	6e 5c       	subi	r22, 0xCE	; 206
     b2e:	7f 4f       	sbci	r23, 0xFF	; 255
     b30:	7f 83       	std	Y+7, r23	; 0x07
     b32:	6e 83       	std	Y+6, r22	; 0x06
	

}
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	df 90       	pop	r13
     b42:	cf 90       	pop	r12
     b44:	bf 90       	pop	r11
     b46:	af 90       	pop	r10
     b48:	9f 90       	pop	r9
     b4a:	8f 90       	pop	r8
     b4c:	7f 90       	pop	r7
     b4e:	6f 90       	pop	r6
     b50:	5f 90       	pop	r5
     b52:	4f 90       	pop	r4
     b54:	08 95       	ret

00000b56 <_ZN18pilot_instructions13set_max_angleEh>:


uint8_t pilot_instructions::get_throttle_power() const{

	return throttle_power;
}
     b56:	fc 01       	movw	r30, r24
     b58:	60 83       	st	Z, r22
     b5a:	08 95       	ret

00000b5c <_ZN18pilot_instructions16set_max_yaw_rateEh>:
     b5c:	fc 01       	movw	r30, r24
     b5e:	61 83       	std	Z+1, r22	; 0x01
     b60:	08 95       	ret

00000b62 <_ZNK18pilot_instructions14get_bank_angleEv>:
     b62:	fc 01       	movw	r30, r24
     b64:	82 81       	ldd	r24, Z+2	; 0x02
     b66:	93 81       	ldd	r25, Z+3	; 0x03
     b68:	08 95       	ret

00000b6a <_ZNK18pilot_instructions15get_pitch_angleEv>:
     b6a:	fc 01       	movw	r30, r24
     b6c:	84 81       	ldd	r24, Z+4	; 0x04
     b6e:	95 81       	ldd	r25, Z+5	; 0x05
     b70:	08 95       	ret

00000b72 <_ZN18pilot_instructions7computeEv>:



void pilot_instructions::compute(void){
     b72:	4f 92       	push	r4
     b74:	5f 92       	push	r5
     b76:	6f 92       	push	r6
     b78:	7f 92       	push	r7
     b7a:	8f 92       	push	r8
     b7c:	9f 92       	push	r9
     b7e:	af 92       	push	r10
     b80:	bf 92       	push	r11
     b82:	ef 92       	push	r14
     b84:	ff 92       	push	r15
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	2c 97       	sbiw	r28, 0x0c	; 12
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	7c 01       	movw	r14, r24
	extern volatile uint16_t requested_elevator_pos;
	extern volatile uint16_t requested_rudder_pos;
	extern volatile uint16_t requested_throttle_pos;

	// so the math doesent get fucked up, stop interrupts dring this process
	cli();
     ba0:	f8 94       	cli

	// Some of the time the data provided by the interrupts is the low period of the pwm
	// In this case, it needs to be substracted from the total period to get the 
	// I was having some problems comparing 16 bit numbers, so until further notice, i compare only their high byte.

	if ( *((uint8_t*)&(requested_aileron_pos)+1) > 0x9){
     ba2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <requested_aileron_pos+0x1>
     ba6:	8a 30       	cpi	r24, 0x0A	; 10
     ba8:	50 f0       	brcs	.+20     	; 0xbbe <_ZN18pilot_instructions7computeEv+0x4c>
			
		requested_aileron_pos = 0xffff - requested_aileron_pos;
     baa:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <requested_aileron_pos>
     bae:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <requested_aileron_pos+0x1>
     bb2:	80 95       	com	r24
     bb4:	90 95       	com	r25
     bb6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <requested_aileron_pos+0x1>
     bba:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <requested_aileron_pos>
	}

	if ( *((uint8_t*)&(requested_elevator_pos)+1) > 0x9 ){
     bbe:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <requested_elevator_pos+0x1>
     bc2:	8a 30       	cpi	r24, 0x0A	; 10
     bc4:	50 f0       	brcs	.+20     	; 0xbda <_ZN18pilot_instructions7computeEv+0x68>
			
		requested_elevator_pos = 0xffff - requested_elevator_pos;
     bc6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <requested_elevator_pos>
     bca:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <requested_elevator_pos+0x1>
     bce:	80 95       	com	r24
     bd0:	90 95       	com	r25
     bd2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <requested_elevator_pos+0x1>
     bd6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <requested_elevator_pos>
	}

	if ( *((uint8_t*)&(requested_rudder_pos)+1) > 0x9 ){
     bda:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <requested_rudder_pos+0x1>
     bde:	8a 30       	cpi	r24, 0x0A	; 10
     be0:	50 f0       	brcs	.+20     	; 0xbf6 <_ZN18pilot_instructions7computeEv+0x84>
			
		requested_rudder_pos = 0xffff - requested_rudder_pos;
     be2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <requested_rudder_pos>
     be6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <requested_rudder_pos+0x1>
     bea:	80 95       	com	r24
     bec:	90 95       	com	r25
     bee:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <requested_rudder_pos+0x1>
     bf2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <requested_rudder_pos>
	}

	if ( *((uint8_t*)&(requested_throttle_pos)+1) > 0x9){
     bf6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <requested_throttle_pos+0x1>
     bfa:	8a 30       	cpi	r24, 0x0A	; 10
     bfc:	50 f0       	brcs	.+20     	; 0xc12 <_ZN18pilot_instructions7computeEv+0xa0>
			
		requested_throttle_pos = 0xffff - requested_throttle_pos;
     bfe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <requested_throttle_pos>
     c02:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <requested_throttle_pos+0x1>
     c06:	80 95       	com	r24
     c08:	90 95       	com	r25
     c0a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <requested_throttle_pos+0x1>
     c0e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <requested_throttle_pos>





	throttle_power = ((requested_throttle_pos - 1015) / 8);	// computes the percentage of the max the pilot wants
     c12:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <requested_throttle_pos>
     c16:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <requested_throttle_pos+0x1>
     c1a:	87 5f       	subi	r24, 0xF7	; 247
     c1c:	93 40       	sbci	r25, 0x03	; 3
     c1e:	96 95       	lsr	r25
     c20:	87 95       	ror	r24
     c22:	96 95       	lsr	r25
     c24:	87 95       	ror	r24
     c26:	96 95       	lsr	r25
     c28:	87 95       	ror	r24
     c2a:	f7 01       	movw	r30, r14
     c2c:	80 87       	std	Z+8, r24	; 0x08
	
	//Until physical testing, yaw rate controll is disabled
	//yaw_rate = ( requested_rudder_pos / 6553 ) * max_yaw_rate;	// computes the percentage of the max the pilot wants
	
	
	volatile float temp_pitch_angle = (requested_elevator_pos - 1110.f);	// computes the percentage of the max the pilot wants
     c2e:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <requested_elevator_pos>
     c32:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <requested_elevator_pos+0x1>
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 86 0c 	call	0x190c	; 0x190c <__floatunsisf>
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 ec       	ldi	r19, 0xC0	; 192
     c42:	4a e8       	ldi	r20, 0x8A	; 138
     c44:	54 e4       	ldi	r21, 0x44	; 68
     c46:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__subsf3>
     c4a:	69 83       	std	Y+1, r22	; 0x01
     c4c:	7a 83       	std	Y+2, r23	; 0x02
     c4e:	8b 83       	std	Y+3, r24	; 0x03
     c50:	9c 83       	std	Y+4, r25	; 0x04
	temp_pitch_angle /= 800;
     c52:	69 81       	ldd	r22, Y+1	; 0x01
     c54:	7a 81       	ldd	r23, Y+2	; 0x02
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	9c 81       	ldd	r25, Y+4	; 0x04
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	48 e4       	ldi	r20, 0x48	; 72
     c60:	54 e4       	ldi	r21, 0x44	; 68
     c62:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__divsf3>
     c66:	69 83       	std	Y+1, r22	; 0x01
     c68:	7a 83       	std	Y+2, r23	; 0x02
     c6a:	8b 83       	std	Y+3, r24	; 0x03
     c6c:	9c 83       	std	Y+4, r25	; 0x04
	temp_pitch_angle *= 2 * max_angle;
     c6e:	f7 01       	movw	r30, r14
     c70:	00 81       	ld	r16, Z
     c72:	10 e0       	ldi	r17, 0x00	; 0
     c74:	b8 01       	movw	r22, r16
     c76:	66 0f       	add	r22, r22
     c78:	77 1f       	adc	r23, r23
     c7a:	07 2e       	mov	r0, r23
     c7c:	00 0c       	add	r0, r0
     c7e:	88 0b       	sbc	r24, r24
     c80:	99 0b       	sbc	r25, r25
     c82:	0e 94 88 0c 	call	0x1910	; 0x1910 <__floatsisf>
     c86:	4b 01       	movw	r8, r22
     c88:	5c 01       	movw	r10, r24
     c8a:	29 81       	ldd	r18, Y+1	; 0x01
     c8c:	3a 81       	ldd	r19, Y+2	; 0x02
     c8e:	4b 81       	ldd	r20, Y+3	; 0x03
     c90:	5c 81       	ldd	r21, Y+4	; 0x04
     c92:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
     c96:	69 83       	std	Y+1, r22	; 0x01
     c98:	7a 83       	std	Y+2, r23	; 0x02
     c9a:	8b 83       	std	Y+3, r24	; 0x03
     c9c:	9c 83       	std	Y+4, r25	; 0x04
	temp_pitch_angle -= max_angle;
     c9e:	49 80       	ldd	r4, Y+1	; 0x01
     ca0:	5a 80       	ldd	r5, Y+2	; 0x02
     ca2:	6b 80       	ldd	r6, Y+3	; 0x03
     ca4:	7c 80       	ldd	r7, Y+4	; 0x04
     ca6:	b8 01       	movw	r22, r16
     ca8:	11 0f       	add	r17, r17
     caa:	88 0b       	sbc	r24, r24
     cac:	99 0b       	sbc	r25, r25
     cae:	0e 94 88 0c 	call	0x1910	; 0x1910 <__floatsisf>
     cb2:	69 87       	std	Y+9, r22	; 0x09
     cb4:	7a 87       	std	Y+10, r23	; 0x0a
     cb6:	8b 87       	std	Y+11, r24	; 0x0b
     cb8:	9c 87       	std	Y+12, r25	; 0x0c
     cba:	9b 01       	movw	r18, r22
     cbc:	ac 01       	movw	r20, r24
     cbe:	c3 01       	movw	r24, r6
     cc0:	b2 01       	movw	r22, r4
     cc2:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__subsf3>
     cc6:	69 83       	std	Y+1, r22	; 0x01
     cc8:	7a 83       	std	Y+2, r23	; 0x02
     cca:	8b 83       	std	Y+3, r24	; 0x03
     ccc:	9c 83       	std	Y+4, r25	; 0x04
	pitch_angle = (int) temp_pitch_angle;
     cce:	69 81       	ldd	r22, Y+1	; 0x01
     cd0:	7a 81       	ldd	r23, Y+2	; 0x02
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	9c 81       	ldd	r25, Y+4	; 0x04
     cd6:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fixsfsi>
     cda:	f7 01       	movw	r30, r14
     cdc:	75 83       	std	Z+5, r23	; 0x05
     cde:	64 83       	std	Z+4, r22	; 0x04
	
	

	volatile float temp_bank_angle = (requested_aileron_pos - 1120);	// computes the percentage of the max the pilot wants
     ce0:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <requested_aileron_pos>
     ce4:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <requested_aileron_pos+0x1>
     ce8:	60 56       	subi	r22, 0x60	; 96
     cea:	74 40       	sbci	r23, 0x04	; 4
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 86 0c 	call	0x190c	; 0x190c <__floatunsisf>
     cf4:	6d 83       	std	Y+5, r22	; 0x05
     cf6:	7e 83       	std	Y+6, r23	; 0x06
     cf8:	8f 83       	std	Y+7, r24	; 0x07
     cfa:	98 87       	std	Y+8, r25	; 0x08
	temp_bank_angle /= 800;
     cfc:	6d 81       	ldd	r22, Y+5	; 0x05
     cfe:	7e 81       	ldd	r23, Y+6	; 0x06
     d00:	8f 81       	ldd	r24, Y+7	; 0x07
     d02:	98 85       	ldd	r25, Y+8	; 0x08
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	48 e4       	ldi	r20, 0x48	; 72
     d0a:	54 e4       	ldi	r21, 0x44	; 68
     d0c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__divsf3>
     d10:	6d 83       	std	Y+5, r22	; 0x05
     d12:	7e 83       	std	Y+6, r23	; 0x06
     d14:	8f 83       	std	Y+7, r24	; 0x07
     d16:	98 87       	std	Y+8, r25	; 0x08
	temp_bank_angle *= 2 * max_angle;
     d18:	2d 81       	ldd	r18, Y+5	; 0x05
     d1a:	3e 81       	ldd	r19, Y+6	; 0x06
     d1c:	4f 81       	ldd	r20, Y+7	; 0x07
     d1e:	58 85       	ldd	r21, Y+8	; 0x08
     d20:	c5 01       	movw	r24, r10
     d22:	b4 01       	movw	r22, r8
     d24:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
     d28:	6d 83       	std	Y+5, r22	; 0x05
     d2a:	7e 83       	std	Y+6, r23	; 0x06
     d2c:	8f 83       	std	Y+7, r24	; 0x07
     d2e:	98 87       	std	Y+8, r25	; 0x08
	temp_bank_angle -= max_angle;
     d30:	6d 81       	ldd	r22, Y+5	; 0x05
     d32:	7e 81       	ldd	r23, Y+6	; 0x06
     d34:	8f 81       	ldd	r24, Y+7	; 0x07
     d36:	98 85       	ldd	r25, Y+8	; 0x08
     d38:	29 85       	ldd	r18, Y+9	; 0x09
     d3a:	3a 85       	ldd	r19, Y+10	; 0x0a
     d3c:	4b 85       	ldd	r20, Y+11	; 0x0b
     d3e:	5c 85       	ldd	r21, Y+12	; 0x0c
     d40:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__subsf3>
     d44:	6d 83       	std	Y+5, r22	; 0x05
     d46:	7e 83       	std	Y+6, r23	; 0x06
     d48:	8f 83       	std	Y+7, r24	; 0x07
     d4a:	98 87       	std	Y+8, r25	; 0x08
	bank_angle = (int) temp_bank_angle + 2;
     d4c:	6d 81       	ldd	r22, Y+5	; 0x05
     d4e:	7e 81       	ldd	r23, Y+6	; 0x06
     d50:	8f 81       	ldd	r24, Y+7	; 0x07
     d52:	98 85       	ldd	r25, Y+8	; 0x08
     d54:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fixsfsi>
     d58:	6e 5f       	subi	r22, 0xFE	; 254
     d5a:	7f 4f       	sbci	r23, 0xFF	; 255
     d5c:	f7 01       	movw	r30, r14
     d5e:	73 83       	std	Z+3, r23	; 0x03
     d60:	62 83       	std	Z+2, r22	; 0x02
	
	sei();
     d62:	78 94       	sei

     d64:	2c 96       	adiw	r28, 0x0c	; 12
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	bf 90       	pop	r11
     d7e:	af 90       	pop	r10
     d80:	9f 90       	pop	r9
     d82:	8f 90       	pop	r8
     d84:	7f 90       	pop	r7
     d86:	6f 90       	pop	r6
     d88:	5f 90       	pop	r5
     d8a:	4f 90       	pop	r4
     d8c:	08 95       	ret

00000d8e <_ZN8pwm_chipC1E9I2C_328pbh>:
#include "pwm_chip.h"



pwm_chip::pwm_chip(I2C_328pb i2c, uint8_t prescaler){
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	1f 92       	push	r1
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	69 83       	std	Y+1, r22	; 0x01
     d9c:	14 2f       	mov	r17, r20
	
	
	DDRB |= (1 << 2);	// set OE to 0;
     d9e:	22 9a       	sbi	0x04, 2	; 4
	//This function sets the auto increment, the prescaler and any other necessary feature required for the pwm chip to run 

	//TWBR0 = (1 << 1); // I'll run the cpu at 1 MHz, this divides the value by 2 for 50 KHZ


	i2c.start();
     da0:	ce 01       	movw	r24, r28
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     da8:	6e e9       	ldi	r22, 0x9E	; 158
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	ce 01       	movw	r24, r28
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x0); // mode register 1
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	ce 01       	movw	r24, r28
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x21); //clock on, autoincrement enable
     dc0:	61 e2       	ldi	r22, 0x21	; 33
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	ce 01       	movw	r24, r28
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
     dcc:	ce 01       	movw	r24, r28
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0x9E);
     dd4:	6e e9       	ldi	r22, 0x9E	; 158
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	ce 01       	movw	r24, r28
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0xFE);	//pre scale register
     de0:	6e ef       	ldi	r22, 0xFE	; 254
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	ce 01       	movw	r24, r28
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN9I2C_328pb8send_regEi>
	i2c.send(prescaler);	//prescaler
     dec:	61 2f       	mov	r22, r17
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	ce 01       	movw	r24, r28
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     df8:	ce 01       	movw	r24, r28
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9I2C_328pb4stopEv>

}
     e00:	0f 90       	pop	r0
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	08 95       	ret

00000e0a <_ZN8pwm_chip13encode_motorsEhPiPh>:

}

void pwm_chip::encode_motors(uint8_t motor, int* motors, uint8_t* instruction){
	
	uint16_t temp = motors[motor]*2;	// the actualslope of this curve is 2.05
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	66 0f       	add	r22, r22
     e0e:	77 1f       	adc	r23, r23
     e10:	fa 01       	movw	r30, r20
     e12:	e6 0f       	add	r30, r22
     e14:	f7 1f       	adc	r31, r23
     e16:	80 81       	ld	r24, Z
     e18:	91 81       	ldd	r25, Z+1	; 0x01
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
	
	temp += 205;	// 205 is the value corresponding to 0 for the esc
     e1e:	83 53       	subi	r24, 0x33	; 51
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
	
	instruction[0] = ( temp & 0xff );	// conserves only the low byte
     e22:	f9 01       	movw	r30, r18
     e24:	80 83       	st	Z, r24
	
	instruction[1] = ( temp >> 8);	// conserves only the high half-byte
     e26:	91 83       	std	Z+1, r25	; 0x01
     e28:	08 95       	ret

00000e2a <_ZN8pwm_chip4passE9I2C_328pbPi>:
}




void pwm_chip::pass(I2C_328pb i2c, int* motors){
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	00 d0       	rcall	.+0      	; 0xe38 <_ZN8pwm_chip4passE9I2C_328pbPi+0xe>
     e38:	1f 92       	push	r1
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	8c 01       	movw	r16, r24
     e40:	6b 83       	std	Y+3, r22	; 0x03
     e42:	7a 01       	movw	r14, r20

// this function will communicate over I2C to the pwmchip for final controll of the motors

	uint8_t instruction[2];
	
	encode_motors(0, motors, instruction);
     e44:	9e 01       	movw	r18, r28
     e46:	2f 5f       	subi	r18, 0xFF	; 255
     e48:	3f 4f       	sbci	r19, 0xFF	; 255
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN8pwm_chip13encode_motorsEhPiPh>

	i2c.start();
     e50:	ce 01       	movw	r24, r28
     e52:	03 96       	adiw	r24, 0x03	; 3
     e54:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     e58:	6e e9       	ldi	r22, 0x9E	; 158
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	ce 01       	movw	r24, r28
     e5e:	03 96       	adiw	r24, 0x03	; 3
     e60:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x06);		//LED0_ON_L
     e64:	66 e0       	ldi	r22, 0x06	; 6
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	ce 01       	movw	r24, r28
     e6a:	03 96       	adiw	r24, 0x03	; 3
     e6c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	ce 01       	movw	r24, r28
     e76:	03 96       	adiw	r24, 0x03	; 3
     e78:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	ce 01       	movw	r24, r28
     e82:	03 96       	adiw	r24, 0x03	; 3
     e84:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     e88:	69 81       	ldd	r22, Y+1	; 0x01
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	ce 01       	movw	r24, r28
     e8e:	03 96       	adiw	r24, 0x03	; 3
     e90:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
     e94:	6a 81       	ldd	r22, Y+2	; 0x02
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	ce 01       	movw	r24, r28
     e9a:	03 96       	adiw	r24, 0x03	; 3
     e9c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     ea0:	ce 01       	movw	r24, r28
     ea2:	03 96       	adiw	r24, 0x03	; 3
     ea4:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9I2C_328pb4stopEv>


	encode_motors(1, motors, instruction);
     ea8:	9e 01       	movw	r18, r28
     eaa:	2f 5f       	subi	r18, 0xFF	; 255
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	a7 01       	movw	r20, r14
     eb0:	61 e0       	ldi	r22, 0x01	; 1
     eb2:	c8 01       	movw	r24, r16
     eb4:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN8pwm_chip13encode_motorsEhPiPh>
	

	i2c.start();
     eb8:	ce 01       	movw	r24, r28
     eba:	03 96       	adiw	r24, 0x03	; 3
     ebc:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     ec0:	6e e9       	ldi	r22, 0x9E	; 158
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	ce 01       	movw	r24, r28
     ec6:	03 96       	adiw	r24, 0x03	; 3
     ec8:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x16);		//LED4_ON_L
     ecc:	66 e1       	ldi	r22, 0x16	; 22
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	ce 01       	movw	r24, r28
     ed2:	03 96       	adiw	r24, 0x03	; 3
     ed4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	ce 01       	movw	r24, r28
     ede:	03 96       	adiw	r24, 0x03	; 3
     ee0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	ce 01       	movw	r24, r28
     eea:	03 96       	adiw	r24, 0x03	; 3
     eec:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     ef0:	69 81       	ldd	r22, Y+1	; 0x01
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	ce 01       	movw	r24, r28
     ef6:	03 96       	adiw	r24, 0x03	; 3
     ef8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
     efc:	6a 81       	ldd	r22, Y+2	; 0x02
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	ce 01       	movw	r24, r28
     f02:	03 96       	adiw	r24, 0x03	; 3
     f04:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     f08:	ce 01       	movw	r24, r28
     f0a:	03 96       	adiw	r24, 0x03	; 3
     f0c:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9I2C_328pb4stopEv>

	
	encode_motors(2, motors, instruction);
     f10:	9e 01       	movw	r18, r28
     f12:	2f 5f       	subi	r18, 0xFF	; 255
     f14:	3f 4f       	sbci	r19, 0xFF	; 255
     f16:	a7 01       	movw	r20, r14
     f18:	62 e0       	ldi	r22, 0x02	; 2
     f1a:	c8 01       	movw	r24, r16
     f1c:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN8pwm_chip13encode_motorsEhPiPh>



	i2c.start();
     f20:	ce 01       	movw	r24, r28
     f22:	03 96       	adiw	r24, 0x03	; 3
     f24:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     f28:	6e e9       	ldi	r22, 0x9E	; 158
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	ce 01       	movw	r24, r28
     f2e:	03 96       	adiw	r24, 0x03	; 3
     f30:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x2E);		//LED8_ON_L
     f34:	6e e2       	ldi	r22, 0x2E	; 46
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	ce 01       	movw	r24, r28
     f3a:	03 96       	adiw	r24, 0x03	; 3
     f3c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	ce 01       	movw	r24, r28
     f46:	03 96       	adiw	r24, 0x03	; 3
     f48:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	ce 01       	movw	r24, r28
     f52:	03 96       	adiw	r24, 0x03	; 3
     f54:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     f58:	69 81       	ldd	r22, Y+1	; 0x01
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	ce 01       	movw	r24, r28
     f5e:	03 96       	adiw	r24, 0x03	; 3
     f60:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
     f64:	6a 81       	ldd	r22, Y+2	; 0x02
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	ce 01       	movw	r24, r28
     f6a:	03 96       	adiw	r24, 0x03	; 3
     f6c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     f70:	ce 01       	movw	r24, r28
     f72:	03 96       	adiw	r24, 0x03	; 3
     f74:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9I2C_328pb4stopEv>



	encode_motors(3, motors, instruction);
     f78:	9e 01       	movw	r18, r28
     f7a:	2f 5f       	subi	r18, 0xFF	; 255
     f7c:	3f 4f       	sbci	r19, 0xFF	; 255
     f7e:	a7 01       	movw	r20, r14
     f80:	63 e0       	ldi	r22, 0x03	; 3
     f82:	c8 01       	movw	r24, r16
     f84:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN8pwm_chip13encode_motorsEhPiPh>


	i2c.start();
     f88:	ce 01       	movw	r24, r28
     f8a:	03 96       	adiw	r24, 0x03	; 3
     f8c:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     f90:	6e e9       	ldi	r22, 0x9E	; 158
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	ce 01       	movw	r24, r28
     f96:	03 96       	adiw	r24, 0x03	; 3
     f98:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x42);		//LED8_ON_L
     f9c:	62 e4       	ldi	r22, 0x42	; 66
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	ce 01       	movw	r24, r28
     fa2:	03 96       	adiw	r24, 0x03	; 3
     fa4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	ce 01       	movw	r24, r28
     fae:	03 96       	adiw	r24, 0x03	; 3
     fb0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	ce 01       	movw	r24, r28
     fba:	03 96       	adiw	r24, 0x03	; 3
     fbc:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     fc0:	69 81       	ldd	r22, Y+1	; 0x01
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	ce 01       	movw	r24, r28
     fc6:	03 96       	adiw	r24, 0x03	; 3
     fc8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
     fcc:	6a 81       	ldd	r22, Y+2	; 0x02
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	ce 01       	movw	r24, r28
     fd2:	03 96       	adiw	r24, 0x03	; 3
     fd4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     fd8:	ce 01       	movw	r24, r28
     fda:	03 96       	adiw	r24, 0x03	; 3
     fdc:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9I2C_328pb4stopEv>


}
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	08 95       	ret

00000ff4 <_ZN7sensorsC1E9I2C_328pb>:
#include "sensors.h"



sensors::sensors(I2C_328pb i2c){
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	1f 92       	push	r1
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	8c 01       	movw	r16, r24
    1004:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
    1006:	ce 01       	movw	r24, r28
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x32);	// acc slave + w
    100e:	62 e3       	ldi	r22, 0x32	; 50
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	ce 01       	movw	r24, r28
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0xA0);	// Control register 1 + autoincrement
    101a:	60 ea       	ldi	r22, 0xA0	; 160
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	ce 01       	movw	r24, r28
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x67);	// all axis enable data refresh rate is 200Hz
    1026:	67 e6       	ldi	r22, 0x67	; 103
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	ce 01       	movw	r24, r28
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.send(0x0);	// CR2 default values
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	ce 01       	movw	r24, r28
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.send(0x0);	// CR3 default values
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	ce 01       	movw	r24, r28
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.send(0x10);	// CR4  +- 4g and 8mg/digit, The value 32767 corresponds to 4 g's
    104a:	60 e1       	ldi	r22, 0x10	; 16
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	ce 01       	movw	r24, r28
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
    1056:	ce 01       	movw	r24, r28
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9I2C_328pb4stopEv>
	

////////////////////////////// accelerometer init above and gyro init below

	i2c.start();
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0xD6); // gyro slave + w
    1066:	66 ed       	ldi	r22, 0xD6	; 214
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	ce 01       	movw	r24, r28
    106c:	01 96       	adiw	r24, 0x01	; 1
    106e:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x20);	// Control register 1
    1072:	60 e2       	ldi	r22, 0x20	; 32
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	ce 01       	movw	r24, r28
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x0F);	// all axis enable data refresh rate is 100Hz (a lot of other params also affected)
    107e:	6f e0       	ldi	r22, 0x0F	; 15
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	ce 01       	movw	r24, r28
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
    108a:	ce 01       	movw	r24, r28
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9I2C_328pb4stopEv>

			// default sensitivity is 8.75 mdps/digit
			
			
	pitch = 0.f;
    1092:	f8 01       	movw	r30, r16
    1094:	14 86       	std	Z+12, r1	; 0x0c
    1096:	15 86       	std	Z+13, r1	; 0x0d
    1098:	16 86       	std	Z+14, r1	; 0x0e
    109a:	17 86       	std	Z+15, r1	; 0x0f
	roll = 0.f;
    109c:	10 8a       	std	Z+16, r1	; 0x10
    109e:	11 8a       	std	Z+17, r1	; 0x11
    10a0:	12 8a       	std	Z+18, r1	; 0x12
    10a2:	13 8a       	std	Z+19, r1	; 0x13
	yaw_rate = 0.f;
    10a4:	14 8a       	std	Z+20, r1	; 0x14
    10a6:	15 8a       	std	Z+21, r1	; 0x15
    10a8:	16 8a       	std	Z+22, r1	; 0x16
    10aa:	17 8a       	std	Z+23, r1	; 0x17

	time_of_previous_scan = TCNT1;
    10ac:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    10b0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    10b4:	91 8f       	std	Z+25, r25	; 0x19
    10b6:	80 8f       	std	Z+24, r24	; 0x18

}
    10b8:	0f 90       	pop	r0
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	08 95       	ret

000010c4 <_ZN7sensors8read_accE9I2C_328pb>:



void sensors::read_acc(I2C_328pb i2c){
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	1f 92       	push	r1
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	8c 01       	movw	r16, r24
    10d8:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
    10da:	ce 01       	movw	r24, r28
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x32);	// acc slave + w
    10e2:	62 e3       	ldi	r22, 0x32	; 50
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	ce 01       	movw	r24, r28
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN9I2C_328pb10send_slaveEi>
	i2c.send(0xA8);	// X_low +auto increment
    10ee:	68 ea       	ldi	r22, 0xA8	; 168
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	ce 01       	movw	r24, r28
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
    10fa:	ce 01       	movw	r24, r28
    10fc:	01 96       	adiw	r24, 0x01	; 1
    10fe:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0x33);	// acc slave + r
    1102:	63 e3       	ldi	r22, 0x33	; 51
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	ce 01       	movw	r24, r28
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN9I2C_328pb10send_slaveEi>

	i2c.get_next_byte();
    110e:	ce 01       	movw	r24, r28
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN9I2C_328pb13get_next_byteEv>
	acc_x_data = TWDR0;	// read low byte
    1116:	0f 2e       	mov	r0, r31
    1118:	fb eb       	ldi	r31, 0xBB	; 187
    111a:	ef 2e       	mov	r14, r31
    111c:	f1 2c       	mov	r15, r1
    111e:	f0 2d       	mov	r31, r0
    1120:	f7 01       	movw	r30, r14
    1122:	80 81       	ld	r24, Z
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	f8 01       	movw	r30, r16
    1128:	91 83       	std	Z+1, r25	; 0x01
    112a:	80 83       	st	Z, r24
	i2c.get_next_byte();
    112c:	ce 01       	movw	r24, r28
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN9I2C_328pb13get_next_byteEv>
	acc_x_data |= (TWDR0 << 8);	// read high byte
    1134:	f7 01       	movw	r30, r14
    1136:	20 81       	ld	r18, Z
    1138:	f8 01       	movw	r30, r16
    113a:	80 81       	ld	r24, Z
    113c:	91 81       	ldd	r25, Z+1	; 0x01
    113e:	92 2b       	or	r25, r18
    1140:	91 83       	std	Z+1, r25	; 0x01
    1142:	80 83       	st	Z, r24
	i2c.get_next_byte();
    1144:	ce 01       	movw	r24, r28
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN9I2C_328pb13get_next_byteEv>


	acc_y_data = TWDR0;	// read low byte
    114c:	f7 01       	movw	r30, r14
    114e:	80 81       	ld	r24, Z
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	f8 01       	movw	r30, r16
    1154:	93 83       	std	Z+3, r25	; 0x03
    1156:	82 83       	std	Z+2, r24	; 0x02
	i2c.get_next_byte();
    1158:	ce 01       	movw	r24, r28
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN9I2C_328pb13get_next_byteEv>
	acc_y_data |= (TWDR0 << 8);	// read high byte
    1160:	f7 01       	movw	r30, r14
    1162:	20 81       	ld	r18, Z
    1164:	f8 01       	movw	r30, r16
    1166:	82 81       	ldd	r24, Z+2	; 0x02
    1168:	93 81       	ldd	r25, Z+3	; 0x03
    116a:	92 2b       	or	r25, r18
    116c:	93 83       	std	Z+3, r25	; 0x03
    116e:	82 83       	std	Z+2, r24	; 0x02
	i2c.get_next_byte();
    1170:	ce 01       	movw	r24, r28
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN9I2C_328pb13get_next_byteEv>


	acc_z_data = TWDR0;	// read low byte
    1178:	f7 01       	movw	r30, r14
    117a:	80 81       	ld	r24, Z
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	f8 01       	movw	r30, r16
    1180:	95 83       	std	Z+5, r25	; 0x05
    1182:	84 83       	std	Z+4, r24	; 0x04
	i2c.get_next_byte();
    1184:	ce 01       	movw	r24, r28
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN9I2C_328pb13get_next_byteEv>
	acc_z_data |= (TWDR0 << 8);	// read high byte
    118c:	f7 01       	movw	r30, r14
    118e:	20 81       	ld	r18, Z
    1190:	f8 01       	movw	r30, r16
    1192:	84 81       	ldd	r24, Z+4	; 0x04
    1194:	95 81       	ldd	r25, Z+5	; 0x05
    1196:	92 2b       	or	r25, r18
    1198:	95 83       	std	Z+5, r25	; 0x05
    119a:	84 83       	std	Z+4, r24	; 0x04


	i2c.end_data_read();
    119c:	ce 01       	movw	r24, r28
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	0e 94 08 03 	call	0x610	; 0x610 <_ZN9I2C_328pb13end_data_readEv>
	i2c.stop();
    11a4:	ce 01       	movw	r24, r28
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9I2C_328pb4stopEv>
}
    11ac:	0f 90       	pop	r0
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	ff 90       	pop	r15
    11b8:	ef 90       	pop	r14
    11ba:	08 95       	ret

000011bc <_ZN7sensors9read_gyroE9I2C_328pb>:

void sensors::read_gyro(I2C_328pb i2c){
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	1f 92       	push	r1
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	8c 01       	movw	r16, r24
    11d0:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
    11d2:	ce 01       	movw	r24, r28
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0xD6);	// gyro slave + w
    11da:	66 ed       	ldi	r22, 0xD6	; 214
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	ce 01       	movw	r24, r28
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN9I2C_328pb10send_slaveEi>
	i2c.send(0xA8);	// X_low +auto increment
    11e6:	68 ea       	ldi	r22, 0xA8	; 168
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	ce 01       	movw	r24, r28
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
    11f2:	ce 01       	movw	r24, r28
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0xD7);	// gyro slave + r
    11fa:	67 ed       	ldi	r22, 0xD7	; 215
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	ce 01       	movw	r24, r28
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN9I2C_328pb10send_slaveEi>

	i2c.get_next_byte();
    1206:	ce 01       	movw	r24, r28
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN9I2C_328pb13get_next_byteEv>
	gyro_x_data = TWDR0;	// read low byte
    120e:	0f 2e       	mov	r0, r31
    1210:	fb eb       	ldi	r31, 0xBB	; 187
    1212:	ef 2e       	mov	r14, r31
    1214:	f1 2c       	mov	r15, r1
    1216:	f0 2d       	mov	r31, r0
    1218:	f7 01       	movw	r30, r14
    121a:	80 81       	ld	r24, Z
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	f8 01       	movw	r30, r16
    1220:	97 83       	std	Z+7, r25	; 0x07
    1222:	86 83       	std	Z+6, r24	; 0x06
	i2c.get_next_byte();
    1224:	ce 01       	movw	r24, r28
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN9I2C_328pb13get_next_byteEv>
	gyro_x_data |= (TWDR0 << 8);	// read high byte
    122c:	f7 01       	movw	r30, r14
    122e:	20 81       	ld	r18, Z
    1230:	f8 01       	movw	r30, r16
    1232:	86 81       	ldd	r24, Z+6	; 0x06
    1234:	97 81       	ldd	r25, Z+7	; 0x07
    1236:	92 2b       	or	r25, r18
    1238:	97 83       	std	Z+7, r25	; 0x07
    123a:	86 83       	std	Z+6, r24	; 0x06
	i2c.get_next_byte();
    123c:	ce 01       	movw	r24, r28
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN9I2C_328pb13get_next_byteEv>


	gyro_y_data = TWDR0;	// read low byte
    1244:	f7 01       	movw	r30, r14
    1246:	80 81       	ld	r24, Z
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	f8 01       	movw	r30, r16
    124c:	91 87       	std	Z+9, r25	; 0x09
    124e:	80 87       	std	Z+8, r24	; 0x08
	i2c.get_next_byte();
    1250:	ce 01       	movw	r24, r28
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN9I2C_328pb13get_next_byteEv>
	gyro_y_data |= (TWDR0 << 8);	// read high byte
    1258:	f7 01       	movw	r30, r14
    125a:	20 81       	ld	r18, Z
    125c:	f8 01       	movw	r30, r16
    125e:	80 85       	ldd	r24, Z+8	; 0x08
    1260:	91 85       	ldd	r25, Z+9	; 0x09
    1262:	92 2b       	or	r25, r18
    1264:	91 87       	std	Z+9, r25	; 0x09
    1266:	80 87       	std	Z+8, r24	; 0x08
	i2c.get_next_byte();
    1268:	ce 01       	movw	r24, r28
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN9I2C_328pb13get_next_byteEv>

  
	gyro_z_data = TWDR0;	// read low byte
    1270:	f7 01       	movw	r30, r14
    1272:	80 81       	ld	r24, Z
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	f8 01       	movw	r30, r16
    1278:	93 87       	std	Z+11, r25	; 0x0b
    127a:	82 87       	std	Z+10, r24	; 0x0a
	i2c.get_next_byte();
    127c:	ce 01       	movw	r24, r28
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN9I2C_328pb13get_next_byteEv>
	gyro_z_data |= (TWDR0 << 8);	// read high byte
    1284:	f7 01       	movw	r30, r14
    1286:	20 81       	ld	r18, Z
    1288:	f8 01       	movw	r30, r16
    128a:	82 85       	ldd	r24, Z+10	; 0x0a
    128c:	93 85       	ldd	r25, Z+11	; 0x0b
    128e:	92 2b       	or	r25, r18
    1290:	93 87       	std	Z+11, r25	; 0x0b
    1292:	82 87       	std	Z+10, r24	; 0x0a

	i2c.end_data_read();
    1294:	ce 01       	movw	r24, r28
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	0e 94 08 03 	call	0x610	; 0x610 <_ZN9I2C_328pb13end_data_readEv>
	i2c.stop();
    129c:	ce 01       	movw	r24, r28
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9I2C_328pb4stopEv>
}
    12a4:	0f 90       	pop	r0
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	08 95       	ret

000012b4 <_ZN7sensors8get_timeEv>:


}


float sensors:: get_time(){
    12b4:	ef 92       	push	r14
    12b6:	ff 92       	push	r15
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <_ZN7sensors8get_timeEv+0xe>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <_ZN7sensors8get_timeEv+0x10>
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	8c 01       	movw	r16, r24

	uint16_t time = TCNT1;
    12ca:	e4 e8       	ldi	r30, 0x84	; 132
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	e0 80       	ld	r14, Z
    12d0:	f1 80       	ldd	r15, Z+1	; 0x01
	
	volatile float result;
	

	if (TCNT1 < time_of_previous_scan){
    12d2:	20 81       	ld	r18, Z
    12d4:	31 81       	ldd	r19, Z+1	; 0x01
    12d6:	fc 01       	movw	r30, r24
    12d8:	80 8d       	ldd	r24, Z+24	; 0x18
    12da:	91 8d       	ldd	r25, Z+25	; 0x19
    12dc:	28 17       	cp	r18, r24
    12de:	39 07       	cpc	r19, r25
    12e0:	70 f4       	brcc	.+28     	; 0x12fe <_ZN7sensors8get_timeEv+0x4a>

		result = 0xffff - time_of_previous_scan + time ;
    12e2:	b7 01       	movw	r22, r14
    12e4:	61 50       	subi	r22, 0x01	; 1
    12e6:	71 09       	sbc	r23, r1
    12e8:	68 1b       	sub	r22, r24
    12ea:	79 0b       	sbc	r23, r25
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	0e 94 86 0c 	call	0x190c	; 0x190c <__floatunsisf>
    12f4:	69 83       	std	Y+1, r22	; 0x01
    12f6:	7a 83       	std	Y+2, r23	; 0x02
    12f8:	8b 83       	std	Y+3, r24	; 0x03
    12fa:	9c 83       	std	Y+4, r25	; 0x04
    12fc:	0b c0       	rjmp	.+22     	; 0x1314 <_ZN7sensors8get_timeEv+0x60>

	}

	else{

		result = time - time_of_previous_scan;
    12fe:	b7 01       	movw	r22, r14
    1300:	68 1b       	sub	r22, r24
    1302:	79 0b       	sbc	r23, r25
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 86 0c 	call	0x190c	; 0x190c <__floatunsisf>
    130c:	69 83       	std	Y+1, r22	; 0x01
    130e:	7a 83       	std	Y+2, r23	; 0x02
    1310:	8b 83       	std	Y+3, r24	; 0x03
    1312:	9c 83       	std	Y+4, r25	; 0x04
	}


	result /= (float)TIMER_BIT_RATE;
    1314:	69 81       	ldd	r22, Y+1	; 0x01
    1316:	7a 81       	ldd	r23, Y+2	; 0x02
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	9c 81       	ldd	r25, Y+4	; 0x04
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	34 e2       	ldi	r19, 0x24	; 36
    1320:	44 e7       	ldi	r20, 0x74	; 116
    1322:	59 e4       	ldi	r21, 0x49	; 73
    1324:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__divsf3>
    1328:	69 83       	std	Y+1, r22	; 0x01
    132a:	7a 83       	std	Y+2, r23	; 0x02
    132c:	8b 83       	std	Y+3, r24	; 0x03
    132e:	9c 83       	std	Y+4, r25	; 0x04

	time_of_previous_scan = time;
    1330:	f8 01       	movw	r30, r16
    1332:	f1 8e       	std	Z+25, r15	; 0x19
    1334:	e0 8e       	std	Z+24, r14	; 0x18

	return result;
    1336:	69 81       	ldd	r22, Y+1	; 0x01
    1338:	7a 81       	ldd	r23, Y+2	; 0x02
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04


}
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	ff 90       	pop	r15
    1350:	ef 90       	pop	r14
    1352:	08 95       	ret

00001354 <_ZN7sensors16compute_positionEv>:
}




void sensors::compute_position(){
    1354:	4f 92       	push	r4
    1356:	5f 92       	push	r5
    1358:	6f 92       	push	r6
    135a:	7f 92       	push	r7
    135c:	8f 92       	push	r8
    135e:	9f 92       	push	r9
    1360:	af 92       	push	r10
    1362:	bf 92       	push	r11
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	64 97       	sbiw	r28, 0x14	; 20
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	8c 01       	movw	r16, r24

	volatile float R;	// what the accelerometer thinks the total acceleration is
	volatile float trust_factor; // to what degree do I trust the accelerometer's readings
	const float time_between_measurements = get_time();
    1386:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN7sensors8get_timeEv>
    138a:	6b 01       	movw	r12, r22
    138c:	7c 01       	movw	r14, r24
 
	
	// first, the gyro's data is used to get arelative position to the previous position
	pitch += (gyro_y_data * GYRO_SENSITIVITY * time_between_measurements);
    138e:	f8 01       	movw	r30, r16
    1390:	60 85       	ldd	r22, Z+8	; 0x08
    1392:	71 85       	ldd	r23, Z+9	; 0x09
    1394:	07 2e       	mov	r0, r23
    1396:	00 0c       	add	r0, r0
    1398:	88 0b       	sbc	r24, r24
    139a:	99 0b       	sbc	r25, r25
    139c:	0e 94 88 0c 	call	0x1910	; 0x1910 <__floatsisf>
    13a0:	29 e2       	ldi	r18, 0x29	; 41
    13a2:	3c e5       	ldi	r19, 0x5C	; 92
    13a4:	4f e0       	ldi	r20, 0x0F	; 15
    13a6:	5c e3       	ldi	r21, 0x3C	; 60
    13a8:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
    13ac:	a7 01       	movw	r20, r14
    13ae:	96 01       	movw	r18, r12
    13b0:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
    13b4:	f8 01       	movw	r30, r16
    13b6:	24 85       	ldd	r18, Z+12	; 0x0c
    13b8:	35 85       	ldd	r19, Z+13	; 0x0d
    13ba:	46 85       	ldd	r20, Z+14	; 0x0e
    13bc:	57 85       	ldd	r21, Z+15	; 0x0f
    13be:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__addsf3>
    13c2:	4b 01       	movw	r8, r22
    13c4:	5c 01       	movw	r10, r24
    13c6:	f8 01       	movw	r30, r16
    13c8:	64 87       	std	Z+12, r22	; 0x0c
    13ca:	75 87       	std	Z+13, r23	; 0x0d
    13cc:	86 87       	std	Z+14, r24	; 0x0e
    13ce:	97 87       	std	Z+15, r25	; 0x0f
	roll += (gyro_x_data * GYRO_SENSITIVITY * time_between_measurements);
    13d0:	66 81       	ldd	r22, Z+6	; 0x06
    13d2:	77 81       	ldd	r23, Z+7	; 0x07
    13d4:	07 2e       	mov	r0, r23
    13d6:	00 0c       	add	r0, r0
    13d8:	88 0b       	sbc	r24, r24
    13da:	99 0b       	sbc	r25, r25
    13dc:	0e 94 88 0c 	call	0x1910	; 0x1910 <__floatsisf>
    13e0:	29 e2       	ldi	r18, 0x29	; 41
    13e2:	3c e5       	ldi	r19, 0x5C	; 92
    13e4:	4f e0       	ldi	r20, 0x0F	; 15
    13e6:	5c e3       	ldi	r21, 0x3C	; 60
    13e8:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
    13ec:	a7 01       	movw	r20, r14
    13ee:	96 01       	movw	r18, r12
    13f0:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
    13f4:	f8 01       	movw	r30, r16
    13f6:	20 89       	ldd	r18, Z+16	; 0x10
    13f8:	31 89       	ldd	r19, Z+17	; 0x11
    13fa:	42 89       	ldd	r20, Z+18	; 0x12
    13fc:	53 89       	ldd	r21, Z+19	; 0x13
    13fe:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__addsf3>
    1402:	2b 01       	movw	r4, r22
    1404:	3c 01       	movw	r6, r24
    1406:	f8 01       	movw	r30, r16
    1408:	60 8b       	std	Z+16, r22	; 0x10
    140a:	71 8b       	std	Z+17, r23	; 0x11
    140c:	82 8b       	std	Z+18, r24	; 0x12
    140e:	93 8b       	std	Z+19, r25	; 0x13
	yaw_rate = (gyro_z_data * GYRO_SENSITIVITY );
    1410:	62 85       	ldd	r22, Z+10	; 0x0a
    1412:	73 85       	ldd	r23, Z+11	; 0x0b
    1414:	07 2e       	mov	r0, r23
    1416:	00 0c       	add	r0, r0
    1418:	88 0b       	sbc	r24, r24
    141a:	99 0b       	sbc	r25, r25
    141c:	0e 94 88 0c 	call	0x1910	; 0x1910 <__floatsisf>
    1420:	29 e2       	ldi	r18, 0x29	; 41
    1422:	3c e5       	ldi	r19, 0x5C	; 92
    1424:	4f e0       	ldi	r20, 0x0F	; 15
    1426:	5c e3       	ldi	r21, 0x3C	; 60
    1428:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
    142c:	f8 01       	movw	r30, r16
    142e:	64 8b       	std	Z+20, r22	; 0x14
    1430:	75 8b       	std	Z+21, r23	; 0x15
    1432:	86 8b       	std	Z+22, r24	; 0x16
    1434:	97 8b       	std	Z+23, r25	; 0x17


	// Here, the total resulting acceleration is computed from the acc data
	R = sqrt( square( acc_x_data ) + square( acc_y_data ) + square( acc_z_data ) );
    1436:	60 81       	ld	r22, Z
    1438:	71 81       	ldd	r23, Z+1	; 0x01
    143a:	07 2e       	mov	r0, r23
    143c:	00 0c       	add	r0, r0
    143e:	88 0b       	sbc	r24, r24
    1440:	99 0b       	sbc	r25, r25
    1442:	0e 94 88 0c 	call	0x1910	; 0x1910 <__floatsisf>
    1446:	6d 87       	std	Y+13, r22	; 0x0d
    1448:	7e 87       	std	Y+14, r23	; 0x0e
    144a:	8f 87       	std	Y+15, r24	; 0x0f
    144c:	98 8b       	std	Y+16, r25	; 0x10
    144e:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <square>
    1452:	6b 01       	movw	r12, r22
    1454:	7c 01       	movw	r14, r24
    1456:	f8 01       	movw	r30, r16
    1458:	62 81       	ldd	r22, Z+2	; 0x02
    145a:	73 81       	ldd	r23, Z+3	; 0x03
    145c:	07 2e       	mov	r0, r23
    145e:	00 0c       	add	r0, r0
    1460:	88 0b       	sbc	r24, r24
    1462:	99 0b       	sbc	r25, r25
    1464:	0e 94 88 0c 	call	0x1910	; 0x1910 <__floatsisf>
    1468:	69 8b       	std	Y+17, r22	; 0x11
    146a:	7a 8b       	std	Y+18, r23	; 0x12
    146c:	8b 8b       	std	Y+19, r24	; 0x13
    146e:	9c 8b       	std	Y+20, r25	; 0x14
    1470:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <square>
    1474:	9b 01       	movw	r18, r22
    1476:	ac 01       	movw	r20, r24
    1478:	c7 01       	movw	r24, r14
    147a:	b6 01       	movw	r22, r12
    147c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__addsf3>
    1480:	6b 01       	movw	r12, r22
    1482:	7c 01       	movw	r14, r24
    1484:	f8 01       	movw	r30, r16
    1486:	64 81       	ldd	r22, Z+4	; 0x04
    1488:	75 81       	ldd	r23, Z+5	; 0x05
    148a:	07 2e       	mov	r0, r23
    148c:	00 0c       	add	r0, r0
    148e:	88 0b       	sbc	r24, r24
    1490:	99 0b       	sbc	r25, r25
    1492:	0e 94 88 0c 	call	0x1910	; 0x1910 <__floatsisf>
    1496:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <square>
    149a:	69 87       	std	Y+9, r22	; 0x09
    149c:	7a 87       	std	Y+10, r23	; 0x0a
    149e:	8b 87       	std	Y+11, r24	; 0x0b
    14a0:	9c 87       	std	Y+12, r25	; 0x0c
    14a2:	29 85       	ldd	r18, Y+9	; 0x09
    14a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    14a6:	4b 85       	ldd	r20, Y+11	; 0x0b
    14a8:	5c 85       	ldd	r21, Y+12	; 0x0c
    14aa:	c7 01       	movw	r24, r14
    14ac:	b6 01       	movw	r22, r12
    14ae:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__addsf3>
    14b2:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <sqrt>
    14b6:	69 83       	std	Y+1, r22	; 0x01
    14b8:	7a 83       	std	Y+2, r23	; 0x02
    14ba:	8b 83       	std	Y+3, r24	; 0x03
    14bc:	9c 83       	std	Y+4, r25	; 0x04
	R *= ACC_SENSITIVITY;
    14be:	69 81       	ldd	r22, Y+1	; 0x01
    14c0:	7a 81       	ldd	r23, Y+2	; 0x02
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	20 e9       	ldi	r18, 0x90	; 144
    14c8:	39 ef       	ldi	r19, 0xF9	; 249
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	59 e3       	ldi	r21, 0x39	; 57
    14ce:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
    14d2:	69 83       	std	Y+1, r22	; 0x01
    14d4:	7a 83       	std	Y+2, r23	; 0x02
    14d6:	8b 83       	std	Y+3, r24	; 0x03
    14d8:	9c 83       	std	Y+4, r25	; 0x04
	
	
	// If the acc says that the resulting acceleration is more than 50% away from 1g, I have deemed that any reasults it gives are too biased to be of any use
	if ( R > 1.5 || R < 0.5 ){
    14da:	69 81       	ldd	r22, Y+1	; 0x01
    14dc:	7a 81       	ldd	r23, Y+2	; 0x02
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	9c 81       	ldd	r25, Y+4	; 0x04
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 ec       	ldi	r20, 0xC0	; 192
    14e8:	5f e3       	ldi	r21, 0x3F	; 63
    14ea:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gesf2>
    14ee:	18 16       	cp	r1, r24
    14f0:	0c f4       	brge	.+2      	; 0x14f4 <_ZN7sensors16compute_positionEv+0x1a0>
    14f2:	b4 c0       	rjmp	.+360    	; 0x165c <_ZN7sensors16compute_positionEv+0x308>
    14f4:	69 81       	ldd	r22, Y+1	; 0x01
    14f6:	7a 81       	ldd	r23, Y+2	; 0x02
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	9c 81       	ldd	r25, Y+4	; 0x04
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	5f e3       	ldi	r21, 0x3F	; 63
    1504:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__cmpsf2>
    1508:	88 23       	and	r24, r24
    150a:	0c f4       	brge	.+2      	; 0x150e <_ZN7sensors16compute_positionEv+0x1ba>
    150c:	a7 c0       	rjmp	.+334    	; 0x165c <_ZN7sensors16compute_positionEv+0x308>
		return;	
	}

	// accounts for +- sign 0 is the level value
	// these functions return radians
	float acc_pitch_angle = asin(  acc_y_data / (R*INVERSE_ACC_SENSITIVITY) );	
    150e:	69 81       	ldd	r22, Y+1	; 0x01
    1510:	7a 81       	ldd	r23, Y+2	; 0x02
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e1       	ldi	r19, 0x10	; 16
    151a:	4e ef       	ldi	r20, 0xFE	; 254
    151c:	55 e4       	ldi	r21, 0x45	; 69
    151e:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
    1522:	9b 01       	movw	r18, r22
    1524:	ac 01       	movw	r20, r24
    1526:	69 89       	ldd	r22, Y+17	; 0x11
    1528:	7a 89       	ldd	r23, Y+18	; 0x12
    152a:	8b 89       	ldd	r24, Y+19	; 0x13
    152c:	9c 89       	ldd	r25, Y+20	; 0x14
    152e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__divsf3>
    1532:	0e 94 be 0b 	call	0x177c	; 0x177c <asin>
    1536:	69 87       	std	Y+9, r22	; 0x09
    1538:	7a 87       	std	Y+10, r23	; 0x0a
    153a:	8b 87       	std	Y+11, r24	; 0x0b
    153c:	9c 87       	std	Y+12, r25	; 0x0c
	float acc_roll_angle = asin( acc_x_data / (R*INVERSE_ACC_SENSITIVITY) );
    153e:	69 81       	ldd	r22, Y+1	; 0x01
    1540:	7a 81       	ldd	r23, Y+2	; 0x02
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e1       	ldi	r19, 0x10	; 16
    154a:	4e ef       	ldi	r20, 0xFE	; 254
    154c:	55 e4       	ldi	r21, 0x45	; 69
    154e:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
    1552:	9b 01       	movw	r18, r22
    1554:	ac 01       	movw	r20, r24
    1556:	6d 85       	ldd	r22, Y+13	; 0x0d
    1558:	7e 85       	ldd	r23, Y+14	; 0x0e
    155a:	8f 85       	ldd	r24, Y+15	; 0x0f
    155c:	98 89       	ldd	r25, Y+16	; 0x10
    155e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__divsf3>
    1562:	0e 94 be 0b 	call	0x177c	; 0x177c <asin>
    1566:	6d 87       	std	Y+13, r22	; 0x0d
    1568:	7e 87       	std	Y+14, r23	; 0x0e
    156a:	8f 87       	std	Y+15, r24	; 0x0f
    156c:	98 8b       	std	Y+16, r25	; 0x10
	acc_pitch_angle *= DEGREE_CONVERSION_FACTOR;
	acc_roll_angle *= DEGREE_CONVERSION_FACTOR;


	// The closer theaccelerometer is to 1g, the more influence it has in determing the angles at play
	trust_factor = ( 1 - fabs(1 - R) ) / 10;
    156e:	29 81       	ldd	r18, Y+1	; 0x01
    1570:	3a 81       	ldd	r19, Y+2	; 0x02
    1572:	4b 81       	ldd	r20, Y+3	; 0x03
    1574:	5c 81       	ldd	r21, Y+4	; 0x04
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	80 e8       	ldi	r24, 0x80	; 128
    157c:	9f e3       	ldi	r25, 0x3F	; 63
    157e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__subsf3>
    1582:	9b 01       	movw	r18, r22
    1584:	ac 01       	movw	r20, r24
    1586:	5f 77       	andi	r21, 0x7F	; 127
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	80 e8       	ldi	r24, 0x80	; 128
    158e:	9f e3       	ldi	r25, 0x3F	; 63
    1590:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__subsf3>
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	40 e2       	ldi	r20, 0x20	; 32
    159a:	51 e4       	ldi	r21, 0x41	; 65
    159c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__divsf3>
    15a0:	6d 83       	std	Y+5, r22	; 0x05
    15a2:	7e 83       	std	Y+6, r23	; 0x06
    15a4:	8f 83       	std	Y+7, r24	; 0x07
    15a6:	98 87       	std	Y+8, r25	; 0x08

	// readjustement of angle with input from accelerometer
	pitch = (pitch * (1 - trust_factor) + (acc_pitch_angle * trust_factor) );
    15a8:	2d 81       	ldd	r18, Y+5	; 0x05
    15aa:	3e 81       	ldd	r19, Y+6	; 0x06
    15ac:	4f 81       	ldd	r20, Y+7	; 0x07
    15ae:	58 85       	ldd	r21, Y+8	; 0x08
    15b0:	cd 80       	ldd	r12, Y+5	; 0x05
    15b2:	de 80       	ldd	r13, Y+6	; 0x06
    15b4:	ef 80       	ldd	r14, Y+7	; 0x07
    15b6:	f8 84       	ldd	r15, Y+8	; 0x08
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	80 e8       	ldi	r24, 0x80	; 128
    15be:	9f e3       	ldi	r25, 0x3F	; 63
    15c0:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__subsf3>
    15c4:	a5 01       	movw	r20, r10
    15c6:	94 01       	movw	r18, r8
    15c8:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
    15cc:	4b 01       	movw	r8, r22
    15ce:	5c 01       	movw	r10, r24
    15d0:	23 e3       	ldi	r18, 0x33	; 51
    15d2:	33 e3       	ldi	r19, 0x33	; 51
    15d4:	45 e6       	ldi	r20, 0x65	; 101
    15d6:	52 e4       	ldi	r21, 0x42	; 66
    15d8:	69 85       	ldd	r22, Y+9	; 0x09
    15da:	7a 85       	ldd	r23, Y+10	; 0x0a
    15dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    15de:	9c 85       	ldd	r25, Y+12	; 0x0c
    15e0:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
    15e4:	a7 01       	movw	r20, r14
    15e6:	96 01       	movw	r18, r12
    15e8:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
    15ec:	9b 01       	movw	r18, r22
    15ee:	ac 01       	movw	r20, r24
    15f0:	c5 01       	movw	r24, r10
    15f2:	b4 01       	movw	r22, r8
    15f4:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__addsf3>
    15f8:	f8 01       	movw	r30, r16
    15fa:	64 87       	std	Z+12, r22	; 0x0c
    15fc:	75 87       	std	Z+13, r23	; 0x0d
    15fe:	86 87       	std	Z+14, r24	; 0x0e
    1600:	97 87       	std	Z+15, r25	; 0x0f
	roll = (roll * (1 - trust_factor) + (acc_roll_angle * trust_factor) );
    1602:	2d 81       	ldd	r18, Y+5	; 0x05
    1604:	3e 81       	ldd	r19, Y+6	; 0x06
    1606:	4f 81       	ldd	r20, Y+7	; 0x07
    1608:	58 85       	ldd	r21, Y+8	; 0x08
    160a:	8d 80       	ldd	r8, Y+5	; 0x05
    160c:	9e 80       	ldd	r9, Y+6	; 0x06
    160e:	af 80       	ldd	r10, Y+7	; 0x07
    1610:	b8 84       	ldd	r11, Y+8	; 0x08
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	80 e8       	ldi	r24, 0x80	; 128
    1618:	9f e3       	ldi	r25, 0x3F	; 63
    161a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__subsf3>
    161e:	a3 01       	movw	r20, r6
    1620:	92 01       	movw	r18, r4
    1622:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
    1626:	2b 01       	movw	r4, r22
    1628:	3c 01       	movw	r6, r24
    162a:	23 e3       	ldi	r18, 0x33	; 51
    162c:	33 e3       	ldi	r19, 0x33	; 51
    162e:	45 e6       	ldi	r20, 0x65	; 101
    1630:	52 e4       	ldi	r21, 0x42	; 66
    1632:	6d 85       	ldd	r22, Y+13	; 0x0d
    1634:	7e 85       	ldd	r23, Y+14	; 0x0e
    1636:	8f 85       	ldd	r24, Y+15	; 0x0f
    1638:	98 89       	ldd	r25, Y+16	; 0x10
    163a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
    163e:	a5 01       	movw	r20, r10
    1640:	94 01       	movw	r18, r8
    1642:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
    1646:	9b 01       	movw	r18, r22
    1648:	ac 01       	movw	r20, r24
    164a:	c3 01       	movw	r24, r6
    164c:	b2 01       	movw	r22, r4
    164e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__addsf3>
    1652:	f8 01       	movw	r30, r16
    1654:	60 8b       	std	Z+16, r22	; 0x10
    1656:	71 8b       	std	Z+17, r23	; 0x11
    1658:	82 8b       	std	Z+18, r24	; 0x12
    165a:	93 8b       	std	Z+19, r25	; 0x13

	
	return;


}
    165c:	64 96       	adiw	r28, 0x14	; 20
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	bf 90       	pop	r11
    167a:	af 90       	pop	r10
    167c:	9f 90       	pop	r9
    167e:	8f 90       	pop	r8
    1680:	7f 90       	pop	r7
    1682:	6f 90       	pop	r6
    1684:	5f 90       	pop	r5
    1686:	4f 90       	pop	r4
    1688:	08 95       	ret

0000168a <_ZNK7sensors9get_pitchEv>:

}

float sensors::get_pitch() const{
	
	return pitch;
    168a:	fc 01       	movw	r30, r24
    168c:	64 85       	ldd	r22, Z+12	; 0x0c
    168e:	75 85       	ldd	r23, Z+13	; 0x0d
    1690:	86 85       	ldd	r24, Z+14	; 0x0e
    1692:	97 85       	ldd	r25, Z+15	; 0x0f
}
    1694:	08 95       	ret

00001696 <_ZNK7sensors8get_rollEv>:

float sensors::get_roll() const{
	
	return roll;
    1696:	fc 01       	movw	r30, r24
    1698:	60 89       	ldd	r22, Z+16	; 0x10
    169a:	71 89       	ldd	r23, Z+17	; 0x11
    169c:	82 89       	ldd	r24, Z+18	; 0x12
    169e:	93 89       	ldd	r25, Z+19	; 0x13
}
    16a0:	08 95       	ret

000016a2 <__subsf3>:
    16a2:	50 58       	subi	r21, 0x80	; 128

000016a4 <__addsf3>:
    16a4:	bb 27       	eor	r27, r27
    16a6:	aa 27       	eor	r26, r26
    16a8:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__addsf3x>
    16ac:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__fp_round>
    16b0:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__fp_pscA>
    16b4:	38 f0       	brcs	.+14     	; 0x16c4 <__addsf3+0x20>
    16b6:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__fp_pscB>
    16ba:	20 f0       	brcs	.+8      	; 0x16c4 <__addsf3+0x20>
    16bc:	39 f4       	brne	.+14     	; 0x16cc <__addsf3+0x28>
    16be:	9f 3f       	cpi	r25, 0xFF	; 255
    16c0:	19 f4       	brne	.+6      	; 0x16c8 <__addsf3+0x24>
    16c2:	26 f4       	brtc	.+8      	; 0x16cc <__addsf3+0x28>
    16c4:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__fp_nan>
    16c8:	0e f4       	brtc	.+2      	; 0x16cc <__addsf3+0x28>
    16ca:	e0 95       	com	r30
    16cc:	e7 fb       	bst	r30, 7
    16ce:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__fp_inf>

000016d2 <__addsf3x>:
    16d2:	e9 2f       	mov	r30, r25
    16d4:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__fp_split3>
    16d8:	58 f3       	brcs	.-42     	; 0x16b0 <__addsf3+0xc>
    16da:	ba 17       	cp	r27, r26
    16dc:	62 07       	cpc	r22, r18
    16de:	73 07       	cpc	r23, r19
    16e0:	84 07       	cpc	r24, r20
    16e2:	95 07       	cpc	r25, r21
    16e4:	20 f0       	brcs	.+8      	; 0x16ee <__addsf3x+0x1c>
    16e6:	79 f4       	brne	.+30     	; 0x1706 <__addsf3x+0x34>
    16e8:	a6 f5       	brtc	.+104    	; 0x1752 <__addsf3x+0x80>
    16ea:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__fp_zero>
    16ee:	0e f4       	brtc	.+2      	; 0x16f2 <__addsf3x+0x20>
    16f0:	e0 95       	com	r30
    16f2:	0b 2e       	mov	r0, r27
    16f4:	ba 2f       	mov	r27, r26
    16f6:	a0 2d       	mov	r26, r0
    16f8:	0b 01       	movw	r0, r22
    16fa:	b9 01       	movw	r22, r18
    16fc:	90 01       	movw	r18, r0
    16fe:	0c 01       	movw	r0, r24
    1700:	ca 01       	movw	r24, r20
    1702:	a0 01       	movw	r20, r0
    1704:	11 24       	eor	r1, r1
    1706:	ff 27       	eor	r31, r31
    1708:	59 1b       	sub	r21, r25
    170a:	99 f0       	breq	.+38     	; 0x1732 <__addsf3x+0x60>
    170c:	59 3f       	cpi	r21, 0xF9	; 249
    170e:	50 f4       	brcc	.+20     	; 0x1724 <__addsf3x+0x52>
    1710:	50 3e       	cpi	r21, 0xE0	; 224
    1712:	68 f1       	brcs	.+90     	; 0x176e <__addsf3x+0x9c>
    1714:	1a 16       	cp	r1, r26
    1716:	f0 40       	sbci	r31, 0x00	; 0
    1718:	a2 2f       	mov	r26, r18
    171a:	23 2f       	mov	r18, r19
    171c:	34 2f       	mov	r19, r20
    171e:	44 27       	eor	r20, r20
    1720:	58 5f       	subi	r21, 0xF8	; 248
    1722:	f3 cf       	rjmp	.-26     	; 0x170a <__addsf3x+0x38>
    1724:	46 95       	lsr	r20
    1726:	37 95       	ror	r19
    1728:	27 95       	ror	r18
    172a:	a7 95       	ror	r26
    172c:	f0 40       	sbci	r31, 0x00	; 0
    172e:	53 95       	inc	r21
    1730:	c9 f7       	brne	.-14     	; 0x1724 <__addsf3x+0x52>
    1732:	7e f4       	brtc	.+30     	; 0x1752 <__addsf3x+0x80>
    1734:	1f 16       	cp	r1, r31
    1736:	ba 0b       	sbc	r27, r26
    1738:	62 0b       	sbc	r22, r18
    173a:	73 0b       	sbc	r23, r19
    173c:	84 0b       	sbc	r24, r20
    173e:	ba f0       	brmi	.+46     	; 0x176e <__addsf3x+0x9c>
    1740:	91 50       	subi	r25, 0x01	; 1
    1742:	a1 f0       	breq	.+40     	; 0x176c <__addsf3x+0x9a>
    1744:	ff 0f       	add	r31, r31
    1746:	bb 1f       	adc	r27, r27
    1748:	66 1f       	adc	r22, r22
    174a:	77 1f       	adc	r23, r23
    174c:	88 1f       	adc	r24, r24
    174e:	c2 f7       	brpl	.-16     	; 0x1740 <__addsf3x+0x6e>
    1750:	0e c0       	rjmp	.+28     	; 0x176e <__addsf3x+0x9c>
    1752:	ba 0f       	add	r27, r26
    1754:	62 1f       	adc	r22, r18
    1756:	73 1f       	adc	r23, r19
    1758:	84 1f       	adc	r24, r20
    175a:	48 f4       	brcc	.+18     	; 0x176e <__addsf3x+0x9c>
    175c:	87 95       	ror	r24
    175e:	77 95       	ror	r23
    1760:	67 95       	ror	r22
    1762:	b7 95       	ror	r27
    1764:	f7 95       	ror	r31
    1766:	9e 3f       	cpi	r25, 0xFE	; 254
    1768:	08 f0       	brcs	.+2      	; 0x176c <__addsf3x+0x9a>
    176a:	b0 cf       	rjmp	.-160    	; 0x16cc <__addsf3+0x28>
    176c:	93 95       	inc	r25
    176e:	88 0f       	add	r24, r24
    1770:	08 f0       	brcs	.+2      	; 0x1774 <__addsf3x+0xa2>
    1772:	99 27       	eor	r25, r25
    1774:	ee 0f       	add	r30, r30
    1776:	97 95       	ror	r25
    1778:	87 95       	ror	r24
    177a:	08 95       	ret

0000177c <asin>:
    177c:	9f 93       	push	r25
    177e:	9f 77       	andi	r25, 0x7F	; 127
    1780:	ee e3       	ldi	r30, 0x3E	; 62
    1782:	89 37       	cpi	r24, 0x79	; 121
    1784:	9e 07       	cpc	r25, r30
    1786:	28 f4       	brcc	.+10     	; 0x1792 <asin+0x16>
    1788:	e4 eb       	ldi	r30, 0xB4	; 180
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__fp_powsodd>
    1790:	0c c0       	rjmp	.+24     	; 0x17aa <asin+0x2e>
    1792:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__fp_arccos>
    1796:	90 58       	subi	r25, 0x80	; 128
    1798:	a2 ea       	ldi	r26, 0xA2	; 162
    179a:	2a ed       	ldi	r18, 0xDA	; 218
    179c:	3f e0       	ldi	r19, 0x0F	; 15
    179e:	49 ec       	ldi	r20, 0xC9	; 201
    17a0:	5f e3       	ldi	r21, 0x3F	; 63
    17a2:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__addsf3x>
    17a6:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__fp_round>
    17aa:	0f 90       	pop	r0
    17ac:	07 fc       	sbrc	r0, 7
    17ae:	90 58       	subi	r25, 0x80	; 128
    17b0:	08 95       	ret

000017b2 <__cmpsf2>:
    17b2:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__fp_cmp>
    17b6:	08 f4       	brcc	.+2      	; 0x17ba <__cmpsf2+0x8>
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	08 95       	ret

000017bc <__divsf3>:
    17bc:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__divsf3x>
    17c0:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__fp_round>
    17c4:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__fp_pscB>
    17c8:	58 f0       	brcs	.+22     	; 0x17e0 <__divsf3+0x24>
    17ca:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__fp_pscA>
    17ce:	40 f0       	brcs	.+16     	; 0x17e0 <__divsf3+0x24>
    17d0:	29 f4       	brne	.+10     	; 0x17dc <__divsf3+0x20>
    17d2:	5f 3f       	cpi	r21, 0xFF	; 255
    17d4:	29 f0       	breq	.+10     	; 0x17e0 <__divsf3+0x24>
    17d6:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__fp_inf>
    17da:	51 11       	cpse	r21, r1
    17dc:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__fp_szero>
    17e0:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__fp_nan>

000017e4 <__divsf3x>:
    17e4:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__fp_split3>
    17e8:	68 f3       	brcs	.-38     	; 0x17c4 <__divsf3+0x8>

000017ea <__divsf3_pse>:
    17ea:	99 23       	and	r25, r25
    17ec:	b1 f3       	breq	.-20     	; 0x17da <__divsf3+0x1e>
    17ee:	55 23       	and	r21, r21
    17f0:	91 f3       	breq	.-28     	; 0x17d6 <__divsf3+0x1a>
    17f2:	95 1b       	sub	r25, r21
    17f4:	55 0b       	sbc	r21, r21
    17f6:	bb 27       	eor	r27, r27
    17f8:	aa 27       	eor	r26, r26
    17fa:	62 17       	cp	r22, r18
    17fc:	73 07       	cpc	r23, r19
    17fe:	84 07       	cpc	r24, r20
    1800:	38 f0       	brcs	.+14     	; 0x1810 <__divsf3_pse+0x26>
    1802:	9f 5f       	subi	r25, 0xFF	; 255
    1804:	5f 4f       	sbci	r21, 0xFF	; 255
    1806:	22 0f       	add	r18, r18
    1808:	33 1f       	adc	r19, r19
    180a:	44 1f       	adc	r20, r20
    180c:	aa 1f       	adc	r26, r26
    180e:	a9 f3       	breq	.-22     	; 0x17fa <__divsf3_pse+0x10>
    1810:	35 d0       	rcall	.+106    	; 0x187c <__divsf3_pse+0x92>
    1812:	0e 2e       	mov	r0, r30
    1814:	3a f0       	brmi	.+14     	; 0x1824 <__divsf3_pse+0x3a>
    1816:	e0 e8       	ldi	r30, 0x80	; 128
    1818:	32 d0       	rcall	.+100    	; 0x187e <__divsf3_pse+0x94>
    181a:	91 50       	subi	r25, 0x01	; 1
    181c:	50 40       	sbci	r21, 0x00	; 0
    181e:	e6 95       	lsr	r30
    1820:	00 1c       	adc	r0, r0
    1822:	ca f7       	brpl	.-14     	; 0x1816 <__divsf3_pse+0x2c>
    1824:	2b d0       	rcall	.+86     	; 0x187c <__divsf3_pse+0x92>
    1826:	fe 2f       	mov	r31, r30
    1828:	29 d0       	rcall	.+82     	; 0x187c <__divsf3_pse+0x92>
    182a:	66 0f       	add	r22, r22
    182c:	77 1f       	adc	r23, r23
    182e:	88 1f       	adc	r24, r24
    1830:	bb 1f       	adc	r27, r27
    1832:	26 17       	cp	r18, r22
    1834:	37 07       	cpc	r19, r23
    1836:	48 07       	cpc	r20, r24
    1838:	ab 07       	cpc	r26, r27
    183a:	b0 e8       	ldi	r27, 0x80	; 128
    183c:	09 f0       	breq	.+2      	; 0x1840 <__divsf3_pse+0x56>
    183e:	bb 0b       	sbc	r27, r27
    1840:	80 2d       	mov	r24, r0
    1842:	bf 01       	movw	r22, r30
    1844:	ff 27       	eor	r31, r31
    1846:	93 58       	subi	r25, 0x83	; 131
    1848:	5f 4f       	sbci	r21, 0xFF	; 255
    184a:	3a f0       	brmi	.+14     	; 0x185a <__divsf3_pse+0x70>
    184c:	9e 3f       	cpi	r25, 0xFE	; 254
    184e:	51 05       	cpc	r21, r1
    1850:	78 f0       	brcs	.+30     	; 0x1870 <__divsf3_pse+0x86>
    1852:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__fp_inf>
    1856:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__fp_szero>
    185a:	5f 3f       	cpi	r21, 0xFF	; 255
    185c:	e4 f3       	brlt	.-8      	; 0x1856 <__divsf3_pse+0x6c>
    185e:	98 3e       	cpi	r25, 0xE8	; 232
    1860:	d4 f3       	brlt	.-12     	; 0x1856 <__divsf3_pse+0x6c>
    1862:	86 95       	lsr	r24
    1864:	77 95       	ror	r23
    1866:	67 95       	ror	r22
    1868:	b7 95       	ror	r27
    186a:	f7 95       	ror	r31
    186c:	9f 5f       	subi	r25, 0xFF	; 255
    186e:	c9 f7       	brne	.-14     	; 0x1862 <__divsf3_pse+0x78>
    1870:	88 0f       	add	r24, r24
    1872:	91 1d       	adc	r25, r1
    1874:	96 95       	lsr	r25
    1876:	87 95       	ror	r24
    1878:	97 f9       	bld	r25, 7
    187a:	08 95       	ret
    187c:	e1 e0       	ldi	r30, 0x01	; 1
    187e:	66 0f       	add	r22, r22
    1880:	77 1f       	adc	r23, r23
    1882:	88 1f       	adc	r24, r24
    1884:	bb 1f       	adc	r27, r27
    1886:	62 17       	cp	r22, r18
    1888:	73 07       	cpc	r23, r19
    188a:	84 07       	cpc	r24, r20
    188c:	ba 07       	cpc	r27, r26
    188e:	20 f0       	brcs	.+8      	; 0x1898 <__divsf3_pse+0xae>
    1890:	62 1b       	sub	r22, r18
    1892:	73 0b       	sbc	r23, r19
    1894:	84 0b       	sbc	r24, r20
    1896:	ba 0b       	sbc	r27, r26
    1898:	ee 1f       	adc	r30, r30
    189a:	88 f7       	brcc	.-30     	; 0x187e <__divsf3_pse+0x94>
    189c:	e0 95       	com	r30
    189e:	08 95       	ret

000018a0 <__fixsfsi>:
    18a0:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__fixunssfsi>
    18a4:	68 94       	set
    18a6:	b1 11       	cpse	r27, r1
    18a8:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__fp_szero>
    18ac:	08 95       	ret

000018ae <__fixunssfsi>:
    18ae:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__fp_splitA>
    18b2:	88 f0       	brcs	.+34     	; 0x18d6 <__fixunssfsi+0x28>
    18b4:	9f 57       	subi	r25, 0x7F	; 127
    18b6:	98 f0       	brcs	.+38     	; 0x18de <__fixunssfsi+0x30>
    18b8:	b9 2f       	mov	r27, r25
    18ba:	99 27       	eor	r25, r25
    18bc:	b7 51       	subi	r27, 0x17	; 23
    18be:	b0 f0       	brcs	.+44     	; 0x18ec <__fixunssfsi+0x3e>
    18c0:	e1 f0       	breq	.+56     	; 0x18fa <__fixunssfsi+0x4c>
    18c2:	66 0f       	add	r22, r22
    18c4:	77 1f       	adc	r23, r23
    18c6:	88 1f       	adc	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	1a f0       	brmi	.+6      	; 0x18d2 <__fixunssfsi+0x24>
    18cc:	ba 95       	dec	r27
    18ce:	c9 f7       	brne	.-14     	; 0x18c2 <__fixunssfsi+0x14>
    18d0:	14 c0       	rjmp	.+40     	; 0x18fa <__fixunssfsi+0x4c>
    18d2:	b1 30       	cpi	r27, 0x01	; 1
    18d4:	91 f0       	breq	.+36     	; 0x18fa <__fixunssfsi+0x4c>
    18d6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__fp_zero>
    18da:	b1 e0       	ldi	r27, 0x01	; 1
    18dc:	08 95       	ret
    18de:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__fp_zero>
    18e2:	67 2f       	mov	r22, r23
    18e4:	78 2f       	mov	r23, r24
    18e6:	88 27       	eor	r24, r24
    18e8:	b8 5f       	subi	r27, 0xF8	; 248
    18ea:	39 f0       	breq	.+14     	; 0x18fa <__fixunssfsi+0x4c>
    18ec:	b9 3f       	cpi	r27, 0xF9	; 249
    18ee:	cc f3       	brlt	.-14     	; 0x18e2 <__fixunssfsi+0x34>
    18f0:	86 95       	lsr	r24
    18f2:	77 95       	ror	r23
    18f4:	67 95       	ror	r22
    18f6:	b3 95       	inc	r27
    18f8:	d9 f7       	brne	.-10     	; 0x18f0 <__fixunssfsi+0x42>
    18fa:	3e f4       	brtc	.+14     	; 0x190a <__fixunssfsi+0x5c>
    18fc:	90 95       	com	r25
    18fe:	80 95       	com	r24
    1900:	70 95       	com	r23
    1902:	61 95       	neg	r22
    1904:	7f 4f       	sbci	r23, 0xFF	; 255
    1906:	8f 4f       	sbci	r24, 0xFF	; 255
    1908:	9f 4f       	sbci	r25, 0xFF	; 255
    190a:	08 95       	ret

0000190c <__floatunsisf>:
    190c:	e8 94       	clt
    190e:	09 c0       	rjmp	.+18     	; 0x1922 <__floatsisf+0x12>

00001910 <__floatsisf>:
    1910:	97 fb       	bst	r25, 7
    1912:	3e f4       	brtc	.+14     	; 0x1922 <__floatsisf+0x12>
    1914:	90 95       	com	r25
    1916:	80 95       	com	r24
    1918:	70 95       	com	r23
    191a:	61 95       	neg	r22
    191c:	7f 4f       	sbci	r23, 0xFF	; 255
    191e:	8f 4f       	sbci	r24, 0xFF	; 255
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	99 23       	and	r25, r25
    1924:	a9 f0       	breq	.+42     	; 0x1950 <__floatsisf+0x40>
    1926:	f9 2f       	mov	r31, r25
    1928:	96 e9       	ldi	r25, 0x96	; 150
    192a:	bb 27       	eor	r27, r27
    192c:	93 95       	inc	r25
    192e:	f6 95       	lsr	r31
    1930:	87 95       	ror	r24
    1932:	77 95       	ror	r23
    1934:	67 95       	ror	r22
    1936:	b7 95       	ror	r27
    1938:	f1 11       	cpse	r31, r1
    193a:	f8 cf       	rjmp	.-16     	; 0x192c <__floatsisf+0x1c>
    193c:	fa f4       	brpl	.+62     	; 0x197c <__floatsisf+0x6c>
    193e:	bb 0f       	add	r27, r27
    1940:	11 f4       	brne	.+4      	; 0x1946 <__floatsisf+0x36>
    1942:	60 ff       	sbrs	r22, 0
    1944:	1b c0       	rjmp	.+54     	; 0x197c <__floatsisf+0x6c>
    1946:	6f 5f       	subi	r22, 0xFF	; 255
    1948:	7f 4f       	sbci	r23, 0xFF	; 255
    194a:	8f 4f       	sbci	r24, 0xFF	; 255
    194c:	9f 4f       	sbci	r25, 0xFF	; 255
    194e:	16 c0       	rjmp	.+44     	; 0x197c <__floatsisf+0x6c>
    1950:	88 23       	and	r24, r24
    1952:	11 f0       	breq	.+4      	; 0x1958 <__floatsisf+0x48>
    1954:	96 e9       	ldi	r25, 0x96	; 150
    1956:	11 c0       	rjmp	.+34     	; 0x197a <__floatsisf+0x6a>
    1958:	77 23       	and	r23, r23
    195a:	21 f0       	breq	.+8      	; 0x1964 <__floatsisf+0x54>
    195c:	9e e8       	ldi	r25, 0x8E	; 142
    195e:	87 2f       	mov	r24, r23
    1960:	76 2f       	mov	r23, r22
    1962:	05 c0       	rjmp	.+10     	; 0x196e <__floatsisf+0x5e>
    1964:	66 23       	and	r22, r22
    1966:	71 f0       	breq	.+28     	; 0x1984 <__floatsisf+0x74>
    1968:	96 e8       	ldi	r25, 0x86	; 134
    196a:	86 2f       	mov	r24, r22
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	2a f0       	brmi	.+10     	; 0x197c <__floatsisf+0x6c>
    1972:	9a 95       	dec	r25
    1974:	66 0f       	add	r22, r22
    1976:	77 1f       	adc	r23, r23
    1978:	88 1f       	adc	r24, r24
    197a:	da f7       	brpl	.-10     	; 0x1972 <__floatsisf+0x62>
    197c:	88 0f       	add	r24, r24
    197e:	96 95       	lsr	r25
    1980:	87 95       	ror	r24
    1982:	97 f9       	bld	r25, 7
    1984:	08 95       	ret

00001986 <__fp_arccos>:
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	1f 93       	push	r17
    198c:	0f 93       	push	r16
    198e:	8b 01       	movw	r16, r22
    1990:	ec 01       	movw	r28, r24
    1992:	e8 ec       	ldi	r30, 0xC8	; 200
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__fp_powser>
    199a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__fp_round>
    199e:	98 01       	movw	r18, r16
    19a0:	ae 01       	movw	r20, r28
    19a2:	8b 01       	movw	r16, r22
    19a4:	ec 01       	movw	r28, r24
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	80 e8       	ldi	r24, 0x80	; 128
    19ac:	9f e3       	ldi	r25, 0x3F	; 63
    19ae:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__subsf3>
    19b2:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <sqrt>
    19b6:	98 01       	movw	r18, r16
    19b8:	ae 01       	movw	r20, r28
    19ba:	0f 91       	pop	r16
    19bc:	1f 91       	pop	r17
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	0c 94 ab 0d 	jmp	0x1b56	; 0x1b56 <__mulsf3x>

000019c6 <__fp_cmp>:
    19c6:	99 0f       	add	r25, r25
    19c8:	00 08       	sbc	r0, r0
    19ca:	55 0f       	add	r21, r21
    19cc:	aa 0b       	sbc	r26, r26
    19ce:	e0 e8       	ldi	r30, 0x80	; 128
    19d0:	fe ef       	ldi	r31, 0xFE	; 254
    19d2:	16 16       	cp	r1, r22
    19d4:	17 06       	cpc	r1, r23
    19d6:	e8 07       	cpc	r30, r24
    19d8:	f9 07       	cpc	r31, r25
    19da:	c0 f0       	brcs	.+48     	; 0x1a0c <__fp_cmp+0x46>
    19dc:	12 16       	cp	r1, r18
    19de:	13 06       	cpc	r1, r19
    19e0:	e4 07       	cpc	r30, r20
    19e2:	f5 07       	cpc	r31, r21
    19e4:	98 f0       	brcs	.+38     	; 0x1a0c <__fp_cmp+0x46>
    19e6:	62 1b       	sub	r22, r18
    19e8:	73 0b       	sbc	r23, r19
    19ea:	84 0b       	sbc	r24, r20
    19ec:	95 0b       	sbc	r25, r21
    19ee:	39 f4       	brne	.+14     	; 0x19fe <__fp_cmp+0x38>
    19f0:	0a 26       	eor	r0, r26
    19f2:	61 f0       	breq	.+24     	; 0x1a0c <__fp_cmp+0x46>
    19f4:	23 2b       	or	r18, r19
    19f6:	24 2b       	or	r18, r20
    19f8:	25 2b       	or	r18, r21
    19fa:	21 f4       	brne	.+8      	; 0x1a04 <__fp_cmp+0x3e>
    19fc:	08 95       	ret
    19fe:	0a 26       	eor	r0, r26
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <__fp_cmp+0x3e>
    1a02:	a1 40       	sbci	r26, 0x01	; 1
    1a04:	a6 95       	lsr	r26
    1a06:	8f ef       	ldi	r24, 0xFF	; 255
    1a08:	81 1d       	adc	r24, r1
    1a0a:	81 1d       	adc	r24, r1
    1a0c:	08 95       	ret

00001a0e <__fp_inf>:
    1a0e:	97 f9       	bld	r25, 7
    1a10:	9f 67       	ori	r25, 0x7F	; 127
    1a12:	80 e8       	ldi	r24, 0x80	; 128
    1a14:	70 e0       	ldi	r23, 0x00	; 0
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	08 95       	ret

00001a1a <__fp_nan>:
    1a1a:	9f ef       	ldi	r25, 0xFF	; 255
    1a1c:	80 ec       	ldi	r24, 0xC0	; 192
    1a1e:	08 95       	ret

00001a20 <__fp_powser>:
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	1f 93       	push	r17
    1a26:	0f 93       	push	r16
    1a28:	ff 92       	push	r15
    1a2a:	ef 92       	push	r14
    1a2c:	df 92       	push	r13
    1a2e:	7b 01       	movw	r14, r22
    1a30:	8c 01       	movw	r16, r24
    1a32:	68 94       	set
    1a34:	06 c0       	rjmp	.+12     	; 0x1a42 <__fp_powser+0x22>
    1a36:	da 2e       	mov	r13, r26
    1a38:	ef 01       	movw	r28, r30
    1a3a:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <__mulsf3x>
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e8 94       	clt
    1a42:	a5 91       	lpm	r26, Z+
    1a44:	25 91       	lpm	r18, Z+
    1a46:	35 91       	lpm	r19, Z+
    1a48:	45 91       	lpm	r20, Z+
    1a4a:	55 91       	lpm	r21, Z+
    1a4c:	a6 f3       	brts	.-24     	; 0x1a36 <__fp_powser+0x16>
    1a4e:	ef 01       	movw	r28, r30
    1a50:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__addsf3x>
    1a54:	fe 01       	movw	r30, r28
    1a56:	97 01       	movw	r18, r14
    1a58:	a8 01       	movw	r20, r16
    1a5a:	da 94       	dec	r13
    1a5c:	69 f7       	brne	.-38     	; 0x1a38 <__fp_powser+0x18>
    1a5e:	df 90       	pop	r13
    1a60:	ef 90       	pop	r14
    1a62:	ff 90       	pop	r15
    1a64:	0f 91       	pop	r16
    1a66:	1f 91       	pop	r17
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <__fp_powsodd>:
    1a6e:	9f 93       	push	r25
    1a70:	8f 93       	push	r24
    1a72:	7f 93       	push	r23
    1a74:	6f 93       	push	r22
    1a76:	ff 93       	push	r31
    1a78:	ef 93       	push	r30
    1a7a:	9b 01       	movw	r18, r22
    1a7c:	ac 01       	movw	r20, r24
    1a7e:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulsf3>
    1a82:	ef 91       	pop	r30
    1a84:	ff 91       	pop	r31
    1a86:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__fp_powser>
    1a8a:	2f 91       	pop	r18
    1a8c:	3f 91       	pop	r19
    1a8e:	4f 91       	pop	r20
    1a90:	5f 91       	pop	r21
    1a92:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__mulsf3>

00001a96 <__fp_pscA>:
    1a96:	00 24       	eor	r0, r0
    1a98:	0a 94       	dec	r0
    1a9a:	16 16       	cp	r1, r22
    1a9c:	17 06       	cpc	r1, r23
    1a9e:	18 06       	cpc	r1, r24
    1aa0:	09 06       	cpc	r0, r25
    1aa2:	08 95       	ret

00001aa4 <__fp_pscB>:
    1aa4:	00 24       	eor	r0, r0
    1aa6:	0a 94       	dec	r0
    1aa8:	12 16       	cp	r1, r18
    1aaa:	13 06       	cpc	r1, r19
    1aac:	14 06       	cpc	r1, r20
    1aae:	05 06       	cpc	r0, r21
    1ab0:	08 95       	ret

00001ab2 <__fp_round>:
    1ab2:	09 2e       	mov	r0, r25
    1ab4:	03 94       	inc	r0
    1ab6:	00 0c       	add	r0, r0
    1ab8:	11 f4       	brne	.+4      	; 0x1abe <__fp_round+0xc>
    1aba:	88 23       	and	r24, r24
    1abc:	52 f0       	brmi	.+20     	; 0x1ad2 <__fp_round+0x20>
    1abe:	bb 0f       	add	r27, r27
    1ac0:	40 f4       	brcc	.+16     	; 0x1ad2 <__fp_round+0x20>
    1ac2:	bf 2b       	or	r27, r31
    1ac4:	11 f4       	brne	.+4      	; 0x1aca <__fp_round+0x18>
    1ac6:	60 ff       	sbrs	r22, 0
    1ac8:	04 c0       	rjmp	.+8      	; 0x1ad2 <__fp_round+0x20>
    1aca:	6f 5f       	subi	r22, 0xFF	; 255
    1acc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ace:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad2:	08 95       	ret

00001ad4 <__fp_split3>:
    1ad4:	57 fd       	sbrc	r21, 7
    1ad6:	90 58       	subi	r25, 0x80	; 128
    1ad8:	44 0f       	add	r20, r20
    1ada:	55 1f       	adc	r21, r21
    1adc:	59 f0       	breq	.+22     	; 0x1af4 <__fp_splitA+0x10>
    1ade:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae0:	71 f0       	breq	.+28     	; 0x1afe <__fp_splitA+0x1a>
    1ae2:	47 95       	ror	r20

00001ae4 <__fp_splitA>:
    1ae4:	88 0f       	add	r24, r24
    1ae6:	97 fb       	bst	r25, 7
    1ae8:	99 1f       	adc	r25, r25
    1aea:	61 f0       	breq	.+24     	; 0x1b04 <__fp_splitA+0x20>
    1aec:	9f 3f       	cpi	r25, 0xFF	; 255
    1aee:	79 f0       	breq	.+30     	; 0x1b0e <__fp_splitA+0x2a>
    1af0:	87 95       	ror	r24
    1af2:	08 95       	ret
    1af4:	12 16       	cp	r1, r18
    1af6:	13 06       	cpc	r1, r19
    1af8:	14 06       	cpc	r1, r20
    1afa:	55 1f       	adc	r21, r21
    1afc:	f2 cf       	rjmp	.-28     	; 0x1ae2 <__fp_split3+0xe>
    1afe:	46 95       	lsr	r20
    1b00:	f1 df       	rcall	.-30     	; 0x1ae4 <__fp_splitA>
    1b02:	08 c0       	rjmp	.+16     	; 0x1b14 <__fp_splitA+0x30>
    1b04:	16 16       	cp	r1, r22
    1b06:	17 06       	cpc	r1, r23
    1b08:	18 06       	cpc	r1, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	f1 cf       	rjmp	.-30     	; 0x1af0 <__fp_splitA+0xc>
    1b0e:	86 95       	lsr	r24
    1b10:	71 05       	cpc	r23, r1
    1b12:	61 05       	cpc	r22, r1
    1b14:	08 94       	sec
    1b16:	08 95       	ret

00001b18 <__fp_zero>:
    1b18:	e8 94       	clt

00001b1a <__fp_szero>:
    1b1a:	bb 27       	eor	r27, r27
    1b1c:	66 27       	eor	r22, r22
    1b1e:	77 27       	eor	r23, r23
    1b20:	cb 01       	movw	r24, r22
    1b22:	97 f9       	bld	r25, 7
    1b24:	08 95       	ret

00001b26 <__gesf2>:
    1b26:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__fp_cmp>
    1b2a:	08 f4       	brcc	.+2      	; 0x1b2e <__gesf2+0x8>
    1b2c:	8f ef       	ldi	r24, 0xFF	; 255
    1b2e:	08 95       	ret

00001b30 <__mulsf3>:
    1b30:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <__mulsf3x>
    1b34:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__fp_round>
    1b38:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__fp_pscA>
    1b3c:	38 f0       	brcs	.+14     	; 0x1b4c <__mulsf3+0x1c>
    1b3e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__fp_pscB>
    1b42:	20 f0       	brcs	.+8      	; 0x1b4c <__mulsf3+0x1c>
    1b44:	95 23       	and	r25, r21
    1b46:	11 f0       	breq	.+4      	; 0x1b4c <__mulsf3+0x1c>
    1b48:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__fp_inf>
    1b4c:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__fp_nan>
    1b50:	11 24       	eor	r1, r1
    1b52:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__fp_szero>

00001b56 <__mulsf3x>:
    1b56:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <__fp_split3>
    1b5a:	70 f3       	brcs	.-36     	; 0x1b38 <__mulsf3+0x8>

00001b5c <__mulsf3_pse>:
    1b5c:	95 9f       	mul	r25, r21
    1b5e:	c1 f3       	breq	.-16     	; 0x1b50 <__mulsf3+0x20>
    1b60:	95 0f       	add	r25, r21
    1b62:	50 e0       	ldi	r21, 0x00	; 0
    1b64:	55 1f       	adc	r21, r21
    1b66:	62 9f       	mul	r22, r18
    1b68:	f0 01       	movw	r30, r0
    1b6a:	72 9f       	mul	r23, r18
    1b6c:	bb 27       	eor	r27, r27
    1b6e:	f0 0d       	add	r31, r0
    1b70:	b1 1d       	adc	r27, r1
    1b72:	63 9f       	mul	r22, r19
    1b74:	aa 27       	eor	r26, r26
    1b76:	f0 0d       	add	r31, r0
    1b78:	b1 1d       	adc	r27, r1
    1b7a:	aa 1f       	adc	r26, r26
    1b7c:	64 9f       	mul	r22, r20
    1b7e:	66 27       	eor	r22, r22
    1b80:	b0 0d       	add	r27, r0
    1b82:	a1 1d       	adc	r26, r1
    1b84:	66 1f       	adc	r22, r22
    1b86:	82 9f       	mul	r24, r18
    1b88:	22 27       	eor	r18, r18
    1b8a:	b0 0d       	add	r27, r0
    1b8c:	a1 1d       	adc	r26, r1
    1b8e:	62 1f       	adc	r22, r18
    1b90:	73 9f       	mul	r23, r19
    1b92:	b0 0d       	add	r27, r0
    1b94:	a1 1d       	adc	r26, r1
    1b96:	62 1f       	adc	r22, r18
    1b98:	83 9f       	mul	r24, r19
    1b9a:	a0 0d       	add	r26, r0
    1b9c:	61 1d       	adc	r22, r1
    1b9e:	22 1f       	adc	r18, r18
    1ba0:	74 9f       	mul	r23, r20
    1ba2:	33 27       	eor	r19, r19
    1ba4:	a0 0d       	add	r26, r0
    1ba6:	61 1d       	adc	r22, r1
    1ba8:	23 1f       	adc	r18, r19
    1baa:	84 9f       	mul	r24, r20
    1bac:	60 0d       	add	r22, r0
    1bae:	21 1d       	adc	r18, r1
    1bb0:	82 2f       	mov	r24, r18
    1bb2:	76 2f       	mov	r23, r22
    1bb4:	6a 2f       	mov	r22, r26
    1bb6:	11 24       	eor	r1, r1
    1bb8:	9f 57       	subi	r25, 0x7F	; 127
    1bba:	50 40       	sbci	r21, 0x00	; 0
    1bbc:	9a f0       	brmi	.+38     	; 0x1be4 <__mulsf3_pse+0x88>
    1bbe:	f1 f0       	breq	.+60     	; 0x1bfc <__mulsf3_pse+0xa0>
    1bc0:	88 23       	and	r24, r24
    1bc2:	4a f0       	brmi	.+18     	; 0x1bd6 <__mulsf3_pse+0x7a>
    1bc4:	ee 0f       	add	r30, r30
    1bc6:	ff 1f       	adc	r31, r31
    1bc8:	bb 1f       	adc	r27, r27
    1bca:	66 1f       	adc	r22, r22
    1bcc:	77 1f       	adc	r23, r23
    1bce:	88 1f       	adc	r24, r24
    1bd0:	91 50       	subi	r25, 0x01	; 1
    1bd2:	50 40       	sbci	r21, 0x00	; 0
    1bd4:	a9 f7       	brne	.-22     	; 0x1bc0 <__mulsf3_pse+0x64>
    1bd6:	9e 3f       	cpi	r25, 0xFE	; 254
    1bd8:	51 05       	cpc	r21, r1
    1bda:	80 f0       	brcs	.+32     	; 0x1bfc <__mulsf3_pse+0xa0>
    1bdc:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__fp_inf>
    1be0:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__fp_szero>
    1be4:	5f 3f       	cpi	r21, 0xFF	; 255
    1be6:	e4 f3       	brlt	.-8      	; 0x1be0 <__mulsf3_pse+0x84>
    1be8:	98 3e       	cpi	r25, 0xE8	; 232
    1bea:	d4 f3       	brlt	.-12     	; 0x1be0 <__mulsf3_pse+0x84>
    1bec:	86 95       	lsr	r24
    1bee:	77 95       	ror	r23
    1bf0:	67 95       	ror	r22
    1bf2:	b7 95       	ror	r27
    1bf4:	f7 95       	ror	r31
    1bf6:	e7 95       	ror	r30
    1bf8:	9f 5f       	subi	r25, 0xFF	; 255
    1bfa:	c1 f7       	brne	.-16     	; 0x1bec <__mulsf3_pse+0x90>
    1bfc:	fe 2b       	or	r31, r30
    1bfe:	88 0f       	add	r24, r24
    1c00:	91 1d       	adc	r25, r1
    1c02:	96 95       	lsr	r25
    1c04:	87 95       	ror	r24
    1c06:	97 f9       	bld	r25, 7
    1c08:	08 95       	ret
    1c0a:	19 f4       	brne	.+6      	; 0x1c12 <__mulsf3_pse+0xb6>
    1c0c:	16 f4       	brtc	.+4      	; 0x1c12 <__mulsf3_pse+0xb6>
    1c0e:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__fp_nan>
    1c12:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__fp_mpack>

00001c16 <sqrt>:
    1c16:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__fp_splitA>
    1c1a:	b8 f3       	brcs	.-18     	; 0x1c0a <__mulsf3_pse+0xae>
    1c1c:	99 23       	and	r25, r25
    1c1e:	c9 f3       	breq	.-14     	; 0x1c12 <__mulsf3_pse+0xb6>
    1c20:	b6 f3       	brts	.-20     	; 0x1c0e <__mulsf3_pse+0xb2>
    1c22:	9f 57       	subi	r25, 0x7F	; 127
    1c24:	55 0b       	sbc	r21, r21
    1c26:	87 ff       	sbrs	r24, 7
    1c28:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__fp_norm2>
    1c2c:	00 24       	eor	r0, r0
    1c2e:	a0 e6       	ldi	r26, 0x60	; 96
    1c30:	40 ea       	ldi	r20, 0xA0	; 160
    1c32:	90 01       	movw	r18, r0
    1c34:	80 58       	subi	r24, 0x80	; 128
    1c36:	56 95       	lsr	r21
    1c38:	97 95       	ror	r25
    1c3a:	28 f4       	brcc	.+10     	; 0x1c46 <sqrt+0x30>
    1c3c:	80 5c       	subi	r24, 0xC0	; 192
    1c3e:	66 0f       	add	r22, r22
    1c40:	77 1f       	adc	r23, r23
    1c42:	88 1f       	adc	r24, r24
    1c44:	20 f0       	brcs	.+8      	; 0x1c4e <sqrt+0x38>
    1c46:	26 17       	cp	r18, r22
    1c48:	37 07       	cpc	r19, r23
    1c4a:	48 07       	cpc	r20, r24
    1c4c:	30 f4       	brcc	.+12     	; 0x1c5a <sqrt+0x44>
    1c4e:	62 1b       	sub	r22, r18
    1c50:	73 0b       	sbc	r23, r19
    1c52:	84 0b       	sbc	r24, r20
    1c54:	20 29       	or	r18, r0
    1c56:	31 29       	or	r19, r1
    1c58:	4a 2b       	or	r20, r26
    1c5a:	a6 95       	lsr	r26
    1c5c:	17 94       	ror	r1
    1c5e:	07 94       	ror	r0
    1c60:	20 25       	eor	r18, r0
    1c62:	31 25       	eor	r19, r1
    1c64:	4a 27       	eor	r20, r26
    1c66:	58 f7       	brcc	.-42     	; 0x1c3e <sqrt+0x28>
    1c68:	66 0f       	add	r22, r22
    1c6a:	77 1f       	adc	r23, r23
    1c6c:	88 1f       	adc	r24, r24
    1c6e:	20 f0       	brcs	.+8      	; 0x1c78 <sqrt+0x62>
    1c70:	26 17       	cp	r18, r22
    1c72:	37 07       	cpc	r19, r23
    1c74:	48 07       	cpc	r20, r24
    1c76:	30 f4       	brcc	.+12     	; 0x1c84 <sqrt+0x6e>
    1c78:	62 0b       	sbc	r22, r18
    1c7a:	73 0b       	sbc	r23, r19
    1c7c:	84 0b       	sbc	r24, r20
    1c7e:	20 0d       	add	r18, r0
    1c80:	31 1d       	adc	r19, r1
    1c82:	41 1d       	adc	r20, r1
    1c84:	a0 95       	com	r26
    1c86:	81 f7       	brne	.-32     	; 0x1c68 <sqrt+0x52>
    1c88:	b9 01       	movw	r22, r18
    1c8a:	84 2f       	mov	r24, r20
    1c8c:	91 58       	subi	r25, 0x81	; 129
    1c8e:	88 0f       	add	r24, r24
    1c90:	96 95       	lsr	r25
    1c92:	87 95       	ror	r24
    1c94:	08 95       	ret

00001c96 <square>:
    1c96:	9b 01       	movw	r18, r22
    1c98:	ac 01       	movw	r20, r24
    1c9a:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__mulsf3>

00001c9e <__fp_mpack>:
    1c9e:	9f 3f       	cpi	r25, 0xFF	; 255
    1ca0:	31 f0       	breq	.+12     	; 0x1cae <__fp_mpack_finite+0xc>

00001ca2 <__fp_mpack_finite>:
    1ca2:	91 50       	subi	r25, 0x01	; 1
    1ca4:	20 f4       	brcc	.+8      	; 0x1cae <__fp_mpack_finite+0xc>
    1ca6:	87 95       	ror	r24
    1ca8:	77 95       	ror	r23
    1caa:	67 95       	ror	r22
    1cac:	b7 95       	ror	r27
    1cae:	88 0f       	add	r24, r24
    1cb0:	91 1d       	adc	r25, r1
    1cb2:	96 95       	lsr	r25
    1cb4:	87 95       	ror	r24
    1cb6:	97 f9       	bld	r25, 7
    1cb8:	08 95       	ret

00001cba <__fp_norm2>:
    1cba:	91 50       	subi	r25, 0x01	; 1
    1cbc:	50 40       	sbci	r21, 0x00	; 0
    1cbe:	66 0f       	add	r22, r22
    1cc0:	77 1f       	adc	r23, r23
    1cc2:	88 1f       	adc	r24, r24
    1cc4:	d2 f7       	brpl	.-12     	; 0x1cba <__fp_norm2>
    1cc6:	08 95       	ret

00001cc8 <_exit>:
    1cc8:	f8 94       	cli

00001cca <__stop_program>:
    1cca:	ff cf       	rjmp	.-2      	; 0x1cca <__stop_program>
