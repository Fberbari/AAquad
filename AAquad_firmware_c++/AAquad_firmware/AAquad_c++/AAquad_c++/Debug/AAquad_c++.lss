
AAquad_c++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000af1  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000990  00000000  00000000  00000e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000350  00000000  00000000  00001791  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055e  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a4  00000000  00000000  000020d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002176  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_1>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a6 30       	cpi	r26, 0x06	; 6
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:
	volatile uint16_t requested_aileron_pos = 0;
	
int main(void){
	

	TCCR1B |= (1 << CS10);	// timer starts
  dc:	e1 e8       	ldi	r30, 0x81	; 129
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	80 83       	st	Z, r24

	//PORTD |= (1 << 2);	// pin D2 set as an input 
	
	initialize::interrupts();
  e6:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN10initialize10interruptsEv>
	
	sei();
  ea:	78 94       	sei
			
		}
		
		*/
	
		if (requested_aileron_pos < 10000){
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f4:	80 31       	cpi	r24, 0x10	; 16
  f6:	97 42       	sbci	r25, 0x27	; 39
  f8:	48 f4       	brcc	.+18     	; 0x10c <main+0x30>
			
			pwm_width = requested_aileron_pos;
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 102:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pwm_width+0x1>
 106:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pwm_width>
 10a:	f0 cf       	rjmp	.-32     	; 0xec <main+0x10>
		}
		else{
			
			pwm_width = 0xffff - requested_aileron_pos;
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 110:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 114:	80 95       	com	r24
 116:	90 95       	com	r25
 118:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pwm_width+0x1>
 11c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pwm_width>
 120:	e5 cf       	rjmp	.-54     	; 0xec <main+0x10>

00000122 <__vector_1>:
return 0;

}


ISR(INT0_vect){ 			
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25

	uint16_t temp = TCNT1;
 138:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 13c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	 
	if ( temp < temp_timer_aileron){	// timer overflow 			
 140:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_aileron>
 144:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_aileron+0x1>
 148:	82 17       	cp	r24, r18
 14a:	93 07       	cpc	r25, r19
 14c:	70 f4       	brcc	.+28     	; 0x16a <__vector_1+0x48>
		
		requested_aileron_pos = (0xffff - temp_timer_aileron) + temp ; 		
 14e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <temp_timer_aileron>
 152:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <temp_timer_aileron+0x1>
 156:	9c 01       	movw	r18, r24
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	31 09       	sbc	r19, r1
 15c:	24 1b       	sub	r18, r20
 15e:	35 0b       	sbc	r19, r21
 160:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 164:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 168:	0b c0       	rjmp	.+22     	; 0x180 <__vector_1+0x5e>
	} 		
	
	else {	// regular case 				
		
		requested_aileron_pos = temp - temp_timer_aileron;
 16a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_aileron>
 16e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_aileron+0x1>
 172:	ac 01       	movw	r20, r24
 174:	42 1b       	sub	r20, r18
 176:	53 0b       	sbc	r21, r19
 178:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <_edata+0x1>
 17c:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <_edata>
	} 					
	
	temp_timer_aileron = temp; 						
 180:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <temp_timer_aileron+0x1>
 184:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_timer_aileron>
	
	
	// here, there is a chance that the value stored in requested aileron is actually (0xffff - actual requested aileron) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short. 	
	
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <_ZN10initialize10interruptsEv>:


void initialize::interrupts(){

	// external int 0
	EIMSK |= (1 << INT0); // enable the int0 interrupt												
 19e:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC00);	// will fire at any logical change
 1a0:	e9 e6       	ldi	r30, 0x69	; 105
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	81 60       	ori	r24, 0x01	; 1
 1a8:	80 83       	st	Z, r24

	// external int 1
	EIMSK |= (1 << INT1); // enable the int0 interrupt
 1aa:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= (1 << ISC10);	// will fire at any logical change
 1ac:	80 81       	ld	r24, Z
 1ae:	84 60       	ori	r24, 0x04	; 4
 1b0:	80 83       	st	Z, r24

	// pcint 0 (for pin C3)
	PCICR |= (1 << PCIE0);
 1b2:	e8 e6       	ldi	r30, 0x68	; 104
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);
 1bc:	ac e6       	ldi	r26, 0x6C	; 108
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	8c 91       	ld	r24, X
 1c2:	88 60       	ori	r24, 0x08	; 8
 1c4:	8c 93       	st	X, r24

	//pcint 1 (for pin B1)
	PCICR |= (1 << PCIE1);
 1c6:	80 81       	ld	r24, Z
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT1);
 1cc:	eb e6       	ldi	r30, 0x6B	; 107
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	82 60       	ori	r24, 0x02	; 2
 1d4:	80 83       	st	Z, r24
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
