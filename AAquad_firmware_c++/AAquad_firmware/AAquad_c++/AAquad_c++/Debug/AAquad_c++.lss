
AAquad_c++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000458  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  000004cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ef  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cc2  00000000  00000000  00001c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000796  00000000  00000000  00002905  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  0000309c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000943  00000000  00000000  00003304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000414  00000000  00000000  00003c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000405b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_1>
   8:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_2>
   c:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_3>
  10:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_4>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a3 31       	cpi	r26, 0x13	; 19
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 2a 02 	jmp	0x454	; 0x454 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:
	volatile uint16_t temp_timer_throttle = 0; 

	volatile uint16_t temp0;
	

int main(void){
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	60 97       	sbiw	r28, 0x10	; 16
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	cd bf       	out	0x3d, r28	; 61

	initialize::timers();
  f0:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN10initialize6timersEv>
	initialize::interrupts();
  f4:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN10initialize10interruptsEv>
	

	I2C_328pb i2c(0xFA); // 
  f8:	6a ef       	ldi	r22, 0xFA	; 250
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	ce 01       	movw	r24, r28
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN9I2C_328pbC1Ei>
	
	pilot_instructions pilot;
	pilot.set_max_angle(30);
 104:	6e e1       	ldi	r22, 0x1E	; 30
 106:	ce 01       	movw	r24, r28
 108:	02 96       	adiw	r24, 0x02	; 2
 10a:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN18pilot_instructions13set_max_angleEh>
	pilot.set_max_yaw_rate(45);	// this retrieves and holds the pilot's wishes
 10e:	6d e2       	ldi	r22, 0x2D	; 45
 110:	ce 01       	movw	r24, r28
 112:	02 96       	adiw	r24, 0x02	; 2
 114:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_ZN18pilot_instructions16set_max_yaw_rateEh>
*/
/*
	I2C_328pb pwm_chip_I2c(0xAA);
	pwm_chip pwm(pwm_chip_I2c, 10);
*/
	sei();
 118:	78 94       	sei
	/*	
		sense.read_acc(sensor_I2C);
		sense.read_gyro(sensor_I2C);	// all sensor data processed
		sense.compute_position();
	*/	
		pilot.compute();	// all pilot data processed
 11a:	ce 01       	movw	r24, r28
 11c:	02 96       	adiw	r24, 0x02	; 2
 11e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <_ZN18pilot_instructions7computeEv>
		pitch_pid.setDesiredPoint(pilot.get_pitch_angle());
		
		PID::combine_data(bank_pid.refresh(sense.get_bank()), pitch_pid.refresh(sense.get_pitch), pilot.get_throttle_power());

	*/
		motors = pilot.get_throttle_power();
 122:	ce 01       	movw	r24, r28
 124:	02 96       	adiw	r24, 0x02	; 2
 126:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_ZNK18pilot_instructions18get_throttle_powerEv>
 12a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <motors>
 12e:	f5 cf       	rjmp	.-22     	; 0x11a <main+0x3e>

00000130 <__vector_2>:

}



ISR(INT1_vect){
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
	
		uint16_t temp = TCNT1;
 146:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 14a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

		if ( temp < temp_timer_aileron){	// timer overflow
 14e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <temp_timer_aileron>
 152:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
 156:	82 17       	cp	r24, r18
 158:	93 07       	cpc	r25, r19
 15a:	70 f4       	brcc	.+28     	; 0x178 <__vector_2+0x48>

			requested_aileron_pos = (0xffff - temp_timer_aileron) + temp ;
 15c:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <temp_timer_aileron>
 160:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
 164:	9c 01       	movw	r18, r24
 166:	21 50       	subi	r18, 0x01	; 1
 168:	31 09       	sbc	r19, r1
 16a:	24 1b       	sub	r18, r20
 16c:	35 0b       	sbc	r19, r21
 16e:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <requested_aileron_pos+0x1>
 172:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <requested_aileron_pos>
 176:	0b c0       	rjmp	.+22     	; 0x18e <__vector_2+0x5e>
		}

		else {	// regular case
	
			requested_aileron_pos = temp - temp_timer_aileron;
 178:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <temp_timer_aileron>
 17c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
 180:	ac 01       	movw	r20, r24
 182:	42 1b       	sub	r20, r18
 184:	53 0b       	sbc	r21, r19
 186:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <requested_aileron_pos+0x1>
 18a:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp;
 18e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <temp_timer_aileron+0x1>
 192:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <temp_timer_aileron>
		
		
		// here, there is a chance that the value stored in requested aileron is actually (0xffff - actual requested aileron) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
	
}
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	5f 91       	pop	r21
 19c:	4f 91       	pop	r20
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_1>:

ISR(INT0_vect){
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
	
		temp0 = TCNT1;
 1be:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1c2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		

		if ( temp0 < temp_timer_throttle){	// timer overflow
 1ce:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 1d2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 1d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp_timer_throttle>
 1da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
 1de:	28 17       	cp	r18, r24
 1e0:	39 07       	cpc	r19, r25
 1e2:	80 f4       	brcc	.+32     	; 0x204 <__vector_1+0x58>

			requested_throttle_pos = (0xffff - temp_timer_throttle) + temp0 ;
 1e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1ec:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_throttle>
 1f0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	82 1b       	sub	r24, r18
 1f8:	93 0b       	sbc	r25, r19
 1fa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
 1fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>
 202:	0e c0       	rjmp	.+28     	; 0x220 <__vector_1+0x74>
		}

		else {	// regular case
	
			requested_throttle_pos = temp0 - temp_timer_throttle;
 204:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 208:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 20c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_throttle>
 210:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
 214:	82 1b       	sub	r24, r18
 216:	93 0b       	sbc	r25, r19
 218:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
 21c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>
			
		}
	
		
		temp_timer_throttle = temp0;
 220:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 224:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 228:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <temp_timer_throttle+0x1>
 22c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_timer_throttle>
		
		
		// here, there is a chance that the value stored in requested throttle is actually (0xffff - actual requested throttle) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
}
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <__vector_3>:




ISR(PCINT0_vect){
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25

	uint16_t temp = TCNT1;
 258:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 25c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

	if ( temp < temp_timer_rudder){	// timer overflow
 260:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <temp_timer_rudder>
 264:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
 268:	82 17       	cp	r24, r18
 26a:	93 07       	cpc	r25, r19
 26c:	70 f4       	brcc	.+28     	; 0x28a <__vector_3+0x48>

		requested_rudder_pos = (0xffff - temp_timer_rudder) + temp ;
 26e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <temp_timer_rudder>
 272:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
 276:	9c 01       	movw	r18, r24
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	31 09       	sbc	r19, r1
 27c:	24 1b       	sub	r18, r20
 27e:	35 0b       	sbc	r19, r21
 280:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <requested_rudder_pos+0x1>
 284:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <requested_rudder_pos>
 288:	0b c0       	rjmp	.+22     	; 0x2a0 <__vector_3+0x5e>
	}

	else {	// regular case

		requested_rudder_pos = temp - temp_timer_rudder;
 28a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <temp_timer_rudder>
 28e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
 292:	ac 01       	movw	r20, r24
 294:	42 1b       	sub	r20, r18
 296:	53 0b       	sbc	r21, r19
 298:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <requested_rudder_pos+0x1>
 29c:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <requested_rudder_pos>
		
	}

	
	temp_timer_rudder = temp;
 2a0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <temp_timer_rudder+0x1>
 2a4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <temp_timer_rudder>
	
	

}
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <__vector_4>:

ISR(PCINT1_vect){
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	2f 93       	push	r18
 2ca:	3f 93       	push	r19
 2cc:	4f 93       	push	r20
 2ce:	5f 93       	push	r21
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25

	uint16_t temp = TCNT1;
 2d4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2d8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	

	if ( temp < temp_timer_elevator){	// timer overflow
 2dc:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temp_timer_elevator>
 2e0:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
 2e4:	82 17       	cp	r24, r18
 2e6:	93 07       	cpc	r25, r19
 2e8:	70 f4       	brcc	.+28     	; 0x306 <__vector_4+0x48>

		requested_elevator_pos = (0xffff - temp_timer_elevator) + temp ;
 2ea:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_timer_elevator>
 2ee:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
 2f2:	9c 01       	movw	r18, r24
 2f4:	21 50       	subi	r18, 0x01	; 1
 2f6:	31 09       	sbc	r19, r1
 2f8:	24 1b       	sub	r18, r20
 2fa:	35 0b       	sbc	r19, r21
 2fc:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <requested_elevator_pos+0x1>
 300:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <requested_elevator_pos>
 304:	0b c0       	rjmp	.+22     	; 0x31c <__vector_4+0x5e>
	}

	else {	// regular case

		requested_elevator_pos = temp - temp_timer_elevator;
 306:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temp_timer_elevator>
 30a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
 30e:	ac 01       	movw	r20, r24
 310:	42 1b       	sub	r20, r18
 312:	53 0b       	sbc	r21, r19
 314:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <requested_elevator_pos+0x1>
 318:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <requested_elevator_pos>
		
	}

	
	temp_timer_elevator = temp;
 31c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <temp_timer_elevator+0x1>
 320:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temp_timer_elevator>
	
	

}
 324:	9f 91       	pop	r25
 326:	8f 91       	pop	r24
 328:	5f 91       	pop	r21
 32a:	4f 91       	pop	r20
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <_ZN9I2C_328pbC1Ei>:

I2C_328pb::I2C_328pb(int bit_rate){

	// takes care of any and all initialsation

	TWBR0 = bit_rate;
 33a:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	
	PORTC |= ((1 << 4) | (1 << 5));
 33e:	88 b1       	in	r24, 0x08	; 8
 340:	80 63       	ori	r24, 0x30	; 48
 342:	88 b9       	out	0x08, r24	; 8
 344:	08 95       	ret

00000346 <_ZN10initialize10interruptsEv>:


void initialize::interrupts(){

	// external int 0
	EIMSK |= (1 << INT0); // enable the int0 interrupt												
 346:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC00);	// will fire at any logical change
 348:	e9 e6       	ldi	r30, 0x69	; 105
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	81 60       	ori	r24, 0x01	; 1
 350:	80 83       	st	Z, r24

	// external int 1
	EIMSK |= (1 << INT1); // enable the int0 interrupt
 352:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= (1 << ISC10);	// will fire at any logical change
 354:	80 81       	ld	r24, Z
 356:	84 60       	ori	r24, 0x04	; 4
 358:	80 83       	st	Z, r24

	// pcint 0 (for pin C3)
	PCICR |= (1 << PCIE0);
 35a:	e8 e6       	ldi	r30, 0x68	; 104
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	81 60       	ori	r24, 0x01	; 1
 362:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);
 364:	ac e6       	ldi	r26, 0x6C	; 108
 366:	b0 e0       	ldi	r27, 0x00	; 0
 368:	8c 91       	ld	r24, X
 36a:	88 60       	ori	r24, 0x08	; 8
 36c:	8c 93       	st	X, r24

	//pcint 1 (for pin B1)
	PCICR |= (1 << PCIE1);
 36e:	80 81       	ld	r24, Z
 370:	82 60       	ori	r24, 0x02	; 2
 372:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT1);
 374:	eb e6       	ldi	r30, 0x6B	; 107
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	82 60       	ori	r24, 0x02	; 2
 37c:	80 83       	st	Z, r24
	
	// setting the pullup resistors on everything
	DDRD &= ~(1 << 2);
 37e:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << 2);
 380:	5a 9a       	sbi	0x0b, 2	; 11
	
	DDRC &= ~(1 << 3);
 382:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1 << 3);
 384:	43 9a       	sbi	0x08, 3	; 8
	
	DDRD &= ~(1 << 3);
 386:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1 << 3);
 388:	5b 9a       	sbi	0x0b, 3	; 11
	
	DDRD &= ~(1 << 4);
 38a:	54 98       	cbi	0x0a, 4	; 10
	PORTD |= (1 << 4);
 38c:	5c 9a       	sbi	0x0b, 4	; 11
 38e:	08 95       	ret

00000390 <_ZN10initialize6timersEv>:
}

void initialize::timers(){

	// by default the timer is set to normal mode
	TCCR1B |= ( (1 << CS10));	// timer will run with 8x prescaler and willoverrun 15 times/second
 390:	e1 e8       	ldi	r30, 0x81	; 129
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	81 60       	ori	r24, 0x01	; 1
 398:	80 83       	st	Z, r24
 39a:	08 95       	ret

0000039c <_ZN18pilot_instructions13set_max_angleEh>:
}

float pilot_instructions::get_yaw_rate() const{

	return yaw_rate;
}
 39c:	fc 01       	movw	r30, r24
 39e:	60 83       	st	Z, r22
 3a0:	08 95       	ret

000003a2 <_ZN18pilot_instructions16set_max_yaw_rateEh>:
 3a2:	fc 01       	movw	r30, r24
 3a4:	61 83       	std	Z+1, r22	; 0x01
 3a6:	08 95       	ret

000003a8 <_ZNK18pilot_instructions18get_throttle_powerEv>:


uint8_t pilot_instructions::get_throttle_power() const{

	return throttle_power;
 3a8:	fc 01       	movw	r30, r24
 3aa:	86 85       	ldd	r24, Z+14	; 0x0e
}
 3ac:	08 95       	ret

000003ae <_ZN18pilot_instructions7computeEv>:
	extern volatile uint16_t requested_throttle_pos;


	// 50% of the time the value read is actually the valley of the pwm, that is corrected here 

	if (requested_aileron_pos > 0x7000 ){
 3ae:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <requested_aileron_pos>
 3b2:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <requested_aileron_pos+0x1>
 3b6:	21 30       	cpi	r18, 0x01	; 1
 3b8:	30 47       	sbci	r19, 0x70	; 112
 3ba:	50 f0       	brcs	.+20     	; 0x3d0 <_ZN18pilot_instructions7computeEv+0x22>
			
		requested_aileron_pos = 0xffff - requested_aileron_pos;
 3bc:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <requested_aileron_pos>
 3c0:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <requested_aileron_pos+0x1>
 3c4:	20 95       	com	r18
 3c6:	30 95       	com	r19
 3c8:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <requested_aileron_pos+0x1>
 3cc:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <requested_aileron_pos>
	}

	if (requested_elevator_pos > 0x7000 ){
 3d0:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <requested_elevator_pos>
 3d4:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <requested_elevator_pos+0x1>
 3d8:	21 30       	cpi	r18, 0x01	; 1
 3da:	30 47       	sbci	r19, 0x70	; 112
 3dc:	50 f0       	brcs	.+20     	; 0x3f2 <_ZN18pilot_instructions7computeEv+0x44>
			
		requested_elevator_pos = 0xffff - requested_elevator_pos;
 3de:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <requested_elevator_pos>
 3e2:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <requested_elevator_pos+0x1>
 3e6:	20 95       	com	r18
 3e8:	30 95       	com	r19
 3ea:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <requested_elevator_pos+0x1>
 3ee:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <requested_elevator_pos>
	}

	if (requested_rudder_pos > 0x7000 ){
 3f2:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <requested_rudder_pos>
 3f6:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <requested_rudder_pos+0x1>
 3fa:	21 30       	cpi	r18, 0x01	; 1
 3fc:	30 47       	sbci	r19, 0x70	; 112
 3fe:	50 f0       	brcs	.+20     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			
		requested_rudder_pos = 0xffff - requested_rudder_pos;
 400:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <requested_rudder_pos>
 404:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <requested_rudder_pos+0x1>
 408:	20 95       	com	r18
 40a:	30 95       	com	r19
 40c:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <requested_rudder_pos+0x1>
 410:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <requested_rudder_pos>
	}

	if (requested_throttle_pos > 0x7000 ){
 414:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <requested_throttle_pos>
 418:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
 41c:	21 30       	cpi	r18, 0x01	; 1
 41e:	30 47       	sbci	r19, 0x70	; 112
 420:	50 f0       	brcs	.+20     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			
		requested_throttle_pos = 0xffff - requested_throttle_pos;
 422:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <requested_throttle_pos>
 426:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
 42a:	20 95       	com	r18
 42c:	30 95       	com	r19
 42e:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <requested_throttle_pos+0x1>
 432:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <requested_throttle_pos>


	//bank_angle = ( requested_aileron_pos / 6553 ) * max_angle;	// computes the percentage of the max the pilot wants
	//pitch_angle = (requested_elevator_pos / 6553 ) * max_angle;	// computes the percentage of the max the pilot wants
	//yaw_rate = ( requested_rudder_pos / 6553 ) * max_yaw_rate;	// computes the percentage of the max the pilot wants
	throttle_power = ((requested_throttle_pos - 1122) / 8) ;	// computes the percentage of the max the pilot wants
 436:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <requested_throttle_pos>
 43a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
 43e:	22 56       	subi	r18, 0x62	; 98
 440:	34 40       	sbci	r19, 0x04	; 4
 442:	36 95       	lsr	r19
 444:	27 95       	ror	r18
 446:	36 95       	lsr	r19
 448:	27 95       	ror	r18
 44a:	36 95       	lsr	r19
 44c:	27 95       	ror	r18
 44e:	fc 01       	movw	r30, r24
 450:	26 87       	std	Z+14, r18	; 0x0e
 452:	08 95       	ret

00000454 <_exit>:
 454:	f8 94       	cli

00000456 <__stop_program>:
 456:	ff cf       	rjmp	.-2      	; 0x456 <__stop_program>
