
AAquad_c++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001b32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001abe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800100  00800100  00001b32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000037b0  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000146f  00000000  00000000  00005554  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001076  00000000  00000000  000069c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000634  00000000  00000000  00007a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ecb  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010d6  00000000  00000000  00008f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000a011  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_1>
       8:	0c 94 0b 02 	jmp	0x416	; 0x416 <__vector_2>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_4>
      14:	0c 94 94 02 	jmp	0x528	; 0x528 <__vector_5>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      68:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      6c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      70:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      74:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      78:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      7c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      80:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      84:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      88:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      8c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      90:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      94:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      98:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      9c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      ac:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      b0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      b4:	03 6e       	ori	r16, 0xE3	; 227
      b6:	db 36       	cpi	r29, 0x6B	; 107
      b8:	3d 9a       	sbi	0x07, 5	; 7
      ba:	99 99       	sbic	0x13, 1	; 19
      bc:	99 3d       	cpi	r25, 0xD9	; 217
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	3e 00       	.word	0x003e	; ????
      c4:	00 00       	nop
      c6:	80 3f       	cpi	r24, 0xF0	; 240
      c8:	07 2c       	mov	r0, r7
      ca:	7a a5       	ldd	r23, Y+42	; 0x2a
      cc:	ba 6c       	ori	r27, 0xCA	; 202
      ce:	c5 90       	lpm	r12, Z+
      d0:	da 3b       	cpi	r29, 0xBA	; 186
      d2:	93 65       	ori	r25, 0x53	; 83
      d4:	fc 8b       	std	Y+20, r31	; 0x14
      d6:	bc 53       	subi	r27, 0x3C	; 60
      d8:	f8 10       	cpse	r15, r8
      da:	fd 3c       	cpi	r31, 0xCD	; 205
      dc:	56 92       	lac	Z, r5
      de:	83 4d       	sbci	r24, 0xD3	; 211
      e0:	bd 87       	std	Y+13, r27	; 0x0d
      e2:	9d 3a       	cpi	r25, 0xAD	; 173
      e4:	b6 3d       	cpi	r27, 0xD6	; 214
      e6:	cb c9       	rjmp	.-3178   	; 0xfffff47e <__eeprom_end+0xff7ef47e>
      e8:	bf 5b       	subi	r27, 0xBF	; 191
      ea:	be 73       	andi	r27, 0x3E	; 62
      ec:	da 0f       	add	r29, r26
      ee:	c9 3f       	cpi	r28, 0xF9	; 249

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d8 e0       	ldi	r29, 0x08	; 8
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_clear_bss>:
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	aa 31       	cpi	r26, 0x1A	; 26
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 8c 00 	call	0x118	; 0x118 <main>
     110:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <main>:
	volatile uint16_t temp_timer_throttle = 0; 

	volatile uint16_t temp0;
	

int main(void){
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	cc 5c       	subi	r28, 0xCC	; 204
     122:	d1 09       	sbc	r29, r1
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	de bf       	out	0x3e, r29	; 62
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	cd bf       	out	0x3d, r28	; 61
	

	initialize::timers();
     12e:	0e 94 45 03 	call	0x68a	; 0x68a <_ZN10initialize6timersEv>
	initialize::interrupts();
     132:	0e 94 20 03 	call	0x640	; 0x640 <_ZN10initialize10interruptsEv>
	

	I2C_328pb i2c(0xAA); // 
     136:	6a ea       	ldi	r22, 0xAA	; 170
     138:	70 e0       	ldi	r23, 0x00	; 0
     13a:	ce 01       	movw	r24, r28
     13c:	c9 96       	adiw	r24, 0x39	; 57
     13e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN9I2C_328pbC1Ei>
	
	pilot_instructions pilot;
	pilot.set_max_angle(30);
     142:	6e e1       	ldi	r22, 0x1E	; 30
     144:	ce 01       	movw	r24, r28
     146:	ca 96       	adiw	r24, 0x3a	; 58
     148:	0e 94 cc 05 	call	0xb98	; 0xb98 <_ZN18pilot_instructions13set_max_angleEh>
	pilot.set_max_yaw_rate(45);	// this retrieves and holds the pilot's wishes
     14c:	6d e2       	ldi	r22, 0x2D	; 45
     14e:	ce 01       	movw	r24, r28
     150:	ca 96       	adiw	r24, 0x3a	; 58
     152:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_ZN18pilot_instructions16set_max_yaw_rateEh>

	

	I2C_328pb sensor_I2C(0xAA);	// object created just for use in the sensor object
     156:	6a ea       	ldi	r22, 0xAA	; 170
     158:	70 e0       	ldi	r23, 0x00	; 0
     15a:	ce 01       	movw	r24, r28
     15c:	8d 5b       	subi	r24, 0xBD	; 189
     15e:	9f 4f       	sbci	r25, 0xFF	; 255
     160:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN9I2C_328pbC1Ei>
	sensors sense(sensor_I2C);
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	ce 01       	movw	r24, r28
     168:	8c 5b       	subi	r24, 0xBC	; 188
     16a:	9f 4f       	sbci	r25, 0xFF	; 255
     16c:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN7sensorsC1E9I2C_328pb>

	PID bank_pid;
     170:	ce 01       	movw	r24, r28
     172:	82 5a       	subi	r24, 0xA2	; 162
     174:	9f 4f       	sbci	r25, 0xFF	; 255
     176:	0e 94 4b 03 	call	0x696	; 0x696 <_ZN3PIDC1Ev>
	bank_pid.setWeights(0.5,0.5,0.5);
     17a:	0f 2e       	mov	r0, r31
     17c:	81 2c       	mov	r8, r1
     17e:	91 2c       	mov	r9, r1
     180:	a1 2c       	mov	r10, r1
     182:	ff e3       	ldi	r31, 0x3F	; 63
     184:	bf 2e       	mov	r11, r31
     186:	f0 2d       	mov	r31, r0
     188:	8d aa       	std	Y+53, r8	; 0x35
     18a:	9e aa       	std	Y+54, r9	; 0x36
     18c:	af aa       	std	Y+55, r10	; 0x37
     18e:	b8 ae       	std	Y+56, r11	; 0x38
     190:	89 aa       	std	Y+49, r8	; 0x31
     192:	9a aa       	std	Y+50, r9	; 0x32
     194:	ab aa       	std	Y+51, r10	; 0x33
     196:	bc aa       	std	Y+52, r11	; 0x34
     198:	8d a6       	std	Y+45, r8	; 0x2d
     19a:	9e a6       	std	Y+46, r9	; 0x2e
     19c:	af a6       	std	Y+47, r10	; 0x2f
     19e:	b8 aa       	std	Y+48, r11	; 0x30
     1a0:	9e 01       	movw	r18, r28
     1a2:	2b 5c       	subi	r18, 0xCB	; 203
     1a4:	3f 4f       	sbci	r19, 0xFF	; 255
     1a6:	ae 01       	movw	r20, r28
     1a8:	4f 5c       	subi	r20, 0xCF	; 207
     1aa:	5f 4f       	sbci	r21, 0xFF	; 255
     1ac:	be 01       	movw	r22, r28
     1ae:	63 5d       	subi	r22, 0xD3	; 211
     1b0:	7f 4f       	sbci	r23, 0xFF	; 255
     1b2:	ce 01       	movw	r24, r28
     1b4:	82 5a       	subi	r24, 0xA2	; 162
     1b6:	9f 4f       	sbci	r25, 0xFF	; 255
     1b8:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN3PID10setWeightsERKfS1_S1_>
	bank_pid.setOutputLowerLimit(-50);
     1bc:	0f 2e       	mov	r0, r31
     1be:	c1 2c       	mov	r12, r1
     1c0:	d1 2c       	mov	r13, r1
     1c2:	f8 e4       	ldi	r31, 0x48	; 72
     1c4:	ef 2e       	mov	r14, r31
     1c6:	f2 ec       	ldi	r31, 0xC2	; 194
     1c8:	ff 2e       	mov	r15, r31
     1ca:	f0 2d       	mov	r31, r0
     1cc:	c9 a6       	std	Y+41, r12	; 0x29
     1ce:	da a6       	std	Y+42, r13	; 0x2a
     1d0:	eb a6       	std	Y+43, r14	; 0x2b
     1d2:	fc a6       	std	Y+44, r15	; 0x2c
     1d4:	be 01       	movw	r22, r28
     1d6:	67 5d       	subi	r22, 0xD7	; 215
     1d8:	7f 4f       	sbci	r23, 0xFF	; 255
     1da:	ce 01       	movw	r24, r28
     1dc:	82 5a       	subi	r24, 0xA2	; 162
     1de:	9f 4f       	sbci	r25, 0xFF	; 255
     1e0:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN3PID19setOutputLowerLimitERKf>
	bank_pid.setOutputUpperLimit(50);
     1e4:	0f 2e       	mov	r0, r31
     1e6:	41 2c       	mov	r4, r1
     1e8:	51 2c       	mov	r5, r1
     1ea:	f8 e4       	ldi	r31, 0x48	; 72
     1ec:	6f 2e       	mov	r6, r31
     1ee:	f2 e4       	ldi	r31, 0x42	; 66
     1f0:	7f 2e       	mov	r7, r31
     1f2:	f0 2d       	mov	r31, r0
     1f4:	4d a2       	std	Y+37, r4	; 0x25
     1f6:	5e a2       	std	Y+38, r5	; 0x26
     1f8:	6f a2       	std	Y+39, r6	; 0x27
     1fa:	78 a6       	std	Y+40, r7	; 0x28
     1fc:	be 01       	movw	r22, r28
     1fe:	6b 5d       	subi	r22, 0xDB	; 219
     200:	7f 4f       	sbci	r23, 0xFF	; 255
     202:	ce 01       	movw	r24, r28
     204:	82 5a       	subi	r24, 0xA2	; 162
     206:	9f 4f       	sbci	r25, 0xFF	; 255
     208:	0e 94 89 03 	call	0x712	; 0x712 <_ZN3PID19setOutputUpperLimitERKf>

	PID pitch_pid;
     20c:	ce 01       	movw	r24, r28
     20e:	8c 56       	subi	r24, 0x6C	; 108
     210:	9f 4f       	sbci	r25, 0xFF	; 255
     212:	0e 94 4b 03 	call	0x696	; 0x696 <_ZN3PIDC1Ev>
	pitch_pid.setWeights(0.5,0.5,0.5);
     216:	89 a2       	std	Y+33, r8	; 0x21
     218:	9a a2       	std	Y+34, r9	; 0x22
     21a:	ab a2       	std	Y+35, r10	; 0x23
     21c:	bc a2       	std	Y+36, r11	; 0x24
     21e:	8d 8e       	std	Y+29, r8	; 0x1d
     220:	9e 8e       	std	Y+30, r9	; 0x1e
     222:	af 8e       	std	Y+31, r10	; 0x1f
     224:	b8 a2       	std	Y+32, r11	; 0x20
     226:	89 8e       	std	Y+25, r8	; 0x19
     228:	9a 8e       	std	Y+26, r9	; 0x1a
     22a:	ab 8e       	std	Y+27, r10	; 0x1b
     22c:	bc 8e       	std	Y+28, r11	; 0x1c
     22e:	9e 01       	movw	r18, r28
     230:	2f 5d       	subi	r18, 0xDF	; 223
     232:	3f 4f       	sbci	r19, 0xFF	; 255
     234:	ae 01       	movw	r20, r28
     236:	43 5e       	subi	r20, 0xE3	; 227
     238:	5f 4f       	sbci	r21, 0xFF	; 255
     23a:	be 01       	movw	r22, r28
     23c:	67 5e       	subi	r22, 0xE7	; 231
     23e:	7f 4f       	sbci	r23, 0xFF	; 255
     240:	ce 01       	movw	r24, r28
     242:	8c 56       	subi	r24, 0x6C	; 108
     244:	9f 4f       	sbci	r25, 0xFF	; 255
     246:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_ZN3PID10setWeightsERKfS1_S1_>
	pitch_pid.setOutputLowerLimit(-50);
     24a:	cd 8a       	std	Y+21, r12	; 0x15
     24c:	de 8a       	std	Y+22, r13	; 0x16
     24e:	ef 8a       	std	Y+23, r14	; 0x17
     250:	f8 8e       	std	Y+24, r15	; 0x18
     252:	be 01       	movw	r22, r28
     254:	6b 5e       	subi	r22, 0xEB	; 235
     256:	7f 4f       	sbci	r23, 0xFF	; 255
     258:	ce 01       	movw	r24, r28
     25a:	8c 56       	subi	r24, 0x6C	; 108
     25c:	9f 4f       	sbci	r25, 0xFF	; 255
     25e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN3PID19setOutputLowerLimitERKf>
	pitch_pid.setOutputUpperLimit(50);
     262:	49 8a       	std	Y+17, r4	; 0x11
     264:	5a 8a       	std	Y+18, r5	; 0x12
     266:	6b 8a       	std	Y+19, r6	; 0x13
     268:	7c 8a       	std	Y+20, r7	; 0x14
     26a:	be 01       	movw	r22, r28
     26c:	6f 5e       	subi	r22, 0xEF	; 239
     26e:	7f 4f       	sbci	r23, 0xFF	; 255
     270:	ce 01       	movw	r24, r28
     272:	8c 56       	subi	r24, 0x6C	; 108
     274:	9f 4f       	sbci	r25, 0xFF	; 255
     276:	0e 94 89 03 	call	0x712	; 0x712 <_ZN3PID19setOutputUpperLimitERKf>
	


	I2C_328pb pwm_chip_I2c(0xAA);
     27a:	6a ea       	ldi	r22, 0xAA	; 170
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	ce 01       	movw	r24, r28
     280:	86 53       	subi	r24, 0x36	; 54
     282:	9f 4f       	sbci	r25, 0xFF	; 255
     284:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_ZN9I2C_328pbC1Ei>
	pwm_chip pwm(pwm_chip_I2c, 10);
     288:	4a e0       	ldi	r20, 0x0A	; 10
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	ce 01       	movw	r24, r28
     28e:	85 53       	subi	r24, 0x35	; 53
     290:	9f 4f       	sbci	r25, 0xFF	; 255
     292:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN8pwm_chipC1E9I2C_328pbh>

	sei();
     296:	78 94       	sei

	
	while(1){
		
			
		sense.read_acc(sensor_I2C);
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	ce 01       	movw	r24, r28
     29c:	8c 5b       	subi	r24, 0xBC	; 188
     29e:	9f 4f       	sbci	r25, 0xFF	; 255
     2a0:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <_ZN7sensors8read_accE9I2C_328pb>
		sense.read_gyro(sensor_I2C);	// all sensor data processed
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	ce 01       	movw	r24, r28
     2a8:	8c 5b       	subi	r24, 0xBC	; 188
     2aa:	9f 4f       	sbci	r25, 0xFF	; 255
     2ac:	0e 94 d7 07 	call	0xfae	; 0xfae <_ZN7sensors9read_gyroE9I2C_328pb>
	
		sense.compute_position();
     2b0:	ce 01       	movw	r24, r28
     2b2:	8c 5b       	subi	r24, 0xBC	; 188
     2b4:	9f 4f       	sbci	r25, 0xFF	; 255
     2b6:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN7sensors16compute_positionEv>
		
		pilot.compute();	// all pilot data processed
     2ba:	ce 01       	movw	r24, r28
     2bc:	ca 96       	adiw	r24, 0x3a	; 58
     2be:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN18pilot_instructions7computeEv>
		
		
		
	
		bank_pid.setDesiredPoint(pilot.get_bank_angle());
     2c2:	ce 01       	movw	r24, r28
     2c4:	ca 96       	adiw	r24, 0x3a	; 58
     2c6:	0e 94 d2 05 	call	0xba4	; 0xba4 <_ZNK18pilot_instructions14get_bank_angleEv>
     2ca:	bc 01       	movw	r22, r24
     2cc:	99 0f       	add	r25, r25
     2ce:	88 0b       	sbc	r24, r24
     2d0:	99 0b       	sbc	r25, r25
     2d2:	0e 94 81 0b 	call	0x1702	; 0x1702 <__floatsisf>
     2d6:	6d 87       	std	Y+13, r22	; 0x0d
     2d8:	7e 87       	std	Y+14, r23	; 0x0e
     2da:	8f 87       	std	Y+15, r24	; 0x0f
     2dc:	98 8b       	std	Y+16, r25	; 0x10
     2de:	be 01       	movw	r22, r28
     2e0:	63 5f       	subi	r22, 0xF3	; 243
     2e2:	7f 4f       	sbci	r23, 0xFF	; 255
     2e4:	ce 01       	movw	r24, r28
     2e6:	82 5a       	subi	r24, 0xA2	; 162
     2e8:	9f 4f       	sbci	r25, 0xFF	; 255
     2ea:	0e 94 94 03 	call	0x728	; 0x728 <_ZN3PID15setDesiredPointERKf>

		pitch_pid.setDesiredPoint(pilot.get_pitch_angle());
     2ee:	ce 01       	movw	r24, r28
     2f0:	ca 96       	adiw	r24, 0x3a	; 58
     2f2:	0e 94 d6 05 	call	0xbac	; 0xbac <_ZNK18pilot_instructions15get_pitch_angleEv>
     2f6:	bc 01       	movw	r22, r24
     2f8:	99 0f       	add	r25, r25
     2fa:	88 0b       	sbc	r24, r24
     2fc:	99 0b       	sbc	r25, r25
     2fe:	0e 94 81 0b 	call	0x1702	; 0x1702 <__floatsisf>
     302:	69 87       	std	Y+9, r22	; 0x09
     304:	7a 87       	std	Y+10, r23	; 0x0a
     306:	8b 87       	std	Y+11, r24	; 0x0b
     308:	9c 87       	std	Y+12, r25	; 0x0c
     30a:	be 01       	movw	r22, r28
     30c:	67 5f       	subi	r22, 0xF7	; 247
     30e:	7f 4f       	sbci	r23, 0xFF	; 255
     310:	ce 01       	movw	r24, r28
     312:	8c 56       	subi	r24, 0x6C	; 108
     314:	9f 4f       	sbci	r25, 0xFF	; 255
     316:	0e 94 94 03 	call	0x728	; 0x728 <_ZN3PID15setDesiredPointERKf>
		
	
		PID::combine_data( bank_pid.refresh(sense.get_roll() ), pitch_pid.refresh(sense.get_pitch() ), pilot.get_throttle_power() );
     31a:	ce 01       	movw	r24, r28
     31c:	ca 96       	adiw	r24, 0x3a	; 58
     31e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZNK18pilot_instructions18get_throttle_powerEv>
     322:	18 2f       	mov	r17, r24
     324:	ce 01       	movw	r24, r28
     326:	8c 5b       	subi	r24, 0xBC	; 188
     328:	9f 4f       	sbci	r25, 0xFF	; 255
     32a:	0e 94 3e 0a 	call	0x147c	; 0x147c <_ZNK7sensors9get_pitchEv>
     32e:	6d 83       	std	Y+5, r22	; 0x05
     330:	7e 83       	std	Y+6, r23	; 0x06
     332:	8f 83       	std	Y+7, r24	; 0x07
     334:	98 87       	std	Y+8, r25	; 0x08
     336:	be 01       	movw	r22, r28
     338:	6b 5f       	subi	r22, 0xFB	; 251
     33a:	7f 4f       	sbci	r23, 0xFF	; 255
     33c:	ce 01       	movw	r24, r28
     33e:	8c 56       	subi	r24, 0x6C	; 108
     340:	9f 4f       	sbci	r25, 0xFF	; 255
     342:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN3PID7refreshERKf>
     346:	2b 01       	movw	r4, r22
     348:	3c 01       	movw	r6, r24
     34a:	ce 01       	movw	r24, r28
     34c:	8c 5b       	subi	r24, 0xBC	; 188
     34e:	9f 4f       	sbci	r25, 0xFF	; 255
     350:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZNK7sensors8get_rollEv>
     354:	69 83       	std	Y+1, r22	; 0x01
     356:	7a 83       	std	Y+2, r23	; 0x02
     358:	8b 83       	std	Y+3, r24	; 0x03
     35a:	9c 83       	std	Y+4, r25	; 0x04
     35c:	be 01       	movw	r22, r28
     35e:	6f 5f       	subi	r22, 0xFF	; 255
     360:	7f 4f       	sbci	r23, 0xFF	; 255
     362:	ce 01       	movw	r24, r28
     364:	82 5a       	subi	r24, 0xA2	; 162
     366:	9f 4f       	sbci	r25, 0xFF	; 255
     368:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN3PID7refreshERKf>
     36c:	4b 01       	movw	r8, r22
     36e:	5c 01       	movw	r10, r24
     370:	61 2f       	mov	r22, r17
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__floatunsisf>
     37c:	7b 01       	movw	r14, r22
     37e:	8c 01       	movw	r16, r24
     380:	a3 01       	movw	r20, r6
     382:	92 01       	movw	r18, r4
     384:	c5 01       	movw	r24, r10
     386:	b4 01       	movw	r22, r8
     388:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN3PID12combine_dataEfff>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     38c:	87 e8       	ldi	r24, 0x87	; 135
     38e:	93 e1       	ldi	r25, 0x13	; 19
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	f1 f7       	brne	.-4      	; 0x390 <main+0x278>
     394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x27e>
     396:	00 00       	nop
     398:	7f cf       	rjmp	.-258    	; 0x298 <main+0x180>

0000039a <__vector_1>:

}



ISR(INT0_vect){
     39a:	1f 92       	push	r1
     39c:	0f 92       	push	r0
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	0f 92       	push	r0
     3a2:	11 24       	eor	r1, r1
     3a4:	2f 93       	push	r18
     3a6:	3f 93       	push	r19
     3a8:	4f 93       	push	r20
     3aa:	5f 93       	push	r21
     3ac:	8f 93       	push	r24
     3ae:	9f 93       	push	r25
	
		uint16_t temp = TCNT1;
     3b0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     3b4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

		if ( temp < temp_timer_aileron){	// timer overflow
     3b8:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <temp_timer_aileron>
     3bc:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
     3c0:	82 17       	cp	r24, r18
     3c2:	93 07       	cpc	r25, r19
     3c4:	70 f4       	brcc	.+28     	; 0x3e2 <__vector_1+0x48>

			requested_aileron_pos = (0xffff - temp_timer_aileron) + temp ;
     3c6:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <temp_timer_aileron>
     3ca:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
     3ce:	9c 01       	movw	r18, r24
     3d0:	21 50       	subi	r18, 0x01	; 1
     3d2:	31 09       	sbc	r19, r1
     3d4:	24 1b       	sub	r18, r20
     3d6:	35 0b       	sbc	r19, r21
     3d8:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <requested_aileron_pos+0x1>
     3dc:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <requested_aileron_pos>
     3e0:	0b c0       	rjmp	.+22     	; 0x3f8 <__vector_1+0x5e>
		}

		else {	// regular case
	
			requested_aileron_pos = temp - temp_timer_aileron;
     3e2:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <temp_timer_aileron>
     3e6:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
     3ea:	ac 01       	movw	r20, r24
     3ec:	42 1b       	sub	r20, r18
     3ee:	53 0b       	sbc	r21, r19
     3f0:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <requested_aileron_pos+0x1>
     3f4:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp;
     3f8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <temp_timer_aileron+0x1>
     3fc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <temp_timer_aileron>
		
		
		// here, there is a chance that the value stored in requested aileron is actually (0xffff - actual requested aileron) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
	
}
     400:	9f 91       	pop	r25
     402:	8f 91       	pop	r24
     404:	5f 91       	pop	r21
     406:	4f 91       	pop	r20
     408:	3f 91       	pop	r19
     40a:	2f 91       	pop	r18
     40c:	0f 90       	pop	r0
     40e:	0f be       	out	0x3f, r0	; 63
     410:	0f 90       	pop	r0
     412:	1f 90       	pop	r1
     414:	18 95       	reti

00000416 <__vector_2>:

ISR(INT1_vect){
     416:	1f 92       	push	r1
     418:	0f 92       	push	r0
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	0f 92       	push	r0
     41e:	11 24       	eor	r1, r1
     420:	2f 93       	push	r18
     422:	3f 93       	push	r19
     424:	8f 93       	push	r24
     426:	9f 93       	push	r25
	
		temp0 = TCNT1;
     428:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     42c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     430:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
     434:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		

		if ( temp0 < temp_timer_throttle){	// timer overflow
     438:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     43c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
     440:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp_timer_throttle>
     444:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
     448:	28 17       	cp	r18, r24
     44a:	39 07       	cpc	r19, r25
     44c:	80 f4       	brcc	.+32     	; 0x46e <__vector_2+0x58>

			requested_throttle_pos = (0xffff - temp_timer_throttle) + temp0 ;
     44e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     452:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
     456:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_throttle>
     45a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	82 1b       	sub	r24, r18
     462:	93 0b       	sbc	r25, r19
     464:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
     468:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>
     46c:	0e c0       	rjmp	.+28     	; 0x48a <__vector_2+0x74>
		}

		else {	// regular case
	
			requested_throttle_pos = temp0 - temp_timer_throttle;
     46e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     472:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
     476:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_throttle>
     47a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
     47e:	82 1b       	sub	r24, r18
     480:	93 0b       	sbc	r25, r19
     482:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
     486:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>
			
		}
	
		
		temp_timer_throttle = temp0;
     48a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     48e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
     492:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <temp_timer_throttle+0x1>
     496:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_timer_throttle>
		
		
		// here, there is a chance that the value stored in requested throttle is actually (0xffff - actual requested throttle) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
}
     49a:	9f 91       	pop	r25
     49c:	8f 91       	pop	r24
     49e:	3f 91       	pop	r19
     4a0:	2f 91       	pop	r18
     4a2:	0f 90       	pop	r0
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	0f 90       	pop	r0
     4a8:	1f 90       	pop	r1
     4aa:	18 95       	reti

000004ac <__vector_4>:




ISR(PCINT1_vect){
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1
     4b6:	2f 93       	push	r18
     4b8:	3f 93       	push	r19
     4ba:	4f 93       	push	r20
     4bc:	5f 93       	push	r21
     4be:	8f 93       	push	r24
     4c0:	9f 93       	push	r25

	uint16_t temp = TCNT1;
     4c2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     4c6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

	if ( temp < temp_timer_rudder){	// timer overflow
     4ca:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <temp_timer_rudder>
     4ce:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
     4d2:	82 17       	cp	r24, r18
     4d4:	93 07       	cpc	r25, r19
     4d6:	70 f4       	brcc	.+28     	; 0x4f4 <__vector_4+0x48>

		requested_rudder_pos = (0xffff - temp_timer_rudder) + temp ;
     4d8:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <temp_timer_rudder>
     4dc:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
     4e0:	9c 01       	movw	r18, r24
     4e2:	21 50       	subi	r18, 0x01	; 1
     4e4:	31 09       	sbc	r19, r1
     4e6:	24 1b       	sub	r18, r20
     4e8:	35 0b       	sbc	r19, r21
     4ea:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <requested_rudder_pos+0x1>
     4ee:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <requested_rudder_pos>
     4f2:	0b c0       	rjmp	.+22     	; 0x50a <__vector_4+0x5e>
	}

	else {	// regular case

		requested_rudder_pos = temp - temp_timer_rudder;
     4f4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <temp_timer_rudder>
     4f8:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
     4fc:	ac 01       	movw	r20, r24
     4fe:	42 1b       	sub	r20, r18
     500:	53 0b       	sbc	r21, r19
     502:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <requested_rudder_pos+0x1>
     506:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <requested_rudder_pos>
		
	}

	
	temp_timer_rudder = temp;
     50a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <temp_timer_rudder+0x1>
     50e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <temp_timer_rudder>
	
	

}
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	5f 91       	pop	r21
     518:	4f 91       	pop	r20
     51a:	3f 91       	pop	r19
     51c:	2f 91       	pop	r18
     51e:	0f 90       	pop	r0
     520:	0f be       	out	0x3f, r0	; 63
     522:	0f 90       	pop	r0
     524:	1f 90       	pop	r1
     526:	18 95       	reti

00000528 <__vector_5>:

ISR(PCINT2_vect){
     528:	1f 92       	push	r1
     52a:	0f 92       	push	r0
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	0f 92       	push	r0
     530:	11 24       	eor	r1, r1
     532:	2f 93       	push	r18
     534:	3f 93       	push	r19
     536:	4f 93       	push	r20
     538:	5f 93       	push	r21
     53a:	8f 93       	push	r24
     53c:	9f 93       	push	r25

	uint16_t temp = TCNT1;
     53e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     542:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	

	if ( temp < temp_timer_elevator){	// timer overflow
     546:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temp_timer_elevator>
     54a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
     54e:	82 17       	cp	r24, r18
     550:	93 07       	cpc	r25, r19
     552:	70 f4       	brcc	.+28     	; 0x570 <__vector_5+0x48>

		requested_elevator_pos = (0xffff - temp_timer_elevator) + temp ;
     554:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_timer_elevator>
     558:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
     55c:	9c 01       	movw	r18, r24
     55e:	21 50       	subi	r18, 0x01	; 1
     560:	31 09       	sbc	r19, r1
     562:	24 1b       	sub	r18, r20
     564:	35 0b       	sbc	r19, r21
     566:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <requested_elevator_pos+0x1>
     56a:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <requested_elevator_pos>
     56e:	0b c0       	rjmp	.+22     	; 0x586 <__vector_5+0x5e>
	}

	else {	// regular case

		requested_elevator_pos = temp - temp_timer_elevator;
     570:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temp_timer_elevator>
     574:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
     578:	ac 01       	movw	r20, r24
     57a:	42 1b       	sub	r20, r18
     57c:	53 0b       	sbc	r21, r19
     57e:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <requested_elevator_pos+0x1>
     582:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <requested_elevator_pos>
		
	}

	
	temp_timer_elevator = temp;
     586:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <temp_timer_elevator+0x1>
     58a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temp_timer_elevator>
	
	

}
     58e:	9f 91       	pop	r25
     590:	8f 91       	pop	r24
     592:	5f 91       	pop	r21
     594:	4f 91       	pop	r20
     596:	3f 91       	pop	r19
     598:	2f 91       	pop	r18
     59a:	0f 90       	pop	r0
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	0f 90       	pop	r0
     5a0:	1f 90       	pop	r1
     5a2:	18 95       	reti

000005a4 <_ZN9I2C_328pbC1Ei>:

I2C_328pb::I2C_328pb(int bit_rate){

	// takes care of any and all initialsation

	TWBR0 = bit_rate;
     5a4:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     5a8:	08 95       	ret

000005aa <_ZN9I2C_328pb5startEv>:



void I2C_328pb::start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
     5aa:	84 ea       	ldi	r24, 0xA4	; 164
     5ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     5b0:	ec eb       	ldi	r30, 0xBC	; 188
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	80 81       	ld	r24, Z
     5b6:	88 23       	and	r24, r24
     5b8:	ec f7       	brge	.-6      	; 0x5b4 <_ZN9I2C_328pb5startEv+0xa>
		return 0; 
	}

	return 1;
*/
}
     5ba:	08 95       	ret

000005bc <_ZN9I2C_328pb12repeat_startEv>:


void I2C_328pb::repeat_start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
     5bc:	84 ea       	ldi	r24, 0xA4	; 164
     5be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     5c2:	ec eb       	ldi	r30, 0xBC	; 188
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 81       	ld	r24, Z
     5c8:	88 23       	and	r24, r24
     5ca:	ec f7       	brge	.-6      	; 0x5c6 <_ZN9I2C_328pb12repeat_startEv+0xa>
		return 0; 
	}

	return 1;
*/
}
     5cc:	08 95       	ret

000005ce <_ZN9I2C_328pb10send_slaveEi>:

void I2C_328pb::send_slave(int address){

	// send slave address + write bit

	TWDR0 = address;
     5ce:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
     5d2:	84 e8       	ldi	r24, 0x84	; 132
     5d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     5d8:	ec eb       	ldi	r30, 0xBC	; 188
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	88 23       	and	r24, r24
     5e0:	ec f7       	brge	.-6      	; 0x5dc <_ZN9I2C_328pb10send_slaveEi+0xe>
	}

	return 1;
*/

}
     5e2:	08 95       	ret

000005e4 <_ZN9I2C_328pb8send_regEi>:

void I2C_328pb::send_reg(int reg){

	// send  address of register to be written

	TWDR0 = reg; 
     5e4:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

  	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
     5e8:	84 e8       	ldi	r24, 0x84	; 132
     5ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     5ee:	ec eb       	ldi	r30, 0xBC	; 188
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 81       	ld	r24, Z
     5f4:	88 23       	and	r24, r24
     5f6:	ec f7       	brge	.-6      	; 0x5f2 <_ZN9I2C_328pb8send_regEi+0xe>
	}

	return 1;
*/

}
     5f8:	08 95       	ret

000005fa <_ZN9I2C_328pb4sendEi>:


void I2C_328pb::send(int data){

	TWDR0 = data;
     5fa:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ((1 << TWINT) | (1 << TWEN));
     5fe:	84 e8       	ldi	r24, 0x84	; 132
     600:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     604:	ec eb       	ldi	r30, 0xBC	; 188
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	88 23       	and	r24, r24
     60c:	ec f7       	brge	.-6      	; 0x608 <_ZN9I2C_328pb4sendEi+0xe>
	}

	return 1;
*/

}
     60e:	08 95       	ret

00000610 <_ZN9I2C_328pb13get_next_byteEv>:

void I2C_328pb::get_next_byte(){


	TWCR0 = ( (1 << TWEN) | (1 << TWINT) | (1 << TWEA));
     610:	84 ec       	ldi	r24, 0xC4	; 196
     612:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while (! (TWCR0 & (1 << TWINT)) );
     616:	ec eb       	ldi	r30, 0xBC	; 188
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	88 23       	and	r24, r24
     61e:	ec f7       	brge	.-6      	; 0x61a <_ZN9I2C_328pb13get_next_byteEv+0xa>
	return 1;

*/


}
     620:	08 95       	ret

00000622 <_ZN9I2C_328pb13end_data_readEv>:

void I2C_328pb::end_data_read(){


	TWCR0 = ( (1 << TWEN) | (1 << TWINT) );
     622:	84 e8       	ldi	r24, 0x84	; 132
     624:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while (! (TWCR0 & (1 << TWINT)) );
     628:	ec eb       	ldi	r30, 0xBC	; 188
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	88 23       	and	r24, r24
     630:	ec f7       	brge	.-6      	; 0x62c <_ZN9I2C_328pb13end_data_readEv+0xa>


}
     632:	08 95       	ret

00000634 <_ZN9I2C_328pb4stopEv>:

void I2C_328pb::stop(){


	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) ); 
     634:	ec eb       	ldi	r30, 0xBC	; 188
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	84 69       	ori	r24, 0x94	; 148
     63c:	80 83       	st	Z, r24
     63e:	08 95       	ret

00000640 <_ZN10initialize10interruptsEv>:


void initialize::interrupts(){

	// external int 0
	EIMSK |= (1 << INT0); // enable the int0 interrupt												
     640:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC00);	// will fire at any logical change
     642:	e9 e6       	ldi	r30, 0x69	; 105
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	80 81       	ld	r24, Z
     648:	81 60       	ori	r24, 0x01	; 1
     64a:	80 83       	st	Z, r24

	// external int 1
	EIMSK |= (1 << INT1); // enable the int0 interrupt
     64c:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= (1 << ISC10);	// will fire at any logical change
     64e:	80 81       	ld	r24, Z
     650:	84 60       	ori	r24, 0x04	; 4
     652:	80 83       	st	Z, r24

	// pcint 0 (for pin C3)
	PCICR |= (1 << PCIE1);
     654:	e8 e6       	ldi	r30, 0x68	; 104
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 81       	ld	r24, Z
     65a:	82 60       	ori	r24, 0x02	; 2
     65c:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);
     65e:	ac e6       	ldi	r26, 0x6C	; 108
     660:	b0 e0       	ldi	r27, 0x00	; 0
     662:	8c 91       	ld	r24, X
     664:	88 60       	ori	r24, 0x08	; 8
     666:	8c 93       	st	X, r24

	//pcint 1 (for pin B1)
	PCICR |= (1 << PCIE2);
     668:	80 81       	ld	r24, Z
     66a:	84 60       	ori	r24, 0x04	; 4
     66c:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT17);
     66e:	ed e6       	ldi	r30, 0x6D	; 109
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	80 81       	ld	r24, Z
     674:	82 60       	ori	r24, 0x02	; 2
     676:	80 83       	st	Z, r24
	
	// setting the pullup resistors on everything (will not be necessary once all wires are connected

	DDRD &= ~(1 << 2);
     678:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << 2);
     67a:	5a 9a       	sbi	0x0b, 2	; 11
	
	DDRC &= ~(1 << 3);
     67c:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1 << 3);
     67e:	43 9a       	sbi	0x08, 3	; 8
	
	DDRD &= ~(1 << 3);
     680:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1 << 3);
     682:	5b 9a       	sbi	0x0b, 3	; 11
	
	DDRD &= ~(1 << 4);
     684:	54 98       	cbi	0x0a, 4	; 10
	PORTD |= (1 << 4);
     686:	5c 9a       	sbi	0x0b, 4	; 11
     688:	08 95       	ret

0000068a <_ZN10initialize6timersEv>:
}

void initialize::timers(){

	// by default the timer is set to normal mode
	TCCR1B |= ( (1 << CS10));	// timer will run without prescaler and willoverrun 15 times/second
     68a:	e1 e8       	ldi	r30, 0x81	; 129
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	80 81       	ld	r24, Z
     690:	81 60       	ori	r24, 0x01	; 1
     692:	80 83       	st	Z, r24
     694:	08 95       	ret

00000696 <_ZN3PIDC1Ev>:
#include "PID.h"


PID::PID(){
     696:	fc 01       	movw	r30, r24

    last_error = 0;
     698:	14 82       	std	Z+4, r1	; 0x04
     69a:	15 82       	std	Z+5, r1	; 0x05
     69c:	16 82       	std	Z+6, r1	; 0x06
     69e:	17 82       	std	Z+7, r1	; 0x07
	current_error = 0;
     6a0:	10 82       	st	Z, r1
     6a2:	11 82       	std	Z+1, r1	; 0x01
     6a4:	12 82       	std	Z+2, r1	; 0x02
     6a6:	13 82       	std	Z+3, r1	; 0x03
    last_output = 0;
     6a8:	10 86       	std	Z+8, r1	; 0x08
     6aa:	11 86       	std	Z+9, r1	; 0x09
     6ac:	12 86       	std	Z+10, r1	; 0x0a
     6ae:	13 86       	std	Z+11, r1	; 0x0b
    integral = 0;
     6b0:	10 a2       	std	Z+32, r1	; 0x20
     6b2:	11 a2       	std	Z+33, r1	; 0x21
     6b4:	12 a2       	std	Z+34, r1	; 0x22
     6b6:	13 a2       	std	Z+35, r1	; 0x23
     6b8:	08 95       	ret

000006ba <_ZN3PID10setWeightsERKfS1_S1_>:
 
// initialising this static array is required      
int PID::motor[4] = {0};


void PID::setWeights(const float &Kp, const float &Ki, const float &Kd) {
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	fc 01       	movw	r30, r24
	this->Kp = Kp;
     6c0:	eb 01       	movw	r28, r22
     6c2:	88 81       	ld	r24, Y
     6c4:	99 81       	ldd	r25, Y+1	; 0x01
     6c6:	aa 81       	ldd	r26, Y+2	; 0x02
     6c8:	bb 81       	ldd	r27, Y+3	; 0x03
     6ca:	84 8b       	std	Z+20, r24	; 0x14
     6cc:	95 8b       	std	Z+21, r25	; 0x15
     6ce:	a6 8b       	std	Z+22, r26	; 0x16
     6d0:	b7 8b       	std	Z+23, r27	; 0x17
	this->Ki = Ki;
     6d2:	ea 01       	movw	r28, r20
     6d4:	88 81       	ld	r24, Y
     6d6:	99 81       	ldd	r25, Y+1	; 0x01
     6d8:	aa 81       	ldd	r26, Y+2	; 0x02
     6da:	bb 81       	ldd	r27, Y+3	; 0x03
     6dc:	80 8f       	std	Z+24, r24	; 0x18
     6de:	91 8f       	std	Z+25, r25	; 0x19
     6e0:	a2 8f       	std	Z+26, r26	; 0x1a
     6e2:	b3 8f       	std	Z+27, r27	; 0x1b
	this->Kd = Kd;
     6e4:	e9 01       	movw	r28, r18
     6e6:	88 81       	ld	r24, Y
     6e8:	99 81       	ldd	r25, Y+1	; 0x01
     6ea:	aa 81       	ldd	r26, Y+2	; 0x02
     6ec:	bb 81       	ldd	r27, Y+3	; 0x03
     6ee:	84 8f       	std	Z+28, r24	; 0x1c
     6f0:	95 8f       	std	Z+29, r25	; 0x1d
     6f2:	a6 8f       	std	Z+30, r26	; 0x1e
     6f4:	b7 8f       	std	Z+31, r27	; 0x1f
}
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	08 95       	ret

000006fc <_ZN3PID19setOutputLowerLimitERKf>:
void PID::setErrorThreshold(const float &error_threshold) {
	this->error_threshold = error_threshold;
}
*/
void PID::setOutputLowerLimit(const float &output_lower_limit) {
	this->output_lower_limit = output_lower_limit;
     6fc:	fb 01       	movw	r30, r22
     6fe:	40 81       	ld	r20, Z
     700:	51 81       	ldd	r21, Z+1	; 0x01
     702:	62 81       	ldd	r22, Z+2	; 0x02
     704:	73 81       	ldd	r23, Z+3	; 0x03
     706:	fc 01       	movw	r30, r24
     708:	44 a7       	std	Z+44, r20	; 0x2c
     70a:	55 a7       	std	Z+45, r21	; 0x2d
     70c:	66 a7       	std	Z+46, r22	; 0x2e
     70e:	77 a7       	std	Z+47, r23	; 0x2f
     710:	08 95       	ret

00000712 <_ZN3PID19setOutputUpperLimitERKf>:
}

void PID::setOutputUpperLimit(const float &output_upper_limit) {
	this->output_upper_limit = output_upper_limit;
     712:	fb 01       	movw	r30, r22
     714:	40 81       	ld	r20, Z
     716:	51 81       	ldd	r21, Z+1	; 0x01
     718:	62 81       	ldd	r22, Z+2	; 0x02
     71a:	73 81       	ldd	r23, Z+3	; 0x03
     71c:	fc 01       	movw	r30, r24
     71e:	40 a7       	std	Z+40, r20	; 0x28
     720:	51 a7       	std	Z+41, r21	; 0x29
     722:	62 a7       	std	Z+42, r22	; 0x2a
     724:	73 a7       	std	Z+43, r23	; 0x2b
     726:	08 95       	ret

00000728 <_ZN3PID15setDesiredPointERKf>:
}

void PID::setDesiredPoint(const float &desired_point) {
	set_point = desired_point;
     728:	fb 01       	movw	r30, r22
     72a:	40 81       	ld	r20, Z
     72c:	51 81       	ldd	r21, Z+1	; 0x01
     72e:	62 81       	ldd	r22, Z+2	; 0x02
     730:	73 81       	ldd	r23, Z+3	; 0x03
     732:	fc 01       	movw	r30, r24
     734:	40 8b       	std	Z+16, r20	; 0x10
     736:	51 8b       	std	Z+17, r21	; 0x11
     738:	62 8b       	std	Z+18, r22	; 0x12
     73a:	73 8b       	std	Z+19, r23	; 0x13
     73c:	08 95       	ret

0000073e <_ZN3PID11update_timeEv>:
}




void PID::update_time(){
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	00 d0       	rcall	.+0      	; 0x74c <_ZN3PID11update_timeEv+0xe>
     74c:	00 d0       	rcall	.+0      	; 0x74e <_ZN3PID11update_timeEv+0x10>
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
     752:	8c 01       	movw	r16, r24

		
	uint16_t time = TCNT1;
     754:	e4 e8       	ldi	r30, 0x84	; 132
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	e0 80       	ld	r14, Z
     75a:	f1 80       	ldd	r15, Z+1	; 0x01
	
	volatile float result;
	

	if (TCNT1 < time_of_previous_scan){
     75c:	20 81       	ld	r18, Z
     75e:	31 81       	ldd	r19, Z+1	; 0x01
     760:	fc 01       	movw	r30, r24
     762:	84 a9       	ldd	r24, Z+52	; 0x34
     764:	95 a9       	ldd	r25, Z+53	; 0x35
     766:	28 17       	cp	r18, r24
     768:	39 07       	cpc	r19, r25
     76a:	70 f4       	brcc	.+28     	; 0x788 <_ZN3PID11update_timeEv+0x4a>

		result = 0xffff - time_of_previous_scan + time ;
     76c:	b7 01       	movw	r22, r14
     76e:	61 50       	subi	r22, 0x01	; 1
     770:	71 09       	sbc	r23, r1
     772:	68 1b       	sub	r22, r24
     774:	79 0b       	sbc	r23, r25
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__floatunsisf>
     77e:	69 83       	std	Y+1, r22	; 0x01
     780:	7a 83       	std	Y+2, r23	; 0x02
     782:	8b 83       	std	Y+3, r24	; 0x03
     784:	9c 83       	std	Y+4, r25	; 0x04
     786:	0b c0       	rjmp	.+22     	; 0x79e <_ZN3PID11update_timeEv+0x60>

	}

	else{

		result = time - time_of_previous_scan;
     788:	b7 01       	movw	r22, r14
     78a:	68 1b       	sub	r22, r24
     78c:	79 0b       	sbc	r23, r25
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__floatunsisf>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
	}


	result /= (float)TIMER_BIT_RATE;
     79e:	69 81       	ldd	r22, Y+1	; 0x01
     7a0:	7a 81       	ldd	r23, Y+2	; 0x02
     7a2:	8b 81       	ldd	r24, Y+3	; 0x03
     7a4:	9c 81       	ldd	r25, Y+4	; 0x04
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	34 e2       	ldi	r19, 0x24	; 36
     7aa:	44 e7       	ldi	r20, 0x74	; 116
     7ac:	59 e4       	ldi	r21, 0x49	; 73
     7ae:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__divsf3>
     7b2:	69 83       	std	Y+1, r22	; 0x01
     7b4:	7a 83       	std	Y+2, r23	; 0x02
     7b6:	8b 83       	std	Y+3, r24	; 0x03
     7b8:	9c 83       	std	Y+4, r25	; 0x04

	time_of_previous_scan = time;
     7ba:	f8 01       	movw	r30, r16
     7bc:	f5 aa       	std	Z+53, r15	; 0x35
     7be:	e4 aa       	std	Z+52, r14	; 0x34

	time_elapsed = result;
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	9a 81       	ldd	r25, Y+2	; 0x02
     7c4:	ab 81       	ldd	r26, Y+3	; 0x03
     7c6:	bc 81       	ldd	r27, Y+4	; 0x04
     7c8:	80 ab       	std	Z+48, r24	; 0x30
     7ca:	91 ab       	std	Z+49, r25	; 0x31
     7cc:	a2 ab       	std	Z+50, r26	; 0x32
     7ce:	b3 ab       	std	Z+51, r27	; 0x33
	
	
}
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	08 95       	ret

000007e6 <_ZN3PID7refreshERKf>:

void PID::setDesiredPoint(const float &desired_point) {
	set_point = desired_point;
}

float PID::refresh(const float &feedback_input) {
     7e6:	2f 92       	push	r2
     7e8:	3f 92       	push	r3
     7ea:	4f 92       	push	r4
     7ec:	5f 92       	push	r5
     7ee:	6f 92       	push	r6
     7f0:	7f 92       	push	r7
     7f2:	8f 92       	push	r8
     7f4:	9f 92       	push	r9
     7f6:	af 92       	push	r10
     7f8:	bf 92       	push	r11
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
     80e:	62 97       	sbiw	r28, 0x12	; 18
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	f8 94       	cli
     814:	de bf       	out	0x3e, r29	; 62
     816:	0f be       	out	0x3f, r0	; 63
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	9a 8b       	std	Y+18, r25	; 0x12
     81c:	89 8b       	std	Y+17, r24	; 0x11
     81e:	8b 01       	movw	r16, r22

	update_time();	// get the time for integral and derivative purposes
     820:	0e 94 9f 03 	call	0x73e	; 0x73e <_ZN3PID11update_timeEv>

		
	last_error = current_error;
     824:	a9 89       	ldd	r26, Y+17	; 0x11
     826:	ba 89       	ldd	r27, Y+18	; 0x12
     828:	8d 90       	ld	r8, X+
     82a:	9d 90       	ld	r9, X+
     82c:	ad 90       	ld	r10, X+
     82e:	bc 90       	ld	r11, X
     830:	13 97       	sbiw	r26, 0x03	; 3
     832:	fd 01       	movw	r30, r26
     834:	84 82       	std	Z+4, r8	; 0x04
     836:	95 82       	std	Z+5, r9	; 0x05
     838:	a6 82       	std	Z+6, r10	; 0x06
     83a:	b7 82       	std	Z+7, r11	; 0x07
		
	current_error = set_point - feedback_input;	
     83c:	d8 01       	movw	r26, r16
     83e:	2d 91       	ld	r18, X+
     840:	3d 91       	ld	r19, X+
     842:	4d 91       	ld	r20, X+
     844:	5c 91       	ld	r21, X
     846:	60 89       	ldd	r22, Z+16	; 0x10
     848:	71 89       	ldd	r23, Z+17	; 0x11
     84a:	82 89       	ldd	r24, Z+18	; 0x12
     84c:	93 89       	ldd	r25, Z+19	; 0x13
     84e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__subsf3>
     852:	6b 01       	movw	r12, r22
     854:	7c 01       	movw	r14, r24
     856:	e9 89       	ldd	r30, Y+17	; 0x11
     858:	fa 89       	ldd	r31, Y+18	; 0x12
     85a:	60 83       	st	Z, r22
     85c:	71 83       	std	Z+1, r23	; 0x01
     85e:	82 83       	std	Z+2, r24	; 0x02
     860:	93 83       	std	Z+3, r25	; 0x03
	
	
	last_output = output;	
     862:	84 85       	ldd	r24, Z+12	; 0x0c
     864:	95 85       	ldd	r25, Z+13	; 0x0d
     866:	a6 85       	ldd	r26, Z+14	; 0x0e
     868:	b7 85       	ldd	r27, Z+15	; 0x0f
     86a:	80 87       	std	Z+8, r24	; 0x08
     86c:	91 87       	std	Z+9, r25	; 0x09
     86e:	a2 87       	std	Z+10, r26	; 0x0a
     870:	b3 87       	std	Z+11, r27	; 0x0b
	

	// the derivative is computed in this line
	// the integral, however, was computed one cycle ago
	output = Kp*current_error + Ki*integral + Kd* (current_error-last_error)/time_elapsed;	// calculate the new output
     872:	80 a1       	ldd	r24, Z+32	; 0x20
     874:	91 a1       	ldd	r25, Z+33	; 0x21
     876:	a2 a1       	ldd	r26, Z+34	; 0x22
     878:	b3 a1       	ldd	r27, Z+35	; 0x23
     87a:	89 83       	std	Y+1, r24	; 0x01
     87c:	9a 83       	std	Y+2, r25	; 0x02
     87e:	ab 83       	std	Y+3, r26	; 0x03
     880:	bc 83       	std	Y+4, r27	; 0x04
     882:	20 8d       	ldd	r18, Z+24	; 0x18
     884:	31 8d       	ldd	r19, Z+25	; 0x19
     886:	42 8d       	ldd	r20, Z+26	; 0x1a
     888:	53 8d       	ldd	r21, Z+27	; 0x1b
     88a:	bc 01       	movw	r22, r24
     88c:	cd 01       	movw	r24, r26
     88e:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
     892:	69 87       	std	Y+9, r22	; 0x09
     894:	7a 87       	std	Y+10, r23	; 0x0a
     896:	8b 87       	std	Y+11, r24	; 0x0b
     898:	9c 87       	std	Y+12, r25	; 0x0c
     89a:	a9 89       	ldd	r26, Y+17	; 0x11
     89c:	ba 89       	ldd	r27, Y+18	; 0x12
     89e:	d0 96       	adiw	r26, 0x30	; 48
     8a0:	8d 91       	ld	r24, X+
     8a2:	9d 91       	ld	r25, X+
     8a4:	0d 90       	ld	r0, X+
     8a6:	bc 91       	ld	r27, X
     8a8:	a0 2d       	mov	r26, r0
     8aa:	8d 83       	std	Y+5, r24	; 0x05
     8ac:	9e 83       	std	Y+6, r25	; 0x06
     8ae:	af 83       	std	Y+7, r26	; 0x07
     8b0:	b8 87       	std	Y+8, r27	; 0x08
     8b2:	a5 01       	movw	r20, r10
     8b4:	94 01       	movw	r18, r8
     8b6:	c7 01       	movw	r24, r14
     8b8:	b6 01       	movw	r22, r12
     8ba:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__subsf3>
     8be:	e9 89       	ldd	r30, Y+17	; 0x11
     8c0:	fa 89       	ldd	r31, Y+18	; 0x12
     8c2:	24 8d       	ldd	r18, Z+28	; 0x1c
     8c4:	35 8d       	ldd	r19, Z+29	; 0x1d
     8c6:	46 8d       	ldd	r20, Z+30	; 0x1e
     8c8:	57 8d       	ldd	r21, Z+31	; 0x1f
     8ca:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
     8ce:	2d 81       	ldd	r18, Y+5	; 0x05
     8d0:	3e 81       	ldd	r19, Y+6	; 0x06
     8d2:	4f 81       	ldd	r20, Y+7	; 0x07
     8d4:	58 85       	ldd	r21, Y+8	; 0x08
     8d6:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__divsf3>
     8da:	2b 01       	movw	r4, r22
     8dc:	3c 01       	movw	r6, r24
     8de:	a9 89       	ldd	r26, Y+17	; 0x11
     8e0:	ba 89       	ldd	r27, Y+18	; 0x12
     8e2:	54 96       	adiw	r26, 0x14	; 20
     8e4:	2d 91       	ld	r18, X+
     8e6:	3d 91       	ld	r19, X+
     8e8:	4d 91       	ld	r20, X+
     8ea:	5c 91       	ld	r21, X
     8ec:	57 97       	sbiw	r26, 0x17	; 23
     8ee:	c7 01       	movw	r24, r14
     8f0:	b6 01       	movw	r22, r12
     8f2:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
     8f6:	29 85       	ldd	r18, Y+9	; 0x09
     8f8:	3a 85       	ldd	r19, Y+10	; 0x0a
     8fa:	4b 85       	ldd	r20, Y+11	; 0x0b
     8fc:	5c 85       	ldd	r21, Y+12	; 0x0c
     8fe:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__addsf3>
     902:	9b 01       	movw	r18, r22
     904:	ac 01       	movw	r20, r24
     906:	c3 01       	movw	r24, r6
     908:	b2 01       	movw	r22, r4
     90a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__addsf3>
     90e:	76 2e       	mov	r7, r22
     910:	67 2e       	mov	r6, r23
     912:	58 2e       	mov	r5, r24
     914:	49 2e       	mov	r4, r25
     916:	86 2f       	mov	r24, r22
     918:	96 2d       	mov	r25, r6
     91a:	a5 2d       	mov	r26, r5
     91c:	b4 2d       	mov	r27, r4
     91e:	e9 89       	ldd	r30, Y+17	; 0x11
     920:	fa 89       	ldd	r31, Y+18	; 0x12
     922:	84 87       	std	Z+12, r24	; 0x0c
     924:	95 87       	std	Z+13, r25	; 0x0d
     926:	a6 87       	std	Z+14, r26	; 0x0e
     928:	b7 87       	std	Z+15, r27	; 0x0f
		
		

	if ( (output > output_upper_limit) || (output < output_lower_limit)) {
     92a:	20 a4       	ldd	r2, Z+40	; 0x28
     92c:	31 a4       	ldd	r3, Z+41	; 0x29
     92e:	02 a5       	ldd	r16, Z+42	; 0x2a
     930:	13 a5       	ldd	r17, Z+43	; 0x2b
     932:	22 2d       	mov	r18, r2
     934:	33 2d       	mov	r19, r3
     936:	40 2f       	mov	r20, r16
     938:	51 2f       	mov	r21, r17
     93a:	67 2d       	mov	r22, r7
     93c:	76 2d       	mov	r23, r6
     93e:	85 2d       	mov	r24, r5
     940:	94 2d       	mov	r25, r4
     942:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__gesf2>
     946:	18 16       	cp	r1, r24
     948:	0c f4       	brge	.+2      	; 0x94c <__stack+0x4d>
     94a:	66 c0       	rjmp	.+204    	; 0xa18 <__stack+0x119>
     94c:	a9 89       	ldd	r26, Y+17	; 0x11
     94e:	ba 89       	ldd	r27, Y+18	; 0x12
     950:	9c 96       	adiw	r26, 0x2c	; 44
     952:	bc 91       	ld	r27, X
     954:	bd 87       	std	Y+13, r27	; 0x0d
     956:	e9 89       	ldd	r30, Y+17	; 0x11
     958:	fa 89       	ldd	r31, Y+18	; 0x12
     95a:	f5 a5       	ldd	r31, Z+45	; 0x2d
     95c:	fe 87       	std	Y+14, r31	; 0x0e
     95e:	a9 89       	ldd	r26, Y+17	; 0x11
     960:	ba 89       	ldd	r27, Y+18	; 0x12
     962:	9e 96       	adiw	r26, 0x2e	; 46
     964:	bc 91       	ld	r27, X
     966:	bf 87       	std	Y+15, r27	; 0x0f
     968:	e9 89       	ldd	r30, Y+17	; 0x11
     96a:	fa 89       	ldd	r31, Y+18	; 0x12
     96c:	f7 a5       	ldd	r31, Z+47	; 0x2f
     96e:	f8 8b       	std	Y+16, r31	; 0x10
     970:	2d 85       	ldd	r18, Y+13	; 0x0d
     972:	3e 85       	ldd	r19, Y+14	; 0x0e
     974:	4b 2f       	mov	r20, r27
     976:	5f 2f       	mov	r21, r31
     978:	67 2d       	mov	r22, r7
     97a:	76 2d       	mov	r23, r6
     97c:	85 2d       	mov	r24, r5
     97e:	94 2d       	mov	r25, r4
     980:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__cmpsf2>
     984:	88 23       	and	r24, r24
     986:	ec f4       	brge	.+58     	; 0x9c2 <__stack+0xc3>

			
		if (fabs(Ki*integral) > fabs(current_error)) {	// integral wind up, do not update the integral further
     988:	69 85       	ldd	r22, Y+9	; 0x09
     98a:	7a 85       	ldd	r23, Y+10	; 0x0a
     98c:	8b 85       	ldd	r24, Y+11	; 0x0b
     98e:	9c 85       	ldd	r25, Y+12	; 0x0c
     990:	9f 77       	andi	r25, 0x7F	; 127
     992:	a7 01       	movw	r20, r14
     994:	96 01       	movw	r18, r12
     996:	5f 77       	andi	r21, 0x7F	; 127
     998:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__gesf2>
     99c:	18 16       	cp	r1, r24
     99e:	8c f4       	brge	.+34     	; 0x9c2 <__stack+0xc3>

				
			if (output > output_upper_limit){
     9a0:	22 2d       	mov	r18, r2
     9a2:	33 2d       	mov	r19, r3
     9a4:	40 2f       	mov	r20, r16
     9a6:	51 2f       	mov	r21, r17
     9a8:	67 2d       	mov	r22, r7
     9aa:	76 2d       	mov	r23, r6
     9ac:	85 2d       	mov	r24, r5
     9ae:	94 2d       	mov	r25, r4
     9b0:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__gesf2>
     9b4:	18 16       	cp	r1, r24
     9b6:	34 f5       	brge	.+76     	; 0xa04 <__stack+0x105>

				return output_upper_limit;	
     9b8:	72 2c       	mov	r7, r2
     9ba:	63 2c       	mov	r6, r3
     9bc:	50 2e       	mov	r5, r16
     9be:	41 2e       	mov	r4, r17
     9c0:	38 c0       	rjmp	.+112    	; 0xa32 <__stack+0x133>
		}
	}


	// otherwise, update the integral
	integral += (current_error + last_error) * time_elapsed /2.f;
     9c2:	a7 01       	movw	r20, r14
     9c4:	96 01       	movw	r18, r12
     9c6:	c5 01       	movw	r24, r10
     9c8:	b4 01       	movw	r22, r8
     9ca:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__addsf3>
     9ce:	2d 81       	ldd	r18, Y+5	; 0x05
     9d0:	3e 81       	ldd	r19, Y+6	; 0x06
     9d2:	4f 81       	ldd	r20, Y+7	; 0x07
     9d4:	58 85       	ldd	r21, Y+8	; 0x08
     9d6:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	5f e3       	ldi	r21, 0x3F	; 63
     9e2:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
     9e6:	29 81       	ldd	r18, Y+1	; 0x01
     9e8:	3a 81       	ldd	r19, Y+2	; 0x02
     9ea:	4b 81       	ldd	r20, Y+3	; 0x03
     9ec:	5c 81       	ldd	r21, Y+4	; 0x04
     9ee:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__addsf3>
     9f2:	a9 89       	ldd	r26, Y+17	; 0x11
     9f4:	ba 89       	ldd	r27, Y+18	; 0x12
     9f6:	90 96       	adiw	r26, 0x20	; 32
     9f8:	6d 93       	st	X+, r22
     9fa:	7d 93       	st	X+, r23
     9fc:	8d 93       	st	X+, r24
     9fe:	9c 93       	st	X, r25
     a00:	93 97       	sbiw	r26, 0x23	; 35
			
			
	return output;
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <__stack+0x133>
			}


			else if (output < output_lower_limit){

				return output_lower_limit;
     a04:	7d 84       	ldd	r7, Y+13	; 0x0d
     a06:	6e 84       	ldd	r6, Y+14	; 0x0e
     a08:	5f 84       	ldd	r5, Y+15	; 0x0f
     a0a:	48 88       	ldd	r4, Y+16	; 0x10
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x133>
		if (fabs(Ki*integral) > fabs(current_error)) {	// integral wind up, do not update the integral further

				
			if (output > output_upper_limit){

				return output_upper_limit;	
     a0e:	72 2c       	mov	r7, r2
     a10:	63 2c       	mov	r6, r3
     a12:	50 2e       	mov	r5, r16
     a14:	41 2e       	mov	r4, r17
     a16:	0d c0       	rjmp	.+26     	; 0xa32 <__stack+0x133>
		

	if ( (output > output_upper_limit) || (output < output_lower_limit)) {

			
		if (fabs(Ki*integral) > fabs(current_error)) {	// integral wind up, do not update the integral further
     a18:	69 85       	ldd	r22, Y+9	; 0x09
     a1a:	7a 85       	ldd	r23, Y+10	; 0x0a
     a1c:	8b 85       	ldd	r24, Y+11	; 0x0b
     a1e:	9c 85       	ldd	r25, Y+12	; 0x0c
     a20:	9f 77       	andi	r25, 0x7F	; 127
     a22:	a7 01       	movw	r20, r14
     a24:	96 01       	movw	r18, r12
     a26:	5f 77       	andi	r21, 0x7F	; 127
     a28:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__gesf2>
     a2c:	18 16       	cp	r1, r24
     a2e:	4c f6       	brge	.-110    	; 0x9c2 <__stack+0xc3>
     a30:	ee cf       	rjmp	.-36     	; 0xa0e <__stack+0x10f>
	// otherwise, update the integral
	integral += (current_error + last_error) * time_elapsed /2.f;
			
			
	return output;
}
     a32:	67 2d       	mov	r22, r7
     a34:	76 2d       	mov	r23, r6
     a36:	85 2d       	mov	r24, r5
     a38:	94 2d       	mov	r25, r4
     a3a:	62 96       	adiw	r28, 0x12	; 18
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	bf 90       	pop	r11
     a58:	af 90       	pop	r10
     a5a:	9f 90       	pop	r9
     a5c:	8f 90       	pop	r8
     a5e:	7f 90       	pop	r7
     a60:	6f 90       	pop	r6
     a62:	5f 90       	pop	r5
     a64:	4f 90       	pop	r4
     a66:	3f 90       	pop	r3
     a68:	2f 90       	pop	r2
     a6a:	08 95       	ret

00000a6c <_ZN3PID12combine_dataEfff>:
	
}



void PID::combine_data(float bank_number, float pitch_number, float throttle_percentage){
     a6c:	4f 92       	push	r4
     a6e:	5f 92       	push	r5
     a70:	6f 92       	push	r6
     a72:	7f 92       	push	r7
     a74:	8f 92       	push	r8
     a76:	9f 92       	push	r9
     a78:	af 92       	push	r10
     a7a:	bf 92       	push	r11
     a7c:	cf 92       	push	r12
     a7e:	df 92       	push	r13
     a80:	ef 92       	push	r14
     a82:	ff 92       	push	r15
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	4b 01       	movw	r8, r22
     a8e:	5c 01       	movw	r10, r24
     a90:	29 01       	movw	r4, r18
     a92:	3a 01       	movw	r6, r20
     a94:	67 01       	movw	r12, r14
     a96:	78 01       	movw	r14, r16

	//heavily depends on how the accelerometer and gyro are pointed and how the motors are plugged in.
	

	motor[0] = (int) (bank_number + pitch_number) * throttle_percentage / 200 ;
     a98:	c2 e1       	ldi	r28, 0x12	; 18
     a9a:	d1 e0       	ldi	r29, 0x01	; 1
     a9c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__addsf3>
     aa0:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fixsfsi>
     aa4:	07 2e       	mov	r0, r23
     aa6:	00 0c       	add	r0, r0
     aa8:	88 0b       	sbc	r24, r24
     aaa:	99 0b       	sbc	r25, r25
     aac:	0e 94 81 0b 	call	0x1702	; 0x1702 <__floatsisf>
     ab0:	a7 01       	movw	r20, r14
     ab2:	96 01       	movw	r18, r12
     ab4:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	48 e4       	ldi	r20, 0x48	; 72
     abe:	53 e4       	ldi	r21, 0x43	; 67
     ac0:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__divsf3>
     ac4:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fixsfsi>
     ac8:	79 83       	std	Y+1, r23	; 0x01
     aca:	68 83       	st	Y, r22

	motor[1] = (int) (bank_number - pitch_number) * throttle_percentage / 200 ;
     acc:	a3 01       	movw	r20, r6
     ace:	92 01       	movw	r18, r4
     ad0:	c5 01       	movw	r24, r10
     ad2:	b4 01       	movw	r22, r8
     ad4:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__subsf3>
     ad8:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fixsfsi>
     adc:	07 2e       	mov	r0, r23
     ade:	00 0c       	add	r0, r0
     ae0:	88 0b       	sbc	r24, r24
     ae2:	99 0b       	sbc	r25, r25
     ae4:	0e 94 81 0b 	call	0x1702	; 0x1702 <__floatsisf>
     ae8:	a7 01       	movw	r20, r14
     aea:	96 01       	movw	r18, r12
     aec:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	48 e4       	ldi	r20, 0x48	; 72
     af6:	53 e4       	ldi	r21, 0x43	; 67
     af8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__divsf3>
     afc:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fixsfsi>
     b00:	7b 83       	std	Y+3, r23	; 0x03
     b02:	6a 83       	std	Y+2, r22	; 0x02

	motor[2] = (int) (-bank_number + pitch_number) * throttle_percentage / 200; // 200 because 100 is used to convert the throttle percentage
     b04:	a5 01       	movw	r20, r10
     b06:	94 01       	movw	r18, r8
     b08:	c3 01       	movw	r24, r6
     b0a:	b2 01       	movw	r22, r4
     b0c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__subsf3>
     b10:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fixsfsi>
     b14:	07 2e       	mov	r0, r23
     b16:	00 0c       	add	r0, r0
     b18:	88 0b       	sbc	r24, r24
     b1a:	99 0b       	sbc	r25, r25
     b1c:	0e 94 81 0b 	call	0x1702	; 0x1702 <__floatsisf>
     b20:	a7 01       	movw	r20, r14
     b22:	96 01       	movw	r18, r12
     b24:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	48 e4       	ldi	r20, 0x48	; 72
     b2e:	53 e4       	ldi	r21, 0x43	; 67
     b30:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__divsf3>
     b34:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fixsfsi>
     b38:	7d 83       	std	Y+5, r23	; 0x05
     b3a:	6c 83       	std	Y+4, r22	; 0x04

	motor[3] = (int) (-bank_number - pitch_number) * throttle_percentage / 200;
     b3c:	c5 01       	movw	r24, r10
     b3e:	b4 01       	movw	r22, r8
     b40:	90 58       	subi	r25, 0x80	; 128
     b42:	a3 01       	movw	r20, r6
     b44:	92 01       	movw	r18, r4
     b46:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__subsf3>
     b4a:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fixsfsi>
     b4e:	07 2e       	mov	r0, r23
     b50:	00 0c       	add	r0, r0
     b52:	88 0b       	sbc	r24, r24
     b54:	99 0b       	sbc	r25, r25
     b56:	0e 94 81 0b 	call	0x1702	; 0x1702 <__floatsisf>
     b5a:	a7 01       	movw	r20, r14
     b5c:	96 01       	movw	r18, r12
     b5e:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	48 e4       	ldi	r20, 0x48	; 72
     b68:	53 e4       	ldi	r21, 0x43	; 67
     b6a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__divsf3>
     b6e:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fixsfsi>
     b72:	7f 83       	std	Y+7, r23	; 0x07
     b74:	6e 83       	std	Y+6, r22	; 0x06


}
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	df 90       	pop	r13
     b84:	cf 90       	pop	r12
     b86:	bf 90       	pop	r11
     b88:	af 90       	pop	r10
     b8a:	9f 90       	pop	r9
     b8c:	8f 90       	pop	r8
     b8e:	7f 90       	pop	r7
     b90:	6f 90       	pop	r6
     b92:	5f 90       	pop	r5
     b94:	4f 90       	pop	r4
     b96:	08 95       	ret

00000b98 <_ZN18pilot_instructions13set_max_angleEh>:
}

int pilot_instructions::get_yaw_rate() const{

	return yaw_rate;
}
     b98:	fc 01       	movw	r30, r24
     b9a:	60 83       	st	Z, r22
     b9c:	08 95       	ret

00000b9e <_ZN18pilot_instructions16set_max_yaw_rateEh>:
     b9e:	fc 01       	movw	r30, r24
     ba0:	61 83       	std	Z+1, r22	; 0x01
     ba2:	08 95       	ret

00000ba4 <_ZNK18pilot_instructions14get_bank_angleEv>:
     ba4:	fc 01       	movw	r30, r24
     ba6:	82 81       	ldd	r24, Z+2	; 0x02
     ba8:	93 81       	ldd	r25, Z+3	; 0x03
     baa:	08 95       	ret

00000bac <_ZNK18pilot_instructions15get_pitch_angleEv>:
     bac:	fc 01       	movw	r30, r24
     bae:	84 81       	ldd	r24, Z+4	; 0x04
     bb0:	95 81       	ldd	r25, Z+5	; 0x05
     bb2:	08 95       	ret

00000bb4 <_ZNK18pilot_instructions18get_throttle_powerEv>:


uint8_t pilot_instructions::get_throttle_power() const{

	return throttle_power;
}
     bb4:	fc 01       	movw	r30, r24
     bb6:	80 85       	ldd	r24, Z+8	; 0x08
     bb8:	08 95       	ret

00000bba <_ZN18pilot_instructions7computeEv>:



void pilot_instructions::compute(void){
     bba:	4f 92       	push	r4
     bbc:	5f 92       	push	r5
     bbe:	6f 92       	push	r6
     bc0:	7f 92       	push	r7
     bc2:	8f 92       	push	r8
     bc4:	9f 92       	push	r9
     bc6:	af 92       	push	r10
     bc8:	bf 92       	push	r11
     bca:	cf 92       	push	r12
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	8c 01       	movw	r16, r24
	extern volatile uint16_t requested_throttle_pos;


	// 50% of the time the value read is actually the valley of the pwm, that is corrected here 

	if (requested_aileron_pos > 0x7000 ){
     bdc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <requested_aileron_pos>
     be0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <requested_aileron_pos+0x1>
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	90 47       	sbci	r25, 0x70	; 112
     be8:	50 f0       	brcs	.+20     	; 0xbfe <_ZN18pilot_instructions7computeEv+0x44>
			
		requested_aileron_pos = 0xffff - requested_aileron_pos;
     bea:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <requested_aileron_pos>
     bee:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <requested_aileron_pos+0x1>
     bf2:	80 95       	com	r24
     bf4:	90 95       	com	r25
     bf6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <requested_aileron_pos+0x1>
     bfa:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <requested_aileron_pos>
	}

	if (requested_elevator_pos > 0x7000 ){
     bfe:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <requested_elevator_pos>
     c02:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <requested_elevator_pos+0x1>
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	90 47       	sbci	r25, 0x70	; 112
     c0a:	50 f0       	brcs	.+20     	; 0xc20 <_ZN18pilot_instructions7computeEv+0x66>
			
		requested_elevator_pos = 0xffff - requested_elevator_pos;
     c0c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <requested_elevator_pos>
     c10:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <requested_elevator_pos+0x1>
     c14:	80 95       	com	r24
     c16:	90 95       	com	r25
     c18:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <requested_elevator_pos+0x1>
     c1c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <requested_elevator_pos>
	}

	if (requested_rudder_pos > 0x7000 ){
     c20:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <requested_rudder_pos>
     c24:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <requested_rudder_pos+0x1>
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	90 47       	sbci	r25, 0x70	; 112
     c2c:	50 f0       	brcs	.+20     	; 0xc42 <_ZN18pilot_instructions7computeEv+0x88>
			
		requested_rudder_pos = 0xffff - requested_rudder_pos;
     c2e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <requested_rudder_pos>
     c32:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <requested_rudder_pos+0x1>
     c36:	80 95       	com	r24
     c38:	90 95       	com	r25
     c3a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <requested_rudder_pos+0x1>
     c3e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <requested_rudder_pos>
	}

	if (requested_throttle_pos > 0x7000 ){
     c42:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_throttle_pos>
     c46:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	90 47       	sbci	r25, 0x70	; 112
     c4e:	50 f0       	brcs	.+20     	; 0xc64 <_ZN18pilot_instructions7computeEv+0xaa>
			
		requested_throttle_pos = 0xffff - requested_throttle_pos;
     c50:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_throttle_pos>
     c54:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
     c58:	80 95       	com	r24
     c5a:	90 95       	com	r25
     c5c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
     c60:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>





	throttle_power = ((requested_throttle_pos - 1015) / 8);	// computes the percentage of the max the pilot wants
     c64:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_throttle_pos>
     c68:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
     c6c:	87 5f       	subi	r24, 0xF7	; 247
     c6e:	93 40       	sbci	r25, 0x03	; 3
     c70:	96 95       	lsr	r25
     c72:	87 95       	ror	r24
     c74:	96 95       	lsr	r25
     c76:	87 95       	ror	r24
     c78:	96 95       	lsr	r25
     c7a:	87 95       	ror	r24
     c7c:	f8 01       	movw	r30, r16
     c7e:	80 87       	std	Z+8, r24	; 0x08
	
	//yaw_rate = ( requested_rudder_pos / 6553 ) * max_yaw_rate;	// computes the percentage of the max the pilot wants
	
	
	float temp_pitch_angle = (requested_elevator_pos - 1110.f);	// computes the percentage of the max the pilot wants
     c80:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <requested_elevator_pos>
     c84:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <requested_elevator_pos+0x1>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__floatunsisf>
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 ec       	ldi	r19, 0xC0	; 192
     c94:	4a e8       	ldi	r20, 0x8A	; 138
     c96:	54 e4       	ldi	r21, 0x44	; 68
     c98:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__subsf3>
	temp_pitch_angle /= 800;
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	48 e4       	ldi	r20, 0x48	; 72
     ca2:	54 e4       	ldi	r21, 0x44	; 68
     ca4:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__divsf3>
     ca8:	4b 01       	movw	r8, r22
     caa:	5c 01       	movw	r10, r24
	temp_pitch_angle *= 2 * max_angle;
     cac:	f8 01       	movw	r30, r16
     cae:	c0 81       	ld	r28, Z
     cb0:	d0 e0       	ldi	r29, 0x00	; 0
     cb2:	be 01       	movw	r22, r28
     cb4:	66 0f       	add	r22, r22
     cb6:	77 1f       	adc	r23, r23
     cb8:	07 2e       	mov	r0, r23
     cba:	00 0c       	add	r0, r0
     cbc:	88 0b       	sbc	r24, r24
     cbe:	99 0b       	sbc	r25, r25
     cc0:	0e 94 81 0b 	call	0x1702	; 0x1702 <__floatsisf>
     cc4:	6b 01       	movw	r12, r22
     cc6:	7c 01       	movw	r14, r24
     cc8:	9b 01       	movw	r18, r22
     cca:	ac 01       	movw	r20, r24
     ccc:	c5 01       	movw	r24, r10
     cce:	b4 01       	movw	r22, r8
     cd0:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
     cd4:	4b 01       	movw	r8, r22
     cd6:	5c 01       	movw	r10, r24
	temp_pitch_angle -= max_angle;
     cd8:	be 01       	movw	r22, r28
     cda:	dd 0f       	add	r29, r29
     cdc:	88 0b       	sbc	r24, r24
     cde:	99 0b       	sbc	r25, r25
     ce0:	0e 94 81 0b 	call	0x1702	; 0x1702 <__floatsisf>
     ce4:	2b 01       	movw	r4, r22
     ce6:	3c 01       	movw	r6, r24
	pitch_angle = (int) temp_pitch_angle;
     ce8:	9b 01       	movw	r18, r22
     cea:	ac 01       	movw	r20, r24
     cec:	c5 01       	movw	r24, r10
     cee:	b4 01       	movw	r22, r8
     cf0:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__subsf3>
     cf4:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fixsfsi>
     cf8:	f8 01       	movw	r30, r16
     cfa:	75 83       	std	Z+5, r23	; 0x05
     cfc:	64 83       	std	Z+4, r22	; 0x04
	
	

	float temp_bank_angle = (requested_aileron_pos - 1120.f);	// computes the percentage of the max the pilot wants
     cfe:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <requested_aileron_pos>
     d02:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <requested_aileron_pos+0x1>
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__floatunsisf>
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	4c e8       	ldi	r20, 0x8C	; 140
     d14:	54 e4       	ldi	r21, 0x44	; 68
     d16:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__subsf3>
	temp_bank_angle /= 800;
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	48 e4       	ldi	r20, 0x48	; 72
     d20:	54 e4       	ldi	r21, 0x44	; 68
     d22:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__divsf3>
     d26:	9b 01       	movw	r18, r22
     d28:	ac 01       	movw	r20, r24
	temp_bank_angle *= 2 * max_angle;
     d2a:	c7 01       	movw	r24, r14
     d2c:	b6 01       	movw	r22, r12
     d2e:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
	temp_bank_angle -= max_angle;
	bank_angle = (int) temp_bank_angle + 2;
     d32:	a3 01       	movw	r20, r6
     d34:	92 01       	movw	r18, r4
     d36:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__subsf3>
     d3a:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fixsfsi>
     d3e:	6e 5f       	subi	r22, 0xFE	; 254
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	f8 01       	movw	r30, r16
     d44:	73 83       	std	Z+3, r23	; 0x03
     d46:	62 83       	std	Z+2, r22	; 0x02

     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	df 90       	pop	r13
     d56:	cf 90       	pop	r12
     d58:	bf 90       	pop	r11
     d5a:	af 90       	pop	r10
     d5c:	9f 90       	pop	r9
     d5e:	8f 90       	pop	r8
     d60:	7f 90       	pop	r7
     d62:	6f 90       	pop	r6
     d64:	5f 90       	pop	r5
     d66:	4f 90       	pop	r4
     d68:	08 95       	ret

00000d6a <_ZN8pwm_chipC1E9I2C_328pbh>:
#include "pwm_chip.h"



pwm_chip::pwm_chip(I2C_328pb i2c, uint8_t prescaler){
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	1f 92       	push	r1
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	69 83       	std	Y+1, r22	; 0x01
     d78:	14 2f       	mov	r17, r20
	
	
	DDRB |= (1 << 2);	// set OE to 0;
     d7a:	22 9a       	sbi	0x04, 2	; 4
	//This function sets the auto increment, the prescaler and any other necessary feature required for the pwm chip to run 

	//TWBR0 = (1 << 1); // I'll run the cpu at 1 MHz, this divides the value by 2 for 50 KHZ


	i2c.start();
     d7c:	ce 01       	movw	r24, r28
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     d84:	6e e9       	ldi	r22, 0x9E	; 158
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x0); // mode register 1
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	ce 01       	movw	r24, r28
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x21); //clock on, autoincrement enable
     d9c:	61 e2       	ldi	r22, 0x21	; 33
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	ce 01       	movw	r24, r28
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
     da8:	ce 01       	movw	r24, r28
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0x9E);
     db0:	6e e9       	ldi	r22, 0x9E	; 158
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	ce 01       	movw	r24, r28
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0xFE);	//pre scale register
     dbc:	6e ef       	ldi	r22, 0xFE	; 254
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	ce 01       	movw	r24, r28
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_ZN9I2C_328pb8send_regEi>
	i2c.send(prescaler);	//prescaler
     dc8:	61 2f       	mov	r22, r17
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	ce 01       	movw	r24, r28
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     dd4:	ce 01       	movw	r24, r28
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN9I2C_328pb4stopEv>

}
     ddc:	0f 90       	pop	r0
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	08 95       	ret

00000de6 <_ZN7sensorsC1E9I2C_328pb>:
#include "sensors.h"



sensors::sensors(I2C_328pb i2c){
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	1f 92       	push	r1
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	8c 01       	movw	r16, r24
     df6:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
     df8:	ce 01       	movw	r24, r28
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x32);	// acc slave + w
     e00:	62 e3       	ldi	r22, 0x32	; 50
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	ce 01       	movw	r24, r28
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0xA0);	// Control register 1 + autoincrement
     e0c:	60 ea       	ldi	r22, 0xA0	; 160
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x67);	// all axis enable data refresh rate is 200Hz
     e18:	67 e6       	ldi	r22, 0x67	; 103
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	ce 01       	movw	r24, r28
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN9I2C_328pb4sendEi>
	i2c.send(0x0);	// CR2 default values
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	ce 01       	movw	r24, r28
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN9I2C_328pb4sendEi>
	i2c.send(0x0);	// CR3 default values
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	ce 01       	movw	r24, r28
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN9I2C_328pb4sendEi>
	i2c.send(0x10);	// CR4  +- 4g and 8mg/digit, The value 32767 corresponds to 4 g's
     e3c:	60 e1       	ldi	r22, 0x10	; 16
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	ce 01       	movw	r24, r28
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     e48:	ce 01       	movw	r24, r28
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN9I2C_328pb4stopEv>
	

////////////////////////////// accelerometer init above and gyro init below

	i2c.start();
     e50:	ce 01       	movw	r24, r28
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0xD6); // gyro slave + w
     e58:	66 ed       	ldi	r22, 0xD6	; 214
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	ce 01       	movw	r24, r28
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x20);	// Control register 1
     e64:	60 e2       	ldi	r22, 0x20	; 32
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	ce 01       	movw	r24, r28
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x0F);	// all axis enable data refresh rate is 100Hz (a lot of other params also affected)
     e70:	6f e0       	ldi	r22, 0x0F	; 15
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	ce 01       	movw	r24, r28
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     e7c:	ce 01       	movw	r24, r28
     e7e:	01 96       	adiw	r24, 0x01	; 1
     e80:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN9I2C_328pb4stopEv>

			// default sensitivity is 8.75 mdps/digit
			
			
	pitch = 0.f;
     e84:	f8 01       	movw	r30, r16
     e86:	14 86       	std	Z+12, r1	; 0x0c
     e88:	15 86       	std	Z+13, r1	; 0x0d
     e8a:	16 86       	std	Z+14, r1	; 0x0e
     e8c:	17 86       	std	Z+15, r1	; 0x0f
	roll = 0.f;
     e8e:	10 8a       	std	Z+16, r1	; 0x10
     e90:	11 8a       	std	Z+17, r1	; 0x11
     e92:	12 8a       	std	Z+18, r1	; 0x12
     e94:	13 8a       	std	Z+19, r1	; 0x13
	yaw_rate = 0.f;
     e96:	14 8a       	std	Z+20, r1	; 0x14
     e98:	15 8a       	std	Z+21, r1	; 0x15
     e9a:	16 8a       	std	Z+22, r1	; 0x16
     e9c:	17 8a       	std	Z+23, r1	; 0x17

	time_of_previous_scan = TCNT1;
     e9e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     ea2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ea6:	91 8f       	std	Z+25, r25	; 0x19
     ea8:	80 8f       	std	Z+24, r24	; 0x18

}
     eaa:	0f 90       	pop	r0
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	08 95       	ret

00000eb6 <_ZN7sensors8read_accE9I2C_328pb>:



void sensors::read_acc(I2C_328pb i2c){
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	1f 92       	push	r1
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	8c 01       	movw	r16, r24
     eca:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
     ecc:	ce 01       	movw	r24, r28
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x32);	// acc slave + w
     ed4:	62 e3       	ldi	r22, 0x32	; 50
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	ce 01       	movw	r24, r28
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN9I2C_328pb10send_slaveEi>
	i2c.send(0xA8);	// X_low +auto increment
     ee0:	68 ea       	ldi	r22, 0xA8	; 168
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	ce 01       	movw	r24, r28
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
     eec:	ce 01       	movw	r24, r28
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0x33);	// acc slave + r
     ef4:	63 e3       	ldi	r22, 0x33	; 51
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	ce 01       	movw	r24, r28
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN9I2C_328pb10send_slaveEi>

	i2c.get_next_byte();
     f00:	ce 01       	movw	r24, r28
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	0e 94 08 03 	call	0x610	; 0x610 <_ZN9I2C_328pb13get_next_byteEv>
	acc_x_data = TWDR0;	// read low byte
     f08:	0f 2e       	mov	r0, r31
     f0a:	fb eb       	ldi	r31, 0xBB	; 187
     f0c:	ef 2e       	mov	r14, r31
     f0e:	f1 2c       	mov	r15, r1
     f10:	f0 2d       	mov	r31, r0
     f12:	f7 01       	movw	r30, r14
     f14:	80 81       	ld	r24, Z
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	f8 01       	movw	r30, r16
     f1a:	91 83       	std	Z+1, r25	; 0x01
     f1c:	80 83       	st	Z, r24
	i2c.get_next_byte();
     f1e:	ce 01       	movw	r24, r28
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	0e 94 08 03 	call	0x610	; 0x610 <_ZN9I2C_328pb13get_next_byteEv>
	acc_x_data |= (TWDR0 << 8);	// read high byte
     f26:	f7 01       	movw	r30, r14
     f28:	20 81       	ld	r18, Z
     f2a:	f8 01       	movw	r30, r16
     f2c:	80 81       	ld	r24, Z
     f2e:	91 81       	ldd	r25, Z+1	; 0x01
     f30:	92 2b       	or	r25, r18
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	80 83       	st	Z, r24
	i2c.get_next_byte();
     f36:	ce 01       	movw	r24, r28
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	0e 94 08 03 	call	0x610	; 0x610 <_ZN9I2C_328pb13get_next_byteEv>


	acc_y_data = TWDR0;	// read low byte
     f3e:	f7 01       	movw	r30, r14
     f40:	80 81       	ld	r24, Z
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	f8 01       	movw	r30, r16
     f46:	93 83       	std	Z+3, r25	; 0x03
     f48:	82 83       	std	Z+2, r24	; 0x02
	i2c.get_next_byte();
     f4a:	ce 01       	movw	r24, r28
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	0e 94 08 03 	call	0x610	; 0x610 <_ZN9I2C_328pb13get_next_byteEv>
	acc_y_data |= (TWDR0 << 8);	// read high byte
     f52:	f7 01       	movw	r30, r14
     f54:	20 81       	ld	r18, Z
     f56:	f8 01       	movw	r30, r16
     f58:	82 81       	ldd	r24, Z+2	; 0x02
     f5a:	93 81       	ldd	r25, Z+3	; 0x03
     f5c:	92 2b       	or	r25, r18
     f5e:	93 83       	std	Z+3, r25	; 0x03
     f60:	82 83       	std	Z+2, r24	; 0x02
	i2c.get_next_byte();
     f62:	ce 01       	movw	r24, r28
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	0e 94 08 03 	call	0x610	; 0x610 <_ZN9I2C_328pb13get_next_byteEv>


	acc_z_data = TWDR0;	// read low byte
     f6a:	f7 01       	movw	r30, r14
     f6c:	80 81       	ld	r24, Z
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	f8 01       	movw	r30, r16
     f72:	95 83       	std	Z+5, r25	; 0x05
     f74:	84 83       	std	Z+4, r24	; 0x04
	i2c.get_next_byte();
     f76:	ce 01       	movw	r24, r28
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	0e 94 08 03 	call	0x610	; 0x610 <_ZN9I2C_328pb13get_next_byteEv>
	acc_z_data |= (TWDR0 << 8);	// read high byte
     f7e:	f7 01       	movw	r30, r14
     f80:	20 81       	ld	r18, Z
     f82:	f8 01       	movw	r30, r16
     f84:	84 81       	ldd	r24, Z+4	; 0x04
     f86:	95 81       	ldd	r25, Z+5	; 0x05
     f88:	92 2b       	or	r25, r18
     f8a:	95 83       	std	Z+5, r25	; 0x05
     f8c:	84 83       	std	Z+4, r24	; 0x04


	i2c.end_data_read();
     f8e:	ce 01       	movw	r24, r28
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9I2C_328pb13end_data_readEv>
	i2c.stop();
     f96:	ce 01       	movw	r24, r28
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN9I2C_328pb4stopEv>
}
     f9e:	0f 90       	pop	r0
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	ff 90       	pop	r15
     faa:	ef 90       	pop	r14
     fac:	08 95       	ret

00000fae <_ZN7sensors9read_gyroE9I2C_328pb>:

void sensors::read_gyro(I2C_328pb i2c){
     fae:	ef 92       	push	r14
     fb0:	ff 92       	push	r15
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	1f 92       	push	r1
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	8c 01       	movw	r16, r24
     fc2:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
     fc4:	ce 01       	movw	r24, r28
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0xD6);	// gyro slave + w
     fcc:	66 ed       	ldi	r22, 0xD6	; 214
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	ce 01       	movw	r24, r28
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN9I2C_328pb10send_slaveEi>
	i2c.send(0xA8);	// X_low +auto increment
     fd8:	68 ea       	ldi	r22, 0xA8	; 168
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	ce 01       	movw	r24, r28
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
     fe4:	ce 01       	movw	r24, r28
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0xD7);	// gyro slave + r
     fec:	67 ed       	ldi	r22, 0xD7	; 215
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	ce 01       	movw	r24, r28
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN9I2C_328pb10send_slaveEi>

	i2c.get_next_byte();
     ff8:	ce 01       	movw	r24, r28
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	0e 94 08 03 	call	0x610	; 0x610 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_x_data = TWDR0;	// read low byte
    1000:	0f 2e       	mov	r0, r31
    1002:	fb eb       	ldi	r31, 0xBB	; 187
    1004:	ef 2e       	mov	r14, r31
    1006:	f1 2c       	mov	r15, r1
    1008:	f0 2d       	mov	r31, r0
    100a:	f7 01       	movw	r30, r14
    100c:	80 81       	ld	r24, Z
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	f8 01       	movw	r30, r16
    1012:	97 83       	std	Z+7, r25	; 0x07
    1014:	86 83       	std	Z+6, r24	; 0x06
	i2c.get_next_byte();
    1016:	ce 01       	movw	r24, r28
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	0e 94 08 03 	call	0x610	; 0x610 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_x_data |= (TWDR0 << 8);	// read high byte
    101e:	f7 01       	movw	r30, r14
    1020:	20 81       	ld	r18, Z
    1022:	f8 01       	movw	r30, r16
    1024:	86 81       	ldd	r24, Z+6	; 0x06
    1026:	97 81       	ldd	r25, Z+7	; 0x07
    1028:	92 2b       	or	r25, r18
    102a:	97 83       	std	Z+7, r25	; 0x07
    102c:	86 83       	std	Z+6, r24	; 0x06
	i2c.get_next_byte();
    102e:	ce 01       	movw	r24, r28
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	0e 94 08 03 	call	0x610	; 0x610 <_ZN9I2C_328pb13get_next_byteEv>


	gyro_y_data = TWDR0;	// read low byte
    1036:	f7 01       	movw	r30, r14
    1038:	80 81       	ld	r24, Z
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	f8 01       	movw	r30, r16
    103e:	91 87       	std	Z+9, r25	; 0x09
    1040:	80 87       	std	Z+8, r24	; 0x08
	i2c.get_next_byte();
    1042:	ce 01       	movw	r24, r28
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	0e 94 08 03 	call	0x610	; 0x610 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_y_data |= (TWDR0 << 8);	// read high byte
    104a:	f7 01       	movw	r30, r14
    104c:	20 81       	ld	r18, Z
    104e:	f8 01       	movw	r30, r16
    1050:	80 85       	ldd	r24, Z+8	; 0x08
    1052:	91 85       	ldd	r25, Z+9	; 0x09
    1054:	92 2b       	or	r25, r18
    1056:	91 87       	std	Z+9, r25	; 0x09
    1058:	80 87       	std	Z+8, r24	; 0x08
	i2c.get_next_byte();
    105a:	ce 01       	movw	r24, r28
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	0e 94 08 03 	call	0x610	; 0x610 <_ZN9I2C_328pb13get_next_byteEv>

  
	gyro_z_data = TWDR0;	// read low byte
    1062:	f7 01       	movw	r30, r14
    1064:	80 81       	ld	r24, Z
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	f8 01       	movw	r30, r16
    106a:	93 87       	std	Z+11, r25	; 0x0b
    106c:	82 87       	std	Z+10, r24	; 0x0a
	i2c.get_next_byte();
    106e:	ce 01       	movw	r24, r28
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	0e 94 08 03 	call	0x610	; 0x610 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_z_data |= (TWDR0 << 8);	// read high byte
    1076:	f7 01       	movw	r30, r14
    1078:	20 81       	ld	r18, Z
    107a:	f8 01       	movw	r30, r16
    107c:	82 85       	ldd	r24, Z+10	; 0x0a
    107e:	93 85       	ldd	r25, Z+11	; 0x0b
    1080:	92 2b       	or	r25, r18
    1082:	93 87       	std	Z+11, r25	; 0x0b
    1084:	82 87       	std	Z+10, r24	; 0x0a

	i2c.end_data_read();
    1086:	ce 01       	movw	r24, r28
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9I2C_328pb13end_data_readEv>
	i2c.stop();
    108e:	ce 01       	movw	r24, r28
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	0e 94 1a 03 	call	0x634	; 0x634 <_ZN9I2C_328pb4stopEv>
}
    1096:	0f 90       	pop	r0
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	08 95       	ret

000010a6 <_ZN7sensors8get_timeEv>:


}


float sensors:: get_time(){
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <_ZN7sensors8get_timeEv+0xe>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <_ZN7sensors8get_timeEv+0x10>
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	8c 01       	movw	r16, r24

	uint16_t time = TCNT1;
    10bc:	e4 e8       	ldi	r30, 0x84	; 132
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	e0 80       	ld	r14, Z
    10c2:	f1 80       	ldd	r15, Z+1	; 0x01
	
	volatile float result;
	

	if (TCNT1 < time_of_previous_scan){
    10c4:	20 81       	ld	r18, Z
    10c6:	31 81       	ldd	r19, Z+1	; 0x01
    10c8:	fc 01       	movw	r30, r24
    10ca:	80 8d       	ldd	r24, Z+24	; 0x18
    10cc:	91 8d       	ldd	r25, Z+25	; 0x19
    10ce:	28 17       	cp	r18, r24
    10d0:	39 07       	cpc	r19, r25
    10d2:	70 f4       	brcc	.+28     	; 0x10f0 <_ZN7sensors8get_timeEv+0x4a>

		result = 0xffff - time_of_previous_scan + time ;
    10d4:	b7 01       	movw	r22, r14
    10d6:	61 50       	subi	r22, 0x01	; 1
    10d8:	71 09       	sbc	r23, r1
    10da:	68 1b       	sub	r22, r24
    10dc:	79 0b       	sbc	r23, r25
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__floatunsisf>
    10e6:	69 83       	std	Y+1, r22	; 0x01
    10e8:	7a 83       	std	Y+2, r23	; 0x02
    10ea:	8b 83       	std	Y+3, r24	; 0x03
    10ec:	9c 83       	std	Y+4, r25	; 0x04
    10ee:	0b c0       	rjmp	.+22     	; 0x1106 <_ZN7sensors8get_timeEv+0x60>

	}

	else{

		result = time - time_of_previous_scan;
    10f0:	b7 01       	movw	r22, r14
    10f2:	68 1b       	sub	r22, r24
    10f4:	79 0b       	sbc	r23, r25
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__floatunsisf>
    10fe:	69 83       	std	Y+1, r22	; 0x01
    1100:	7a 83       	std	Y+2, r23	; 0x02
    1102:	8b 83       	std	Y+3, r24	; 0x03
    1104:	9c 83       	std	Y+4, r25	; 0x04
	}


	result /= (float)TIMER_BIT_RATE;
    1106:	69 81       	ldd	r22, Y+1	; 0x01
    1108:	7a 81       	ldd	r23, Y+2	; 0x02
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	9c 81       	ldd	r25, Y+4	; 0x04
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	34 e2       	ldi	r19, 0x24	; 36
    1112:	44 e7       	ldi	r20, 0x74	; 116
    1114:	59 e4       	ldi	r21, 0x49	; 73
    1116:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__divsf3>
    111a:	69 83       	std	Y+1, r22	; 0x01
    111c:	7a 83       	std	Y+2, r23	; 0x02
    111e:	8b 83       	std	Y+3, r24	; 0x03
    1120:	9c 83       	std	Y+4, r25	; 0x04

	time_of_previous_scan = time;
    1122:	f8 01       	movw	r30, r16
    1124:	f1 8e       	std	Z+25, r15	; 0x19
    1126:	e0 8e       	std	Z+24, r14	; 0x18

	return result;
    1128:	69 81       	ldd	r22, Y+1	; 0x01
    112a:	7a 81       	ldd	r23, Y+2	; 0x02
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04


}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	08 95       	ret

00001146 <_ZN7sensors16compute_positionEv>:
}




void sensors::compute_position(){
    1146:	4f 92       	push	r4
    1148:	5f 92       	push	r5
    114a:	6f 92       	push	r6
    114c:	7f 92       	push	r7
    114e:	8f 92       	push	r8
    1150:	9f 92       	push	r9
    1152:	af 92       	push	r10
    1154:	bf 92       	push	r11
    1156:	cf 92       	push	r12
    1158:	df 92       	push	r13
    115a:	ef 92       	push	r14
    115c:	ff 92       	push	r15
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	64 97       	sbiw	r28, 0x14	; 20
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	8c 01       	movw	r16, r24

	volatile float R;	// what the accelerometer thinks the total acceleration is
	volatile float trust_factor; // to what degree do I trust the accelerometer's readings
	const float time_between_measurements = get_time();
    1178:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_ZN7sensors8get_timeEv>
    117c:	6b 01       	movw	r12, r22
    117e:	7c 01       	movw	r14, r24
 
	
	pitch += (gyro_y_data * GYRO_SENSITIVITY * time_between_measurements);
    1180:	f8 01       	movw	r30, r16
    1182:	60 85       	ldd	r22, Z+8	; 0x08
    1184:	71 85       	ldd	r23, Z+9	; 0x09
    1186:	07 2e       	mov	r0, r23
    1188:	00 0c       	add	r0, r0
    118a:	88 0b       	sbc	r24, r24
    118c:	99 0b       	sbc	r25, r25
    118e:	0e 94 81 0b 	call	0x1702	; 0x1702 <__floatsisf>
    1192:	29 e2       	ldi	r18, 0x29	; 41
    1194:	3c e5       	ldi	r19, 0x5C	; 92
    1196:	4f e0       	ldi	r20, 0x0F	; 15
    1198:	5c e3       	ldi	r21, 0x3C	; 60
    119a:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
    119e:	a7 01       	movw	r20, r14
    11a0:	96 01       	movw	r18, r12
    11a2:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
    11a6:	f8 01       	movw	r30, r16
    11a8:	24 85       	ldd	r18, Z+12	; 0x0c
    11aa:	35 85       	ldd	r19, Z+13	; 0x0d
    11ac:	46 85       	ldd	r20, Z+14	; 0x0e
    11ae:	57 85       	ldd	r21, Z+15	; 0x0f
    11b0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__addsf3>
    11b4:	4b 01       	movw	r8, r22
    11b6:	5c 01       	movw	r10, r24
    11b8:	f8 01       	movw	r30, r16
    11ba:	64 87       	std	Z+12, r22	; 0x0c
    11bc:	75 87       	std	Z+13, r23	; 0x0d
    11be:	86 87       	std	Z+14, r24	; 0x0e
    11c0:	97 87       	std	Z+15, r25	; 0x0f
	roll += (gyro_x_data * GYRO_SENSITIVITY * time_between_measurements);
    11c2:	66 81       	ldd	r22, Z+6	; 0x06
    11c4:	77 81       	ldd	r23, Z+7	; 0x07
    11c6:	07 2e       	mov	r0, r23
    11c8:	00 0c       	add	r0, r0
    11ca:	88 0b       	sbc	r24, r24
    11cc:	99 0b       	sbc	r25, r25
    11ce:	0e 94 81 0b 	call	0x1702	; 0x1702 <__floatsisf>
    11d2:	29 e2       	ldi	r18, 0x29	; 41
    11d4:	3c e5       	ldi	r19, 0x5C	; 92
    11d6:	4f e0       	ldi	r20, 0x0F	; 15
    11d8:	5c e3       	ldi	r21, 0x3C	; 60
    11da:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
    11de:	a7 01       	movw	r20, r14
    11e0:	96 01       	movw	r18, r12
    11e2:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
    11e6:	f8 01       	movw	r30, r16
    11e8:	20 89       	ldd	r18, Z+16	; 0x10
    11ea:	31 89       	ldd	r19, Z+17	; 0x11
    11ec:	42 89       	ldd	r20, Z+18	; 0x12
    11ee:	53 89       	ldd	r21, Z+19	; 0x13
    11f0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__addsf3>
    11f4:	2b 01       	movw	r4, r22
    11f6:	3c 01       	movw	r6, r24
    11f8:	f8 01       	movw	r30, r16
    11fa:	60 8b       	std	Z+16, r22	; 0x10
    11fc:	71 8b       	std	Z+17, r23	; 0x11
    11fe:	82 8b       	std	Z+18, r24	; 0x12
    1200:	93 8b       	std	Z+19, r25	; 0x13
	yaw_rate = (gyro_z_data * GYRO_SENSITIVITY );
    1202:	62 85       	ldd	r22, Z+10	; 0x0a
    1204:	73 85       	ldd	r23, Z+11	; 0x0b
    1206:	07 2e       	mov	r0, r23
    1208:	00 0c       	add	r0, r0
    120a:	88 0b       	sbc	r24, r24
    120c:	99 0b       	sbc	r25, r25
    120e:	0e 94 81 0b 	call	0x1702	; 0x1702 <__floatsisf>
    1212:	29 e2       	ldi	r18, 0x29	; 41
    1214:	3c e5       	ldi	r19, 0x5C	; 92
    1216:	4f e0       	ldi	r20, 0x0F	; 15
    1218:	5c e3       	ldi	r21, 0x3C	; 60
    121a:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
    121e:	f8 01       	movw	r30, r16
    1220:	64 8b       	std	Z+20, r22	; 0x14
    1222:	75 8b       	std	Z+21, r23	; 0x15
    1224:	86 8b       	std	Z+22, r24	; 0x16
    1226:	97 8b       	std	Z+23, r25	; 0x17



	R = sqrt( square( acc_x_data ) + square( acc_y_data ) + square( acc_z_data ) );
    1228:	60 81       	ld	r22, Z
    122a:	71 81       	ldd	r23, Z+1	; 0x01
    122c:	07 2e       	mov	r0, r23
    122e:	00 0c       	add	r0, r0
    1230:	88 0b       	sbc	r24, r24
    1232:	99 0b       	sbc	r25, r25
    1234:	0e 94 81 0b 	call	0x1702	; 0x1702 <__floatsisf>
    1238:	6d 87       	std	Y+13, r22	; 0x0d
    123a:	7e 87       	std	Y+14, r23	; 0x0e
    123c:	8f 87       	std	Y+15, r24	; 0x0f
    123e:	98 8b       	std	Y+16, r25	; 0x10
    1240:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <square>
    1244:	6b 01       	movw	r12, r22
    1246:	7c 01       	movw	r14, r24
    1248:	f8 01       	movw	r30, r16
    124a:	62 81       	ldd	r22, Z+2	; 0x02
    124c:	73 81       	ldd	r23, Z+3	; 0x03
    124e:	07 2e       	mov	r0, r23
    1250:	00 0c       	add	r0, r0
    1252:	88 0b       	sbc	r24, r24
    1254:	99 0b       	sbc	r25, r25
    1256:	0e 94 81 0b 	call	0x1702	; 0x1702 <__floatsisf>
    125a:	69 8b       	std	Y+17, r22	; 0x11
    125c:	7a 8b       	std	Y+18, r23	; 0x12
    125e:	8b 8b       	std	Y+19, r24	; 0x13
    1260:	9c 8b       	std	Y+20, r25	; 0x14
    1262:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <square>
    1266:	9b 01       	movw	r18, r22
    1268:	ac 01       	movw	r20, r24
    126a:	c7 01       	movw	r24, r14
    126c:	b6 01       	movw	r22, r12
    126e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__addsf3>
    1272:	6b 01       	movw	r12, r22
    1274:	7c 01       	movw	r14, r24
    1276:	f8 01       	movw	r30, r16
    1278:	64 81       	ldd	r22, Z+4	; 0x04
    127a:	75 81       	ldd	r23, Z+5	; 0x05
    127c:	07 2e       	mov	r0, r23
    127e:	00 0c       	add	r0, r0
    1280:	88 0b       	sbc	r24, r24
    1282:	99 0b       	sbc	r25, r25
    1284:	0e 94 81 0b 	call	0x1702	; 0x1702 <__floatsisf>
    1288:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <square>
    128c:	69 87       	std	Y+9, r22	; 0x09
    128e:	7a 87       	std	Y+10, r23	; 0x0a
    1290:	8b 87       	std	Y+11, r24	; 0x0b
    1292:	9c 87       	std	Y+12, r25	; 0x0c
    1294:	29 85       	ldd	r18, Y+9	; 0x09
    1296:	3a 85       	ldd	r19, Y+10	; 0x0a
    1298:	4b 85       	ldd	r20, Y+11	; 0x0b
    129a:	5c 85       	ldd	r21, Y+12	; 0x0c
    129c:	c7 01       	movw	r24, r14
    129e:	b6 01       	movw	r22, r12
    12a0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__addsf3>
    12a4:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <sqrt>
    12a8:	69 83       	std	Y+1, r22	; 0x01
    12aa:	7a 83       	std	Y+2, r23	; 0x02
    12ac:	8b 83       	std	Y+3, r24	; 0x03
    12ae:	9c 83       	std	Y+4, r25	; 0x04
	R *= ACC_SENSITIVITY;
    12b0:	69 81       	ldd	r22, Y+1	; 0x01
    12b2:	7a 81       	ldd	r23, Y+2	; 0x02
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	20 e9       	ldi	r18, 0x90	; 144
    12ba:	39 ef       	ldi	r19, 0xF9	; 249
    12bc:	40 e0       	ldi	r20, 0x00	; 0
    12be:	59 e3       	ldi	r21, 0x39	; 57
    12c0:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
    12c4:	69 83       	std	Y+1, r22	; 0x01
    12c6:	7a 83       	std	Y+2, r23	; 0x02
    12c8:	8b 83       	std	Y+3, r24	; 0x03
    12ca:	9c 83       	std	Y+4, r25	; 0x04
	

	if ( R > 1.5 || R < 0.5 ){
    12cc:	69 81       	ldd	r22, Y+1	; 0x01
    12ce:	7a 81       	ldd	r23, Y+2	; 0x02
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 ec       	ldi	r20, 0xC0	; 192
    12da:	5f e3       	ldi	r21, 0x3F	; 63
    12dc:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__gesf2>
    12e0:	18 16       	cp	r1, r24
    12e2:	0c f4       	brge	.+2      	; 0x12e6 <_ZN7sensors16compute_positionEv+0x1a0>
    12e4:	b4 c0       	rjmp	.+360    	; 0x144e <_ZN7sensors16compute_positionEv+0x308>
    12e6:	69 81       	ldd	r22, Y+1	; 0x01
    12e8:	7a 81       	ldd	r23, Y+2	; 0x02
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	5f e3       	ldi	r21, 0x3F	; 63
    12f6:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__cmpsf2>
    12fa:	88 23       	and	r24, r24
    12fc:	0c f4       	brge	.+2      	; 0x1300 <_ZN7sensors16compute_positionEv+0x1ba>
    12fe:	a7 c0       	rjmp	.+334    	; 0x144e <_ZN7sensors16compute_positionEv+0x308>
		return;	// there is too much external factor for the accelerometer to be of any use

	}


	float acc_pitch_angle = asin(  acc_y_data / (R*8130) );	// accounts for +- sign 0 is the level value
    1300:	69 81       	ldd	r22, Y+1	; 0x01
    1302:	7a 81       	ldd	r23, Y+2	; 0x02
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e1       	ldi	r19, 0x10	; 16
    130c:	4e ef       	ldi	r20, 0xFE	; 254
    130e:	55 e4       	ldi	r21, 0x45	; 69
    1310:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
    1314:	9b 01       	movw	r18, r22
    1316:	ac 01       	movw	r20, r24
    1318:	69 89       	ldd	r22, Y+17	; 0x11
    131a:	7a 89       	ldd	r23, Y+18	; 0x12
    131c:	8b 89       	ldd	r24, Y+19	; 0x13
    131e:	9c 89       	ldd	r25, Y+20	; 0x14
    1320:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__divsf3>
    1324:	0e 94 b7 0a 	call	0x156e	; 0x156e <asin>
    1328:	69 87       	std	Y+9, r22	; 0x09
    132a:	7a 87       	std	Y+10, r23	; 0x0a
    132c:	8b 87       	std	Y+11, r24	; 0x0b
    132e:	9c 87       	std	Y+12, r25	; 0x0c
	float acc_roll_angle = asin( acc_x_data / (R*8130) );	// accounts for +- sign 0 is the level value
    1330:	69 81       	ldd	r22, Y+1	; 0x01
    1332:	7a 81       	ldd	r23, Y+2	; 0x02
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e1       	ldi	r19, 0x10	; 16
    133c:	4e ef       	ldi	r20, 0xFE	; 254
    133e:	55 e4       	ldi	r21, 0x45	; 69
    1340:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
    1344:	9b 01       	movw	r18, r22
    1346:	ac 01       	movw	r20, r24
    1348:	6d 85       	ldd	r22, Y+13	; 0x0d
    134a:	7e 85       	ldd	r23, Y+14	; 0x0e
    134c:	8f 85       	ldd	r24, Y+15	; 0x0f
    134e:	98 89       	ldd	r25, Y+16	; 0x10
    1350:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__divsf3>
    1354:	0e 94 b7 0a 	call	0x156e	; 0x156e <asin>
    1358:	6d 87       	std	Y+13, r22	; 0x0d
    135a:	7e 87       	std	Y+14, r23	; 0x0e
    135c:	8f 87       	std	Y+15, r24	; 0x0f
    135e:	98 8b       	std	Y+16, r25	; 0x10
	acc_pitch_angle *= 57.3;
	acc_roll_angle *= 57.3;	// conversion to degrees instead of radians.



	trust_factor = ( 1 - fabs(1 - R) ) / 10;
    1360:	29 81       	ldd	r18, Y+1	; 0x01
    1362:	3a 81       	ldd	r19, Y+2	; 0x02
    1364:	4b 81       	ldd	r20, Y+3	; 0x03
    1366:	5c 81       	ldd	r21, Y+4	; 0x04
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	80 e8       	ldi	r24, 0x80	; 128
    136e:	9f e3       	ldi	r25, 0x3F	; 63
    1370:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__subsf3>
    1374:	9b 01       	movw	r18, r22
    1376:	ac 01       	movw	r20, r24
    1378:	5f 77       	andi	r21, 0x7F	; 127
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	80 e8       	ldi	r24, 0x80	; 128
    1380:	9f e3       	ldi	r25, 0x3F	; 63
    1382:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__subsf3>
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	40 e2       	ldi	r20, 0x20	; 32
    138c:	51 e4       	ldi	r21, 0x41	; 65
    138e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__divsf3>
    1392:	6d 83       	std	Y+5, r22	; 0x05
    1394:	7e 83       	std	Y+6, r23	; 0x06
    1396:	8f 83       	std	Y+7, r24	; 0x07
    1398:	98 87       	std	Y+8, r25	; 0x08


	pitch = (pitch * (1 - trust_factor) + (acc_pitch_angle * trust_factor) );
    139a:	2d 81       	ldd	r18, Y+5	; 0x05
    139c:	3e 81       	ldd	r19, Y+6	; 0x06
    139e:	4f 81       	ldd	r20, Y+7	; 0x07
    13a0:	58 85       	ldd	r21, Y+8	; 0x08
    13a2:	cd 80       	ldd	r12, Y+5	; 0x05
    13a4:	de 80       	ldd	r13, Y+6	; 0x06
    13a6:	ef 80       	ldd	r14, Y+7	; 0x07
    13a8:	f8 84       	ldd	r15, Y+8	; 0x08
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	80 e8       	ldi	r24, 0x80	; 128
    13b0:	9f e3       	ldi	r25, 0x3F	; 63
    13b2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__subsf3>
    13b6:	a5 01       	movw	r20, r10
    13b8:	94 01       	movw	r18, r8
    13ba:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
    13be:	4b 01       	movw	r8, r22
    13c0:	5c 01       	movw	r10, r24
    13c2:	23 e3       	ldi	r18, 0x33	; 51
    13c4:	33 e3       	ldi	r19, 0x33	; 51
    13c6:	45 e6       	ldi	r20, 0x65	; 101
    13c8:	52 e4       	ldi	r21, 0x42	; 66
    13ca:	69 85       	ldd	r22, Y+9	; 0x09
    13cc:	7a 85       	ldd	r23, Y+10	; 0x0a
    13ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    13d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    13d2:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
    13d6:	a7 01       	movw	r20, r14
    13d8:	96 01       	movw	r18, r12
    13da:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
    13de:	9b 01       	movw	r18, r22
    13e0:	ac 01       	movw	r20, r24
    13e2:	c5 01       	movw	r24, r10
    13e4:	b4 01       	movw	r22, r8
    13e6:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__addsf3>
    13ea:	f8 01       	movw	r30, r16
    13ec:	64 87       	std	Z+12, r22	; 0x0c
    13ee:	75 87       	std	Z+13, r23	; 0x0d
    13f0:	86 87       	std	Z+14, r24	; 0x0e
    13f2:	97 87       	std	Z+15, r25	; 0x0f
	roll = (roll * (1 - trust_factor) + (acc_roll_angle * trust_factor) );
    13f4:	2d 81       	ldd	r18, Y+5	; 0x05
    13f6:	3e 81       	ldd	r19, Y+6	; 0x06
    13f8:	4f 81       	ldd	r20, Y+7	; 0x07
    13fa:	58 85       	ldd	r21, Y+8	; 0x08
    13fc:	8d 80       	ldd	r8, Y+5	; 0x05
    13fe:	9e 80       	ldd	r9, Y+6	; 0x06
    1400:	af 80       	ldd	r10, Y+7	; 0x07
    1402:	b8 84       	ldd	r11, Y+8	; 0x08
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	80 e8       	ldi	r24, 0x80	; 128
    140a:	9f e3       	ldi	r25, 0x3F	; 63
    140c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__subsf3>
    1410:	a3 01       	movw	r20, r6
    1412:	92 01       	movw	r18, r4
    1414:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
    1418:	2b 01       	movw	r4, r22
    141a:	3c 01       	movw	r6, r24
    141c:	23 e3       	ldi	r18, 0x33	; 51
    141e:	33 e3       	ldi	r19, 0x33	; 51
    1420:	45 e6       	ldi	r20, 0x65	; 101
    1422:	52 e4       	ldi	r21, 0x42	; 66
    1424:	6d 85       	ldd	r22, Y+13	; 0x0d
    1426:	7e 85       	ldd	r23, Y+14	; 0x0e
    1428:	8f 85       	ldd	r24, Y+15	; 0x0f
    142a:	98 89       	ldd	r25, Y+16	; 0x10
    142c:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
    1430:	a5 01       	movw	r20, r10
    1432:	94 01       	movw	r18, r8
    1434:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
    1438:	9b 01       	movw	r18, r22
    143a:	ac 01       	movw	r20, r24
    143c:	c3 01       	movw	r24, r6
    143e:	b2 01       	movw	r22, r4
    1440:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__addsf3>
    1444:	f8 01       	movw	r30, r16
    1446:	60 8b       	std	Z+16, r22	; 0x10
    1448:	71 8b       	std	Z+17, r23	; 0x11
    144a:	82 8b       	std	Z+18, r24	; 0x12
    144c:	93 8b       	std	Z+19, r25	; 0x13
	
	
	return;


}
    144e:	64 96       	adiw	r28, 0x14	; 20
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	ff 90       	pop	r15
    1464:	ef 90       	pop	r14
    1466:	df 90       	pop	r13
    1468:	cf 90       	pop	r12
    146a:	bf 90       	pop	r11
    146c:	af 90       	pop	r10
    146e:	9f 90       	pop	r9
    1470:	8f 90       	pop	r8
    1472:	7f 90       	pop	r7
    1474:	6f 90       	pop	r6
    1476:	5f 90       	pop	r5
    1478:	4f 90       	pop	r4
    147a:	08 95       	ret

0000147c <_ZNK7sensors9get_pitchEv>:

}

float sensors::get_pitch() const{
	
	return pitch;
    147c:	fc 01       	movw	r30, r24
    147e:	64 85       	ldd	r22, Z+12	; 0x0c
    1480:	75 85       	ldd	r23, Z+13	; 0x0d
    1482:	86 85       	ldd	r24, Z+14	; 0x0e
    1484:	97 85       	ldd	r25, Z+15	; 0x0f
}
    1486:	08 95       	ret

00001488 <_ZNK7sensors8get_rollEv>:

float sensors::get_roll() const{
	
	return roll;
    1488:	fc 01       	movw	r30, r24
    148a:	60 89       	ldd	r22, Z+16	; 0x10
    148c:	71 89       	ldd	r23, Z+17	; 0x11
    148e:	82 89       	ldd	r24, Z+18	; 0x12
    1490:	93 89       	ldd	r25, Z+19	; 0x13
}
    1492:	08 95       	ret

00001494 <__subsf3>:
    1494:	50 58       	subi	r21, 0x80	; 128

00001496 <__addsf3>:
    1496:	bb 27       	eor	r27, r27
    1498:	aa 27       	eor	r26, r26
    149a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__addsf3x>
    149e:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__fp_round>
    14a2:	0e 94 44 0c 	call	0x1888	; 0x1888 <__fp_pscA>
    14a6:	38 f0       	brcs	.+14     	; 0x14b6 <__addsf3+0x20>
    14a8:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fp_pscB>
    14ac:	20 f0       	brcs	.+8      	; 0x14b6 <__addsf3+0x20>
    14ae:	39 f4       	brne	.+14     	; 0x14be <__addsf3+0x28>
    14b0:	9f 3f       	cpi	r25, 0xFF	; 255
    14b2:	19 f4       	brne	.+6      	; 0x14ba <__addsf3+0x24>
    14b4:	26 f4       	brtc	.+8      	; 0x14be <__addsf3+0x28>
    14b6:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_nan>
    14ba:	0e f4       	brtc	.+2      	; 0x14be <__addsf3+0x28>
    14bc:	e0 95       	com	r30
    14be:	e7 fb       	bst	r30, 7
    14c0:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__fp_inf>

000014c4 <__addsf3x>:
    14c4:	e9 2f       	mov	r30, r25
    14c6:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__fp_split3>
    14ca:	58 f3       	brcs	.-42     	; 0x14a2 <__addsf3+0xc>
    14cc:	ba 17       	cp	r27, r26
    14ce:	62 07       	cpc	r22, r18
    14d0:	73 07       	cpc	r23, r19
    14d2:	84 07       	cpc	r24, r20
    14d4:	95 07       	cpc	r25, r21
    14d6:	20 f0       	brcs	.+8      	; 0x14e0 <__addsf3x+0x1c>
    14d8:	79 f4       	brne	.+30     	; 0x14f8 <__addsf3x+0x34>
    14da:	a6 f5       	brtc	.+104    	; 0x1544 <__addsf3x+0x80>
    14dc:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_zero>
    14e0:	0e f4       	brtc	.+2      	; 0x14e4 <__addsf3x+0x20>
    14e2:	e0 95       	com	r30
    14e4:	0b 2e       	mov	r0, r27
    14e6:	ba 2f       	mov	r27, r26
    14e8:	a0 2d       	mov	r26, r0
    14ea:	0b 01       	movw	r0, r22
    14ec:	b9 01       	movw	r22, r18
    14ee:	90 01       	movw	r18, r0
    14f0:	0c 01       	movw	r0, r24
    14f2:	ca 01       	movw	r24, r20
    14f4:	a0 01       	movw	r20, r0
    14f6:	11 24       	eor	r1, r1
    14f8:	ff 27       	eor	r31, r31
    14fa:	59 1b       	sub	r21, r25
    14fc:	99 f0       	breq	.+38     	; 0x1524 <__addsf3x+0x60>
    14fe:	59 3f       	cpi	r21, 0xF9	; 249
    1500:	50 f4       	brcc	.+20     	; 0x1516 <__addsf3x+0x52>
    1502:	50 3e       	cpi	r21, 0xE0	; 224
    1504:	68 f1       	brcs	.+90     	; 0x1560 <__addsf3x+0x9c>
    1506:	1a 16       	cp	r1, r26
    1508:	f0 40       	sbci	r31, 0x00	; 0
    150a:	a2 2f       	mov	r26, r18
    150c:	23 2f       	mov	r18, r19
    150e:	34 2f       	mov	r19, r20
    1510:	44 27       	eor	r20, r20
    1512:	58 5f       	subi	r21, 0xF8	; 248
    1514:	f3 cf       	rjmp	.-26     	; 0x14fc <__addsf3x+0x38>
    1516:	46 95       	lsr	r20
    1518:	37 95       	ror	r19
    151a:	27 95       	ror	r18
    151c:	a7 95       	ror	r26
    151e:	f0 40       	sbci	r31, 0x00	; 0
    1520:	53 95       	inc	r21
    1522:	c9 f7       	brne	.-14     	; 0x1516 <__addsf3x+0x52>
    1524:	7e f4       	brtc	.+30     	; 0x1544 <__addsf3x+0x80>
    1526:	1f 16       	cp	r1, r31
    1528:	ba 0b       	sbc	r27, r26
    152a:	62 0b       	sbc	r22, r18
    152c:	73 0b       	sbc	r23, r19
    152e:	84 0b       	sbc	r24, r20
    1530:	ba f0       	brmi	.+46     	; 0x1560 <__addsf3x+0x9c>
    1532:	91 50       	subi	r25, 0x01	; 1
    1534:	a1 f0       	breq	.+40     	; 0x155e <__addsf3x+0x9a>
    1536:	ff 0f       	add	r31, r31
    1538:	bb 1f       	adc	r27, r27
    153a:	66 1f       	adc	r22, r22
    153c:	77 1f       	adc	r23, r23
    153e:	88 1f       	adc	r24, r24
    1540:	c2 f7       	brpl	.-16     	; 0x1532 <__addsf3x+0x6e>
    1542:	0e c0       	rjmp	.+28     	; 0x1560 <__addsf3x+0x9c>
    1544:	ba 0f       	add	r27, r26
    1546:	62 1f       	adc	r22, r18
    1548:	73 1f       	adc	r23, r19
    154a:	84 1f       	adc	r24, r20
    154c:	48 f4       	brcc	.+18     	; 0x1560 <__addsf3x+0x9c>
    154e:	87 95       	ror	r24
    1550:	77 95       	ror	r23
    1552:	67 95       	ror	r22
    1554:	b7 95       	ror	r27
    1556:	f7 95       	ror	r31
    1558:	9e 3f       	cpi	r25, 0xFE	; 254
    155a:	08 f0       	brcs	.+2      	; 0x155e <__addsf3x+0x9a>
    155c:	b0 cf       	rjmp	.-160    	; 0x14be <__addsf3+0x28>
    155e:	93 95       	inc	r25
    1560:	88 0f       	add	r24, r24
    1562:	08 f0       	brcs	.+2      	; 0x1566 <__addsf3x+0xa2>
    1564:	99 27       	eor	r25, r25
    1566:	ee 0f       	add	r30, r30
    1568:	97 95       	ror	r25
    156a:	87 95       	ror	r24
    156c:	08 95       	ret

0000156e <asin>:
    156e:	9f 93       	push	r25
    1570:	9f 77       	andi	r25, 0x7F	; 127
    1572:	ee e3       	ldi	r30, 0x3E	; 62
    1574:	89 37       	cpi	r24, 0x79	; 121
    1576:	9e 07       	cpc	r25, r30
    1578:	28 f4       	brcc	.+10     	; 0x1584 <asin+0x16>
    157a:	e4 eb       	ldi	r30, 0xB4	; 180
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	0e 94 30 0c 	call	0x1860	; 0x1860 <__fp_powsodd>
    1582:	0c c0       	rjmp	.+24     	; 0x159c <asin+0x2e>
    1584:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__fp_arccos>
    1588:	90 58       	subi	r25, 0x80	; 128
    158a:	a2 ea       	ldi	r26, 0xA2	; 162
    158c:	2a ed       	ldi	r18, 0xDA	; 218
    158e:	3f e0       	ldi	r19, 0x0F	; 15
    1590:	49 ec       	ldi	r20, 0xC9	; 201
    1592:	5f e3       	ldi	r21, 0x3F	; 63
    1594:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__addsf3x>
    1598:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__fp_round>
    159c:	0f 90       	pop	r0
    159e:	07 fc       	sbrc	r0, 7
    15a0:	90 58       	subi	r25, 0x80	; 128
    15a2:	08 95       	ret

000015a4 <__cmpsf2>:
    15a4:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__fp_cmp>
    15a8:	08 f4       	brcc	.+2      	; 0x15ac <__cmpsf2+0x8>
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	08 95       	ret

000015ae <__divsf3>:
    15ae:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <__divsf3x>
    15b2:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__fp_round>
    15b6:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fp_pscB>
    15ba:	58 f0       	brcs	.+22     	; 0x15d2 <__divsf3+0x24>
    15bc:	0e 94 44 0c 	call	0x1888	; 0x1888 <__fp_pscA>
    15c0:	40 f0       	brcs	.+16     	; 0x15d2 <__divsf3+0x24>
    15c2:	29 f4       	brne	.+10     	; 0x15ce <__divsf3+0x20>
    15c4:	5f 3f       	cpi	r21, 0xFF	; 255
    15c6:	29 f0       	breq	.+10     	; 0x15d2 <__divsf3+0x24>
    15c8:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__fp_inf>
    15cc:	51 11       	cpse	r21, r1
    15ce:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__fp_szero>
    15d2:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_nan>

000015d6 <__divsf3x>:
    15d6:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__fp_split3>
    15da:	68 f3       	brcs	.-38     	; 0x15b6 <__divsf3+0x8>

000015dc <__divsf3_pse>:
    15dc:	99 23       	and	r25, r25
    15de:	b1 f3       	breq	.-20     	; 0x15cc <__divsf3+0x1e>
    15e0:	55 23       	and	r21, r21
    15e2:	91 f3       	breq	.-28     	; 0x15c8 <__divsf3+0x1a>
    15e4:	95 1b       	sub	r25, r21
    15e6:	55 0b       	sbc	r21, r21
    15e8:	bb 27       	eor	r27, r27
    15ea:	aa 27       	eor	r26, r26
    15ec:	62 17       	cp	r22, r18
    15ee:	73 07       	cpc	r23, r19
    15f0:	84 07       	cpc	r24, r20
    15f2:	38 f0       	brcs	.+14     	; 0x1602 <__divsf3_pse+0x26>
    15f4:	9f 5f       	subi	r25, 0xFF	; 255
    15f6:	5f 4f       	sbci	r21, 0xFF	; 255
    15f8:	22 0f       	add	r18, r18
    15fa:	33 1f       	adc	r19, r19
    15fc:	44 1f       	adc	r20, r20
    15fe:	aa 1f       	adc	r26, r26
    1600:	a9 f3       	breq	.-22     	; 0x15ec <__divsf3_pse+0x10>
    1602:	35 d0       	rcall	.+106    	; 0x166e <__divsf3_pse+0x92>
    1604:	0e 2e       	mov	r0, r30
    1606:	3a f0       	brmi	.+14     	; 0x1616 <__divsf3_pse+0x3a>
    1608:	e0 e8       	ldi	r30, 0x80	; 128
    160a:	32 d0       	rcall	.+100    	; 0x1670 <__divsf3_pse+0x94>
    160c:	91 50       	subi	r25, 0x01	; 1
    160e:	50 40       	sbci	r21, 0x00	; 0
    1610:	e6 95       	lsr	r30
    1612:	00 1c       	adc	r0, r0
    1614:	ca f7       	brpl	.-14     	; 0x1608 <__divsf3_pse+0x2c>
    1616:	2b d0       	rcall	.+86     	; 0x166e <__divsf3_pse+0x92>
    1618:	fe 2f       	mov	r31, r30
    161a:	29 d0       	rcall	.+82     	; 0x166e <__divsf3_pse+0x92>
    161c:	66 0f       	add	r22, r22
    161e:	77 1f       	adc	r23, r23
    1620:	88 1f       	adc	r24, r24
    1622:	bb 1f       	adc	r27, r27
    1624:	26 17       	cp	r18, r22
    1626:	37 07       	cpc	r19, r23
    1628:	48 07       	cpc	r20, r24
    162a:	ab 07       	cpc	r26, r27
    162c:	b0 e8       	ldi	r27, 0x80	; 128
    162e:	09 f0       	breq	.+2      	; 0x1632 <__divsf3_pse+0x56>
    1630:	bb 0b       	sbc	r27, r27
    1632:	80 2d       	mov	r24, r0
    1634:	bf 01       	movw	r22, r30
    1636:	ff 27       	eor	r31, r31
    1638:	93 58       	subi	r25, 0x83	; 131
    163a:	5f 4f       	sbci	r21, 0xFF	; 255
    163c:	3a f0       	brmi	.+14     	; 0x164c <__divsf3_pse+0x70>
    163e:	9e 3f       	cpi	r25, 0xFE	; 254
    1640:	51 05       	cpc	r21, r1
    1642:	78 f0       	brcs	.+30     	; 0x1662 <__divsf3_pse+0x86>
    1644:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__fp_inf>
    1648:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__fp_szero>
    164c:	5f 3f       	cpi	r21, 0xFF	; 255
    164e:	e4 f3       	brlt	.-8      	; 0x1648 <__divsf3_pse+0x6c>
    1650:	98 3e       	cpi	r25, 0xE8	; 232
    1652:	d4 f3       	brlt	.-12     	; 0x1648 <__divsf3_pse+0x6c>
    1654:	86 95       	lsr	r24
    1656:	77 95       	ror	r23
    1658:	67 95       	ror	r22
    165a:	b7 95       	ror	r27
    165c:	f7 95       	ror	r31
    165e:	9f 5f       	subi	r25, 0xFF	; 255
    1660:	c9 f7       	brne	.-14     	; 0x1654 <__divsf3_pse+0x78>
    1662:	88 0f       	add	r24, r24
    1664:	91 1d       	adc	r25, r1
    1666:	96 95       	lsr	r25
    1668:	87 95       	ror	r24
    166a:	97 f9       	bld	r25, 7
    166c:	08 95       	ret
    166e:	e1 e0       	ldi	r30, 0x01	; 1
    1670:	66 0f       	add	r22, r22
    1672:	77 1f       	adc	r23, r23
    1674:	88 1f       	adc	r24, r24
    1676:	bb 1f       	adc	r27, r27
    1678:	62 17       	cp	r22, r18
    167a:	73 07       	cpc	r23, r19
    167c:	84 07       	cpc	r24, r20
    167e:	ba 07       	cpc	r27, r26
    1680:	20 f0       	brcs	.+8      	; 0x168a <__divsf3_pse+0xae>
    1682:	62 1b       	sub	r22, r18
    1684:	73 0b       	sbc	r23, r19
    1686:	84 0b       	sbc	r24, r20
    1688:	ba 0b       	sbc	r27, r26
    168a:	ee 1f       	adc	r30, r30
    168c:	88 f7       	brcc	.-30     	; 0x1670 <__divsf3_pse+0x94>
    168e:	e0 95       	com	r30
    1690:	08 95       	ret

00001692 <__fixsfsi>:
    1692:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__fixunssfsi>
    1696:	68 94       	set
    1698:	b1 11       	cpse	r27, r1
    169a:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__fp_szero>
    169e:	08 95       	ret

000016a0 <__fixunssfsi>:
    16a0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__fp_splitA>
    16a4:	88 f0       	brcs	.+34     	; 0x16c8 <__fixunssfsi+0x28>
    16a6:	9f 57       	subi	r25, 0x7F	; 127
    16a8:	98 f0       	brcs	.+38     	; 0x16d0 <__fixunssfsi+0x30>
    16aa:	b9 2f       	mov	r27, r25
    16ac:	99 27       	eor	r25, r25
    16ae:	b7 51       	subi	r27, 0x17	; 23
    16b0:	b0 f0       	brcs	.+44     	; 0x16de <__fixunssfsi+0x3e>
    16b2:	e1 f0       	breq	.+56     	; 0x16ec <__fixunssfsi+0x4c>
    16b4:	66 0f       	add	r22, r22
    16b6:	77 1f       	adc	r23, r23
    16b8:	88 1f       	adc	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	1a f0       	brmi	.+6      	; 0x16c4 <__fixunssfsi+0x24>
    16be:	ba 95       	dec	r27
    16c0:	c9 f7       	brne	.-14     	; 0x16b4 <__fixunssfsi+0x14>
    16c2:	14 c0       	rjmp	.+40     	; 0x16ec <__fixunssfsi+0x4c>
    16c4:	b1 30       	cpi	r27, 0x01	; 1
    16c6:	91 f0       	breq	.+36     	; 0x16ec <__fixunssfsi+0x4c>
    16c8:	0e 94 85 0c 	call	0x190a	; 0x190a <__fp_zero>
    16cc:	b1 e0       	ldi	r27, 0x01	; 1
    16ce:	08 95       	ret
    16d0:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_zero>
    16d4:	67 2f       	mov	r22, r23
    16d6:	78 2f       	mov	r23, r24
    16d8:	88 27       	eor	r24, r24
    16da:	b8 5f       	subi	r27, 0xF8	; 248
    16dc:	39 f0       	breq	.+14     	; 0x16ec <__fixunssfsi+0x4c>
    16de:	b9 3f       	cpi	r27, 0xF9	; 249
    16e0:	cc f3       	brlt	.-14     	; 0x16d4 <__fixunssfsi+0x34>
    16e2:	86 95       	lsr	r24
    16e4:	77 95       	ror	r23
    16e6:	67 95       	ror	r22
    16e8:	b3 95       	inc	r27
    16ea:	d9 f7       	brne	.-10     	; 0x16e2 <__fixunssfsi+0x42>
    16ec:	3e f4       	brtc	.+14     	; 0x16fc <__fixunssfsi+0x5c>
    16ee:	90 95       	com	r25
    16f0:	80 95       	com	r24
    16f2:	70 95       	com	r23
    16f4:	61 95       	neg	r22
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255
    16f8:	8f 4f       	sbci	r24, 0xFF	; 255
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	08 95       	ret

000016fe <__floatunsisf>:
    16fe:	e8 94       	clt
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <__floatsisf+0x12>

00001702 <__floatsisf>:
    1702:	97 fb       	bst	r25, 7
    1704:	3e f4       	brtc	.+14     	; 0x1714 <__floatsisf+0x12>
    1706:	90 95       	com	r25
    1708:	80 95       	com	r24
    170a:	70 95       	com	r23
    170c:	61 95       	neg	r22
    170e:	7f 4f       	sbci	r23, 0xFF	; 255
    1710:	8f 4f       	sbci	r24, 0xFF	; 255
    1712:	9f 4f       	sbci	r25, 0xFF	; 255
    1714:	99 23       	and	r25, r25
    1716:	a9 f0       	breq	.+42     	; 0x1742 <__floatsisf+0x40>
    1718:	f9 2f       	mov	r31, r25
    171a:	96 e9       	ldi	r25, 0x96	; 150
    171c:	bb 27       	eor	r27, r27
    171e:	93 95       	inc	r25
    1720:	f6 95       	lsr	r31
    1722:	87 95       	ror	r24
    1724:	77 95       	ror	r23
    1726:	67 95       	ror	r22
    1728:	b7 95       	ror	r27
    172a:	f1 11       	cpse	r31, r1
    172c:	f8 cf       	rjmp	.-16     	; 0x171e <__floatsisf+0x1c>
    172e:	fa f4       	brpl	.+62     	; 0x176e <__floatsisf+0x6c>
    1730:	bb 0f       	add	r27, r27
    1732:	11 f4       	brne	.+4      	; 0x1738 <__floatsisf+0x36>
    1734:	60 ff       	sbrs	r22, 0
    1736:	1b c0       	rjmp	.+54     	; 0x176e <__floatsisf+0x6c>
    1738:	6f 5f       	subi	r22, 0xFF	; 255
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	8f 4f       	sbci	r24, 0xFF	; 255
    173e:	9f 4f       	sbci	r25, 0xFF	; 255
    1740:	16 c0       	rjmp	.+44     	; 0x176e <__floatsisf+0x6c>
    1742:	88 23       	and	r24, r24
    1744:	11 f0       	breq	.+4      	; 0x174a <__floatsisf+0x48>
    1746:	96 e9       	ldi	r25, 0x96	; 150
    1748:	11 c0       	rjmp	.+34     	; 0x176c <__floatsisf+0x6a>
    174a:	77 23       	and	r23, r23
    174c:	21 f0       	breq	.+8      	; 0x1756 <__floatsisf+0x54>
    174e:	9e e8       	ldi	r25, 0x8E	; 142
    1750:	87 2f       	mov	r24, r23
    1752:	76 2f       	mov	r23, r22
    1754:	05 c0       	rjmp	.+10     	; 0x1760 <__floatsisf+0x5e>
    1756:	66 23       	and	r22, r22
    1758:	71 f0       	breq	.+28     	; 0x1776 <__floatsisf+0x74>
    175a:	96 e8       	ldi	r25, 0x86	; 134
    175c:	86 2f       	mov	r24, r22
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	2a f0       	brmi	.+10     	; 0x176e <__floatsisf+0x6c>
    1764:	9a 95       	dec	r25
    1766:	66 0f       	add	r22, r22
    1768:	77 1f       	adc	r23, r23
    176a:	88 1f       	adc	r24, r24
    176c:	da f7       	brpl	.-10     	; 0x1764 <__floatsisf+0x62>
    176e:	88 0f       	add	r24, r24
    1770:	96 95       	lsr	r25
    1772:	87 95       	ror	r24
    1774:	97 f9       	bld	r25, 7
    1776:	08 95       	ret

00001778 <__fp_arccos>:
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	1f 93       	push	r17
    177e:	0f 93       	push	r16
    1780:	8b 01       	movw	r16, r22
    1782:	ec 01       	movw	r28, r24
    1784:	e8 ec       	ldi	r30, 0xC8	; 200
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	0e 94 09 0c 	call	0x1812	; 0x1812 <__fp_powser>
    178c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__fp_round>
    1790:	98 01       	movw	r18, r16
    1792:	ae 01       	movw	r20, r28
    1794:	8b 01       	movw	r16, r22
    1796:	ec 01       	movw	r28, r24
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	80 e8       	ldi	r24, 0x80	; 128
    179e:	9f e3       	ldi	r25, 0x3F	; 63
    17a0:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__subsf3>
    17a4:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <sqrt>
    17a8:	98 01       	movw	r18, r16
    17aa:	ae 01       	movw	r20, r28
    17ac:	0f 91       	pop	r16
    17ae:	1f 91       	pop	r17
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__mulsf3x>

000017b8 <__fp_cmp>:
    17b8:	99 0f       	add	r25, r25
    17ba:	00 08       	sbc	r0, r0
    17bc:	55 0f       	add	r21, r21
    17be:	aa 0b       	sbc	r26, r26
    17c0:	e0 e8       	ldi	r30, 0x80	; 128
    17c2:	fe ef       	ldi	r31, 0xFE	; 254
    17c4:	16 16       	cp	r1, r22
    17c6:	17 06       	cpc	r1, r23
    17c8:	e8 07       	cpc	r30, r24
    17ca:	f9 07       	cpc	r31, r25
    17cc:	c0 f0       	brcs	.+48     	; 0x17fe <__fp_cmp+0x46>
    17ce:	12 16       	cp	r1, r18
    17d0:	13 06       	cpc	r1, r19
    17d2:	e4 07       	cpc	r30, r20
    17d4:	f5 07       	cpc	r31, r21
    17d6:	98 f0       	brcs	.+38     	; 0x17fe <__fp_cmp+0x46>
    17d8:	62 1b       	sub	r22, r18
    17da:	73 0b       	sbc	r23, r19
    17dc:	84 0b       	sbc	r24, r20
    17de:	95 0b       	sbc	r25, r21
    17e0:	39 f4       	brne	.+14     	; 0x17f0 <__fp_cmp+0x38>
    17e2:	0a 26       	eor	r0, r26
    17e4:	61 f0       	breq	.+24     	; 0x17fe <__fp_cmp+0x46>
    17e6:	23 2b       	or	r18, r19
    17e8:	24 2b       	or	r18, r20
    17ea:	25 2b       	or	r18, r21
    17ec:	21 f4       	brne	.+8      	; 0x17f6 <__fp_cmp+0x3e>
    17ee:	08 95       	ret
    17f0:	0a 26       	eor	r0, r26
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <__fp_cmp+0x3e>
    17f4:	a1 40       	sbci	r26, 0x01	; 1
    17f6:	a6 95       	lsr	r26
    17f8:	8f ef       	ldi	r24, 0xFF	; 255
    17fa:	81 1d       	adc	r24, r1
    17fc:	81 1d       	adc	r24, r1
    17fe:	08 95       	ret

00001800 <__fp_inf>:
    1800:	97 f9       	bld	r25, 7
    1802:	9f 67       	ori	r25, 0x7F	; 127
    1804:	80 e8       	ldi	r24, 0x80	; 128
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	08 95       	ret

0000180c <__fp_nan>:
    180c:	9f ef       	ldi	r25, 0xFF	; 255
    180e:	80 ec       	ldi	r24, 0xC0	; 192
    1810:	08 95       	ret

00001812 <__fp_powser>:
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	1f 93       	push	r17
    1818:	0f 93       	push	r16
    181a:	ff 92       	push	r15
    181c:	ef 92       	push	r14
    181e:	df 92       	push	r13
    1820:	7b 01       	movw	r14, r22
    1822:	8c 01       	movw	r16, r24
    1824:	68 94       	set
    1826:	06 c0       	rjmp	.+12     	; 0x1834 <__fp_powser+0x22>
    1828:	da 2e       	mov	r13, r26
    182a:	ef 01       	movw	r28, r30
    182c:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__mulsf3x>
    1830:	fe 01       	movw	r30, r28
    1832:	e8 94       	clt
    1834:	a5 91       	lpm	r26, Z+
    1836:	25 91       	lpm	r18, Z+
    1838:	35 91       	lpm	r19, Z+
    183a:	45 91       	lpm	r20, Z+
    183c:	55 91       	lpm	r21, Z+
    183e:	a6 f3       	brts	.-24     	; 0x1828 <__fp_powser+0x16>
    1840:	ef 01       	movw	r28, r30
    1842:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__addsf3x>
    1846:	fe 01       	movw	r30, r28
    1848:	97 01       	movw	r18, r14
    184a:	a8 01       	movw	r20, r16
    184c:	da 94       	dec	r13
    184e:	69 f7       	brne	.-38     	; 0x182a <__fp_powser+0x18>
    1850:	df 90       	pop	r13
    1852:	ef 90       	pop	r14
    1854:	ff 90       	pop	r15
    1856:	0f 91       	pop	r16
    1858:	1f 91       	pop	r17
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <__fp_powsodd>:
    1860:	9f 93       	push	r25
    1862:	8f 93       	push	r24
    1864:	7f 93       	push	r23
    1866:	6f 93       	push	r22
    1868:	ff 93       	push	r31
    186a:	ef 93       	push	r30
    186c:	9b 01       	movw	r18, r22
    186e:	ac 01       	movw	r20, r24
    1870:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
    1874:	ef 91       	pop	r30
    1876:	ff 91       	pop	r31
    1878:	0e 94 09 0c 	call	0x1812	; 0x1812 <__fp_powser>
    187c:	2f 91       	pop	r18
    187e:	3f 91       	pop	r19
    1880:	4f 91       	pop	r20
    1882:	5f 91       	pop	r21
    1884:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__mulsf3>

00001888 <__fp_pscA>:
    1888:	00 24       	eor	r0, r0
    188a:	0a 94       	dec	r0
    188c:	16 16       	cp	r1, r22
    188e:	17 06       	cpc	r1, r23
    1890:	18 06       	cpc	r1, r24
    1892:	09 06       	cpc	r0, r25
    1894:	08 95       	ret

00001896 <__fp_pscB>:
    1896:	00 24       	eor	r0, r0
    1898:	0a 94       	dec	r0
    189a:	12 16       	cp	r1, r18
    189c:	13 06       	cpc	r1, r19
    189e:	14 06       	cpc	r1, r20
    18a0:	05 06       	cpc	r0, r21
    18a2:	08 95       	ret

000018a4 <__fp_round>:
    18a4:	09 2e       	mov	r0, r25
    18a6:	03 94       	inc	r0
    18a8:	00 0c       	add	r0, r0
    18aa:	11 f4       	brne	.+4      	; 0x18b0 <__fp_round+0xc>
    18ac:	88 23       	and	r24, r24
    18ae:	52 f0       	brmi	.+20     	; 0x18c4 <__fp_round+0x20>
    18b0:	bb 0f       	add	r27, r27
    18b2:	40 f4       	brcc	.+16     	; 0x18c4 <__fp_round+0x20>
    18b4:	bf 2b       	or	r27, r31
    18b6:	11 f4       	brne	.+4      	; 0x18bc <__fp_round+0x18>
    18b8:	60 ff       	sbrs	r22, 0
    18ba:	04 c0       	rjmp	.+8      	; 0x18c4 <__fp_round+0x20>
    18bc:	6f 5f       	subi	r22, 0xFF	; 255
    18be:	7f 4f       	sbci	r23, 0xFF	; 255
    18c0:	8f 4f       	sbci	r24, 0xFF	; 255
    18c2:	9f 4f       	sbci	r25, 0xFF	; 255
    18c4:	08 95       	ret

000018c6 <__fp_split3>:
    18c6:	57 fd       	sbrc	r21, 7
    18c8:	90 58       	subi	r25, 0x80	; 128
    18ca:	44 0f       	add	r20, r20
    18cc:	55 1f       	adc	r21, r21
    18ce:	59 f0       	breq	.+22     	; 0x18e6 <__fp_splitA+0x10>
    18d0:	5f 3f       	cpi	r21, 0xFF	; 255
    18d2:	71 f0       	breq	.+28     	; 0x18f0 <__fp_splitA+0x1a>
    18d4:	47 95       	ror	r20

000018d6 <__fp_splitA>:
    18d6:	88 0f       	add	r24, r24
    18d8:	97 fb       	bst	r25, 7
    18da:	99 1f       	adc	r25, r25
    18dc:	61 f0       	breq	.+24     	; 0x18f6 <__fp_splitA+0x20>
    18de:	9f 3f       	cpi	r25, 0xFF	; 255
    18e0:	79 f0       	breq	.+30     	; 0x1900 <__fp_splitA+0x2a>
    18e2:	87 95       	ror	r24
    18e4:	08 95       	ret
    18e6:	12 16       	cp	r1, r18
    18e8:	13 06       	cpc	r1, r19
    18ea:	14 06       	cpc	r1, r20
    18ec:	55 1f       	adc	r21, r21
    18ee:	f2 cf       	rjmp	.-28     	; 0x18d4 <__fp_split3+0xe>
    18f0:	46 95       	lsr	r20
    18f2:	f1 df       	rcall	.-30     	; 0x18d6 <__fp_splitA>
    18f4:	08 c0       	rjmp	.+16     	; 0x1906 <__fp_splitA+0x30>
    18f6:	16 16       	cp	r1, r22
    18f8:	17 06       	cpc	r1, r23
    18fa:	18 06       	cpc	r1, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	f1 cf       	rjmp	.-30     	; 0x18e2 <__fp_splitA+0xc>
    1900:	86 95       	lsr	r24
    1902:	71 05       	cpc	r23, r1
    1904:	61 05       	cpc	r22, r1
    1906:	08 94       	sec
    1908:	08 95       	ret

0000190a <__fp_zero>:
    190a:	e8 94       	clt

0000190c <__fp_szero>:
    190c:	bb 27       	eor	r27, r27
    190e:	66 27       	eor	r22, r22
    1910:	77 27       	eor	r23, r23
    1912:	cb 01       	movw	r24, r22
    1914:	97 f9       	bld	r25, 7
    1916:	08 95       	ret

00001918 <__gesf2>:
    1918:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__fp_cmp>
    191c:	08 f4       	brcc	.+2      	; 0x1920 <__gesf2+0x8>
    191e:	8f ef       	ldi	r24, 0xFF	; 255
    1920:	08 95       	ret

00001922 <__mulsf3>:
    1922:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__mulsf3x>
    1926:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__fp_round>
    192a:	0e 94 44 0c 	call	0x1888	; 0x1888 <__fp_pscA>
    192e:	38 f0       	brcs	.+14     	; 0x193e <__mulsf3+0x1c>
    1930:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fp_pscB>
    1934:	20 f0       	brcs	.+8      	; 0x193e <__mulsf3+0x1c>
    1936:	95 23       	and	r25, r21
    1938:	11 f0       	breq	.+4      	; 0x193e <__mulsf3+0x1c>
    193a:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__fp_inf>
    193e:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_nan>
    1942:	11 24       	eor	r1, r1
    1944:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__fp_szero>

00001948 <__mulsf3x>:
    1948:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__fp_split3>
    194c:	70 f3       	brcs	.-36     	; 0x192a <__mulsf3+0x8>

0000194e <__mulsf3_pse>:
    194e:	95 9f       	mul	r25, r21
    1950:	c1 f3       	breq	.-16     	; 0x1942 <__mulsf3+0x20>
    1952:	95 0f       	add	r25, r21
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	55 1f       	adc	r21, r21
    1958:	62 9f       	mul	r22, r18
    195a:	f0 01       	movw	r30, r0
    195c:	72 9f       	mul	r23, r18
    195e:	bb 27       	eor	r27, r27
    1960:	f0 0d       	add	r31, r0
    1962:	b1 1d       	adc	r27, r1
    1964:	63 9f       	mul	r22, r19
    1966:	aa 27       	eor	r26, r26
    1968:	f0 0d       	add	r31, r0
    196a:	b1 1d       	adc	r27, r1
    196c:	aa 1f       	adc	r26, r26
    196e:	64 9f       	mul	r22, r20
    1970:	66 27       	eor	r22, r22
    1972:	b0 0d       	add	r27, r0
    1974:	a1 1d       	adc	r26, r1
    1976:	66 1f       	adc	r22, r22
    1978:	82 9f       	mul	r24, r18
    197a:	22 27       	eor	r18, r18
    197c:	b0 0d       	add	r27, r0
    197e:	a1 1d       	adc	r26, r1
    1980:	62 1f       	adc	r22, r18
    1982:	73 9f       	mul	r23, r19
    1984:	b0 0d       	add	r27, r0
    1986:	a1 1d       	adc	r26, r1
    1988:	62 1f       	adc	r22, r18
    198a:	83 9f       	mul	r24, r19
    198c:	a0 0d       	add	r26, r0
    198e:	61 1d       	adc	r22, r1
    1990:	22 1f       	adc	r18, r18
    1992:	74 9f       	mul	r23, r20
    1994:	33 27       	eor	r19, r19
    1996:	a0 0d       	add	r26, r0
    1998:	61 1d       	adc	r22, r1
    199a:	23 1f       	adc	r18, r19
    199c:	84 9f       	mul	r24, r20
    199e:	60 0d       	add	r22, r0
    19a0:	21 1d       	adc	r18, r1
    19a2:	82 2f       	mov	r24, r18
    19a4:	76 2f       	mov	r23, r22
    19a6:	6a 2f       	mov	r22, r26
    19a8:	11 24       	eor	r1, r1
    19aa:	9f 57       	subi	r25, 0x7F	; 127
    19ac:	50 40       	sbci	r21, 0x00	; 0
    19ae:	9a f0       	brmi	.+38     	; 0x19d6 <__mulsf3_pse+0x88>
    19b0:	f1 f0       	breq	.+60     	; 0x19ee <__mulsf3_pse+0xa0>
    19b2:	88 23       	and	r24, r24
    19b4:	4a f0       	brmi	.+18     	; 0x19c8 <__mulsf3_pse+0x7a>
    19b6:	ee 0f       	add	r30, r30
    19b8:	ff 1f       	adc	r31, r31
    19ba:	bb 1f       	adc	r27, r27
    19bc:	66 1f       	adc	r22, r22
    19be:	77 1f       	adc	r23, r23
    19c0:	88 1f       	adc	r24, r24
    19c2:	91 50       	subi	r25, 0x01	; 1
    19c4:	50 40       	sbci	r21, 0x00	; 0
    19c6:	a9 f7       	brne	.-22     	; 0x19b2 <__mulsf3_pse+0x64>
    19c8:	9e 3f       	cpi	r25, 0xFE	; 254
    19ca:	51 05       	cpc	r21, r1
    19cc:	80 f0       	brcs	.+32     	; 0x19ee <__mulsf3_pse+0xa0>
    19ce:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__fp_inf>
    19d2:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__fp_szero>
    19d6:	5f 3f       	cpi	r21, 0xFF	; 255
    19d8:	e4 f3       	brlt	.-8      	; 0x19d2 <__mulsf3_pse+0x84>
    19da:	98 3e       	cpi	r25, 0xE8	; 232
    19dc:	d4 f3       	brlt	.-12     	; 0x19d2 <__mulsf3_pse+0x84>
    19de:	86 95       	lsr	r24
    19e0:	77 95       	ror	r23
    19e2:	67 95       	ror	r22
    19e4:	b7 95       	ror	r27
    19e6:	f7 95       	ror	r31
    19e8:	e7 95       	ror	r30
    19ea:	9f 5f       	subi	r25, 0xFF	; 255
    19ec:	c1 f7       	brne	.-16     	; 0x19de <__mulsf3_pse+0x90>
    19ee:	fe 2b       	or	r31, r30
    19f0:	88 0f       	add	r24, r24
    19f2:	91 1d       	adc	r25, r1
    19f4:	96 95       	lsr	r25
    19f6:	87 95       	ror	r24
    19f8:	97 f9       	bld	r25, 7
    19fa:	08 95       	ret
    19fc:	19 f4       	brne	.+6      	; 0x1a04 <__mulsf3_pse+0xb6>
    19fe:	16 f4       	brtc	.+4      	; 0x1a04 <__mulsf3_pse+0xb6>
    1a00:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__fp_nan>
    1a04:	0c 94 48 0d 	jmp	0x1a90	; 0x1a90 <__fp_mpack>

00001a08 <sqrt>:
    1a08:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__fp_splitA>
    1a0c:	b8 f3       	brcs	.-18     	; 0x19fc <__mulsf3_pse+0xae>
    1a0e:	99 23       	and	r25, r25
    1a10:	c9 f3       	breq	.-14     	; 0x1a04 <__mulsf3_pse+0xb6>
    1a12:	b6 f3       	brts	.-20     	; 0x1a00 <__mulsf3_pse+0xb2>
    1a14:	9f 57       	subi	r25, 0x7F	; 127
    1a16:	55 0b       	sbc	r21, r21
    1a18:	87 ff       	sbrs	r24, 7
    1a1a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__fp_norm2>
    1a1e:	00 24       	eor	r0, r0
    1a20:	a0 e6       	ldi	r26, 0x60	; 96
    1a22:	40 ea       	ldi	r20, 0xA0	; 160
    1a24:	90 01       	movw	r18, r0
    1a26:	80 58       	subi	r24, 0x80	; 128
    1a28:	56 95       	lsr	r21
    1a2a:	97 95       	ror	r25
    1a2c:	28 f4       	brcc	.+10     	; 0x1a38 <sqrt+0x30>
    1a2e:	80 5c       	subi	r24, 0xC0	; 192
    1a30:	66 0f       	add	r22, r22
    1a32:	77 1f       	adc	r23, r23
    1a34:	88 1f       	adc	r24, r24
    1a36:	20 f0       	brcs	.+8      	; 0x1a40 <sqrt+0x38>
    1a38:	26 17       	cp	r18, r22
    1a3a:	37 07       	cpc	r19, r23
    1a3c:	48 07       	cpc	r20, r24
    1a3e:	30 f4       	brcc	.+12     	; 0x1a4c <sqrt+0x44>
    1a40:	62 1b       	sub	r22, r18
    1a42:	73 0b       	sbc	r23, r19
    1a44:	84 0b       	sbc	r24, r20
    1a46:	20 29       	or	r18, r0
    1a48:	31 29       	or	r19, r1
    1a4a:	4a 2b       	or	r20, r26
    1a4c:	a6 95       	lsr	r26
    1a4e:	17 94       	ror	r1
    1a50:	07 94       	ror	r0
    1a52:	20 25       	eor	r18, r0
    1a54:	31 25       	eor	r19, r1
    1a56:	4a 27       	eor	r20, r26
    1a58:	58 f7       	brcc	.-42     	; 0x1a30 <sqrt+0x28>
    1a5a:	66 0f       	add	r22, r22
    1a5c:	77 1f       	adc	r23, r23
    1a5e:	88 1f       	adc	r24, r24
    1a60:	20 f0       	brcs	.+8      	; 0x1a6a <sqrt+0x62>
    1a62:	26 17       	cp	r18, r22
    1a64:	37 07       	cpc	r19, r23
    1a66:	48 07       	cpc	r20, r24
    1a68:	30 f4       	brcc	.+12     	; 0x1a76 <sqrt+0x6e>
    1a6a:	62 0b       	sbc	r22, r18
    1a6c:	73 0b       	sbc	r23, r19
    1a6e:	84 0b       	sbc	r24, r20
    1a70:	20 0d       	add	r18, r0
    1a72:	31 1d       	adc	r19, r1
    1a74:	41 1d       	adc	r20, r1
    1a76:	a0 95       	com	r26
    1a78:	81 f7       	brne	.-32     	; 0x1a5a <sqrt+0x52>
    1a7a:	b9 01       	movw	r22, r18
    1a7c:	84 2f       	mov	r24, r20
    1a7e:	91 58       	subi	r25, 0x81	; 129
    1a80:	88 0f       	add	r24, r24
    1a82:	96 95       	lsr	r25
    1a84:	87 95       	ror	r24
    1a86:	08 95       	ret

00001a88 <square>:
    1a88:	9b 01       	movw	r18, r22
    1a8a:	ac 01       	movw	r20, r24
    1a8c:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__mulsf3>

00001a90 <__fp_mpack>:
    1a90:	9f 3f       	cpi	r25, 0xFF	; 255
    1a92:	31 f0       	breq	.+12     	; 0x1aa0 <__fp_mpack_finite+0xc>

00001a94 <__fp_mpack_finite>:
    1a94:	91 50       	subi	r25, 0x01	; 1
    1a96:	20 f4       	brcc	.+8      	; 0x1aa0 <__fp_mpack_finite+0xc>
    1a98:	87 95       	ror	r24
    1a9a:	77 95       	ror	r23
    1a9c:	67 95       	ror	r22
    1a9e:	b7 95       	ror	r27
    1aa0:	88 0f       	add	r24, r24
    1aa2:	91 1d       	adc	r25, r1
    1aa4:	96 95       	lsr	r25
    1aa6:	87 95       	ror	r24
    1aa8:	97 f9       	bld	r25, 7
    1aaa:	08 95       	ret

00001aac <__fp_norm2>:
    1aac:	91 50       	subi	r25, 0x01	; 1
    1aae:	50 40       	sbci	r21, 0x00	; 0
    1ab0:	66 0f       	add	r22, r22
    1ab2:	77 1f       	adc	r23, r23
    1ab4:	88 1f       	adc	r24, r24
    1ab6:	d2 f7       	brpl	.-12     	; 0x1aac <__fp_norm2>
    1ab8:	08 95       	ret

00001aba <_exit>:
    1aba:	f8 94       	cli

00001abc <__stop_program>:
    1abc:	ff cf       	rjmp	.-2      	; 0x1abc <__stop_program>
