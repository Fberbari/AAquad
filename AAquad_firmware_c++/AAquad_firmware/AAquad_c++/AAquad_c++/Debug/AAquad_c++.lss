
AAquad_c++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000163e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  0000163e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000163e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003710  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001423  00000000  00000000  00004fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000106c  00000000  00000000  000063e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000634  00000000  00000000  00007450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ec5  00000000  00000000  00007a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010fc  00000000  00000000  00008949  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00009a45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_1>
       8:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_2>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_4>
      14:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_5>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      68:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      6c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      70:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      74:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      78:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      7c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      80:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      84:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      88:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      8c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      90:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      94:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      98:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      9c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      ac:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      b0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      b4:	03 6e       	ori	r16, 0xE3	; 227
      b6:	db 36       	cpi	r29, 0x6B	; 107
      b8:	3d 9a       	sbi	0x07, 5	; 7
      ba:	99 99       	sbic	0x13, 1	; 19
      bc:	99 3d       	cpi	r25, 0xD9	; 217
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	3e 00       	.word	0x003e	; ????
      c4:	00 00       	nop
      c6:	80 3f       	cpi	r24, 0xF0	; 240
      c8:	07 2c       	mov	r0, r7
      ca:	7a a5       	ldd	r23, Y+42	; 0x2a
      cc:	ba 6c       	ori	r27, 0xCA	; 202
      ce:	c5 90       	lpm	r12, Z+
      d0:	da 3b       	cpi	r29, 0xBA	; 186
      d2:	93 65       	ori	r25, 0x53	; 83
      d4:	fc 8b       	std	Y+20, r31	; 0x14
      d6:	bc 53       	subi	r27, 0x3C	; 60
      d8:	f8 10       	cpse	r15, r8
      da:	fd 3c       	cpi	r31, 0xCD	; 205
      dc:	56 92       	lac	Z, r5
      de:	83 4d       	sbci	r24, 0xD3	; 211
      e0:	bd 87       	std	Y+13, r27	; 0x0d
      e2:	9d 3a       	cpi	r25, 0xAD	; 173
      e4:	b6 3d       	cpi	r27, 0xD6	; 214
      e6:	cb c9       	rjmp	.-3178   	; 0xfffff47e <__eeprom_end+0xff7ef47e>
      e8:	bf 5b       	subi	r27, 0xBF	; 191
      ea:	be 73       	andi	r27, 0x3E	; 62
      ec:	da 0f       	add	r29, r26
      ee:	c9 3f       	cpi	r28, 0xF9	; 249

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d8 e0       	ldi	r29, 0x08	; 8
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_clear_bss>:
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	a2 31       	cpi	r26, 0x12	; 18
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 8c 00 	call	0x118	; 0x118 <main>
     110:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <main>:
	volatile uint16_t temp_timer_throttle = 0; 

	volatile uint16_t temp0;
	

int main(void){
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	c4 5c       	subi	r28, 0xC4	; 196
     122:	d1 09       	sbc	r29, r1
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	de bf       	out	0x3e, r29	; 62
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	cd bf       	out	0x3d, r28	; 61

	initialize::timers();
     12e:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN10initialize6timersEv>
	initialize::interrupts();
     132:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN10initialize10interruptsEv>
	

	I2C_328pb i2c(0xAA); // 
     136:	6a ea       	ldi	r22, 0xAA	; 170
     138:	70 e0       	ldi	r23, 0x00	; 0
     13a:	ce 01       	movw	r24, r28
     13c:	c1 96       	adiw	r24, 0x31	; 49
     13e:	0e 94 94 02 	call	0x528	; 0x528 <_ZN9I2C_328pbC1Ei>
	
	pilot_instructions pilot;
	pilot.set_max_angle(30);
     142:	6e e1       	ldi	r22, 0x1E	; 30
     144:	ce 01       	movw	r24, r28
     146:	c2 96       	adiw	r24, 0x32	; 50
     148:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_ZN18pilot_instructions13set_max_angleEh>
	pilot.set_max_yaw_rate(45);	// this retrieves and holds the pilot's wishes
     14c:	6d e2       	ldi	r22, 0x2D	; 45
     14e:	ce 01       	movw	r24, r28
     150:	c2 96       	adiw	r24, 0x32	; 50
     152:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN18pilot_instructions16set_max_yaw_rateEh>

	

	I2C_328pb sensor_I2C(0xAA);	// object created just for use in the sensor object
     156:	6a ea       	ldi	r22, 0xAA	; 170
     158:	70 e0       	ldi	r23, 0x00	; 0
     15a:	ce 01       	movw	r24, r28
     15c:	cb 96       	adiw	r24, 0x3b	; 59
     15e:	0e 94 94 02 	call	0x528	; 0x528 <_ZN9I2C_328pbC1Ei>
	sensors sense(sensor_I2C);
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	ce 01       	movw	r24, r28
     166:	cc 96       	adiw	r24, 0x3c	; 60
     168:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN7sensorsC1E9I2C_328pb>

	PID bank_pid;
     16c:	ce 01       	movw	r24, r28
     16e:	8a 5a       	subi	r24, 0xAA	; 170
     170:	9f 4f       	sbci	r25, 0xFF	; 255
     172:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN3PIDC1Ev>
	bank_pid.setWeights(0.5,0.5,0.5);
     176:	0f 2e       	mov	r0, r31
     178:	c1 2c       	mov	r12, r1
     17a:	d1 2c       	mov	r13, r1
     17c:	e1 2c       	mov	r14, r1
     17e:	ff e3       	ldi	r31, 0x3F	; 63
     180:	ff 2e       	mov	r15, r31
     182:	f0 2d       	mov	r31, r0
     184:	cd a6       	std	Y+45, r12	; 0x2d
     186:	de a6       	std	Y+46, r13	; 0x2e
     188:	ef a6       	std	Y+47, r14	; 0x2f
     18a:	f8 aa       	std	Y+48, r15	; 0x30
     18c:	c9 a6       	std	Y+41, r12	; 0x29
     18e:	da a6       	std	Y+42, r13	; 0x2a
     190:	eb a6       	std	Y+43, r14	; 0x2b
     192:	fc a6       	std	Y+44, r15	; 0x2c
     194:	cd a2       	std	Y+37, r12	; 0x25
     196:	de a2       	std	Y+38, r13	; 0x26
     198:	ef a2       	std	Y+39, r14	; 0x27
     19a:	f8 a6       	std	Y+40, r15	; 0x28
     19c:	9e 01       	movw	r18, r28
     19e:	23 5d       	subi	r18, 0xD3	; 211
     1a0:	3f 4f       	sbci	r19, 0xFF	; 255
     1a2:	ae 01       	movw	r20, r28
     1a4:	47 5d       	subi	r20, 0xD7	; 215
     1a6:	5f 4f       	sbci	r21, 0xFF	; 255
     1a8:	be 01       	movw	r22, r28
     1aa:	6b 5d       	subi	r22, 0xDB	; 219
     1ac:	7f 4f       	sbci	r23, 0xFF	; 255
     1ae:	ce 01       	movw	r24, r28
     1b0:	8a 5a       	subi	r24, 0xAA	; 170
     1b2:	9f 4f       	sbci	r25, 0xFF	; 255
     1b4:	0e 94 1f 03 	call	0x63e	; 0x63e <_ZN3PID10setWeightsERKfS1_S1_>
	bank_pid.setOutputLowerLimit(-50);
     1b8:	0f 2e       	mov	r0, r31
     1ba:	41 2c       	mov	r4, r1
     1bc:	51 2c       	mov	r5, r1
     1be:	f8 e4       	ldi	r31, 0x48	; 72
     1c0:	6f 2e       	mov	r6, r31
     1c2:	f2 ec       	ldi	r31, 0xC2	; 194
     1c4:	7f 2e       	mov	r7, r31
     1c6:	f0 2d       	mov	r31, r0
     1c8:	49 a2       	std	Y+33, r4	; 0x21
     1ca:	5a a2       	std	Y+34, r5	; 0x22
     1cc:	6b a2       	std	Y+35, r6	; 0x23
     1ce:	7c a2       	std	Y+36, r7	; 0x24
     1d0:	be 01       	movw	r22, r28
     1d2:	6f 5d       	subi	r22, 0xDF	; 223
     1d4:	7f 4f       	sbci	r23, 0xFF	; 255
     1d6:	ce 01       	movw	r24, r28
     1d8:	8a 5a       	subi	r24, 0xAA	; 170
     1da:	9f 4f       	sbci	r25, 0xFF	; 255
     1dc:	0e 94 40 03 	call	0x680	; 0x680 <_ZN3PID19setOutputLowerLimitERKf>
	bank_pid.setOutputUpperLimit(50);
     1e0:	0f 2e       	mov	r0, r31
     1e2:	81 2c       	mov	r8, r1
     1e4:	91 2c       	mov	r9, r1
     1e6:	f8 e4       	ldi	r31, 0x48	; 72
     1e8:	af 2e       	mov	r10, r31
     1ea:	f2 e4       	ldi	r31, 0x42	; 66
     1ec:	bf 2e       	mov	r11, r31
     1ee:	f0 2d       	mov	r31, r0
     1f0:	8d 8e       	std	Y+29, r8	; 0x1d
     1f2:	9e 8e       	std	Y+30, r9	; 0x1e
     1f4:	af 8e       	std	Y+31, r10	; 0x1f
     1f6:	b8 a2       	std	Y+32, r11	; 0x20
     1f8:	be 01       	movw	r22, r28
     1fa:	63 5e       	subi	r22, 0xE3	; 227
     1fc:	7f 4f       	sbci	r23, 0xFF	; 255
     1fe:	ce 01       	movw	r24, r28
     200:	8a 5a       	subi	r24, 0xAA	; 170
     202:	9f 4f       	sbci	r25, 0xFF	; 255
     204:	0e 94 4b 03 	call	0x696	; 0x696 <_ZN3PID19setOutputUpperLimitERKf>

	PID pitch_pid;
     208:	ce 01       	movw	r24, r28
     20a:	84 57       	subi	r24, 0x74	; 116
     20c:	9f 4f       	sbci	r25, 0xFF	; 255
     20e:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN3PIDC1Ev>
	pitch_pid.setWeights(0.5,0.5,0.5);
     212:	c9 8e       	std	Y+25, r12	; 0x19
     214:	da 8e       	std	Y+26, r13	; 0x1a
     216:	eb 8e       	std	Y+27, r14	; 0x1b
     218:	fc 8e       	std	Y+28, r15	; 0x1c
     21a:	cd 8a       	std	Y+21, r12	; 0x15
     21c:	de 8a       	std	Y+22, r13	; 0x16
     21e:	ef 8a       	std	Y+23, r14	; 0x17
     220:	f8 8e       	std	Y+24, r15	; 0x18
     222:	c9 8a       	std	Y+17, r12	; 0x11
     224:	da 8a       	std	Y+18, r13	; 0x12
     226:	eb 8a       	std	Y+19, r14	; 0x13
     228:	fc 8a       	std	Y+20, r15	; 0x14
     22a:	9e 01       	movw	r18, r28
     22c:	27 5e       	subi	r18, 0xE7	; 231
     22e:	3f 4f       	sbci	r19, 0xFF	; 255
     230:	ae 01       	movw	r20, r28
     232:	4b 5e       	subi	r20, 0xEB	; 235
     234:	5f 4f       	sbci	r21, 0xFF	; 255
     236:	be 01       	movw	r22, r28
     238:	6f 5e       	subi	r22, 0xEF	; 239
     23a:	7f 4f       	sbci	r23, 0xFF	; 255
     23c:	ce 01       	movw	r24, r28
     23e:	84 57       	subi	r24, 0x74	; 116
     240:	9f 4f       	sbci	r25, 0xFF	; 255
     242:	0e 94 1f 03 	call	0x63e	; 0x63e <_ZN3PID10setWeightsERKfS1_S1_>
	pitch_pid.setOutputLowerLimit(-50);
     246:	4d 86       	std	Y+13, r4	; 0x0d
     248:	5e 86       	std	Y+14, r5	; 0x0e
     24a:	6f 86       	std	Y+15, r6	; 0x0f
     24c:	78 8a       	std	Y+16, r7	; 0x10
     24e:	be 01       	movw	r22, r28
     250:	63 5f       	subi	r22, 0xF3	; 243
     252:	7f 4f       	sbci	r23, 0xFF	; 255
     254:	ce 01       	movw	r24, r28
     256:	84 57       	subi	r24, 0x74	; 116
     258:	9f 4f       	sbci	r25, 0xFF	; 255
     25a:	0e 94 40 03 	call	0x680	; 0x680 <_ZN3PID19setOutputLowerLimitERKf>
	pitch_pid.setOutputUpperLimit(50);
     25e:	89 86       	std	Y+9, r8	; 0x09
     260:	9a 86       	std	Y+10, r9	; 0x0a
     262:	ab 86       	std	Y+11, r10	; 0x0b
     264:	bc 86       	std	Y+12, r11	; 0x0c
     266:	be 01       	movw	r22, r28
     268:	67 5f       	subi	r22, 0xF7	; 247
     26a:	7f 4f       	sbci	r23, 0xFF	; 255
     26c:	ce 01       	movw	r24, r28
     26e:	84 57       	subi	r24, 0x74	; 116
     270:	9f 4f       	sbci	r25, 0xFF	; 255
     272:	0e 94 4b 03 	call	0x696	; 0x696 <_ZN3PID19setOutputUpperLimitERKf>
	


	I2C_328pb pwm_chip_I2c(0xAA);
     276:	6a ea       	ldi	r22, 0xAA	; 170
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	ce 01       	movw	r24, r28
     27c:	8e 53       	subi	r24, 0x3E	; 62
     27e:	9f 4f       	sbci	r25, 0xFF	; 255
     280:	0e 94 94 02 	call	0x528	; 0x528 <_ZN9I2C_328pbC1Ei>
	pwm_chip pwm(pwm_chip_I2c, 10);
     284:	4a e0       	ldi	r20, 0x0A	; 10
     286:	60 e0       	ldi	r22, 0x00	; 0
     288:	ce 01       	movw	r24, r28
     28a:	8d 53       	subi	r24, 0x3D	; 61
     28c:	9f 4f       	sbci	r25, 0xFF	; 255
     28e:	0e 94 47 04 	call	0x88e	; 0x88e <_ZN8pwm_chipC1E9I2C_328pbh>

	sei();
     292:	78 94       	sei

	
	while(1){
		
			
		sense.read_acc(sensor_I2C);
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	ce 01       	movw	r24, r28
     298:	cc 96       	adiw	r24, 0x3c	; 60
     29a:	0e 94 ed 04 	call	0x9da	; 0x9da <_ZN7sensors8read_accE9I2C_328pb>
		sense.read_gyro(sensor_I2C);	// all sensor data processed
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	ce 01       	movw	r24, r28
     2a2:	cc 96       	adiw	r24, 0x3c	; 60
     2a4:	0e 94 69 05 	call	0xad2	; 0xad2 <_ZN7sensors9read_gyroE9I2C_328pb>
	
		sense.compute_position();
     2a8:	ce 01       	movw	r24, r28
     2aa:	cc 96       	adiw	r24, 0x3c	; 60
     2ac:	0e 94 35 06 	call	0xc6a	; 0xc6a <_ZN7sensors16compute_positionEv>
		
		pilot.compute();	// all pilot data processed
     2b0:	ce 01       	movw	r24, r28
     2b2:	c2 96       	adiw	r24, 0x32	; 50
     2b4:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN18pilot_instructions7computeEv>
		
		
		
	
		bank_pid.setDesiredPoint(pilot.get_bank_angle());
     2b8:	ce 01       	movw	r24, r28
     2ba:	c2 96       	adiw	r24, 0x32	; 50
     2bc:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZNK18pilot_instructions14get_bank_angleEv>
     2c0:	bc 01       	movw	r22, r24
     2c2:	99 0f       	add	r25, r25
     2c4:	88 0b       	sbc	r24, r24
     2c6:	99 0b       	sbc	r25, r25
     2c8:	0e 94 07 09 	call	0x120e	; 0x120e <__floatsisf>
     2cc:	6d 83       	std	Y+5, r22	; 0x05
     2ce:	7e 83       	std	Y+6, r23	; 0x06
     2d0:	8f 83       	std	Y+7, r24	; 0x07
     2d2:	98 87       	std	Y+8, r25	; 0x08
     2d4:	be 01       	movw	r22, r28
     2d6:	6b 5f       	subi	r22, 0xFB	; 251
     2d8:	7f 4f       	sbci	r23, 0xFF	; 255
     2da:	ce 01       	movw	r24, r28
     2dc:	8a 5a       	subi	r24, 0xAA	; 170
     2de:	9f 4f       	sbci	r25, 0xFF	; 255
     2e0:	0e 94 56 03 	call	0x6ac	; 0x6ac <_ZN3PID15setDesiredPointERKf>

		pitch_pid.setDesiredPoint(pilot.get_pitch_angle());
     2e4:	ce 01       	movw	r24, r28
     2e6:	c2 96       	adiw	r24, 0x32	; 50
     2e8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZNK18pilot_instructions15get_pitch_angleEv>
     2ec:	bc 01       	movw	r22, r24
     2ee:	99 0f       	add	r25, r25
     2f0:	88 0b       	sbc	r24, r24
     2f2:	99 0b       	sbc	r25, r25
     2f4:	0e 94 07 09 	call	0x120e	; 0x120e <__floatsisf>
     2f8:	69 83       	std	Y+1, r22	; 0x01
     2fa:	7a 83       	std	Y+2, r23	; 0x02
     2fc:	8b 83       	std	Y+3, r24	; 0x03
     2fe:	9c 83       	std	Y+4, r25	; 0x04
     300:	be 01       	movw	r22, r28
     302:	6f 5f       	subi	r22, 0xFF	; 255
     304:	7f 4f       	sbci	r23, 0xFF	; 255
     306:	ce 01       	movw	r24, r28
     308:	84 57       	subi	r24, 0x74	; 116
     30a:	9f 4f       	sbci	r25, 0xFF	; 255
     30c:	0e 94 56 03 	call	0x6ac	; 0x6ac <_ZN3PID15setDesiredPointERKf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     310:	87 e8       	ldi	r24, 0x87	; 135
     312:	93 e1       	ldi	r25, 0x13	; 19
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	f1 f7       	brne	.-4      	; 0x314 <main+0x1fc>
     318:	00 c0       	rjmp	.+0      	; 0x31a <main+0x202>
     31a:	00 00       	nop
     31c:	bb cf       	rjmp	.-138    	; 0x294 <main+0x17c>

0000031e <__vector_1>:

}



ISR(INT0_vect){
     31e:	1f 92       	push	r1
     320:	0f 92       	push	r0
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	0f 92       	push	r0
     326:	11 24       	eor	r1, r1
     328:	2f 93       	push	r18
     32a:	3f 93       	push	r19
     32c:	4f 93       	push	r20
     32e:	5f 93       	push	r21
     330:	8f 93       	push	r24
     332:	9f 93       	push	r25
	
		uint16_t temp = TCNT1;
     334:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     338:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

		if ( temp < temp_timer_aileron){	// timer overflow
     33c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <temp_timer_aileron>
     340:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
     344:	82 17       	cp	r24, r18
     346:	93 07       	cpc	r25, r19
     348:	70 f4       	brcc	.+28     	; 0x366 <__vector_1+0x48>

			requested_aileron_pos = (0xffff - temp_timer_aileron) + temp ;
     34a:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <temp_timer_aileron>
     34e:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
     352:	9c 01       	movw	r18, r24
     354:	21 50       	subi	r18, 0x01	; 1
     356:	31 09       	sbc	r19, r1
     358:	24 1b       	sub	r18, r20
     35a:	35 0b       	sbc	r19, r21
     35c:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <requested_aileron_pos+0x1>
     360:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <requested_aileron_pos>
     364:	0b c0       	rjmp	.+22     	; 0x37c <__vector_1+0x5e>
		}

		else {	// regular case
	
			requested_aileron_pos = temp - temp_timer_aileron;
     366:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <temp_timer_aileron>
     36a:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
     36e:	ac 01       	movw	r20, r24
     370:	42 1b       	sub	r20, r18
     372:	53 0b       	sbc	r21, r19
     374:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <requested_aileron_pos+0x1>
     378:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp;
     37c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <temp_timer_aileron+0x1>
     380:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <temp_timer_aileron>
		
		
		// here, there is a chance that the value stored in requested aileron is actually (0xffff - actual requested aileron) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
	
}
     384:	9f 91       	pop	r25
     386:	8f 91       	pop	r24
     388:	5f 91       	pop	r21
     38a:	4f 91       	pop	r20
     38c:	3f 91       	pop	r19
     38e:	2f 91       	pop	r18
     390:	0f 90       	pop	r0
     392:	0f be       	out	0x3f, r0	; 63
     394:	0f 90       	pop	r0
     396:	1f 90       	pop	r1
     398:	18 95       	reti

0000039a <__vector_2>:

ISR(INT1_vect){
     39a:	1f 92       	push	r1
     39c:	0f 92       	push	r0
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	0f 92       	push	r0
     3a2:	11 24       	eor	r1, r1
     3a4:	2f 93       	push	r18
     3a6:	3f 93       	push	r19
     3a8:	8f 93       	push	r24
     3aa:	9f 93       	push	r25
	
		temp0 = TCNT1;
     3ac:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     3b0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     3b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
     3b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		

		if ( temp0 < temp_timer_throttle){	// timer overflow
     3bc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     3c0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
     3c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp_timer_throttle>
     3c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
     3cc:	28 17       	cp	r18, r24
     3ce:	39 07       	cpc	r19, r25
     3d0:	80 f4       	brcc	.+32     	; 0x3f2 <__vector_2+0x58>

			requested_throttle_pos = (0xffff - temp_timer_throttle) + temp0 ;
     3d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     3d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
     3da:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_throttle>
     3de:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	82 1b       	sub	r24, r18
     3e6:	93 0b       	sbc	r25, r19
     3e8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
     3ec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>
     3f0:	0e c0       	rjmp	.+28     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		}

		else {	// regular case
	
			requested_throttle_pos = temp0 - temp_timer_throttle;
     3f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     3f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
     3fa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_throttle>
     3fe:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
     402:	82 1b       	sub	r24, r18
     404:	93 0b       	sbc	r25, r19
     406:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
     40a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>
			
		}
	
		
		temp_timer_throttle = temp0;
     40e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     412:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
     416:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <temp_timer_throttle+0x1>
     41a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_timer_throttle>
		
		
		// here, there is a chance that the value stored in requested throttle is actually (0xffff - actual requested throttle) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
}
     41e:	9f 91       	pop	r25
     420:	8f 91       	pop	r24
     422:	3f 91       	pop	r19
     424:	2f 91       	pop	r18
     426:	0f 90       	pop	r0
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <__vector_4>:




ISR(PCINT1_vect){
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	2f 93       	push	r18
     43c:	3f 93       	push	r19
     43e:	4f 93       	push	r20
     440:	5f 93       	push	r21
     442:	8f 93       	push	r24
     444:	9f 93       	push	r25

	uint16_t temp = TCNT1;
     446:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     44a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

	if ( temp < temp_timer_rudder){	// timer overflow
     44e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <temp_timer_rudder>
     452:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
     456:	82 17       	cp	r24, r18
     458:	93 07       	cpc	r25, r19
     45a:	70 f4       	brcc	.+28     	; 0x478 <__vector_4+0x48>

		requested_rudder_pos = (0xffff - temp_timer_rudder) + temp ;
     45c:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <temp_timer_rudder>
     460:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
     464:	9c 01       	movw	r18, r24
     466:	21 50       	subi	r18, 0x01	; 1
     468:	31 09       	sbc	r19, r1
     46a:	24 1b       	sub	r18, r20
     46c:	35 0b       	sbc	r19, r21
     46e:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <requested_rudder_pos+0x1>
     472:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <requested_rudder_pos>
     476:	0b c0       	rjmp	.+22     	; 0x48e <__vector_4+0x5e>
	}

	else {	// regular case

		requested_rudder_pos = temp - temp_timer_rudder;
     478:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <temp_timer_rudder>
     47c:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
     480:	ac 01       	movw	r20, r24
     482:	42 1b       	sub	r20, r18
     484:	53 0b       	sbc	r21, r19
     486:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <requested_rudder_pos+0x1>
     48a:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <requested_rudder_pos>
		
	}

	
	temp_timer_rudder = temp;
     48e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <temp_timer_rudder+0x1>
     492:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <temp_timer_rudder>
	
	

}
     496:	9f 91       	pop	r25
     498:	8f 91       	pop	r24
     49a:	5f 91       	pop	r21
     49c:	4f 91       	pop	r20
     49e:	3f 91       	pop	r19
     4a0:	2f 91       	pop	r18
     4a2:	0f 90       	pop	r0
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	0f 90       	pop	r0
     4a8:	1f 90       	pop	r1
     4aa:	18 95       	reti

000004ac <__vector_5>:

ISR(PCINT2_vect){
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1
     4b6:	2f 93       	push	r18
     4b8:	3f 93       	push	r19
     4ba:	4f 93       	push	r20
     4bc:	5f 93       	push	r21
     4be:	8f 93       	push	r24
     4c0:	9f 93       	push	r25

	uint16_t temp = TCNT1;
     4c2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     4c6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	

	if ( temp < temp_timer_elevator){	// timer overflow
     4ca:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temp_timer_elevator>
     4ce:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
     4d2:	82 17       	cp	r24, r18
     4d4:	93 07       	cpc	r25, r19
     4d6:	70 f4       	brcc	.+28     	; 0x4f4 <__vector_5+0x48>

		requested_elevator_pos = (0xffff - temp_timer_elevator) + temp ;
     4d8:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_timer_elevator>
     4dc:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
     4e0:	9c 01       	movw	r18, r24
     4e2:	21 50       	subi	r18, 0x01	; 1
     4e4:	31 09       	sbc	r19, r1
     4e6:	24 1b       	sub	r18, r20
     4e8:	35 0b       	sbc	r19, r21
     4ea:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <requested_elevator_pos+0x1>
     4ee:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <requested_elevator_pos>
     4f2:	0b c0       	rjmp	.+22     	; 0x50a <__vector_5+0x5e>
	}

	else {	// regular case

		requested_elevator_pos = temp - temp_timer_elevator;
     4f4:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temp_timer_elevator>
     4f8:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
     4fc:	ac 01       	movw	r20, r24
     4fe:	42 1b       	sub	r20, r18
     500:	53 0b       	sbc	r21, r19
     502:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <requested_elevator_pos+0x1>
     506:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <requested_elevator_pos>
		
	}

	
	temp_timer_elevator = temp;
     50a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <temp_timer_elevator+0x1>
     50e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temp_timer_elevator>
	
	

}
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	5f 91       	pop	r21
     518:	4f 91       	pop	r20
     51a:	3f 91       	pop	r19
     51c:	2f 91       	pop	r18
     51e:	0f 90       	pop	r0
     520:	0f be       	out	0x3f, r0	; 63
     522:	0f 90       	pop	r0
     524:	1f 90       	pop	r1
     526:	18 95       	reti

00000528 <_ZN9I2C_328pbC1Ei>:

I2C_328pb::I2C_328pb(int bit_rate){

	// takes care of any and all initialsation

	TWBR0 = bit_rate;
     528:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     52c:	08 95       	ret

0000052e <_ZN9I2C_328pb5startEv>:



void I2C_328pb::start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
     52e:	84 ea       	ldi	r24, 0xA4	; 164
     530:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     534:	ec eb       	ldi	r30, 0xBC	; 188
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	88 23       	and	r24, r24
     53c:	ec f7       	brge	.-6      	; 0x538 <_ZN9I2C_328pb5startEv+0xa>
		return 0; 
	}

	return 1;
*/
}
     53e:	08 95       	ret

00000540 <_ZN9I2C_328pb12repeat_startEv>:


void I2C_328pb::repeat_start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
     540:	84 ea       	ldi	r24, 0xA4	; 164
     542:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     546:	ec eb       	ldi	r30, 0xBC	; 188
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	80 81       	ld	r24, Z
     54c:	88 23       	and	r24, r24
     54e:	ec f7       	brge	.-6      	; 0x54a <_ZN9I2C_328pb12repeat_startEv+0xa>
		return 0; 
	}

	return 1;
*/
}
     550:	08 95       	ret

00000552 <_ZN9I2C_328pb10send_slaveEi>:

void I2C_328pb::send_slave(int address){

	// send slave address + write bit

	TWDR0 = address;
     552:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
     556:	84 e8       	ldi	r24, 0x84	; 132
     558:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     55c:	ec eb       	ldi	r30, 0xBC	; 188
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	80 81       	ld	r24, Z
     562:	88 23       	and	r24, r24
     564:	ec f7       	brge	.-6      	; 0x560 <_ZN9I2C_328pb10send_slaveEi+0xe>
	}

	return 1;
*/

}
     566:	08 95       	ret

00000568 <_ZN9I2C_328pb8send_regEi>:

void I2C_328pb::send_reg(int reg){

	// send  address of register to be written

	TWDR0 = reg; 
     568:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

  	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
     56c:	84 e8       	ldi	r24, 0x84	; 132
     56e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     572:	ec eb       	ldi	r30, 0xBC	; 188
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	88 23       	and	r24, r24
     57a:	ec f7       	brge	.-6      	; 0x576 <_ZN9I2C_328pb8send_regEi+0xe>
	}

	return 1;
*/

}
     57c:	08 95       	ret

0000057e <_ZN9I2C_328pb4sendEi>:


void I2C_328pb::send(int data){

	TWDR0 = data;
     57e:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ((1 << TWINT) | (1 << TWEN));
     582:	84 e8       	ldi	r24, 0x84	; 132
     584:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     588:	ec eb       	ldi	r30, 0xBC	; 188
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	80 81       	ld	r24, Z
     58e:	88 23       	and	r24, r24
     590:	ec f7       	brge	.-6      	; 0x58c <_ZN9I2C_328pb4sendEi+0xe>
	}

	return 1;
*/

}
     592:	08 95       	ret

00000594 <_ZN9I2C_328pb13get_next_byteEv>:

void I2C_328pb::get_next_byte(){


	TWCR0 = ( (1 << TWEN) | (1 << TWINT) | (1 << TWEA));
     594:	84 ec       	ldi	r24, 0xC4	; 196
     596:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while (! (TWCR0 & (1 << TWINT)) );
     59a:	ec eb       	ldi	r30, 0xBC	; 188
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	80 81       	ld	r24, Z
     5a0:	88 23       	and	r24, r24
     5a2:	ec f7       	brge	.-6      	; 0x59e <_ZN9I2C_328pb13get_next_byteEv+0xa>
	return 1;

*/


}
     5a4:	08 95       	ret

000005a6 <_ZN9I2C_328pb13end_data_readEv>:

void I2C_328pb::end_data_read(){


	TWCR0 = ( (1 << TWEN) | (1 << TWINT) );
     5a6:	84 e8       	ldi	r24, 0x84	; 132
     5a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while (! (TWCR0 & (1 << TWINT)) );
     5ac:	ec eb       	ldi	r30, 0xBC	; 188
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	80 81       	ld	r24, Z
     5b2:	88 23       	and	r24, r24
     5b4:	ec f7       	brge	.-6      	; 0x5b0 <_ZN9I2C_328pb13end_data_readEv+0xa>


}
     5b6:	08 95       	ret

000005b8 <_ZN9I2C_328pb4stopEv>:

void I2C_328pb::stop(){


	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) ); 
     5b8:	ec eb       	ldi	r30, 0xBC	; 188
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	84 69       	ori	r24, 0x94	; 148
     5c0:	80 83       	st	Z, r24
     5c2:	08 95       	ret

000005c4 <_ZN10initialize10interruptsEv>:


void initialize::interrupts(){

	// external int 0
	EIMSK |= (1 << INT0); // enable the int0 interrupt												
     5c4:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC00);	// will fire at any logical change
     5c6:	e9 e6       	ldi	r30, 0x69	; 105
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	80 81       	ld	r24, Z
     5cc:	81 60       	ori	r24, 0x01	; 1
     5ce:	80 83       	st	Z, r24

	// external int 1
	EIMSK |= (1 << INT1); // enable the int0 interrupt
     5d0:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= (1 << ISC10);	// will fire at any logical change
     5d2:	80 81       	ld	r24, Z
     5d4:	84 60       	ori	r24, 0x04	; 4
     5d6:	80 83       	st	Z, r24

	// pcint 0 (for pin C3)
	PCICR |= (1 << PCIE1);
     5d8:	e8 e6       	ldi	r30, 0x68	; 104
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	82 60       	ori	r24, 0x02	; 2
     5e0:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);
     5e2:	ac e6       	ldi	r26, 0x6C	; 108
     5e4:	b0 e0       	ldi	r27, 0x00	; 0
     5e6:	8c 91       	ld	r24, X
     5e8:	88 60       	ori	r24, 0x08	; 8
     5ea:	8c 93       	st	X, r24

	//pcint 1 (for pin B1)
	PCICR |= (1 << PCIE2);
     5ec:	80 81       	ld	r24, Z
     5ee:	84 60       	ori	r24, 0x04	; 4
     5f0:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT17);
     5f2:	ed e6       	ldi	r30, 0x6D	; 109
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	82 60       	ori	r24, 0x02	; 2
     5fa:	80 83       	st	Z, r24
	
	// setting the pullup resistors on everything (will not be necessary once all wires are connected

	DDRD &= ~(1 << 2);
     5fc:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << 2);
     5fe:	5a 9a       	sbi	0x0b, 2	; 11
	
	DDRC &= ~(1 << 3);
     600:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1 << 3);
     602:	43 9a       	sbi	0x08, 3	; 8
	
	DDRD &= ~(1 << 3);
     604:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1 << 3);
     606:	5b 9a       	sbi	0x0b, 3	; 11
	
	DDRD &= ~(1 << 4);
     608:	54 98       	cbi	0x0a, 4	; 10
	PORTD |= (1 << 4);
     60a:	5c 9a       	sbi	0x0b, 4	; 11
     60c:	08 95       	ret

0000060e <_ZN10initialize6timersEv>:
}

void initialize::timers(){

	// by default the timer is set to normal mode
	TCCR1B |= ( (1 << CS10));	// timer will run without prescaler and willoverrun 15 times/second
     60e:	e1 e8       	ldi	r30, 0x81	; 129
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 81       	ld	r24, Z
     614:	81 60       	ori	r24, 0x01	; 1
     616:	80 83       	st	Z, r24
     618:	08 95       	ret

0000061a <_ZN3PIDC1Ev>:
#include "PID.h"



PID::PID(){
     61a:	fc 01       	movw	r30, r24

    last_error = 0;
     61c:	14 82       	std	Z+4, r1	; 0x04
     61e:	15 82       	std	Z+5, r1	; 0x05
     620:	16 82       	std	Z+6, r1	; 0x06
     622:	17 82       	std	Z+7, r1	; 0x07
	current_error = 0;
     624:	10 82       	st	Z, r1
     626:	11 82       	std	Z+1, r1	; 0x01
     628:	12 82       	std	Z+2, r1	; 0x02
     62a:	13 82       	std	Z+3, r1	; 0x03
    last_output = 0;
     62c:	10 86       	std	Z+8, r1	; 0x08
     62e:	11 86       	std	Z+9, r1	; 0x09
     630:	12 86       	std	Z+10, r1	; 0x0a
     632:	13 86       	std	Z+11, r1	; 0x0b
    integral = 0;
     634:	10 a2       	std	Z+32, r1	; 0x20
     636:	11 a2       	std	Z+33, r1	; 0x21
     638:	12 a2       	std	Z+34, r1	; 0x22
     63a:	13 a2       	std	Z+35, r1	; 0x23
     63c:	08 95       	ret

0000063e <_ZN3PID10setWeightsERKfS1_S1_>:
}
        


void PID::setWeights(const float &Kp, const float &Ki, const float &Kd) {
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	fc 01       	movw	r30, r24
	this->Kp = Kp;
     644:	eb 01       	movw	r28, r22
     646:	88 81       	ld	r24, Y
     648:	99 81       	ldd	r25, Y+1	; 0x01
     64a:	aa 81       	ldd	r26, Y+2	; 0x02
     64c:	bb 81       	ldd	r27, Y+3	; 0x03
     64e:	84 8b       	std	Z+20, r24	; 0x14
     650:	95 8b       	std	Z+21, r25	; 0x15
     652:	a6 8b       	std	Z+22, r26	; 0x16
     654:	b7 8b       	std	Z+23, r27	; 0x17
	this->Ki = Ki;
     656:	ea 01       	movw	r28, r20
     658:	88 81       	ld	r24, Y
     65a:	99 81       	ldd	r25, Y+1	; 0x01
     65c:	aa 81       	ldd	r26, Y+2	; 0x02
     65e:	bb 81       	ldd	r27, Y+3	; 0x03
     660:	80 8f       	std	Z+24, r24	; 0x18
     662:	91 8f       	std	Z+25, r25	; 0x19
     664:	a2 8f       	std	Z+26, r26	; 0x1a
     666:	b3 8f       	std	Z+27, r27	; 0x1b
	this->Kd = Kd;
     668:	e9 01       	movw	r28, r18
     66a:	88 81       	ld	r24, Y
     66c:	99 81       	ldd	r25, Y+1	; 0x01
     66e:	aa 81       	ldd	r26, Y+2	; 0x02
     670:	bb 81       	ldd	r27, Y+3	; 0x03
     672:	84 8f       	std	Z+28, r24	; 0x1c
     674:	95 8f       	std	Z+29, r25	; 0x1d
     676:	a6 8f       	std	Z+30, r26	; 0x1e
     678:	b7 8f       	std	Z+31, r27	; 0x1f
}
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret

00000680 <_ZN3PID19setOutputLowerLimitERKf>:
void PID::setErrorThreshold(const float &error_threshold) {
	this->error_threshold = error_threshold;
}
*/
void PID::setOutputLowerLimit(const float &output_lower_limit) {
	this->output_lower_limit = output_lower_limit;
     680:	fb 01       	movw	r30, r22
     682:	40 81       	ld	r20, Z
     684:	51 81       	ldd	r21, Z+1	; 0x01
     686:	62 81       	ldd	r22, Z+2	; 0x02
     688:	73 81       	ldd	r23, Z+3	; 0x03
     68a:	fc 01       	movw	r30, r24
     68c:	44 a7       	std	Z+44, r20	; 0x2c
     68e:	55 a7       	std	Z+45, r21	; 0x2d
     690:	66 a7       	std	Z+46, r22	; 0x2e
     692:	77 a7       	std	Z+47, r23	; 0x2f
     694:	08 95       	ret

00000696 <_ZN3PID19setOutputUpperLimitERKf>:
}

void PID::setOutputUpperLimit(const float &output_upper_limit) {
	this->output_upper_limit = output_upper_limit;
     696:	fb 01       	movw	r30, r22
     698:	40 81       	ld	r20, Z
     69a:	51 81       	ldd	r21, Z+1	; 0x01
     69c:	62 81       	ldd	r22, Z+2	; 0x02
     69e:	73 81       	ldd	r23, Z+3	; 0x03
     6a0:	fc 01       	movw	r30, r24
     6a2:	40 a7       	std	Z+40, r20	; 0x28
     6a4:	51 a7       	std	Z+41, r21	; 0x29
     6a6:	62 a7       	std	Z+42, r22	; 0x2a
     6a8:	73 a7       	std	Z+43, r23	; 0x2b
     6aa:	08 95       	ret

000006ac <_ZN3PID15setDesiredPointERKf>:
}

void PID::setDesiredPoint(const float &desired_point) {
	set_point = desired_point;
     6ac:	fb 01       	movw	r30, r22
     6ae:	40 81       	ld	r20, Z
     6b0:	51 81       	ldd	r21, Z+1	; 0x01
     6b2:	62 81       	ldd	r22, Z+2	; 0x02
     6b4:	73 81       	ldd	r23, Z+3	; 0x03
     6b6:	fc 01       	movw	r30, r24
     6b8:	40 8b       	std	Z+16, r20	; 0x10
     6ba:	51 8b       	std	Z+17, r21	; 0x11
     6bc:	62 8b       	std	Z+18, r22	; 0x12
     6be:	73 8b       	std	Z+19, r23	; 0x13
     6c0:	08 95       	ret

000006c2 <_ZN18pilot_instructions13set_max_angleEh>:


uint8_t pilot_instructions::get_throttle_power() const{

	return throttle_power;
}
     6c2:	fc 01       	movw	r30, r24
     6c4:	60 83       	st	Z, r22
     6c6:	08 95       	ret

000006c8 <_ZN18pilot_instructions16set_max_yaw_rateEh>:
     6c8:	fc 01       	movw	r30, r24
     6ca:	61 83       	std	Z+1, r22	; 0x01
     6cc:	08 95       	ret

000006ce <_ZNK18pilot_instructions14get_bank_angleEv>:
     6ce:	fc 01       	movw	r30, r24
     6d0:	82 81       	ldd	r24, Z+2	; 0x02
     6d2:	93 81       	ldd	r25, Z+3	; 0x03
     6d4:	08 95       	ret

000006d6 <_ZNK18pilot_instructions15get_pitch_angleEv>:
     6d6:	fc 01       	movw	r30, r24
     6d8:	84 81       	ldd	r24, Z+4	; 0x04
     6da:	95 81       	ldd	r25, Z+5	; 0x05
     6dc:	08 95       	ret

000006de <_ZN18pilot_instructions7computeEv>:



void pilot_instructions::compute(void){
     6de:	4f 92       	push	r4
     6e0:	5f 92       	push	r5
     6e2:	6f 92       	push	r6
     6e4:	7f 92       	push	r7
     6e6:	8f 92       	push	r8
     6e8:	9f 92       	push	r9
     6ea:	af 92       	push	r10
     6ec:	bf 92       	push	r11
     6ee:	cf 92       	push	r12
     6f0:	df 92       	push	r13
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	8c 01       	movw	r16, r24
	extern volatile uint16_t requested_throttle_pos;


	// 50% of the time the value read is actually the valley of the pwm, that is corrected here 

	if (requested_aileron_pos > 0x7000 ){
     700:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <requested_aileron_pos>
     704:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <requested_aileron_pos+0x1>
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	90 47       	sbci	r25, 0x70	; 112
     70c:	50 f0       	brcs	.+20     	; 0x722 <_ZN18pilot_instructions7computeEv+0x44>
			
		requested_aileron_pos = 0xffff - requested_aileron_pos;
     70e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <requested_aileron_pos>
     712:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <requested_aileron_pos+0x1>
     716:	80 95       	com	r24
     718:	90 95       	com	r25
     71a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <requested_aileron_pos+0x1>
     71e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <requested_aileron_pos>
	}

	if (requested_elevator_pos > 0x7000 ){
     722:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <requested_elevator_pos>
     726:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <requested_elevator_pos+0x1>
     72a:	81 30       	cpi	r24, 0x01	; 1
     72c:	90 47       	sbci	r25, 0x70	; 112
     72e:	50 f0       	brcs	.+20     	; 0x744 <_ZN18pilot_instructions7computeEv+0x66>
			
		requested_elevator_pos = 0xffff - requested_elevator_pos;
     730:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <requested_elevator_pos>
     734:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <requested_elevator_pos+0x1>
     738:	80 95       	com	r24
     73a:	90 95       	com	r25
     73c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <requested_elevator_pos+0x1>
     740:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <requested_elevator_pos>
	}

	if (requested_rudder_pos > 0x7000 ){
     744:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <requested_rudder_pos>
     748:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <requested_rudder_pos+0x1>
     74c:	81 30       	cpi	r24, 0x01	; 1
     74e:	90 47       	sbci	r25, 0x70	; 112
     750:	50 f0       	brcs	.+20     	; 0x766 <_ZN18pilot_instructions7computeEv+0x88>
			
		requested_rudder_pos = 0xffff - requested_rudder_pos;
     752:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <requested_rudder_pos>
     756:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <requested_rudder_pos+0x1>
     75a:	80 95       	com	r24
     75c:	90 95       	com	r25
     75e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <requested_rudder_pos+0x1>
     762:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <requested_rudder_pos>
	}

	if (requested_throttle_pos > 0x7000 ){
     766:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_throttle_pos>
     76a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	90 47       	sbci	r25, 0x70	; 112
     772:	50 f0       	brcs	.+20     	; 0x788 <_ZN18pilot_instructions7computeEv+0xaa>
			
		requested_throttle_pos = 0xffff - requested_throttle_pos;
     774:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_throttle_pos>
     778:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
     77c:	80 95       	com	r24
     77e:	90 95       	com	r25
     780:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
     784:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>





	throttle_power = ((requested_throttle_pos - 1015) / 8);	// computes the percentage of the max the pilot wants
     788:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_throttle_pos>
     78c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
     790:	87 5f       	subi	r24, 0xF7	; 247
     792:	93 40       	sbci	r25, 0x03	; 3
     794:	96 95       	lsr	r25
     796:	87 95       	ror	r24
     798:	96 95       	lsr	r25
     79a:	87 95       	ror	r24
     79c:	96 95       	lsr	r25
     79e:	87 95       	ror	r24
     7a0:	f8 01       	movw	r30, r16
     7a2:	80 87       	std	Z+8, r24	; 0x08
	
	//yaw_rate = ( requested_rudder_pos / 6553 ) * max_yaw_rate;	// computes the percentage of the max the pilot wants
	
	
	float temp_pitch_angle = (requested_elevator_pos - 1110.f);	// computes the percentage of the max the pilot wants
     7a4:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <requested_elevator_pos>
     7a8:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <requested_elevator_pos+0x1>
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 05 09 	call	0x120a	; 0x120a <__floatunsisf>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 ec       	ldi	r19, 0xC0	; 192
     7b8:	4a e8       	ldi	r20, 0x8A	; 138
     7ba:	54 e4       	ldi	r21, 0x44	; 68
     7bc:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__subsf3>
	temp_pitch_angle /= 800;
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	48 e4       	ldi	r20, 0x48	; 72
     7c6:	54 e4       	ldi	r21, 0x44	; 68
     7c8:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__divsf3>
     7cc:	4b 01       	movw	r8, r22
     7ce:	5c 01       	movw	r10, r24
	temp_pitch_angle *= 2 * max_angle;
     7d0:	f8 01       	movw	r30, r16
     7d2:	c0 81       	ld	r28, Z
     7d4:	d0 e0       	ldi	r29, 0x00	; 0
     7d6:	be 01       	movw	r22, r28
     7d8:	66 0f       	add	r22, r22
     7da:	77 1f       	adc	r23, r23
     7dc:	07 2e       	mov	r0, r23
     7de:	00 0c       	add	r0, r0
     7e0:	88 0b       	sbc	r24, r24
     7e2:	99 0b       	sbc	r25, r25
     7e4:	0e 94 07 09 	call	0x120e	; 0x120e <__floatsisf>
     7e8:	6b 01       	movw	r12, r22
     7ea:	7c 01       	movw	r14, r24
     7ec:	9b 01       	movw	r18, r22
     7ee:	ac 01       	movw	r20, r24
     7f0:	c5 01       	movw	r24, r10
     7f2:	b4 01       	movw	r22, r8
     7f4:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     7f8:	4b 01       	movw	r8, r22
     7fa:	5c 01       	movw	r10, r24
	temp_pitch_angle -= max_angle;
     7fc:	be 01       	movw	r22, r28
     7fe:	dd 0f       	add	r29, r29
     800:	88 0b       	sbc	r24, r24
     802:	99 0b       	sbc	r25, r25
     804:	0e 94 07 09 	call	0x120e	; 0x120e <__floatsisf>
     808:	2b 01       	movw	r4, r22
     80a:	3c 01       	movw	r6, r24
	pitch_angle = (int) temp_pitch_angle;
     80c:	9b 01       	movw	r18, r22
     80e:	ac 01       	movw	r20, r24
     810:	c5 01       	movw	r24, r10
     812:	b4 01       	movw	r22, r8
     814:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__subsf3>
     818:	0e 94 cf 08 	call	0x119e	; 0x119e <__fixsfsi>
     81c:	f8 01       	movw	r30, r16
     81e:	75 83       	std	Z+5, r23	; 0x05
     820:	64 83       	std	Z+4, r22	; 0x04
	
	

	float temp_bank_angle = (requested_aileron_pos - 1120.f);	// computes the percentage of the max the pilot wants
     822:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <requested_aileron_pos>
     826:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <requested_aileron_pos+0x1>
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 05 09 	call	0x120a	; 0x120a <__floatunsisf>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	4c e8       	ldi	r20, 0x8C	; 140
     838:	54 e4       	ldi	r21, 0x44	; 68
     83a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__subsf3>
	temp_bank_angle /= 800;
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	48 e4       	ldi	r20, 0x48	; 72
     844:	54 e4       	ldi	r21, 0x44	; 68
     846:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__divsf3>
     84a:	9b 01       	movw	r18, r22
     84c:	ac 01       	movw	r20, r24
	temp_bank_angle *= 2 * max_angle;
     84e:	c7 01       	movw	r24, r14
     850:	b6 01       	movw	r22, r12
     852:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
	temp_bank_angle -= max_angle;
	bank_angle = (int) temp_bank_angle + 2;
     856:	a3 01       	movw	r20, r6
     858:	92 01       	movw	r18, r4
     85a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__subsf3>
     85e:	0e 94 cf 08 	call	0x119e	; 0x119e <__fixsfsi>
     862:	6e 5f       	subi	r22, 0xFE	; 254
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	f8 01       	movw	r30, r16
     868:	73 83       	std	Z+3, r23	; 0x03
     86a:	62 83       	std	Z+2, r22	; 0x02

     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	ff 90       	pop	r15
     876:	ef 90       	pop	r14
     878:	df 90       	pop	r13
     87a:	cf 90       	pop	r12
     87c:	bf 90       	pop	r11
     87e:	af 90       	pop	r10
     880:	9f 90       	pop	r9
     882:	8f 90       	pop	r8
     884:	7f 90       	pop	r7
     886:	6f 90       	pop	r6
     888:	5f 90       	pop	r5
     88a:	4f 90       	pop	r4
     88c:	08 95       	ret

0000088e <_ZN8pwm_chipC1E9I2C_328pbh>:
#include "pwm_chip.h"



pwm_chip::pwm_chip(I2C_328pb i2c, uint8_t prescaler){
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	1f 92       	push	r1
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	69 83       	std	Y+1, r22	; 0x01
     89c:	14 2f       	mov	r17, r20
	
	
	DDRB |= (1 << 2);	// set OE to 0;
     89e:	22 9a       	sbi	0x04, 2	; 4
	//This function sets the auto increment, the prescaler and any other necessary feature required for the pwm chip to run 

	//TWBR0 = (1 << 1); // I'll run the cpu at 1 MHz, this divides the value by 2 for 50 KHZ


	i2c.start();
     8a0:	ce 01       	movw	r24, r28
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     8a8:	6e e9       	ldi	r22, 0x9E	; 158
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x0); // mode register 1
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	ce 01       	movw	r24, r28
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x21); //clock on, autoincrement enable
     8c0:	61 e2       	ldi	r22, 0x21	; 33
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	ce 01       	movw	r24, r28
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0x9E);
     8d4:	6e e9       	ldi	r22, 0x9E	; 158
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	ce 01       	movw	r24, r28
     8da:	01 96       	adiw	r24, 0x01	; 1
     8dc:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0xFE);	//pre scale register
     8e0:	6e ef       	ldi	r22, 0xFE	; 254
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	ce 01       	movw	r24, r28
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN9I2C_328pb8send_regEi>
	i2c.send(prescaler);	//prescaler
     8ec:	61 2f       	mov	r22, r17
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	ce 01       	movw	r24, r28
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     8f8:	ce 01       	movw	r24, r28
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN9I2C_328pb4stopEv>

}
     900:	0f 90       	pop	r0
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	08 95       	ret

0000090a <_ZN7sensorsC1E9I2C_328pb>:
#include "sensors.h"



sensors::sensors(I2C_328pb i2c){
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	1f 92       	push	r1
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
     918:	8c 01       	movw	r16, r24
     91a:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
     91c:	ce 01       	movw	r24, r28
     91e:	01 96       	adiw	r24, 0x01	; 1
     920:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x32);	// acc slave + w
     924:	62 e3       	ldi	r22, 0x32	; 50
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	ce 01       	movw	r24, r28
     92a:	01 96       	adiw	r24, 0x01	; 1
     92c:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0xA0);	// Control register 1 + autoincrement
     930:	60 ea       	ldi	r22, 0xA0	; 160
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	ce 01       	movw	r24, r28
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x67);	// all axis enable data refresh rate is 200Hz
     93c:	67 e6       	ldi	r22, 0x67	; 103
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	ce 01       	movw	r24, r28
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN9I2C_328pb4sendEi>
	i2c.send(0x0);	// CR2 default values
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	ce 01       	movw	r24, r28
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN9I2C_328pb4sendEi>
	i2c.send(0x0);	// CR3 default values
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	ce 01       	movw	r24, r28
     95a:	01 96       	adiw	r24, 0x01	; 1
     95c:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN9I2C_328pb4sendEi>
	i2c.send(0x10);	// CR4  +- 4g and 8mg/digit, The value 32767 corresponds to 4 g's
     960:	60 e1       	ldi	r22, 0x10	; 16
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	ce 01       	movw	r24, r28
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     96c:	ce 01       	movw	r24, r28
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN9I2C_328pb4stopEv>
	

////////////////////////////// accelerometer init above and gyro init below

	i2c.start();
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0xD6); // gyro slave + w
     97c:	66 ed       	ldi	r22, 0xD6	; 214
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	ce 01       	movw	r24, r28
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x20);	// Control register 1
     988:	60 e2       	ldi	r22, 0x20	; 32
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	ce 01       	movw	r24, r28
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x0F);	// all axis enable data refresh rate is 100Hz (a lot of other params also affected)
     994:	6f e0       	ldi	r22, 0x0F	; 15
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     9a0:	ce 01       	movw	r24, r28
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN9I2C_328pb4stopEv>

			// default sensitivity is 8.75 mdps/digit
			
			
	pitch = 0.f;
     9a8:	f8 01       	movw	r30, r16
     9aa:	14 86       	std	Z+12, r1	; 0x0c
     9ac:	15 86       	std	Z+13, r1	; 0x0d
     9ae:	16 86       	std	Z+14, r1	; 0x0e
     9b0:	17 86       	std	Z+15, r1	; 0x0f
	roll = 0.f;
     9b2:	10 8a       	std	Z+16, r1	; 0x10
     9b4:	11 8a       	std	Z+17, r1	; 0x11
     9b6:	12 8a       	std	Z+18, r1	; 0x12
     9b8:	13 8a       	std	Z+19, r1	; 0x13
	yaw_rate = 0.f;
     9ba:	14 8a       	std	Z+20, r1	; 0x14
     9bc:	15 8a       	std	Z+21, r1	; 0x15
     9be:	16 8a       	std	Z+22, r1	; 0x16
     9c0:	17 8a       	std	Z+23, r1	; 0x17

	time_of_previous_scan = TCNT1;
     9c2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     9c6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     9ca:	91 8f       	std	Z+25, r25	; 0x19
     9cc:	80 8f       	std	Z+24, r24	; 0x18

}
     9ce:	0f 90       	pop	r0
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	08 95       	ret

000009da <_ZN7sensors8read_accE9I2C_328pb>:



void sensors::read_acc(I2C_328pb i2c){
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	1f 92       	push	r1
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
     9ec:	8c 01       	movw	r16, r24
     9ee:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
     9f0:	ce 01       	movw	r24, r28
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x32);	// acc slave + w
     9f8:	62 e3       	ldi	r22, 0x32	; 50
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	ce 01       	movw	r24, r28
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send(0xA8);	// X_low +auto increment
     a04:	68 ea       	ldi	r22, 0xA8	; 168
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	ce 01       	movw	r24, r28
     a0a:	01 96       	adiw	r24, 0x01	; 1
     a0c:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
     a10:	ce 01       	movw	r24, r28
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0x33);	// acc slave + r
     a18:	63 e3       	ldi	r22, 0x33	; 51
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	ce 01       	movw	r24, r28
     a1e:	01 96       	adiw	r24, 0x01	; 1
     a20:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN9I2C_328pb10send_slaveEi>

	i2c.get_next_byte();
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN9I2C_328pb13get_next_byteEv>
	acc_x_data = TWDR0;	// read low byte
     a2c:	0f 2e       	mov	r0, r31
     a2e:	fb eb       	ldi	r31, 0xBB	; 187
     a30:	ef 2e       	mov	r14, r31
     a32:	f1 2c       	mov	r15, r1
     a34:	f0 2d       	mov	r31, r0
     a36:	f7 01       	movw	r30, r14
     a38:	80 81       	ld	r24, Z
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	f8 01       	movw	r30, r16
     a3e:	91 83       	std	Z+1, r25	; 0x01
     a40:	80 83       	st	Z, r24
	i2c.get_next_byte();
     a42:	ce 01       	movw	r24, r28
     a44:	01 96       	adiw	r24, 0x01	; 1
     a46:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN9I2C_328pb13get_next_byteEv>
	acc_x_data |= (TWDR0 << 8);	// read high byte
     a4a:	f7 01       	movw	r30, r14
     a4c:	20 81       	ld	r18, Z
     a4e:	f8 01       	movw	r30, r16
     a50:	80 81       	ld	r24, Z
     a52:	91 81       	ldd	r25, Z+1	; 0x01
     a54:	92 2b       	or	r25, r18
     a56:	91 83       	std	Z+1, r25	; 0x01
     a58:	80 83       	st	Z, r24
	i2c.get_next_byte();
     a5a:	ce 01       	movw	r24, r28
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN9I2C_328pb13get_next_byteEv>


	acc_y_data = TWDR0;	// read low byte
     a62:	f7 01       	movw	r30, r14
     a64:	80 81       	ld	r24, Z
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	f8 01       	movw	r30, r16
     a6a:	93 83       	std	Z+3, r25	; 0x03
     a6c:	82 83       	std	Z+2, r24	; 0x02
	i2c.get_next_byte();
     a6e:	ce 01       	movw	r24, r28
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN9I2C_328pb13get_next_byteEv>
	acc_y_data |= (TWDR0 << 8);	// read high byte
     a76:	f7 01       	movw	r30, r14
     a78:	20 81       	ld	r18, Z
     a7a:	f8 01       	movw	r30, r16
     a7c:	82 81       	ldd	r24, Z+2	; 0x02
     a7e:	93 81       	ldd	r25, Z+3	; 0x03
     a80:	92 2b       	or	r25, r18
     a82:	93 83       	std	Z+3, r25	; 0x03
     a84:	82 83       	std	Z+2, r24	; 0x02
	i2c.get_next_byte();
     a86:	ce 01       	movw	r24, r28
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN9I2C_328pb13get_next_byteEv>


	acc_z_data = TWDR0;	// read low byte
     a8e:	f7 01       	movw	r30, r14
     a90:	80 81       	ld	r24, Z
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	f8 01       	movw	r30, r16
     a96:	95 83       	std	Z+5, r25	; 0x05
     a98:	84 83       	std	Z+4, r24	; 0x04
	i2c.get_next_byte();
     a9a:	ce 01       	movw	r24, r28
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN9I2C_328pb13get_next_byteEv>
	acc_z_data |= (TWDR0 << 8);	// read high byte
     aa2:	f7 01       	movw	r30, r14
     aa4:	20 81       	ld	r18, Z
     aa6:	f8 01       	movw	r30, r16
     aa8:	84 81       	ldd	r24, Z+4	; 0x04
     aaa:	95 81       	ldd	r25, Z+5	; 0x05
     aac:	92 2b       	or	r25, r18
     aae:	95 83       	std	Z+5, r25	; 0x05
     ab0:	84 83       	std	Z+4, r24	; 0x04


	i2c.end_data_read();
     ab2:	ce 01       	movw	r24, r28
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN9I2C_328pb13end_data_readEv>
	i2c.stop();
     aba:	ce 01       	movw	r24, r28
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN9I2C_328pb4stopEv>
}
     ac2:	0f 90       	pop	r0
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <_ZN7sensors9read_gyroE9I2C_328pb>:

void sensors::read_gyro(I2C_328pb i2c){
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	1f 92       	push	r1
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
     ae4:	8c 01       	movw	r16, r24
     ae6:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0xD6);	// gyro slave + w
     af0:	66 ed       	ldi	r22, 0xD6	; 214
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	ce 01       	movw	r24, r28
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send(0xA8);	// X_low +auto increment
     afc:	68 ea       	ldi	r22, 0xA8	; 168
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	ce 01       	movw	r24, r28
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
     b08:	ce 01       	movw	r24, r28
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0xD7);	// gyro slave + r
     b10:	67 ed       	ldi	r22, 0xD7	; 215
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	ce 01       	movw	r24, r28
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN9I2C_328pb10send_slaveEi>

	i2c.get_next_byte();
     b1c:	ce 01       	movw	r24, r28
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_x_data = TWDR0;	// read low byte
     b24:	0f 2e       	mov	r0, r31
     b26:	fb eb       	ldi	r31, 0xBB	; 187
     b28:	ef 2e       	mov	r14, r31
     b2a:	f1 2c       	mov	r15, r1
     b2c:	f0 2d       	mov	r31, r0
     b2e:	f7 01       	movw	r30, r14
     b30:	80 81       	ld	r24, Z
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	f8 01       	movw	r30, r16
     b36:	97 83       	std	Z+7, r25	; 0x07
     b38:	86 83       	std	Z+6, r24	; 0x06
	i2c.get_next_byte();
     b3a:	ce 01       	movw	r24, r28
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_x_data |= (TWDR0 << 8);	// read high byte
     b42:	f7 01       	movw	r30, r14
     b44:	20 81       	ld	r18, Z
     b46:	f8 01       	movw	r30, r16
     b48:	86 81       	ldd	r24, Z+6	; 0x06
     b4a:	97 81       	ldd	r25, Z+7	; 0x07
     b4c:	92 2b       	or	r25, r18
     b4e:	97 83       	std	Z+7, r25	; 0x07
     b50:	86 83       	std	Z+6, r24	; 0x06
	i2c.get_next_byte();
     b52:	ce 01       	movw	r24, r28
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN9I2C_328pb13get_next_byteEv>


	gyro_y_data = TWDR0;	// read low byte
     b5a:	f7 01       	movw	r30, r14
     b5c:	80 81       	ld	r24, Z
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	f8 01       	movw	r30, r16
     b62:	91 87       	std	Z+9, r25	; 0x09
     b64:	80 87       	std	Z+8, r24	; 0x08
	i2c.get_next_byte();
     b66:	ce 01       	movw	r24, r28
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_y_data |= (TWDR0 << 8);	// read high byte
     b6e:	f7 01       	movw	r30, r14
     b70:	20 81       	ld	r18, Z
     b72:	f8 01       	movw	r30, r16
     b74:	80 85       	ldd	r24, Z+8	; 0x08
     b76:	91 85       	ldd	r25, Z+9	; 0x09
     b78:	92 2b       	or	r25, r18
     b7a:	91 87       	std	Z+9, r25	; 0x09
     b7c:	80 87       	std	Z+8, r24	; 0x08
	i2c.get_next_byte();
     b7e:	ce 01       	movw	r24, r28
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN9I2C_328pb13get_next_byteEv>

  
	gyro_z_data = TWDR0;	// read low byte
     b86:	f7 01       	movw	r30, r14
     b88:	80 81       	ld	r24, Z
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	f8 01       	movw	r30, r16
     b8e:	93 87       	std	Z+11, r25	; 0x0b
     b90:	82 87       	std	Z+10, r24	; 0x0a
	i2c.get_next_byte();
     b92:	ce 01       	movw	r24, r28
     b94:	01 96       	adiw	r24, 0x01	; 1
     b96:	0e 94 ca 02 	call	0x594	; 0x594 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_z_data |= (TWDR0 << 8);	// read high byte
     b9a:	f7 01       	movw	r30, r14
     b9c:	20 81       	ld	r18, Z
     b9e:	f8 01       	movw	r30, r16
     ba0:	82 85       	ldd	r24, Z+10	; 0x0a
     ba2:	93 85       	ldd	r25, Z+11	; 0x0b
     ba4:	92 2b       	or	r25, r18
     ba6:	93 87       	std	Z+11, r25	; 0x0b
     ba8:	82 87       	std	Z+10, r24	; 0x0a

	i2c.end_data_read();
     baa:	ce 01       	movw	r24, r28
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN9I2C_328pb13end_data_readEv>
	i2c.stop();
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN9I2C_328pb4stopEv>
}
     bba:	0f 90       	pop	r0
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	08 95       	ret

00000bca <_ZN7sensors8get_timeEv>:


}


float sensors:: get_time(){
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <_ZN7sensors8get_timeEv+0xe>
     bd8:	00 d0       	rcall	.+0      	; 0xbda <_ZN7sensors8get_timeEv+0x10>
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	8c 01       	movw	r16, r24

	uint16_t time = TCNT1;
     be0:	e4 e8       	ldi	r30, 0x84	; 132
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	e0 80       	ld	r14, Z
     be6:	f1 80       	ldd	r15, Z+1	; 0x01
	
	volatile float result;
	

	if (TCNT1 < time_of_previous_scan){
     be8:	20 81       	ld	r18, Z
     bea:	31 81       	ldd	r19, Z+1	; 0x01
     bec:	fc 01       	movw	r30, r24
     bee:	80 8d       	ldd	r24, Z+24	; 0x18
     bf0:	91 8d       	ldd	r25, Z+25	; 0x19
     bf2:	28 17       	cp	r18, r24
     bf4:	39 07       	cpc	r19, r25
     bf6:	70 f4       	brcc	.+28     	; 0xc14 <_ZN7sensors8get_timeEv+0x4a>

		result = 0xffff - time_of_previous_scan + time ;
     bf8:	b7 01       	movw	r22, r14
     bfa:	61 50       	subi	r22, 0x01	; 1
     bfc:	71 09       	sbc	r23, r1
     bfe:	68 1b       	sub	r22, r24
     c00:	79 0b       	sbc	r23, r25
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 05 09 	call	0x120a	; 0x120a <__floatunsisf>
     c0a:	69 83       	std	Y+1, r22	; 0x01
     c0c:	7a 83       	std	Y+2, r23	; 0x02
     c0e:	8b 83       	std	Y+3, r24	; 0x03
     c10:	9c 83       	std	Y+4, r25	; 0x04
     c12:	0b c0       	rjmp	.+22     	; 0xc2a <_ZN7sensors8get_timeEv+0x60>

	}

	else{

		result = time - time_of_previous_scan;
     c14:	b7 01       	movw	r22, r14
     c16:	68 1b       	sub	r22, r24
     c18:	79 0b       	sbc	r23, r25
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 05 09 	call	0x120a	; 0x120a <__floatunsisf>
     c22:	69 83       	std	Y+1, r22	; 0x01
     c24:	7a 83       	std	Y+2, r23	; 0x02
     c26:	8b 83       	std	Y+3, r24	; 0x03
     c28:	9c 83       	std	Y+4, r25	; 0x04
	}


	result /= (float)TIMER_BIT_RATE;
     c2a:	69 81       	ldd	r22, Y+1	; 0x01
     c2c:	7a 81       	ldd	r23, Y+2	; 0x02
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	9c 81       	ldd	r25, Y+4	; 0x04
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	34 e2       	ldi	r19, 0x24	; 36
     c36:	44 e7       	ldi	r20, 0x74	; 116
     c38:	59 e4       	ldi	r21, 0x49	; 73
     c3a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__divsf3>
     c3e:	69 83       	std	Y+1, r22	; 0x01
     c40:	7a 83       	std	Y+2, r23	; 0x02
     c42:	8b 83       	std	Y+3, r24	; 0x03
     c44:	9c 83       	std	Y+4, r25	; 0x04

	time_of_previous_scan = time;
     c46:	f8 01       	movw	r30, r16
     c48:	f1 8e       	std	Z+25, r15	; 0x19
     c4a:	e0 8e       	std	Z+24, r14	; 0x18

	return result;
     c4c:	69 81       	ldd	r22, Y+1	; 0x01
     c4e:	7a 81       	ldd	r23, Y+2	; 0x02
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04


}
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	ff 90       	pop	r15
     c66:	ef 90       	pop	r14
     c68:	08 95       	ret

00000c6a <_ZN7sensors16compute_positionEv>:
}




void sensors::compute_position(){
     c6a:	4f 92       	push	r4
     c6c:	5f 92       	push	r5
     c6e:	6f 92       	push	r6
     c70:	7f 92       	push	r7
     c72:	8f 92       	push	r8
     c74:	9f 92       	push	r9
     c76:	af 92       	push	r10
     c78:	bf 92       	push	r11
     c7a:	cf 92       	push	r12
     c7c:	df 92       	push	r13
     c7e:	ef 92       	push	r14
     c80:	ff 92       	push	r15
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	64 97       	sbiw	r28, 0x14	; 20
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	cd bf       	out	0x3d, r28	; 61
     c9a:	8c 01       	movw	r16, r24

	volatile float R;	// what the accelerometer thinks the total acceleration is
	volatile float trust_factor; // to what degree do I trust the accelerometer's readings
	const float time_between_measurements = get_time();
     c9c:	0e 94 e5 05 	call	0xbca	; 0xbca <_ZN7sensors8get_timeEv>
     ca0:	6b 01       	movw	r12, r22
     ca2:	7c 01       	movw	r14, r24
 
	
	pitch += (gyro_y_data * GYRO_SENSITIVITY * time_between_measurements);
     ca4:	f8 01       	movw	r30, r16
     ca6:	60 85       	ldd	r22, Z+8	; 0x08
     ca8:	71 85       	ldd	r23, Z+9	; 0x09
     caa:	07 2e       	mov	r0, r23
     cac:	00 0c       	add	r0, r0
     cae:	88 0b       	sbc	r24, r24
     cb0:	99 0b       	sbc	r25, r25
     cb2:	0e 94 07 09 	call	0x120e	; 0x120e <__floatsisf>
     cb6:	29 e2       	ldi	r18, 0x29	; 41
     cb8:	3c e5       	ldi	r19, 0x5C	; 92
     cba:	4f e0       	ldi	r20, 0x0F	; 15
     cbc:	5c e3       	ldi	r21, 0x3C	; 60
     cbe:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     cc2:	a7 01       	movw	r20, r14
     cc4:	96 01       	movw	r18, r12
     cc6:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     cca:	f8 01       	movw	r30, r16
     ccc:	24 85       	ldd	r18, Z+12	; 0x0c
     cce:	35 85       	ldd	r19, Z+13	; 0x0d
     cd0:	46 85       	ldd	r20, Z+14	; 0x0e
     cd2:	57 85       	ldd	r21, Z+15	; 0x0f
     cd4:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__addsf3>
     cd8:	4b 01       	movw	r8, r22
     cda:	5c 01       	movw	r10, r24
     cdc:	f8 01       	movw	r30, r16
     cde:	64 87       	std	Z+12, r22	; 0x0c
     ce0:	75 87       	std	Z+13, r23	; 0x0d
     ce2:	86 87       	std	Z+14, r24	; 0x0e
     ce4:	97 87       	std	Z+15, r25	; 0x0f
	roll += (gyro_x_data * GYRO_SENSITIVITY * time_between_measurements);
     ce6:	66 81       	ldd	r22, Z+6	; 0x06
     ce8:	77 81       	ldd	r23, Z+7	; 0x07
     cea:	07 2e       	mov	r0, r23
     cec:	00 0c       	add	r0, r0
     cee:	88 0b       	sbc	r24, r24
     cf0:	99 0b       	sbc	r25, r25
     cf2:	0e 94 07 09 	call	0x120e	; 0x120e <__floatsisf>
     cf6:	29 e2       	ldi	r18, 0x29	; 41
     cf8:	3c e5       	ldi	r19, 0x5C	; 92
     cfa:	4f e0       	ldi	r20, 0x0F	; 15
     cfc:	5c e3       	ldi	r21, 0x3C	; 60
     cfe:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     d02:	a7 01       	movw	r20, r14
     d04:	96 01       	movw	r18, r12
     d06:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     d0a:	f8 01       	movw	r30, r16
     d0c:	20 89       	ldd	r18, Z+16	; 0x10
     d0e:	31 89       	ldd	r19, Z+17	; 0x11
     d10:	42 89       	ldd	r20, Z+18	; 0x12
     d12:	53 89       	ldd	r21, Z+19	; 0x13
     d14:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__addsf3>
     d18:	2b 01       	movw	r4, r22
     d1a:	3c 01       	movw	r6, r24
     d1c:	f8 01       	movw	r30, r16
     d1e:	60 8b       	std	Z+16, r22	; 0x10
     d20:	71 8b       	std	Z+17, r23	; 0x11
     d22:	82 8b       	std	Z+18, r24	; 0x12
     d24:	93 8b       	std	Z+19, r25	; 0x13
	yaw_rate = (gyro_z_data * GYRO_SENSITIVITY );
     d26:	62 85       	ldd	r22, Z+10	; 0x0a
     d28:	73 85       	ldd	r23, Z+11	; 0x0b
     d2a:	07 2e       	mov	r0, r23
     d2c:	00 0c       	add	r0, r0
     d2e:	88 0b       	sbc	r24, r24
     d30:	99 0b       	sbc	r25, r25
     d32:	0e 94 07 09 	call	0x120e	; 0x120e <__floatsisf>
     d36:	29 e2       	ldi	r18, 0x29	; 41
     d38:	3c e5       	ldi	r19, 0x5C	; 92
     d3a:	4f e0       	ldi	r20, 0x0F	; 15
     d3c:	5c e3       	ldi	r21, 0x3C	; 60
     d3e:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     d42:	f8 01       	movw	r30, r16
     d44:	64 8b       	std	Z+20, r22	; 0x14
     d46:	75 8b       	std	Z+21, r23	; 0x15
     d48:	86 8b       	std	Z+22, r24	; 0x16
     d4a:	97 8b       	std	Z+23, r25	; 0x17



	R = sqrt( square( acc_x_data ) + square( acc_y_data ) + square( acc_z_data ) );
     d4c:	60 81       	ld	r22, Z
     d4e:	71 81       	ldd	r23, Z+1	; 0x01
     d50:	07 2e       	mov	r0, r23
     d52:	00 0c       	add	r0, r0
     d54:	88 0b       	sbc	r24, r24
     d56:	99 0b       	sbc	r25, r25
     d58:	0e 94 07 09 	call	0x120e	; 0x120e <__floatsisf>
     d5c:	6d 87       	std	Y+13, r22	; 0x0d
     d5e:	7e 87       	std	Y+14, r23	; 0x0e
     d60:	8f 87       	std	Y+15, r24	; 0x0f
     d62:	98 8b       	std	Y+16, r25	; 0x10
     d64:	0e 94 ca 0a 	call	0x1594	; 0x1594 <square>
     d68:	6b 01       	movw	r12, r22
     d6a:	7c 01       	movw	r14, r24
     d6c:	f8 01       	movw	r30, r16
     d6e:	62 81       	ldd	r22, Z+2	; 0x02
     d70:	73 81       	ldd	r23, Z+3	; 0x03
     d72:	07 2e       	mov	r0, r23
     d74:	00 0c       	add	r0, r0
     d76:	88 0b       	sbc	r24, r24
     d78:	99 0b       	sbc	r25, r25
     d7a:	0e 94 07 09 	call	0x120e	; 0x120e <__floatsisf>
     d7e:	69 8b       	std	Y+17, r22	; 0x11
     d80:	7a 8b       	std	Y+18, r23	; 0x12
     d82:	8b 8b       	std	Y+19, r24	; 0x13
     d84:	9c 8b       	std	Y+20, r25	; 0x14
     d86:	0e 94 ca 0a 	call	0x1594	; 0x1594 <square>
     d8a:	9b 01       	movw	r18, r22
     d8c:	ac 01       	movw	r20, r24
     d8e:	c7 01       	movw	r24, r14
     d90:	b6 01       	movw	r22, r12
     d92:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__addsf3>
     d96:	6b 01       	movw	r12, r22
     d98:	7c 01       	movw	r14, r24
     d9a:	f8 01       	movw	r30, r16
     d9c:	64 81       	ldd	r22, Z+4	; 0x04
     d9e:	75 81       	ldd	r23, Z+5	; 0x05
     da0:	07 2e       	mov	r0, r23
     da2:	00 0c       	add	r0, r0
     da4:	88 0b       	sbc	r24, r24
     da6:	99 0b       	sbc	r25, r25
     da8:	0e 94 07 09 	call	0x120e	; 0x120e <__floatsisf>
     dac:	0e 94 ca 0a 	call	0x1594	; 0x1594 <square>
     db0:	69 87       	std	Y+9, r22	; 0x09
     db2:	7a 87       	std	Y+10, r23	; 0x0a
     db4:	8b 87       	std	Y+11, r24	; 0x0b
     db6:	9c 87       	std	Y+12, r25	; 0x0c
     db8:	29 85       	ldd	r18, Y+9	; 0x09
     dba:	3a 85       	ldd	r19, Y+10	; 0x0a
     dbc:	4b 85       	ldd	r20, Y+11	; 0x0b
     dbe:	5c 85       	ldd	r21, Y+12	; 0x0c
     dc0:	c7 01       	movw	r24, r14
     dc2:	b6 01       	movw	r22, r12
     dc4:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__addsf3>
     dc8:	0e 94 8a 0a 	call	0x1514	; 0x1514 <sqrt>
     dcc:	69 83       	std	Y+1, r22	; 0x01
     dce:	7a 83       	std	Y+2, r23	; 0x02
     dd0:	8b 83       	std	Y+3, r24	; 0x03
     dd2:	9c 83       	std	Y+4, r25	; 0x04
	R *= ACC_SENSITIVITY;
     dd4:	69 81       	ldd	r22, Y+1	; 0x01
     dd6:	7a 81       	ldd	r23, Y+2	; 0x02
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	9c 81       	ldd	r25, Y+4	; 0x04
     ddc:	20 e9       	ldi	r18, 0x90	; 144
     dde:	39 ef       	ldi	r19, 0xF9	; 249
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	59 e3       	ldi	r21, 0x39	; 57
     de4:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     de8:	69 83       	std	Y+1, r22	; 0x01
     dea:	7a 83       	std	Y+2, r23	; 0x02
     dec:	8b 83       	std	Y+3, r24	; 0x03
     dee:	9c 83       	std	Y+4, r25	; 0x04
	

	if ( R > 1.5 || R < 0.5 ){
     df0:	69 81       	ldd	r22, Y+1	; 0x01
     df2:	7a 81       	ldd	r23, Y+2	; 0x02
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	9c 81       	ldd	r25, Y+4	; 0x04
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	40 ec       	ldi	r20, 0xC0	; 192
     dfe:	5f e3       	ldi	r21, 0x3F	; 63
     e00:	0e 94 12 0a 	call	0x1424	; 0x1424 <__gesf2>
     e04:	18 16       	cp	r1, r24
     e06:	0c f4       	brge	.+2      	; 0xe0a <_ZN7sensors16compute_positionEv+0x1a0>
     e08:	b4 c0       	rjmp	.+360    	; 0xf72 <_ZN7sensors16compute_positionEv+0x308>
     e0a:	69 81       	ldd	r22, Y+1	; 0x01
     e0c:	7a 81       	ldd	r23, Y+2	; 0x02
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	9c 81       	ldd	r25, Y+4	; 0x04
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	5f e3       	ldi	r21, 0x3F	; 63
     e1a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__cmpsf2>
     e1e:	88 23       	and	r24, r24
     e20:	0c f4       	brge	.+2      	; 0xe24 <_ZN7sensors16compute_positionEv+0x1ba>
     e22:	a7 c0       	rjmp	.+334    	; 0xf72 <_ZN7sensors16compute_positionEv+0x308>
		return;	// there is too much external factor for the accelerometer to be of any use

	}


	float acc_pitch_angle = asin(  acc_y_data / (R*8130) );	// accounts for +- sign 0 is the level value
     e24:	69 81       	ldd	r22, Y+1	; 0x01
     e26:	7a 81       	ldd	r23, Y+2	; 0x02
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e1       	ldi	r19, 0x10	; 16
     e30:	4e ef       	ldi	r20, 0xFE	; 254
     e32:	55 e4       	ldi	r21, 0x45	; 69
     e34:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     e38:	9b 01       	movw	r18, r22
     e3a:	ac 01       	movw	r20, r24
     e3c:	69 89       	ldd	r22, Y+17	; 0x11
     e3e:	7a 89       	ldd	r23, Y+18	; 0x12
     e40:	8b 89       	ldd	r24, Y+19	; 0x13
     e42:	9c 89       	ldd	r25, Y+20	; 0x14
     e44:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__divsf3>
     e48:	0e 94 3d 08 	call	0x107a	; 0x107a <asin>
     e4c:	69 87       	std	Y+9, r22	; 0x09
     e4e:	7a 87       	std	Y+10, r23	; 0x0a
     e50:	8b 87       	std	Y+11, r24	; 0x0b
     e52:	9c 87       	std	Y+12, r25	; 0x0c
	float acc_roll_angle = asin( acc_x_data / (R*8130) );	// accounts for +- sign 0 is the level value
     e54:	69 81       	ldd	r22, Y+1	; 0x01
     e56:	7a 81       	ldd	r23, Y+2	; 0x02
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	9c 81       	ldd	r25, Y+4	; 0x04
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e1       	ldi	r19, 0x10	; 16
     e60:	4e ef       	ldi	r20, 0xFE	; 254
     e62:	55 e4       	ldi	r21, 0x45	; 69
     e64:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     e68:	9b 01       	movw	r18, r22
     e6a:	ac 01       	movw	r20, r24
     e6c:	6d 85       	ldd	r22, Y+13	; 0x0d
     e6e:	7e 85       	ldd	r23, Y+14	; 0x0e
     e70:	8f 85       	ldd	r24, Y+15	; 0x0f
     e72:	98 89       	ldd	r25, Y+16	; 0x10
     e74:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__divsf3>
     e78:	0e 94 3d 08 	call	0x107a	; 0x107a <asin>
     e7c:	6d 87       	std	Y+13, r22	; 0x0d
     e7e:	7e 87       	std	Y+14, r23	; 0x0e
     e80:	8f 87       	std	Y+15, r24	; 0x0f
     e82:	98 8b       	std	Y+16, r25	; 0x10
	acc_pitch_angle *= 57.3;
	acc_roll_angle *= 57.3;	// conversion to degrees instead of radians.



	trust_factor = ( 1 - fabs(1 - R) ) / 10;
     e84:	29 81       	ldd	r18, Y+1	; 0x01
     e86:	3a 81       	ldd	r19, Y+2	; 0x02
     e88:	4b 81       	ldd	r20, Y+3	; 0x03
     e8a:	5c 81       	ldd	r21, Y+4	; 0x04
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	80 e8       	ldi	r24, 0x80	; 128
     e92:	9f e3       	ldi	r25, 0x3F	; 63
     e94:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__subsf3>
     e98:	9b 01       	movw	r18, r22
     e9a:	ac 01       	movw	r20, r24
     e9c:	5f 77       	andi	r21, 0x7F	; 127
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	80 e8       	ldi	r24, 0x80	; 128
     ea4:	9f e3       	ldi	r25, 0x3F	; 63
     ea6:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__subsf3>
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e2       	ldi	r20, 0x20	; 32
     eb0:	51 e4       	ldi	r21, 0x41	; 65
     eb2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__divsf3>
     eb6:	6d 83       	std	Y+5, r22	; 0x05
     eb8:	7e 83       	std	Y+6, r23	; 0x06
     eba:	8f 83       	std	Y+7, r24	; 0x07
     ebc:	98 87       	std	Y+8, r25	; 0x08


	pitch = (pitch * (1 - trust_factor) + (acc_pitch_angle * trust_factor) );
     ebe:	2d 81       	ldd	r18, Y+5	; 0x05
     ec0:	3e 81       	ldd	r19, Y+6	; 0x06
     ec2:	4f 81       	ldd	r20, Y+7	; 0x07
     ec4:	58 85       	ldd	r21, Y+8	; 0x08
     ec6:	cd 80       	ldd	r12, Y+5	; 0x05
     ec8:	de 80       	ldd	r13, Y+6	; 0x06
     eca:	ef 80       	ldd	r14, Y+7	; 0x07
     ecc:	f8 84       	ldd	r15, Y+8	; 0x08
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	80 e8       	ldi	r24, 0x80	; 128
     ed4:	9f e3       	ldi	r25, 0x3F	; 63
     ed6:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__subsf3>
     eda:	a5 01       	movw	r20, r10
     edc:	94 01       	movw	r18, r8
     ede:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     ee2:	4b 01       	movw	r8, r22
     ee4:	5c 01       	movw	r10, r24
     ee6:	23 e3       	ldi	r18, 0x33	; 51
     ee8:	33 e3       	ldi	r19, 0x33	; 51
     eea:	45 e6       	ldi	r20, 0x65	; 101
     eec:	52 e4       	ldi	r21, 0x42	; 66
     eee:	69 85       	ldd	r22, Y+9	; 0x09
     ef0:	7a 85       	ldd	r23, Y+10	; 0x0a
     ef2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ef4:	9c 85       	ldd	r25, Y+12	; 0x0c
     ef6:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     efa:	a7 01       	movw	r20, r14
     efc:	96 01       	movw	r18, r12
     efe:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     f02:	9b 01       	movw	r18, r22
     f04:	ac 01       	movw	r20, r24
     f06:	c5 01       	movw	r24, r10
     f08:	b4 01       	movw	r22, r8
     f0a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__addsf3>
     f0e:	f8 01       	movw	r30, r16
     f10:	64 87       	std	Z+12, r22	; 0x0c
     f12:	75 87       	std	Z+13, r23	; 0x0d
     f14:	86 87       	std	Z+14, r24	; 0x0e
     f16:	97 87       	std	Z+15, r25	; 0x0f
	roll = (roll * (1 - trust_factor) + (acc_roll_angle * trust_factor) );
     f18:	2d 81       	ldd	r18, Y+5	; 0x05
     f1a:	3e 81       	ldd	r19, Y+6	; 0x06
     f1c:	4f 81       	ldd	r20, Y+7	; 0x07
     f1e:	58 85       	ldd	r21, Y+8	; 0x08
     f20:	8d 80       	ldd	r8, Y+5	; 0x05
     f22:	9e 80       	ldd	r9, Y+6	; 0x06
     f24:	af 80       	ldd	r10, Y+7	; 0x07
     f26:	b8 84       	ldd	r11, Y+8	; 0x08
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	80 e8       	ldi	r24, 0x80	; 128
     f2e:	9f e3       	ldi	r25, 0x3F	; 63
     f30:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__subsf3>
     f34:	a3 01       	movw	r20, r6
     f36:	92 01       	movw	r18, r4
     f38:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     f3c:	2b 01       	movw	r4, r22
     f3e:	3c 01       	movw	r6, r24
     f40:	23 e3       	ldi	r18, 0x33	; 51
     f42:	33 e3       	ldi	r19, 0x33	; 51
     f44:	45 e6       	ldi	r20, 0x65	; 101
     f46:	52 e4       	ldi	r21, 0x42	; 66
     f48:	6d 85       	ldd	r22, Y+13	; 0x0d
     f4a:	7e 85       	ldd	r23, Y+14	; 0x0e
     f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f4e:	98 89       	ldd	r25, Y+16	; 0x10
     f50:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     f54:	a5 01       	movw	r20, r10
     f56:	94 01       	movw	r18, r8
     f58:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     f5c:	9b 01       	movw	r18, r22
     f5e:	ac 01       	movw	r20, r24
     f60:	c3 01       	movw	r24, r6
     f62:	b2 01       	movw	r22, r4
     f64:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__addsf3>
     f68:	f8 01       	movw	r30, r16
     f6a:	60 8b       	std	Z+16, r22	; 0x10
     f6c:	71 8b       	std	Z+17, r23	; 0x11
     f6e:	82 8b       	std	Z+18, r24	; 0x12
     f70:	93 8b       	std	Z+19, r25	; 0x13
	
	
	return;


}
     f72:	64 96       	adiw	r28, 0x14	; 20
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	df 90       	pop	r13
     f8c:	cf 90       	pop	r12
     f8e:	bf 90       	pop	r11
     f90:	af 90       	pop	r10
     f92:	9f 90       	pop	r9
     f94:	8f 90       	pop	r8
     f96:	7f 90       	pop	r7
     f98:	6f 90       	pop	r6
     f9a:	5f 90       	pop	r5
     f9c:	4f 90       	pop	r4
     f9e:	08 95       	ret

00000fa0 <__subsf3>:
     fa0:	50 58       	subi	r21, 0x80	; 128

00000fa2 <__addsf3>:
     fa2:	bb 27       	eor	r27, r27
     fa4:	aa 27       	eor	r26, r26
     fa6:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__addsf3x>
     faa:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_round>
     fae:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fp_pscA>
     fb2:	38 f0       	brcs	.+14     	; 0xfc2 <__addsf3+0x20>
     fb4:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__fp_pscB>
     fb8:	20 f0       	brcs	.+8      	; 0xfc2 <__addsf3+0x20>
     fba:	39 f4       	brne	.+14     	; 0xfca <__addsf3+0x28>
     fbc:	9f 3f       	cpi	r25, 0xFF	; 255
     fbe:	19 f4       	brne	.+6      	; 0xfc6 <__addsf3+0x24>
     fc0:	26 f4       	brtc	.+8      	; 0xfca <__addsf3+0x28>
     fc2:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__fp_nan>
     fc6:	0e f4       	brtc	.+2      	; 0xfca <__addsf3+0x28>
     fc8:	e0 95       	com	r30
     fca:	e7 fb       	bst	r30, 7
     fcc:	0c 94 86 09 	jmp	0x130c	; 0x130c <__fp_inf>

00000fd0 <__addsf3x>:
     fd0:	e9 2f       	mov	r30, r25
     fd2:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_split3>
     fd6:	58 f3       	brcs	.-42     	; 0xfae <__addsf3+0xc>
     fd8:	ba 17       	cp	r27, r26
     fda:	62 07       	cpc	r22, r18
     fdc:	73 07       	cpc	r23, r19
     fde:	84 07       	cpc	r24, r20
     fe0:	95 07       	cpc	r25, r21
     fe2:	20 f0       	brcs	.+8      	; 0xfec <__addsf3x+0x1c>
     fe4:	79 f4       	brne	.+30     	; 0x1004 <__addsf3x+0x34>
     fe6:	a6 f5       	brtc	.+104    	; 0x1050 <__addsf3x+0x80>
     fe8:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__fp_zero>
     fec:	0e f4       	brtc	.+2      	; 0xff0 <__addsf3x+0x20>
     fee:	e0 95       	com	r30
     ff0:	0b 2e       	mov	r0, r27
     ff2:	ba 2f       	mov	r27, r26
     ff4:	a0 2d       	mov	r26, r0
     ff6:	0b 01       	movw	r0, r22
     ff8:	b9 01       	movw	r22, r18
     ffa:	90 01       	movw	r18, r0
     ffc:	0c 01       	movw	r0, r24
     ffe:	ca 01       	movw	r24, r20
    1000:	a0 01       	movw	r20, r0
    1002:	11 24       	eor	r1, r1
    1004:	ff 27       	eor	r31, r31
    1006:	59 1b       	sub	r21, r25
    1008:	99 f0       	breq	.+38     	; 0x1030 <__addsf3x+0x60>
    100a:	59 3f       	cpi	r21, 0xF9	; 249
    100c:	50 f4       	brcc	.+20     	; 0x1022 <__addsf3x+0x52>
    100e:	50 3e       	cpi	r21, 0xE0	; 224
    1010:	68 f1       	brcs	.+90     	; 0x106c <__addsf3x+0x9c>
    1012:	1a 16       	cp	r1, r26
    1014:	f0 40       	sbci	r31, 0x00	; 0
    1016:	a2 2f       	mov	r26, r18
    1018:	23 2f       	mov	r18, r19
    101a:	34 2f       	mov	r19, r20
    101c:	44 27       	eor	r20, r20
    101e:	58 5f       	subi	r21, 0xF8	; 248
    1020:	f3 cf       	rjmp	.-26     	; 0x1008 <__addsf3x+0x38>
    1022:	46 95       	lsr	r20
    1024:	37 95       	ror	r19
    1026:	27 95       	ror	r18
    1028:	a7 95       	ror	r26
    102a:	f0 40       	sbci	r31, 0x00	; 0
    102c:	53 95       	inc	r21
    102e:	c9 f7       	brne	.-14     	; 0x1022 <__addsf3x+0x52>
    1030:	7e f4       	brtc	.+30     	; 0x1050 <__addsf3x+0x80>
    1032:	1f 16       	cp	r1, r31
    1034:	ba 0b       	sbc	r27, r26
    1036:	62 0b       	sbc	r22, r18
    1038:	73 0b       	sbc	r23, r19
    103a:	84 0b       	sbc	r24, r20
    103c:	ba f0       	brmi	.+46     	; 0x106c <__addsf3x+0x9c>
    103e:	91 50       	subi	r25, 0x01	; 1
    1040:	a1 f0       	breq	.+40     	; 0x106a <__addsf3x+0x9a>
    1042:	ff 0f       	add	r31, r31
    1044:	bb 1f       	adc	r27, r27
    1046:	66 1f       	adc	r22, r22
    1048:	77 1f       	adc	r23, r23
    104a:	88 1f       	adc	r24, r24
    104c:	c2 f7       	brpl	.-16     	; 0x103e <__addsf3x+0x6e>
    104e:	0e c0       	rjmp	.+28     	; 0x106c <__addsf3x+0x9c>
    1050:	ba 0f       	add	r27, r26
    1052:	62 1f       	adc	r22, r18
    1054:	73 1f       	adc	r23, r19
    1056:	84 1f       	adc	r24, r20
    1058:	48 f4       	brcc	.+18     	; 0x106c <__addsf3x+0x9c>
    105a:	87 95       	ror	r24
    105c:	77 95       	ror	r23
    105e:	67 95       	ror	r22
    1060:	b7 95       	ror	r27
    1062:	f7 95       	ror	r31
    1064:	9e 3f       	cpi	r25, 0xFE	; 254
    1066:	08 f0       	brcs	.+2      	; 0x106a <__addsf3x+0x9a>
    1068:	b0 cf       	rjmp	.-160    	; 0xfca <__addsf3+0x28>
    106a:	93 95       	inc	r25
    106c:	88 0f       	add	r24, r24
    106e:	08 f0       	brcs	.+2      	; 0x1072 <__addsf3x+0xa2>
    1070:	99 27       	eor	r25, r25
    1072:	ee 0f       	add	r30, r30
    1074:	97 95       	ror	r25
    1076:	87 95       	ror	r24
    1078:	08 95       	ret

0000107a <asin>:
    107a:	9f 93       	push	r25
    107c:	9f 77       	andi	r25, 0x7F	; 127
    107e:	ee e3       	ldi	r30, 0x3E	; 62
    1080:	89 37       	cpi	r24, 0x79	; 121
    1082:	9e 07       	cpc	r25, r30
    1084:	28 f4       	brcc	.+10     	; 0x1090 <asin+0x16>
    1086:	e4 eb       	ldi	r30, 0xB4	; 180
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	0e 94 b6 09 	call	0x136c	; 0x136c <__fp_powsodd>
    108e:	0c c0       	rjmp	.+24     	; 0x10a8 <asin+0x2e>
    1090:	0e 94 42 09 	call	0x1284	; 0x1284 <__fp_arccos>
    1094:	90 58       	subi	r25, 0x80	; 128
    1096:	a2 ea       	ldi	r26, 0xA2	; 162
    1098:	2a ed       	ldi	r18, 0xDA	; 218
    109a:	3f e0       	ldi	r19, 0x0F	; 15
    109c:	49 ec       	ldi	r20, 0xC9	; 201
    109e:	5f e3       	ldi	r21, 0x3F	; 63
    10a0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__addsf3x>
    10a4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__fp_round>
    10a8:	0f 90       	pop	r0
    10aa:	07 fc       	sbrc	r0, 7
    10ac:	90 58       	subi	r25, 0x80	; 128
    10ae:	08 95       	ret

000010b0 <__cmpsf2>:
    10b0:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__fp_cmp>
    10b4:	08 f4       	brcc	.+2      	; 0x10b8 <__cmpsf2+0x8>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	08 95       	ret

000010ba <__divsf3>:
    10ba:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__divsf3x>
    10be:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_round>
    10c2:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__fp_pscB>
    10c6:	58 f0       	brcs	.+22     	; 0x10de <__divsf3+0x24>
    10c8:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fp_pscA>
    10cc:	40 f0       	brcs	.+16     	; 0x10de <__divsf3+0x24>
    10ce:	29 f4       	brne	.+10     	; 0x10da <__divsf3+0x20>
    10d0:	5f 3f       	cpi	r21, 0xFF	; 255
    10d2:	29 f0       	breq	.+10     	; 0x10de <__divsf3+0x24>
    10d4:	0c 94 86 09 	jmp	0x130c	; 0x130c <__fp_inf>
    10d8:	51 11       	cpse	r21, r1
    10da:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_szero>
    10de:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__fp_nan>

000010e2 <__divsf3x>:
    10e2:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_split3>
    10e6:	68 f3       	brcs	.-38     	; 0x10c2 <__divsf3+0x8>

000010e8 <__divsf3_pse>:
    10e8:	99 23       	and	r25, r25
    10ea:	b1 f3       	breq	.-20     	; 0x10d8 <__divsf3+0x1e>
    10ec:	55 23       	and	r21, r21
    10ee:	91 f3       	breq	.-28     	; 0x10d4 <__divsf3+0x1a>
    10f0:	95 1b       	sub	r25, r21
    10f2:	55 0b       	sbc	r21, r21
    10f4:	bb 27       	eor	r27, r27
    10f6:	aa 27       	eor	r26, r26
    10f8:	62 17       	cp	r22, r18
    10fa:	73 07       	cpc	r23, r19
    10fc:	84 07       	cpc	r24, r20
    10fe:	38 f0       	brcs	.+14     	; 0x110e <__divsf3_pse+0x26>
    1100:	9f 5f       	subi	r25, 0xFF	; 255
    1102:	5f 4f       	sbci	r21, 0xFF	; 255
    1104:	22 0f       	add	r18, r18
    1106:	33 1f       	adc	r19, r19
    1108:	44 1f       	adc	r20, r20
    110a:	aa 1f       	adc	r26, r26
    110c:	a9 f3       	breq	.-22     	; 0x10f8 <__divsf3_pse+0x10>
    110e:	35 d0       	rcall	.+106    	; 0x117a <__divsf3_pse+0x92>
    1110:	0e 2e       	mov	r0, r30
    1112:	3a f0       	brmi	.+14     	; 0x1122 <__divsf3_pse+0x3a>
    1114:	e0 e8       	ldi	r30, 0x80	; 128
    1116:	32 d0       	rcall	.+100    	; 0x117c <__divsf3_pse+0x94>
    1118:	91 50       	subi	r25, 0x01	; 1
    111a:	50 40       	sbci	r21, 0x00	; 0
    111c:	e6 95       	lsr	r30
    111e:	00 1c       	adc	r0, r0
    1120:	ca f7       	brpl	.-14     	; 0x1114 <__divsf3_pse+0x2c>
    1122:	2b d0       	rcall	.+86     	; 0x117a <__divsf3_pse+0x92>
    1124:	fe 2f       	mov	r31, r30
    1126:	29 d0       	rcall	.+82     	; 0x117a <__divsf3_pse+0x92>
    1128:	66 0f       	add	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	bb 1f       	adc	r27, r27
    1130:	26 17       	cp	r18, r22
    1132:	37 07       	cpc	r19, r23
    1134:	48 07       	cpc	r20, r24
    1136:	ab 07       	cpc	r26, r27
    1138:	b0 e8       	ldi	r27, 0x80	; 128
    113a:	09 f0       	breq	.+2      	; 0x113e <__divsf3_pse+0x56>
    113c:	bb 0b       	sbc	r27, r27
    113e:	80 2d       	mov	r24, r0
    1140:	bf 01       	movw	r22, r30
    1142:	ff 27       	eor	r31, r31
    1144:	93 58       	subi	r25, 0x83	; 131
    1146:	5f 4f       	sbci	r21, 0xFF	; 255
    1148:	3a f0       	brmi	.+14     	; 0x1158 <__divsf3_pse+0x70>
    114a:	9e 3f       	cpi	r25, 0xFE	; 254
    114c:	51 05       	cpc	r21, r1
    114e:	78 f0       	brcs	.+30     	; 0x116e <__divsf3_pse+0x86>
    1150:	0c 94 86 09 	jmp	0x130c	; 0x130c <__fp_inf>
    1154:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_szero>
    1158:	5f 3f       	cpi	r21, 0xFF	; 255
    115a:	e4 f3       	brlt	.-8      	; 0x1154 <__divsf3_pse+0x6c>
    115c:	98 3e       	cpi	r25, 0xE8	; 232
    115e:	d4 f3       	brlt	.-12     	; 0x1154 <__divsf3_pse+0x6c>
    1160:	86 95       	lsr	r24
    1162:	77 95       	ror	r23
    1164:	67 95       	ror	r22
    1166:	b7 95       	ror	r27
    1168:	f7 95       	ror	r31
    116a:	9f 5f       	subi	r25, 0xFF	; 255
    116c:	c9 f7       	brne	.-14     	; 0x1160 <__divsf3_pse+0x78>
    116e:	88 0f       	add	r24, r24
    1170:	91 1d       	adc	r25, r1
    1172:	96 95       	lsr	r25
    1174:	87 95       	ror	r24
    1176:	97 f9       	bld	r25, 7
    1178:	08 95       	ret
    117a:	e1 e0       	ldi	r30, 0x01	; 1
    117c:	66 0f       	add	r22, r22
    117e:	77 1f       	adc	r23, r23
    1180:	88 1f       	adc	r24, r24
    1182:	bb 1f       	adc	r27, r27
    1184:	62 17       	cp	r22, r18
    1186:	73 07       	cpc	r23, r19
    1188:	84 07       	cpc	r24, r20
    118a:	ba 07       	cpc	r27, r26
    118c:	20 f0       	brcs	.+8      	; 0x1196 <__divsf3_pse+0xae>
    118e:	62 1b       	sub	r22, r18
    1190:	73 0b       	sbc	r23, r19
    1192:	84 0b       	sbc	r24, r20
    1194:	ba 0b       	sbc	r27, r26
    1196:	ee 1f       	adc	r30, r30
    1198:	88 f7       	brcc	.-30     	; 0x117c <__divsf3_pse+0x94>
    119a:	e0 95       	com	r30
    119c:	08 95       	ret

0000119e <__fixsfsi>:
    119e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
    11a2:	68 94       	set
    11a4:	b1 11       	cpse	r27, r1
    11a6:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_szero>
    11aa:	08 95       	ret

000011ac <__fixunssfsi>:
    11ac:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_splitA>
    11b0:	88 f0       	brcs	.+34     	; 0x11d4 <__fixunssfsi+0x28>
    11b2:	9f 57       	subi	r25, 0x7F	; 127
    11b4:	98 f0       	brcs	.+38     	; 0x11dc <__fixunssfsi+0x30>
    11b6:	b9 2f       	mov	r27, r25
    11b8:	99 27       	eor	r25, r25
    11ba:	b7 51       	subi	r27, 0x17	; 23
    11bc:	b0 f0       	brcs	.+44     	; 0x11ea <__fixunssfsi+0x3e>
    11be:	e1 f0       	breq	.+56     	; 0x11f8 <__fixunssfsi+0x4c>
    11c0:	66 0f       	add	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	88 1f       	adc	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	1a f0       	brmi	.+6      	; 0x11d0 <__fixunssfsi+0x24>
    11ca:	ba 95       	dec	r27
    11cc:	c9 f7       	brne	.-14     	; 0x11c0 <__fixunssfsi+0x14>
    11ce:	14 c0       	rjmp	.+40     	; 0x11f8 <__fixunssfsi+0x4c>
    11d0:	b1 30       	cpi	r27, 0x01	; 1
    11d2:	91 f0       	breq	.+36     	; 0x11f8 <__fixunssfsi+0x4c>
    11d4:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__fp_zero>
    11d8:	b1 e0       	ldi	r27, 0x01	; 1
    11da:	08 95       	ret
    11dc:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__fp_zero>
    11e0:	67 2f       	mov	r22, r23
    11e2:	78 2f       	mov	r23, r24
    11e4:	88 27       	eor	r24, r24
    11e6:	b8 5f       	subi	r27, 0xF8	; 248
    11e8:	39 f0       	breq	.+14     	; 0x11f8 <__fixunssfsi+0x4c>
    11ea:	b9 3f       	cpi	r27, 0xF9	; 249
    11ec:	cc f3       	brlt	.-14     	; 0x11e0 <__fixunssfsi+0x34>
    11ee:	86 95       	lsr	r24
    11f0:	77 95       	ror	r23
    11f2:	67 95       	ror	r22
    11f4:	b3 95       	inc	r27
    11f6:	d9 f7       	brne	.-10     	; 0x11ee <__fixunssfsi+0x42>
    11f8:	3e f4       	brtc	.+14     	; 0x1208 <__fixunssfsi+0x5c>
    11fa:	90 95       	com	r25
    11fc:	80 95       	com	r24
    11fe:	70 95       	com	r23
    1200:	61 95       	neg	r22
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	8f 4f       	sbci	r24, 0xFF	; 255
    1206:	9f 4f       	sbci	r25, 0xFF	; 255
    1208:	08 95       	ret

0000120a <__floatunsisf>:
    120a:	e8 94       	clt
    120c:	09 c0       	rjmp	.+18     	; 0x1220 <__floatsisf+0x12>

0000120e <__floatsisf>:
    120e:	97 fb       	bst	r25, 7
    1210:	3e f4       	brtc	.+14     	; 0x1220 <__floatsisf+0x12>
    1212:	90 95       	com	r25
    1214:	80 95       	com	r24
    1216:	70 95       	com	r23
    1218:	61 95       	neg	r22
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	8f 4f       	sbci	r24, 0xFF	; 255
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	99 23       	and	r25, r25
    1222:	a9 f0       	breq	.+42     	; 0x124e <__floatsisf+0x40>
    1224:	f9 2f       	mov	r31, r25
    1226:	96 e9       	ldi	r25, 0x96	; 150
    1228:	bb 27       	eor	r27, r27
    122a:	93 95       	inc	r25
    122c:	f6 95       	lsr	r31
    122e:	87 95       	ror	r24
    1230:	77 95       	ror	r23
    1232:	67 95       	ror	r22
    1234:	b7 95       	ror	r27
    1236:	f1 11       	cpse	r31, r1
    1238:	f8 cf       	rjmp	.-16     	; 0x122a <__floatsisf+0x1c>
    123a:	fa f4       	brpl	.+62     	; 0x127a <__floatsisf+0x6c>
    123c:	bb 0f       	add	r27, r27
    123e:	11 f4       	brne	.+4      	; 0x1244 <__floatsisf+0x36>
    1240:	60 ff       	sbrs	r22, 0
    1242:	1b c0       	rjmp	.+54     	; 0x127a <__floatsisf+0x6c>
    1244:	6f 5f       	subi	r22, 0xFF	; 255
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	8f 4f       	sbci	r24, 0xFF	; 255
    124a:	9f 4f       	sbci	r25, 0xFF	; 255
    124c:	16 c0       	rjmp	.+44     	; 0x127a <__floatsisf+0x6c>
    124e:	88 23       	and	r24, r24
    1250:	11 f0       	breq	.+4      	; 0x1256 <__floatsisf+0x48>
    1252:	96 e9       	ldi	r25, 0x96	; 150
    1254:	11 c0       	rjmp	.+34     	; 0x1278 <__floatsisf+0x6a>
    1256:	77 23       	and	r23, r23
    1258:	21 f0       	breq	.+8      	; 0x1262 <__floatsisf+0x54>
    125a:	9e e8       	ldi	r25, 0x8E	; 142
    125c:	87 2f       	mov	r24, r23
    125e:	76 2f       	mov	r23, r22
    1260:	05 c0       	rjmp	.+10     	; 0x126c <__floatsisf+0x5e>
    1262:	66 23       	and	r22, r22
    1264:	71 f0       	breq	.+28     	; 0x1282 <__floatsisf+0x74>
    1266:	96 e8       	ldi	r25, 0x86	; 134
    1268:	86 2f       	mov	r24, r22
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	2a f0       	brmi	.+10     	; 0x127a <__floatsisf+0x6c>
    1270:	9a 95       	dec	r25
    1272:	66 0f       	add	r22, r22
    1274:	77 1f       	adc	r23, r23
    1276:	88 1f       	adc	r24, r24
    1278:	da f7       	brpl	.-10     	; 0x1270 <__floatsisf+0x62>
    127a:	88 0f       	add	r24, r24
    127c:	96 95       	lsr	r25
    127e:	87 95       	ror	r24
    1280:	97 f9       	bld	r25, 7
    1282:	08 95       	ret

00001284 <__fp_arccos>:
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	1f 93       	push	r17
    128a:	0f 93       	push	r16
    128c:	8b 01       	movw	r16, r22
    128e:	ec 01       	movw	r28, r24
    1290:	e8 ec       	ldi	r30, 0xC8	; 200
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	0e 94 8f 09 	call	0x131e	; 0x131e <__fp_powser>
    1298:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__fp_round>
    129c:	98 01       	movw	r18, r16
    129e:	ae 01       	movw	r20, r28
    12a0:	8b 01       	movw	r16, r22
    12a2:	ec 01       	movw	r28, r24
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	80 e8       	ldi	r24, 0x80	; 128
    12aa:	9f e3       	ldi	r25, 0x3F	; 63
    12ac:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__subsf3>
    12b0:	0e 94 8a 0a 	call	0x1514	; 0x1514 <sqrt>
    12b4:	98 01       	movw	r18, r16
    12b6:	ae 01       	movw	r20, r28
    12b8:	0f 91       	pop	r16
    12ba:	1f 91       	pop	r17
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <__mulsf3x>

000012c4 <__fp_cmp>:
    12c4:	99 0f       	add	r25, r25
    12c6:	00 08       	sbc	r0, r0
    12c8:	55 0f       	add	r21, r21
    12ca:	aa 0b       	sbc	r26, r26
    12cc:	e0 e8       	ldi	r30, 0x80	; 128
    12ce:	fe ef       	ldi	r31, 0xFE	; 254
    12d0:	16 16       	cp	r1, r22
    12d2:	17 06       	cpc	r1, r23
    12d4:	e8 07       	cpc	r30, r24
    12d6:	f9 07       	cpc	r31, r25
    12d8:	c0 f0       	brcs	.+48     	; 0x130a <__fp_cmp+0x46>
    12da:	12 16       	cp	r1, r18
    12dc:	13 06       	cpc	r1, r19
    12de:	e4 07       	cpc	r30, r20
    12e0:	f5 07       	cpc	r31, r21
    12e2:	98 f0       	brcs	.+38     	; 0x130a <__fp_cmp+0x46>
    12e4:	62 1b       	sub	r22, r18
    12e6:	73 0b       	sbc	r23, r19
    12e8:	84 0b       	sbc	r24, r20
    12ea:	95 0b       	sbc	r25, r21
    12ec:	39 f4       	brne	.+14     	; 0x12fc <__fp_cmp+0x38>
    12ee:	0a 26       	eor	r0, r26
    12f0:	61 f0       	breq	.+24     	; 0x130a <__fp_cmp+0x46>
    12f2:	23 2b       	or	r18, r19
    12f4:	24 2b       	or	r18, r20
    12f6:	25 2b       	or	r18, r21
    12f8:	21 f4       	brne	.+8      	; 0x1302 <__fp_cmp+0x3e>
    12fa:	08 95       	ret
    12fc:	0a 26       	eor	r0, r26
    12fe:	09 f4       	brne	.+2      	; 0x1302 <__fp_cmp+0x3e>
    1300:	a1 40       	sbci	r26, 0x01	; 1
    1302:	a6 95       	lsr	r26
    1304:	8f ef       	ldi	r24, 0xFF	; 255
    1306:	81 1d       	adc	r24, r1
    1308:	81 1d       	adc	r24, r1
    130a:	08 95       	ret

0000130c <__fp_inf>:
    130c:	97 f9       	bld	r25, 7
    130e:	9f 67       	ori	r25, 0x7F	; 127
    1310:	80 e8       	ldi	r24, 0x80	; 128
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	08 95       	ret

00001318 <__fp_nan>:
    1318:	9f ef       	ldi	r25, 0xFF	; 255
    131a:	80 ec       	ldi	r24, 0xC0	; 192
    131c:	08 95       	ret

0000131e <__fp_powser>:
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	1f 93       	push	r17
    1324:	0f 93       	push	r16
    1326:	ff 92       	push	r15
    1328:	ef 92       	push	r14
    132a:	df 92       	push	r13
    132c:	7b 01       	movw	r14, r22
    132e:	8c 01       	movw	r16, r24
    1330:	68 94       	set
    1332:	06 c0       	rjmp	.+12     	; 0x1340 <__fp_powser+0x22>
    1334:	da 2e       	mov	r13, r26
    1336:	ef 01       	movw	r28, r30
    1338:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__mulsf3x>
    133c:	fe 01       	movw	r30, r28
    133e:	e8 94       	clt
    1340:	a5 91       	lpm	r26, Z+
    1342:	25 91       	lpm	r18, Z+
    1344:	35 91       	lpm	r19, Z+
    1346:	45 91       	lpm	r20, Z+
    1348:	55 91       	lpm	r21, Z+
    134a:	a6 f3       	brts	.-24     	; 0x1334 <__fp_powser+0x16>
    134c:	ef 01       	movw	r28, r30
    134e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__addsf3x>
    1352:	fe 01       	movw	r30, r28
    1354:	97 01       	movw	r18, r14
    1356:	a8 01       	movw	r20, r16
    1358:	da 94       	dec	r13
    135a:	69 f7       	brne	.-38     	; 0x1336 <__fp_powser+0x18>
    135c:	df 90       	pop	r13
    135e:	ef 90       	pop	r14
    1360:	ff 90       	pop	r15
    1362:	0f 91       	pop	r16
    1364:	1f 91       	pop	r17
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <__fp_powsodd>:
    136c:	9f 93       	push	r25
    136e:	8f 93       	push	r24
    1370:	7f 93       	push	r23
    1372:	6f 93       	push	r22
    1374:	ff 93       	push	r31
    1376:	ef 93       	push	r30
    1378:	9b 01       	movw	r18, r22
    137a:	ac 01       	movw	r20, r24
    137c:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
    1380:	ef 91       	pop	r30
    1382:	ff 91       	pop	r31
    1384:	0e 94 8f 09 	call	0x131e	; 0x131e <__fp_powser>
    1388:	2f 91       	pop	r18
    138a:	3f 91       	pop	r19
    138c:	4f 91       	pop	r20
    138e:	5f 91       	pop	r21
    1390:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__mulsf3>

00001394 <__fp_pscA>:
    1394:	00 24       	eor	r0, r0
    1396:	0a 94       	dec	r0
    1398:	16 16       	cp	r1, r22
    139a:	17 06       	cpc	r1, r23
    139c:	18 06       	cpc	r1, r24
    139e:	09 06       	cpc	r0, r25
    13a0:	08 95       	ret

000013a2 <__fp_pscB>:
    13a2:	00 24       	eor	r0, r0
    13a4:	0a 94       	dec	r0
    13a6:	12 16       	cp	r1, r18
    13a8:	13 06       	cpc	r1, r19
    13aa:	14 06       	cpc	r1, r20
    13ac:	05 06       	cpc	r0, r21
    13ae:	08 95       	ret

000013b0 <__fp_round>:
    13b0:	09 2e       	mov	r0, r25
    13b2:	03 94       	inc	r0
    13b4:	00 0c       	add	r0, r0
    13b6:	11 f4       	brne	.+4      	; 0x13bc <__fp_round+0xc>
    13b8:	88 23       	and	r24, r24
    13ba:	52 f0       	brmi	.+20     	; 0x13d0 <__fp_round+0x20>
    13bc:	bb 0f       	add	r27, r27
    13be:	40 f4       	brcc	.+16     	; 0x13d0 <__fp_round+0x20>
    13c0:	bf 2b       	or	r27, r31
    13c2:	11 f4       	brne	.+4      	; 0x13c8 <__fp_round+0x18>
    13c4:	60 ff       	sbrs	r22, 0
    13c6:	04 c0       	rjmp	.+8      	; 0x13d0 <__fp_round+0x20>
    13c8:	6f 5f       	subi	r22, 0xFF	; 255
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	8f 4f       	sbci	r24, 0xFF	; 255
    13ce:	9f 4f       	sbci	r25, 0xFF	; 255
    13d0:	08 95       	ret

000013d2 <__fp_split3>:
    13d2:	57 fd       	sbrc	r21, 7
    13d4:	90 58       	subi	r25, 0x80	; 128
    13d6:	44 0f       	add	r20, r20
    13d8:	55 1f       	adc	r21, r21
    13da:	59 f0       	breq	.+22     	; 0x13f2 <__fp_splitA+0x10>
    13dc:	5f 3f       	cpi	r21, 0xFF	; 255
    13de:	71 f0       	breq	.+28     	; 0x13fc <__fp_splitA+0x1a>
    13e0:	47 95       	ror	r20

000013e2 <__fp_splitA>:
    13e2:	88 0f       	add	r24, r24
    13e4:	97 fb       	bst	r25, 7
    13e6:	99 1f       	adc	r25, r25
    13e8:	61 f0       	breq	.+24     	; 0x1402 <__fp_splitA+0x20>
    13ea:	9f 3f       	cpi	r25, 0xFF	; 255
    13ec:	79 f0       	breq	.+30     	; 0x140c <__fp_splitA+0x2a>
    13ee:	87 95       	ror	r24
    13f0:	08 95       	ret
    13f2:	12 16       	cp	r1, r18
    13f4:	13 06       	cpc	r1, r19
    13f6:	14 06       	cpc	r1, r20
    13f8:	55 1f       	adc	r21, r21
    13fa:	f2 cf       	rjmp	.-28     	; 0x13e0 <__fp_split3+0xe>
    13fc:	46 95       	lsr	r20
    13fe:	f1 df       	rcall	.-30     	; 0x13e2 <__fp_splitA>
    1400:	08 c0       	rjmp	.+16     	; 0x1412 <__fp_splitA+0x30>
    1402:	16 16       	cp	r1, r22
    1404:	17 06       	cpc	r1, r23
    1406:	18 06       	cpc	r1, r24
    1408:	99 1f       	adc	r25, r25
    140a:	f1 cf       	rjmp	.-30     	; 0x13ee <__fp_splitA+0xc>
    140c:	86 95       	lsr	r24
    140e:	71 05       	cpc	r23, r1
    1410:	61 05       	cpc	r22, r1
    1412:	08 94       	sec
    1414:	08 95       	ret

00001416 <__fp_zero>:
    1416:	e8 94       	clt

00001418 <__fp_szero>:
    1418:	bb 27       	eor	r27, r27
    141a:	66 27       	eor	r22, r22
    141c:	77 27       	eor	r23, r23
    141e:	cb 01       	movw	r24, r22
    1420:	97 f9       	bld	r25, 7
    1422:	08 95       	ret

00001424 <__gesf2>:
    1424:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__fp_cmp>
    1428:	08 f4       	brcc	.+2      	; 0x142c <__gesf2+0x8>
    142a:	8f ef       	ldi	r24, 0xFF	; 255
    142c:	08 95       	ret

0000142e <__mulsf3>:
    142e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__mulsf3x>
    1432:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__fp_round>
    1436:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fp_pscA>
    143a:	38 f0       	brcs	.+14     	; 0x144a <__mulsf3+0x1c>
    143c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__fp_pscB>
    1440:	20 f0       	brcs	.+8      	; 0x144a <__mulsf3+0x1c>
    1442:	95 23       	and	r25, r21
    1444:	11 f0       	breq	.+4      	; 0x144a <__mulsf3+0x1c>
    1446:	0c 94 86 09 	jmp	0x130c	; 0x130c <__fp_inf>
    144a:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__fp_nan>
    144e:	11 24       	eor	r1, r1
    1450:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_szero>

00001454 <__mulsf3x>:
    1454:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_split3>
    1458:	70 f3       	brcs	.-36     	; 0x1436 <__mulsf3+0x8>

0000145a <__mulsf3_pse>:
    145a:	95 9f       	mul	r25, r21
    145c:	c1 f3       	breq	.-16     	; 0x144e <__mulsf3+0x20>
    145e:	95 0f       	add	r25, r21
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	55 1f       	adc	r21, r21
    1464:	62 9f       	mul	r22, r18
    1466:	f0 01       	movw	r30, r0
    1468:	72 9f       	mul	r23, r18
    146a:	bb 27       	eor	r27, r27
    146c:	f0 0d       	add	r31, r0
    146e:	b1 1d       	adc	r27, r1
    1470:	63 9f       	mul	r22, r19
    1472:	aa 27       	eor	r26, r26
    1474:	f0 0d       	add	r31, r0
    1476:	b1 1d       	adc	r27, r1
    1478:	aa 1f       	adc	r26, r26
    147a:	64 9f       	mul	r22, r20
    147c:	66 27       	eor	r22, r22
    147e:	b0 0d       	add	r27, r0
    1480:	a1 1d       	adc	r26, r1
    1482:	66 1f       	adc	r22, r22
    1484:	82 9f       	mul	r24, r18
    1486:	22 27       	eor	r18, r18
    1488:	b0 0d       	add	r27, r0
    148a:	a1 1d       	adc	r26, r1
    148c:	62 1f       	adc	r22, r18
    148e:	73 9f       	mul	r23, r19
    1490:	b0 0d       	add	r27, r0
    1492:	a1 1d       	adc	r26, r1
    1494:	62 1f       	adc	r22, r18
    1496:	83 9f       	mul	r24, r19
    1498:	a0 0d       	add	r26, r0
    149a:	61 1d       	adc	r22, r1
    149c:	22 1f       	adc	r18, r18
    149e:	74 9f       	mul	r23, r20
    14a0:	33 27       	eor	r19, r19
    14a2:	a0 0d       	add	r26, r0
    14a4:	61 1d       	adc	r22, r1
    14a6:	23 1f       	adc	r18, r19
    14a8:	84 9f       	mul	r24, r20
    14aa:	60 0d       	add	r22, r0
    14ac:	21 1d       	adc	r18, r1
    14ae:	82 2f       	mov	r24, r18
    14b0:	76 2f       	mov	r23, r22
    14b2:	6a 2f       	mov	r22, r26
    14b4:	11 24       	eor	r1, r1
    14b6:	9f 57       	subi	r25, 0x7F	; 127
    14b8:	50 40       	sbci	r21, 0x00	; 0
    14ba:	9a f0       	brmi	.+38     	; 0x14e2 <__mulsf3_pse+0x88>
    14bc:	f1 f0       	breq	.+60     	; 0x14fa <__mulsf3_pse+0xa0>
    14be:	88 23       	and	r24, r24
    14c0:	4a f0       	brmi	.+18     	; 0x14d4 <__mulsf3_pse+0x7a>
    14c2:	ee 0f       	add	r30, r30
    14c4:	ff 1f       	adc	r31, r31
    14c6:	bb 1f       	adc	r27, r27
    14c8:	66 1f       	adc	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	88 1f       	adc	r24, r24
    14ce:	91 50       	subi	r25, 0x01	; 1
    14d0:	50 40       	sbci	r21, 0x00	; 0
    14d2:	a9 f7       	brne	.-22     	; 0x14be <__mulsf3_pse+0x64>
    14d4:	9e 3f       	cpi	r25, 0xFE	; 254
    14d6:	51 05       	cpc	r21, r1
    14d8:	80 f0       	brcs	.+32     	; 0x14fa <__mulsf3_pse+0xa0>
    14da:	0c 94 86 09 	jmp	0x130c	; 0x130c <__fp_inf>
    14de:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__fp_szero>
    14e2:	5f 3f       	cpi	r21, 0xFF	; 255
    14e4:	e4 f3       	brlt	.-8      	; 0x14de <__mulsf3_pse+0x84>
    14e6:	98 3e       	cpi	r25, 0xE8	; 232
    14e8:	d4 f3       	brlt	.-12     	; 0x14de <__mulsf3_pse+0x84>
    14ea:	86 95       	lsr	r24
    14ec:	77 95       	ror	r23
    14ee:	67 95       	ror	r22
    14f0:	b7 95       	ror	r27
    14f2:	f7 95       	ror	r31
    14f4:	e7 95       	ror	r30
    14f6:	9f 5f       	subi	r25, 0xFF	; 255
    14f8:	c1 f7       	brne	.-16     	; 0x14ea <__mulsf3_pse+0x90>
    14fa:	fe 2b       	or	r31, r30
    14fc:	88 0f       	add	r24, r24
    14fe:	91 1d       	adc	r25, r1
    1500:	96 95       	lsr	r25
    1502:	87 95       	ror	r24
    1504:	97 f9       	bld	r25, 7
    1506:	08 95       	ret
    1508:	19 f4       	brne	.+6      	; 0x1510 <__mulsf3_pse+0xb6>
    150a:	16 f4       	brtc	.+4      	; 0x1510 <__mulsf3_pse+0xb6>
    150c:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__fp_nan>
    1510:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__fp_mpack>

00001514 <sqrt>:
    1514:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_splitA>
    1518:	b8 f3       	brcs	.-18     	; 0x1508 <__mulsf3_pse+0xae>
    151a:	99 23       	and	r25, r25
    151c:	c9 f3       	breq	.-14     	; 0x1510 <__mulsf3_pse+0xb6>
    151e:	b6 f3       	brts	.-20     	; 0x150c <__mulsf3_pse+0xb2>
    1520:	9f 57       	subi	r25, 0x7F	; 127
    1522:	55 0b       	sbc	r21, r21
    1524:	87 ff       	sbrs	r24, 7
    1526:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__fp_norm2>
    152a:	00 24       	eor	r0, r0
    152c:	a0 e6       	ldi	r26, 0x60	; 96
    152e:	40 ea       	ldi	r20, 0xA0	; 160
    1530:	90 01       	movw	r18, r0
    1532:	80 58       	subi	r24, 0x80	; 128
    1534:	56 95       	lsr	r21
    1536:	97 95       	ror	r25
    1538:	28 f4       	brcc	.+10     	; 0x1544 <sqrt+0x30>
    153a:	80 5c       	subi	r24, 0xC0	; 192
    153c:	66 0f       	add	r22, r22
    153e:	77 1f       	adc	r23, r23
    1540:	88 1f       	adc	r24, r24
    1542:	20 f0       	brcs	.+8      	; 0x154c <sqrt+0x38>
    1544:	26 17       	cp	r18, r22
    1546:	37 07       	cpc	r19, r23
    1548:	48 07       	cpc	r20, r24
    154a:	30 f4       	brcc	.+12     	; 0x1558 <sqrt+0x44>
    154c:	62 1b       	sub	r22, r18
    154e:	73 0b       	sbc	r23, r19
    1550:	84 0b       	sbc	r24, r20
    1552:	20 29       	or	r18, r0
    1554:	31 29       	or	r19, r1
    1556:	4a 2b       	or	r20, r26
    1558:	a6 95       	lsr	r26
    155a:	17 94       	ror	r1
    155c:	07 94       	ror	r0
    155e:	20 25       	eor	r18, r0
    1560:	31 25       	eor	r19, r1
    1562:	4a 27       	eor	r20, r26
    1564:	58 f7       	brcc	.-42     	; 0x153c <sqrt+0x28>
    1566:	66 0f       	add	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	88 1f       	adc	r24, r24
    156c:	20 f0       	brcs	.+8      	; 0x1576 <sqrt+0x62>
    156e:	26 17       	cp	r18, r22
    1570:	37 07       	cpc	r19, r23
    1572:	48 07       	cpc	r20, r24
    1574:	30 f4       	brcc	.+12     	; 0x1582 <sqrt+0x6e>
    1576:	62 0b       	sbc	r22, r18
    1578:	73 0b       	sbc	r23, r19
    157a:	84 0b       	sbc	r24, r20
    157c:	20 0d       	add	r18, r0
    157e:	31 1d       	adc	r19, r1
    1580:	41 1d       	adc	r20, r1
    1582:	a0 95       	com	r26
    1584:	81 f7       	brne	.-32     	; 0x1566 <sqrt+0x52>
    1586:	b9 01       	movw	r22, r18
    1588:	84 2f       	mov	r24, r20
    158a:	91 58       	subi	r25, 0x81	; 129
    158c:	88 0f       	add	r24, r24
    158e:	96 95       	lsr	r25
    1590:	87 95       	ror	r24
    1592:	08 95       	ret

00001594 <square>:
    1594:	9b 01       	movw	r18, r22
    1596:	ac 01       	movw	r20, r24
    1598:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__mulsf3>

0000159c <__fp_mpack>:
    159c:	9f 3f       	cpi	r25, 0xFF	; 255
    159e:	31 f0       	breq	.+12     	; 0x15ac <__fp_mpack_finite+0xc>

000015a0 <__fp_mpack_finite>:
    15a0:	91 50       	subi	r25, 0x01	; 1
    15a2:	20 f4       	brcc	.+8      	; 0x15ac <__fp_mpack_finite+0xc>
    15a4:	87 95       	ror	r24
    15a6:	77 95       	ror	r23
    15a8:	67 95       	ror	r22
    15aa:	b7 95       	ror	r27
    15ac:	88 0f       	add	r24, r24
    15ae:	91 1d       	adc	r25, r1
    15b0:	96 95       	lsr	r25
    15b2:	87 95       	ror	r24
    15b4:	97 f9       	bld	r25, 7
    15b6:	08 95       	ret

000015b8 <__fp_norm2>:
    15b8:	91 50       	subi	r25, 0x01	; 1
    15ba:	50 40       	sbci	r21, 0x00	; 0
    15bc:	66 0f       	add	r22, r22
    15be:	77 1f       	adc	r23, r23
    15c0:	88 1f       	adc	r24, r24
    15c2:	d2 f7       	brpl	.-12     	; 0x15b8 <__fp_norm2>
    15c4:	08 95       	ret

000015c6 <_exit>:
    15c6:	f8 94       	cli

000015c8 <__stop_program>:
    15c8:	ff cf       	rjmp	.-2      	; 0x15c8 <__stop_program>
