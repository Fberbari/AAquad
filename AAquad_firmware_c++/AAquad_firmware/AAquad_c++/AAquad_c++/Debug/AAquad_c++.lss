
AAquad_c++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000001e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ac  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008da  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027e  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001778  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c1  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001c5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a6 30       	cpi	r26, 0x06	; 6
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:
	volatile uint16_t temp0 = 0;
	volatile uint16_t temp1 = 0; 
	
int main(void){

	TCCR1B |= (1 << CS10);	// timer starts
  dc:	e1 e8       	ldi	r30, 0x81	; 129
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	80 83       	st	Z, r24

	PORTD |= (1 << 2);	// pin D2 set as an input 
  e6:	5a 9a       	sbi	0x0b, 2	; 11
	while(1){
		
		
		if (PIND == (PIND | (1 << 2)) ){	// rising edge detected     
			
			temp0 = TCNT1;
  e8:	e4 e8       	ldi	r30, 0x84	; 132
  ea:	f0 e0       	ldi	r31, 0x00	; 0
	PORTD |= (1 << 2);	// pin D2 set as an input 
	
	while(1){
		
		
		if (PIND == (PIND | (1 << 2)) ){	// rising edge detected     
  ec:	99 b1       	in	r25, 0x09	; 9
  ee:	89 b1       	in	r24, 0x09	; 9
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	98 13       	cpse	r25, r24
  f4:	fb cf       	rjmp	.-10     	; 0xec <main+0x10>
			
			temp0 = TCNT1;
  f6:	80 81       	ld	r24, Z
  f8:	91 81       	ldd	r25, Z+1	; 0x01
  fa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <temp0+0x1>
  fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp0>
			
			while (PIND == (PIND | (1 << 2) ));
 102:	99 b1       	in	r25, 0x09	; 9
 104:	89 b1       	in	r24, 0x09	; 9
 106:	84 60       	ori	r24, 0x04	; 4
 108:	98 17       	cp	r25, r24
 10a:	d9 f3       	breq	.-10     	; 0x102 <main+0x26>
			
			temp1= TCNT1;
 10c:	80 81       	ld	r24, Z
 10e:	91 81       	ldd	r25, Z+1	; 0x01
 110:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			
			if ( temp1 < temp0 ) {
 118:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 11c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 120:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp0>
 124:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp0+0x1>
 128:	28 17       	cp	r18, r24
 12a:	39 07       	cpc	r19, r25
 12c:	80 f4       	brcc	.+32     	; 0x14e <main+0x72>
				
				pwm_width = 0xffff - temp0 + temp1;
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 132:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 136:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp0>
 13a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp0+0x1>
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	82 1b       	sub	r24, r18
 142:	93 0b       	sbc	r25, r19
 144:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pwm_width+0x1>
 148:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pwm_width>
 14c:	cf cf       	rjmp	.-98     	; 0xec <main+0x10>
			}
			
			else{
				
				pwm_width = temp1 - temp0 ;
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 152:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 156:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp0>
 15a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp0+0x1>
 15e:	82 1b       	sub	r24, r18
 160:	93 0b       	sbc	r25, r19
 162:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pwm_width+0x1>
 166:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pwm_width>
 16a:	c0 cf       	rjmp	.-128    	; 0xec <main+0x10>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
