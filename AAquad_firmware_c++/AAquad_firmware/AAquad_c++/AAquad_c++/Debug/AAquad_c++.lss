
AAquad_c++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001ccc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c58  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  00001ccc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036d8  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013a1  00000000  00000000  0000560c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fe4  00000000  00000000  000069ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000618  00000000  00000000  00007994  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e75  00000000  00000000  00007fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010fd  00000000  00000000  00008e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00009f1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_1>
       8:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_2>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__vector_4>
      14:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_5>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      68:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      6c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      70:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      74:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      78:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      7c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      80:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      84:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      88:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      8c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      90:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      94:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      98:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      9c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      ac:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      b0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      b4:	03 6e       	ori	r16, 0xE3	; 227
      b6:	db 36       	cpi	r29, 0x6B	; 107
      b8:	3d 9a       	sbi	0x07, 5	; 7
      ba:	99 99       	sbic	0x13, 1	; 19
      bc:	99 3d       	cpi	r25, 0xD9	; 217
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	3e 00       	.word	0x003e	; ????
      c4:	00 00       	nop
      c6:	80 3f       	cpi	r24, 0xF0	; 240
      c8:	07 2c       	mov	r0, r7
      ca:	7a a5       	ldd	r23, Y+42	; 0x2a
      cc:	ba 6c       	ori	r27, 0xCA	; 202
      ce:	c5 90       	lpm	r12, Z+
      d0:	da 3b       	cpi	r29, 0xBA	; 186
      d2:	93 65       	ori	r25, 0x53	; 83
      d4:	fc 8b       	std	Y+20, r31	; 0x14
      d6:	bc 53       	subi	r27, 0x3C	; 60
      d8:	f8 10       	cpse	r15, r8
      da:	fd 3c       	cpi	r31, 0xCD	; 205
      dc:	56 92       	lac	Z, r5
      de:	83 4d       	sbci	r24, 0xD3	; 211
      e0:	bd 87       	std	Y+13, r27	; 0x0d
      e2:	9d 3a       	cpi	r25, 0xAD	; 173
      e4:	b6 3d       	cpi	r27, 0xD6	; 214
      e6:	cb c9       	rjmp	.-3178   	; 0xfffff47e <__eeprom_end+0xff7ef47e>
      e8:	bf 5b       	subi	r27, 0xBF	; 191
      ea:	be 73       	andi	r27, 0x3E	; 62
      ec:	da 0f       	add	r29, r26
      ee:	c9 3f       	cpi	r28, 0xF9	; 249

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d8 e0       	ldi	r29, 0x08	; 8
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_clear_bss>:
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	a8 31       	cpi	r26, 0x18	; 24
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 8c 00 	call	0x118	; 0x118 <main>
     110:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <main>:

	volatile uint16_t requested_throttle_pos = 0;
	volatile uint16_t temp_timer_throttle = 0; 


int main(void){
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	c3 5d       	subi	r28, 0xD3	; 211
     122:	d1 09       	sbc	r29, r1
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	de bf       	out	0x3e, r29	; 62
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	cd bf       	out	0x3d, r28	; 61

	initialize::timers();
     12e:	0e 94 43 03 	call	0x686	; 0x686 <_ZN10initialize6timersEv>
	initialize::interrupts();
     132:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN10initialize10interruptsEv>
	
	
	pilot_instructions pilot;
	pilot.set_max_angle(30);
     136:	6e e1       	ldi	r22, 0x1E	; 30
     138:	ce 01       	movw	r24, r28
     13a:	c9 96       	adiw	r24, 0x39	; 57
     13c:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN18pilot_instructions13set_max_angleEh>
	pilot.set_max_yaw_rate(45);	// this retrieves and holds the pilot's wishes
     140:	6d e2       	ldi	r22, 0x2D	; 45
     142:	ce 01       	movw	r24, r28
     144:	c9 96       	adiw	r24, 0x39	; 57
     146:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN18pilot_instructions16set_max_yaw_rateEh>

	

	I2C_328pb sensor_I2C(0xAA);	// I2C object created just for use in the sensor object
     14a:	6a ea       	ldi	r22, 0xAA	; 170
     14c:	70 e0       	ldi	r23, 0x00	; 0
     14e:	ce 01       	movw	r24, r28
     150:	8e 5b       	subi	r24, 0xBE	; 190
     152:	9f 4f       	sbci	r25, 0xFF	; 255
     154:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN9I2C_328pbC1Ei>
	sensors sense(sensor_I2C);
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	ce 01       	movw	r24, r28
     15c:	8d 5b       	subi	r24, 0xBD	; 189
     15e:	9f 4f       	sbci	r25, 0xFF	; 255
     160:	0e 94 c0 07 	call	0xf80	; 0xf80 <_ZN7sensorsC1E9I2C_328pb>

	PID bank_pid;
     164:	ce 01       	movw	r24, r28
     166:	83 5a       	subi	r24, 0xA3	; 163
     168:	9f 4f       	sbci	r25, 0xFF	; 255
     16a:	0e 94 49 03 	call	0x692	; 0x692 <_ZN3PIDC1Ev>
	bank_pid.setWeights(1.5,0.05,0.05);
     16e:	0f 2e       	mov	r0, r31
     170:	fd ec       	ldi	r31, 0xCD	; 205
     172:	cf 2e       	mov	r12, r31
     174:	fc ec       	ldi	r31, 0xCC	; 204
     176:	df 2e       	mov	r13, r31
     178:	fc e4       	ldi	r31, 0x4C	; 76
     17a:	ef 2e       	mov	r14, r31
     17c:	fd e3       	ldi	r31, 0x3D	; 61
     17e:	ff 2e       	mov	r15, r31
     180:	f0 2d       	mov	r31, r0
     182:	cd aa       	std	Y+53, r12	; 0x35
     184:	de aa       	std	Y+54, r13	; 0x36
     186:	ef aa       	std	Y+55, r14	; 0x37
     188:	f8 ae       	std	Y+56, r15	; 0x38
     18a:	c9 aa       	std	Y+49, r12	; 0x31
     18c:	da aa       	std	Y+50, r13	; 0x32
     18e:	eb aa       	std	Y+51, r14	; 0x33
     190:	fc aa       	std	Y+52, r15	; 0x34
     192:	0f 2e       	mov	r0, r31
     194:	41 2c       	mov	r4, r1
     196:	51 2c       	mov	r5, r1
     198:	f0 ec       	ldi	r31, 0xC0	; 192
     19a:	6f 2e       	mov	r6, r31
     19c:	ff e3       	ldi	r31, 0x3F	; 63
     19e:	7f 2e       	mov	r7, r31
     1a0:	f0 2d       	mov	r31, r0
     1a2:	4d a6       	std	Y+45, r4	; 0x2d
     1a4:	5e a6       	std	Y+46, r5	; 0x2e
     1a6:	6f a6       	std	Y+47, r6	; 0x2f
     1a8:	78 aa       	std	Y+48, r7	; 0x30
     1aa:	9e 01       	movw	r18, r28
     1ac:	2b 5c       	subi	r18, 0xCB	; 203
     1ae:	3f 4f       	sbci	r19, 0xFF	; 255
     1b0:	ae 01       	movw	r20, r28
     1b2:	4f 5c       	subi	r20, 0xCF	; 207
     1b4:	5f 4f       	sbci	r21, 0xFF	; 255
     1b6:	be 01       	movw	r22, r28
     1b8:	63 5d       	subi	r22, 0xD3	; 211
     1ba:	7f 4f       	sbci	r23, 0xFF	; 255
     1bc:	ce 01       	movw	r24, r28
     1be:	83 5a       	subi	r24, 0xA3	; 163
     1c0:	9f 4f       	sbci	r25, 0xFF	; 255
     1c2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN3PID10setWeightsERKfS1_S1_>
	bank_pid.setOutputLowerLimit(-50);
     1c6:	0f 2e       	mov	r0, r31
     1c8:	81 2c       	mov	r8, r1
     1ca:	91 2c       	mov	r9, r1
     1cc:	f8 e4       	ldi	r31, 0x48	; 72
     1ce:	af 2e       	mov	r10, r31
     1d0:	f2 ec       	ldi	r31, 0xC2	; 194
     1d2:	bf 2e       	mov	r11, r31
     1d4:	f0 2d       	mov	r31, r0
     1d6:	89 a6       	std	Y+41, r8	; 0x29
     1d8:	9a a6       	std	Y+42, r9	; 0x2a
     1da:	ab a6       	std	Y+43, r10	; 0x2b
     1dc:	bc a6       	std	Y+44, r11	; 0x2c
     1de:	be 01       	movw	r22, r28
     1e0:	67 5d       	subi	r22, 0xD7	; 215
     1e2:	7f 4f       	sbci	r23, 0xFF	; 255
     1e4:	ce 01       	movw	r24, r28
     1e6:	83 5a       	subi	r24, 0xA3	; 163
     1e8:	9f 4f       	sbci	r25, 0xFF	; 255
     1ea:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN3PID19setOutputLowerLimitERKf>
	bank_pid.setOutputUpperLimit(50);
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	a8 e4       	ldi	r26, 0x48	; 72
     1f4:	b2 e4       	ldi	r27, 0x42	; 66
     1f6:	8d a3       	std	Y+37, r24	; 0x25
     1f8:	9e a3       	std	Y+38, r25	; 0x26
     1fa:	af a3       	std	Y+39, r26	; 0x27
     1fc:	b8 a7       	std	Y+40, r27	; 0x28
     1fe:	be 01       	movw	r22, r28
     200:	6b 5d       	subi	r22, 0xDB	; 219
     202:	7f 4f       	sbci	r23, 0xFF	; 255
     204:	ce 01       	movw	r24, r28
     206:	83 5a       	subi	r24, 0xA3	; 163
     208:	9f 4f       	sbci	r25, 0xFF	; 255
     20a:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN3PID19setOutputUpperLimitERKf>

	PID pitch_pid;
     20e:	ce 01       	movw	r24, r28
     210:	89 56       	subi	r24, 0x69	; 105
     212:	9f 4f       	sbci	r25, 0xFF	; 255
     214:	0e 94 49 03 	call	0x692	; 0x692 <_ZN3PIDC1Ev>
	pitch_pid.setWeights(1.5,0.05,0.5);
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	a0 e0       	ldi	r26, 0x00	; 0
     21e:	bf e3       	ldi	r27, 0x3F	; 63
     220:	89 a3       	std	Y+33, r24	; 0x21
     222:	9a a3       	std	Y+34, r25	; 0x22
     224:	ab a3       	std	Y+35, r26	; 0x23
     226:	bc a3       	std	Y+36, r27	; 0x24
     228:	cd 8e       	std	Y+29, r12	; 0x1d
     22a:	de 8e       	std	Y+30, r13	; 0x1e
     22c:	ef 8e       	std	Y+31, r14	; 0x1f
     22e:	f8 a2       	std	Y+32, r15	; 0x20
     230:	49 8e       	std	Y+25, r4	; 0x19
     232:	5a 8e       	std	Y+26, r5	; 0x1a
     234:	6b 8e       	std	Y+27, r6	; 0x1b
     236:	7c 8e       	std	Y+28, r7	; 0x1c
     238:	9e 01       	movw	r18, r28
     23a:	2f 5d       	subi	r18, 0xDF	; 223
     23c:	3f 4f       	sbci	r19, 0xFF	; 255
     23e:	ae 01       	movw	r20, r28
     240:	43 5e       	subi	r20, 0xE3	; 227
     242:	5f 4f       	sbci	r21, 0xFF	; 255
     244:	be 01       	movw	r22, r28
     246:	67 5e       	subi	r22, 0xE7	; 231
     248:	7f 4f       	sbci	r23, 0xFF	; 255
     24a:	ce 01       	movw	r24, r28
     24c:	89 56       	subi	r24, 0x69	; 105
     24e:	9f 4f       	sbci	r25, 0xFF	; 255
     250:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_ZN3PID10setWeightsERKfS1_S1_>
	pitch_pid.setOutputLowerLimit(-50);
     254:	8d 8a       	std	Y+21, r8	; 0x15
     256:	9e 8a       	std	Y+22, r9	; 0x16
     258:	af 8a       	std	Y+23, r10	; 0x17
     25a:	b8 8e       	std	Y+24, r11	; 0x18
     25c:	be 01       	movw	r22, r28
     25e:	6b 5e       	subi	r22, 0xEB	; 235
     260:	7f 4f       	sbci	r23, 0xFF	; 255
     262:	ce 01       	movw	r24, r28
     264:	89 56       	subi	r24, 0x69	; 105
     266:	9f 4f       	sbci	r25, 0xFF	; 255
     268:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN3PID19setOutputLowerLimitERKf>
	pitch_pid.setOutputUpperLimit(50);
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	a8 e4       	ldi	r26, 0x48	; 72
     272:	b2 e4       	ldi	r27, 0x42	; 66
     274:	89 8b       	std	Y+17, r24	; 0x11
     276:	9a 8b       	std	Y+18, r25	; 0x12
     278:	ab 8b       	std	Y+19, r26	; 0x13
     27a:	bc 8b       	std	Y+20, r27	; 0x14
     27c:	be 01       	movw	r22, r28
     27e:	6f 5e       	subi	r22, 0xEF	; 239
     280:	7f 4f       	sbci	r23, 0xFF	; 255
     282:	ce 01       	movw	r24, r28
     284:	89 56       	subi	r24, 0x69	; 105
     286:	9f 4f       	sbci	r25, 0xFF	; 255
     288:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN3PID19setOutputUpperLimitERKf>
	


	I2C_328pb pwm_chip_I2c(0xAA);
     28c:	6a ea       	ldi	r22, 0xAA	; 170
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	ce 01       	movw	r24, r28
     292:	8f 52       	subi	r24, 0x2F	; 47
     294:	9f 4f       	sbci	r25, 0xFF	; 255
     296:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN9I2C_328pbC1Ei>
	pwm_chip pwm(pwm_chip_I2c, 100);
     29a:	44 e6       	ldi	r20, 0x64	; 100
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	ce 01       	movw	r24, r28
     2a0:	8e 52       	subi	r24, 0x2E	; 46
     2a2:	9f 4f       	sbci	r25, 0xFF	; 255
     2a4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <_ZN8pwm_chipC1E9I2C_328pbh>

	sei();
     2a8:	78 94       	sei

	
	while(1){
		
			
		sense.read_acc(sensor_I2C);
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	ce 01       	movw	r24, r28
     2ae:	8d 5b       	subi	r24, 0xBD	; 189
     2b0:	9f 4f       	sbci	r25, 0xFF	; 255
     2b2:	0e 94 28 08 	call	0x1050	; 0x1050 <_ZN7sensors8read_accE9I2C_328pb>
		sense.read_gyro(sensor_I2C);	
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	ce 01       	movw	r24, r28
     2ba:	8d 5b       	subi	r24, 0xBD	; 189
     2bc:	9f 4f       	sbci	r25, 0xFF	; 255
     2be:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN7sensors9read_gyroE9I2C_328pb>
		sense.compute_position();// all sensor data received and processed by now
     2c2:	ce 01       	movw	r24, r28
     2c4:	8d 5b       	subi	r24, 0xBD	; 189
     2c6:	9f 4f       	sbci	r25, 0xFF	; 255
     2c8:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN7sensors16compute_positionEv>
		
	
		pilot.compute();	// all pilot data received and processed
     2cc:	ce 01       	movw	r24, r28
     2ce:	c9 96       	adiw	r24, 0x39	; 57
     2d0:	0e 94 b5 05 	call	0xb6a	; 0xb6a <_ZN18pilot_instructions7computeEv>
		
	
		bank_pid.setDesiredPoint(pilot.get_bank_angle());	// pilot commands passed to PID object
     2d4:	ce 01       	movw	r24, r28
     2d6:	c9 96       	adiw	r24, 0x39	; 57
     2d8:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZNK18pilot_instructions14get_bank_angleEv>
     2dc:	bc 01       	movw	r22, r24
     2de:	99 0f       	add	r25, r25
     2e0:	88 0b       	sbc	r24, r24
     2e2:	99 0b       	sbc	r25, r25
     2e4:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatsisf>
     2e8:	6d 87       	std	Y+13, r22	; 0x0d
     2ea:	7e 87       	std	Y+14, r23	; 0x0e
     2ec:	8f 87       	std	Y+15, r24	; 0x0f
     2ee:	98 8b       	std	Y+16, r25	; 0x10
     2f0:	be 01       	movw	r22, r28
     2f2:	63 5f       	subi	r22, 0xF3	; 243
     2f4:	7f 4f       	sbci	r23, 0xFF	; 255
     2f6:	ce 01       	movw	r24, r28
     2f8:	83 5a       	subi	r24, 0xA3	; 163
     2fa:	9f 4f       	sbci	r25, 0xFF	; 255
     2fc:	0e 94 92 03 	call	0x724	; 0x724 <_ZN3PID15setDesiredPointERKf>
		pitch_pid.setDesiredPoint(pilot.get_pitch_angle());
     300:	ce 01       	movw	r24, r28
     302:	c9 96       	adiw	r24, 0x39	; 57
     304:	0e 94 ae 05 	call	0xb5c	; 0xb5c <_ZNK18pilot_instructions15get_pitch_angleEv>
     308:	bc 01       	movw	r22, r24
     30a:	99 0f       	add	r25, r25
     30c:	88 0b       	sbc	r24, r24
     30e:	99 0b       	sbc	r25, r25
     310:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatsisf>
     314:	69 87       	std	Y+9, r22	; 0x09
     316:	7a 87       	std	Y+10, r23	; 0x0a
     318:	8b 87       	std	Y+11, r24	; 0x0b
     31a:	9c 87       	std	Y+12, r25	; 0x0c
     31c:	be 01       	movw	r22, r28
     31e:	67 5f       	subi	r22, 0xF7	; 247
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	ce 01       	movw	r24, r28
     324:	89 56       	subi	r24, 0x69	; 105
     326:	9f 4f       	sbci	r25, 0xFF	; 255
     328:	0e 94 92 03 	call	0x724	; 0x724 <_ZN3PID15setDesiredPointERKf>
	
	
		PID::combine_data(bank_pid.refresh(sense.get_roll()), pitch_pid.refresh(sense.get_pitch()), pilot.get_throttle_power());	// all data processed into individual motor percentages
     32c:	ce 01       	movw	r24, r28
     32e:	c9 96       	adiw	r24, 0x39	; 57
     330:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZNK18pilot_instructions18get_throttle_powerEv>
     334:	f8 2e       	mov	r15, r24
     336:	ce 01       	movw	r24, r28
     338:	8d 5b       	subi	r24, 0xBD	; 189
     33a:	9f 4f       	sbci	r25, 0xFF	; 255
     33c:	0e 94 0b 0b 	call	0x1616	; 0x1616 <_ZNK7sensors9get_pitchEv>
     340:	6d 83       	std	Y+5, r22	; 0x05
     342:	7e 83       	std	Y+6, r23	; 0x06
     344:	8f 83       	std	Y+7, r24	; 0x07
     346:	98 87       	std	Y+8, r25	; 0x08
     348:	be 01       	movw	r22, r28
     34a:	6b 5f       	subi	r22, 0xFB	; 251
     34c:	7f 4f       	sbci	r23, 0xFF	; 255
     34e:	ce 01       	movw	r24, r28
     350:	89 56       	subi	r24, 0x69	; 105
     352:	9f 4f       	sbci	r25, 0xFF	; 255
     354:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_ZN3PID7refreshERKf>
     358:	2b 01       	movw	r4, r22
     35a:	3c 01       	movw	r6, r24
     35c:	ce 01       	movw	r24, r28
     35e:	8d 5b       	subi	r24, 0xBD	; 189
     360:	9f 4f       	sbci	r25, 0xFF	; 255
     362:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZNK7sensors8get_rollEv>
     366:	69 83       	std	Y+1, r22	; 0x01
     368:	7a 83       	std	Y+2, r23	; 0x02
     36a:	8b 83       	std	Y+3, r24	; 0x03
     36c:	9c 83       	std	Y+4, r25	; 0x04
     36e:	be 01       	movw	r22, r28
     370:	6f 5f       	subi	r22, 0xFF	; 255
     372:	7f 4f       	sbci	r23, 0xFF	; 255
     374:	ce 01       	movw	r24, r28
     376:	83 5a       	subi	r24, 0xA3	; 163
     378:	9f 4f       	sbci	r25, 0xFF	; 255
     37a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_ZN3PID7refreshERKf>
     37e:	4b 01       	movw	r8, r22
     380:	5c 01       	movw	r10, r24
     382:	6f 2d       	mov	r22, r15
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatunsisf>
     38e:	7b 01       	movw	r14, r22
     390:	8c 01       	movw	r16, r24
     392:	a3 01       	movw	r20, r6
     394:	92 01       	movw	r18, r4
     396:	c5 01       	movw	r24, r10
     398:	b4 01       	movw	r22, r8
     39a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_ZN3PID12combine_dataEfff>
	

		pwm.pass(pwm_chip_I2c, PID::motor);	// data encoded into PWM chip language and sent to the esc's
     39e:	40 e1       	ldi	r20, 0x10	; 16
     3a0:	51 e0       	ldi	r21, 0x01	; 1
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	ce 01       	movw	r24, r28
     3a6:	8e 52       	subi	r24, 0x2E	; 46
     3a8:	9f 4f       	sbci	r25, 0xFF	; 255
     3aa:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN8pwm_chip4passE9I2C_328pbPi>
     3ae:	7d cf       	rjmp	.-262    	; 0x2aa <main+0x192>

000003b0 <__vector_1>:

}



ISR(INT0_vect){
     3b0:	1f 92       	push	r1
     3b2:	0f 92       	push	r0
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	0f 92       	push	r0
     3b8:	11 24       	eor	r1, r1
     3ba:	2f 93       	push	r18
     3bc:	3f 93       	push	r19
     3be:	4f 93       	push	r20
     3c0:	5f 93       	push	r21
     3c2:	8f 93       	push	r24
     3c4:	9f 93       	push	r25
	
		uint16_t temp = TCNT1;
     3c6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     3ca:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

		if ( temp < temp_timer_aileron){	// timer overflow
     3ce:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <temp_timer_aileron>
     3d2:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <temp_timer_aileron+0x1>
     3d6:	82 17       	cp	r24, r18
     3d8:	93 07       	cpc	r25, r19
     3da:	70 f4       	brcc	.+28     	; 0x3f8 <__vector_1+0x48>

			requested_aileron_pos = (0xffff - temp_timer_aileron) + temp ;
     3dc:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <temp_timer_aileron>
     3e0:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <temp_timer_aileron+0x1>
     3e4:	9c 01       	movw	r18, r24
     3e6:	21 50       	subi	r18, 0x01	; 1
     3e8:	31 09       	sbc	r19, r1
     3ea:	24 1b       	sub	r18, r20
     3ec:	35 0b       	sbc	r19, r21
     3ee:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <requested_aileron_pos+0x1>
     3f2:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <requested_aileron_pos>
     3f6:	0b c0       	rjmp	.+22     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		}

		else {	// regular case
	
			requested_aileron_pos = temp - temp_timer_aileron;
     3f8:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <temp_timer_aileron>
     3fc:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <temp_timer_aileron+0x1>
     400:	ac 01       	movw	r20, r24
     402:	42 1b       	sub	r20, r18
     404:	53 0b       	sbc	r21, r19
     406:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <requested_aileron_pos+0x1>
     40a:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp;
     40e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <temp_timer_aileron+0x1>
     412:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <temp_timer_aileron>
		
		
		// here, there is a chance that the value stored in requested aileron is actually (0xffff - actual requested aileron) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
	
}
     416:	9f 91       	pop	r25
     418:	8f 91       	pop	r24
     41a:	5f 91       	pop	r21
     41c:	4f 91       	pop	r20
     41e:	3f 91       	pop	r19
     420:	2f 91       	pop	r18
     422:	0f 90       	pop	r0
     424:	0f be       	out	0x3f, r0	; 63
     426:	0f 90       	pop	r0
     428:	1f 90       	pop	r1
     42a:	18 95       	reti

0000042c <__vector_2>:

ISR(INT1_vect){
     42c:	1f 92       	push	r1
     42e:	0f 92       	push	r0
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	0f 92       	push	r0
     434:	11 24       	eor	r1, r1
     436:	2f 93       	push	r18
     438:	3f 93       	push	r19
     43a:	4f 93       	push	r20
     43c:	5f 93       	push	r21
     43e:	8f 93       	push	r24
     440:	9f 93       	push	r25
	
		uint16_t temp = TCNT1;
     442:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     446:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

		if ( temp < temp_timer_throttle){	// timer overflow
     44a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     44e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
     452:	82 17       	cp	r24, r18
     454:	93 07       	cpc	r25, r19
     456:	70 f4       	brcc	.+28     	; 0x474 <__vector_2+0x48>

			requested_throttle_pos = (0xffff - temp_timer_throttle) + temp ;
     458:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
     45c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
     460:	9c 01       	movw	r18, r24
     462:	21 50       	subi	r18, 0x01	; 1
     464:	31 09       	sbc	r19, r1
     466:	24 1b       	sub	r18, r20
     468:	35 0b       	sbc	r19, r21
     46a:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <requested_throttle_pos+0x1>
     46e:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <requested_throttle_pos>
     472:	0b c0       	rjmp	.+22     	; 0x48a <__vector_2+0x5e>
		}

		else {	// regular case
	
			requested_throttle_pos = temp - temp_timer_throttle;
     474:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     478:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
     47c:	ac 01       	movw	r20, r24
     47e:	42 1b       	sub	r20, r18
     480:	53 0b       	sbc	r21, r19
     482:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <requested_throttle_pos+0x1>
     486:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <requested_throttle_pos>
			
		}
	
		
		temp_timer_throttle = temp;
     48a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
     48e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		
		// here, there is a chance that the value stored in requested throttle is actually (0xffff - actual requested throttle) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
}
     492:	9f 91       	pop	r25
     494:	8f 91       	pop	r24
     496:	5f 91       	pop	r21
     498:	4f 91       	pop	r20
     49a:	3f 91       	pop	r19
     49c:	2f 91       	pop	r18
     49e:	0f 90       	pop	r0
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	0f 90       	pop	r0
     4a4:	1f 90       	pop	r1
     4a6:	18 95       	reti

000004a8 <__vector_4>:




ISR(PCINT1_vect){
     4a8:	1f 92       	push	r1
     4aa:	0f 92       	push	r0
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	0f 92       	push	r0
     4b0:	11 24       	eor	r1, r1
     4b2:	2f 93       	push	r18
     4b4:	3f 93       	push	r19
     4b6:	4f 93       	push	r20
     4b8:	5f 93       	push	r21
     4ba:	8f 93       	push	r24
     4bc:	9f 93       	push	r25

	uint16_t temp = TCNT1;
     4be:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     4c2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

	if ( temp < temp_timer_rudder){	// timer overflow
     4c6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <temp_timer_rudder>
     4ca:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <temp_timer_rudder+0x1>
     4ce:	82 17       	cp	r24, r18
     4d0:	93 07       	cpc	r25, r19
     4d2:	70 f4       	brcc	.+28     	; 0x4f0 <__vector_4+0x48>

		requested_rudder_pos = (0xffff - temp_timer_rudder) + temp ;
     4d4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <temp_timer_rudder>
     4d8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <temp_timer_rudder+0x1>
     4dc:	9c 01       	movw	r18, r24
     4de:	21 50       	subi	r18, 0x01	; 1
     4e0:	31 09       	sbc	r19, r1
     4e2:	24 1b       	sub	r18, r20
     4e4:	35 0b       	sbc	r19, r21
     4e6:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <requested_rudder_pos+0x1>
     4ea:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <requested_rudder_pos>
     4ee:	0b c0       	rjmp	.+22     	; 0x506 <__vector_4+0x5e>
	}

	else {	// regular case

		requested_rudder_pos = temp - temp_timer_rudder;
     4f0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <temp_timer_rudder>
     4f4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <temp_timer_rudder+0x1>
     4f8:	ac 01       	movw	r20, r24
     4fa:	42 1b       	sub	r20, r18
     4fc:	53 0b       	sbc	r21, r19
     4fe:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <requested_rudder_pos+0x1>
     502:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <requested_rudder_pos>
		
	}

	
	temp_timer_rudder = temp;
     506:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <temp_timer_rudder+0x1>
     50a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_timer_rudder>
	
	

}
     50e:	9f 91       	pop	r25
     510:	8f 91       	pop	r24
     512:	5f 91       	pop	r21
     514:	4f 91       	pop	r20
     516:	3f 91       	pop	r19
     518:	2f 91       	pop	r18
     51a:	0f 90       	pop	r0
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	0f 90       	pop	r0
     520:	1f 90       	pop	r1
     522:	18 95       	reti

00000524 <__vector_5>:

ISR(PCINT2_vect){
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	2f 93       	push	r18
     530:	3f 93       	push	r19
     532:	4f 93       	push	r20
     534:	5f 93       	push	r21
     536:	8f 93       	push	r24
     538:	9f 93       	push	r25

	uint16_t temp = TCNT1;
     53a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     53e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	

	if ( temp < temp_timer_elevator){	// timer overflow
     542:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temp_timer_elevator>
     546:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temp_timer_elevator+0x1>
     54a:	82 17       	cp	r24, r18
     54c:	93 07       	cpc	r25, r19
     54e:	70 f4       	brcc	.+28     	; 0x56c <__vector_5+0x48>

		requested_elevator_pos = (0xffff - temp_timer_elevator) + temp ;
     550:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <temp_timer_elevator>
     554:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <temp_timer_elevator+0x1>
     558:	9c 01       	movw	r18, r24
     55a:	21 50       	subi	r18, 0x01	; 1
     55c:	31 09       	sbc	r19, r1
     55e:	24 1b       	sub	r18, r20
     560:	35 0b       	sbc	r19, r21
     562:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <requested_elevator_pos+0x1>
     566:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <requested_elevator_pos>
     56a:	0b c0       	rjmp	.+22     	; 0x582 <__vector_5+0x5e>
	}

	else {	// regular case

		requested_elevator_pos = temp - temp_timer_elevator;
     56c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temp_timer_elevator>
     570:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temp_timer_elevator+0x1>
     574:	ac 01       	movw	r20, r24
     576:	42 1b       	sub	r20, r18
     578:	53 0b       	sbc	r21, r19
     57a:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <requested_elevator_pos+0x1>
     57e:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <requested_elevator_pos>
		
	}

	
	temp_timer_elevator = temp;
     582:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <temp_timer_elevator+0x1>
     586:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <temp_timer_elevator>
	
	

}
     58a:	9f 91       	pop	r25
     58c:	8f 91       	pop	r24
     58e:	5f 91       	pop	r21
     590:	4f 91       	pop	r20
     592:	3f 91       	pop	r19
     594:	2f 91       	pop	r18
     596:	0f 90       	pop	r0
     598:	0f be       	out	0x3f, r0	; 63
     59a:	0f 90       	pop	r0
     59c:	1f 90       	pop	r1
     59e:	18 95       	reti

000005a0 <_ZN9I2C_328pbC1Ei>:

I2C_328pb::I2C_328pb(int bit_rate){

	// takes care of any and all initialsation

	TWBR0 = bit_rate;
     5a0:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     5a4:	08 95       	ret

000005a6 <_ZN9I2C_328pb5startEv>:



void I2C_328pb::start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
     5a6:	84 ea       	ldi	r24, 0xA4	; 164
     5a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     5ac:	ec eb       	ldi	r30, 0xBC	; 188
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	80 81       	ld	r24, Z
     5b2:	88 23       	and	r24, r24
     5b4:	ec f7       	brge	.-6      	; 0x5b0 <_ZN9I2C_328pb5startEv+0xa>
		return 0; 
	}

	return 1;
*/
}
     5b6:	08 95       	ret

000005b8 <_ZN9I2C_328pb12repeat_startEv>:


void I2C_328pb::repeat_start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
     5b8:	84 ea       	ldi	r24, 0xA4	; 164
     5ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     5be:	ec eb       	ldi	r30, 0xBC	; 188
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	80 81       	ld	r24, Z
     5c4:	88 23       	and	r24, r24
     5c6:	ec f7       	brge	.-6      	; 0x5c2 <_ZN9I2C_328pb12repeat_startEv+0xa>
		return 0; 
	}

	return 1;
*/
}
     5c8:	08 95       	ret

000005ca <_ZN9I2C_328pb10send_slaveEi>:

void I2C_328pb::send_slave(int address){

	// send slave address + write bit

	TWDR0 = address;
     5ca:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
     5ce:	84 e8       	ldi	r24, 0x84	; 132
     5d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     5d4:	ec eb       	ldi	r30, 0xBC	; 188
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	80 81       	ld	r24, Z
     5da:	88 23       	and	r24, r24
     5dc:	ec f7       	brge	.-6      	; 0x5d8 <_ZN9I2C_328pb10send_slaveEi+0xe>
	}

	return 1;
*/

}
     5de:	08 95       	ret

000005e0 <_ZN9I2C_328pb8send_regEi>:

void I2C_328pb::send_reg(int reg){

	// send  address of register to be written

	TWDR0 = reg; 
     5e0:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

  	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
     5e4:	84 e8       	ldi	r24, 0x84	; 132
     5e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     5ea:	ec eb       	ldi	r30, 0xBC	; 188
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	88 23       	and	r24, r24
     5f2:	ec f7       	brge	.-6      	; 0x5ee <_ZN9I2C_328pb8send_regEi+0xe>
	}

	return 1;
*/

}
     5f4:	08 95       	ret

000005f6 <_ZN9I2C_328pb4sendEi>:


void I2C_328pb::send(int data){

	TWDR0 = data;
     5f6:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ((1 << TWINT) | (1 << TWEN));
     5fa:	84 e8       	ldi	r24, 0x84	; 132
     5fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     600:	ec eb       	ldi	r30, 0xBC	; 188
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	88 23       	and	r24, r24
     608:	ec f7       	brge	.-6      	; 0x604 <_ZN9I2C_328pb4sendEi+0xe>
	}

	return 1;
*/

}
     60a:	08 95       	ret

0000060c <_ZN9I2C_328pb13get_next_byteEv>:

void I2C_328pb::get_next_byte(){


	TWCR0 = ( (1 << TWEN) | (1 << TWINT) | (1 << TWEA));
     60c:	84 ec       	ldi	r24, 0xC4	; 196
     60e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while (! (TWCR0 & (1 << TWINT)) );
     612:	ec eb       	ldi	r30, 0xBC	; 188
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	80 81       	ld	r24, Z
     618:	88 23       	and	r24, r24
     61a:	ec f7       	brge	.-6      	; 0x616 <_ZN9I2C_328pb13get_next_byteEv+0xa>
	return 1;

*/


}
     61c:	08 95       	ret

0000061e <_ZN9I2C_328pb13end_data_readEv>:

void I2C_328pb::end_data_read(){


	TWCR0 = ( (1 << TWEN) | (1 << TWINT) );
     61e:	84 e8       	ldi	r24, 0x84	; 132
     620:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while (! (TWCR0 & (1 << TWINT)) );
     624:	ec eb       	ldi	r30, 0xBC	; 188
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	80 81       	ld	r24, Z
     62a:	88 23       	and	r24, r24
     62c:	ec f7       	brge	.-6      	; 0x628 <_ZN9I2C_328pb13end_data_readEv+0xa>


}
     62e:	08 95       	ret

00000630 <_ZN9I2C_328pb4stopEv>:

void I2C_328pb::stop(){


	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) ); 
     630:	ec eb       	ldi	r30, 0xBC	; 188
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	80 81       	ld	r24, Z
     636:	84 69       	ori	r24, 0x94	; 148
     638:	80 83       	st	Z, r24
     63a:	08 95       	ret

0000063c <_ZN10initialize10interruptsEv>:


void initialize::interrupts(){

	// external int 0
	EIMSK |= (1 << INT0); // enable the int0 interrupt												
     63c:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC00);	// will fire at any logical change
     63e:	e9 e6       	ldi	r30, 0x69	; 105
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	81 60       	ori	r24, 0x01	; 1
     646:	80 83       	st	Z, r24

	// external int 1
	EIMSK |= (1 << INT1); // enable the int0 interrupt
     648:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= (1 << ISC10);	// will fire at any logical change
     64a:	80 81       	ld	r24, Z
     64c:	84 60       	ori	r24, 0x04	; 4
     64e:	80 83       	st	Z, r24

	// pcint 0 (for pin C3)
	PCICR |= (1 << PCIE1);
     650:	e8 e6       	ldi	r30, 0x68	; 104
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	82 60       	ori	r24, 0x02	; 2
     658:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);
     65a:	ac e6       	ldi	r26, 0x6C	; 108
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	8c 91       	ld	r24, X
     660:	88 60       	ori	r24, 0x08	; 8
     662:	8c 93       	st	X, r24

	//pcint 1 (for pin B1)
	PCICR |= (1 << PCIE2);
     664:	80 81       	ld	r24, Z
     666:	84 60       	ori	r24, 0x04	; 4
     668:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT17);
     66a:	ed e6       	ldi	r30, 0x6D	; 109
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	82 60       	ori	r24, 0x02	; 2
     672:	80 83       	st	Z, r24
	
	// setting the pullup resistors on everything (will not be necessary once all wires are connected

	DDRD &= ~(1 << 2);
     674:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << 2);
     676:	5a 9a       	sbi	0x0b, 2	; 11
	
	DDRC &= ~(1 << 3);
     678:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1 << 3);
     67a:	43 9a       	sbi	0x08, 3	; 8
	
	DDRD &= ~(1 << 3);
     67c:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1 << 3);
     67e:	5b 9a       	sbi	0x0b, 3	; 11
	
	DDRD &= ~(1 << 4);
     680:	54 98       	cbi	0x0a, 4	; 10
	PORTD |= (1 << 4);
     682:	5c 9a       	sbi	0x0b, 4	; 11
     684:	08 95       	ret

00000686 <_ZN10initialize6timersEv>:
}

void initialize::timers(){

	// by default the timer is set to normal mode
	TCCR1B |= ( (1 << CS10));	// timer will run without prescaler and willoverrun 15 times/second
     686:	e1 e8       	ldi	r30, 0x81	; 129
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	80 81       	ld	r24, Z
     68c:	81 60       	ori	r24, 0x01	; 1
     68e:	80 83       	st	Z, r24
     690:	08 95       	ret

00000692 <_ZN3PIDC1Ev>:
#include "PID.h"



PID::PID(){
     692:	fc 01       	movw	r30, r24

    last_error = 0;
     694:	14 82       	std	Z+4, r1	; 0x04
     696:	15 82       	std	Z+5, r1	; 0x05
     698:	16 82       	std	Z+6, r1	; 0x06
     69a:	17 82       	std	Z+7, r1	; 0x07
	current_error = 0;
     69c:	10 82       	st	Z, r1
     69e:	11 82       	std	Z+1, r1	; 0x01
     6a0:	12 82       	std	Z+2, r1	; 0x02
     6a2:	13 82       	std	Z+3, r1	; 0x03
    last_output = 0;
     6a4:	14 86       	std	Z+12, r1	; 0x0c
     6a6:	15 86       	std	Z+13, r1	; 0x0d
     6a8:	16 86       	std	Z+14, r1	; 0x0e
     6aa:	17 86       	std	Z+15, r1	; 0x0f
    integral = 0;
     6ac:	10 a2       	std	Z+32, r1	; 0x20
     6ae:	11 a2       	std	Z+33, r1	; 0x21
     6b0:	12 a2       	std	Z+34, r1	; 0x22
     6b2:	13 a2       	std	Z+35, r1	; 0x23
     6b4:	08 95       	ret

000006b6 <_ZN3PID10setWeightsERKfS1_S1_>:
        
// initialisation of this satic array		
int PID::motor[4] = {0};


void PID::setWeights(const float &Kp, const float &Ki, const float &Kd) {
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	fc 01       	movw	r30, r24
	this->Kp = Kp;
     6bc:	eb 01       	movw	r28, r22
     6be:	88 81       	ld	r24, Y
     6c0:	99 81       	ldd	r25, Y+1	; 0x01
     6c2:	aa 81       	ldd	r26, Y+2	; 0x02
     6c4:	bb 81       	ldd	r27, Y+3	; 0x03
     6c6:	84 8b       	std	Z+20, r24	; 0x14
     6c8:	95 8b       	std	Z+21, r25	; 0x15
     6ca:	a6 8b       	std	Z+22, r26	; 0x16
     6cc:	b7 8b       	std	Z+23, r27	; 0x17
	this->Ki = Ki;
     6ce:	ea 01       	movw	r28, r20
     6d0:	88 81       	ld	r24, Y
     6d2:	99 81       	ldd	r25, Y+1	; 0x01
     6d4:	aa 81       	ldd	r26, Y+2	; 0x02
     6d6:	bb 81       	ldd	r27, Y+3	; 0x03
     6d8:	80 8f       	std	Z+24, r24	; 0x18
     6da:	91 8f       	std	Z+25, r25	; 0x19
     6dc:	a2 8f       	std	Z+26, r26	; 0x1a
     6de:	b3 8f       	std	Z+27, r27	; 0x1b
	this->Kd = Kd;
     6e0:	e9 01       	movw	r28, r18
     6e2:	88 81       	ld	r24, Y
     6e4:	99 81       	ldd	r25, Y+1	; 0x01
     6e6:	aa 81       	ldd	r26, Y+2	; 0x02
     6e8:	bb 81       	ldd	r27, Y+3	; 0x03
     6ea:	84 8f       	std	Z+28, r24	; 0x1c
     6ec:	95 8f       	std	Z+29, r25	; 0x1d
     6ee:	a6 8f       	std	Z+30, r26	; 0x1e
     6f0:	b7 8f       	std	Z+31, r27	; 0x1f
}
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	08 95       	ret

000006f8 <_ZN3PID19setOutputLowerLimitERKf>:
void PID::setErrorThreshold(const float &error_threshold) {
	this->error_threshold = error_threshold;
}
*/
void PID::setOutputLowerLimit(const float &output_lower_limit) {
	this->output_lower_limit = output_lower_limit;
     6f8:	fb 01       	movw	r30, r22
     6fa:	40 81       	ld	r20, Z
     6fc:	51 81       	ldd	r21, Z+1	; 0x01
     6fe:	62 81       	ldd	r22, Z+2	; 0x02
     700:	73 81       	ldd	r23, Z+3	; 0x03
     702:	fc 01       	movw	r30, r24
     704:	40 ab       	std	Z+48, r20	; 0x30
     706:	51 ab       	std	Z+49, r21	; 0x31
     708:	62 ab       	std	Z+50, r22	; 0x32
     70a:	73 ab       	std	Z+51, r23	; 0x33
     70c:	08 95       	ret

0000070e <_ZN3PID19setOutputUpperLimitERKf>:
}

void PID::setOutputUpperLimit(const float &output_upper_limit) {
	this->output_upper_limit = output_upper_limit;
     70e:	fb 01       	movw	r30, r22
     710:	40 81       	ld	r20, Z
     712:	51 81       	ldd	r21, Z+1	; 0x01
     714:	62 81       	ldd	r22, Z+2	; 0x02
     716:	73 81       	ldd	r23, Z+3	; 0x03
     718:	fc 01       	movw	r30, r24
     71a:	44 a7       	std	Z+44, r20	; 0x2c
     71c:	55 a7       	std	Z+45, r21	; 0x2d
     71e:	66 a7       	std	Z+46, r22	; 0x2e
     720:	77 a7       	std	Z+47, r23	; 0x2f
     722:	08 95       	ret

00000724 <_ZN3PID15setDesiredPointERKf>:
}

void PID::setDesiredPoint(const float &desired_point) {
	set_point = desired_point;
     724:	fb 01       	movw	r30, r22
     726:	40 81       	ld	r20, Z
     728:	51 81       	ldd	r21, Z+1	; 0x01
     72a:	62 81       	ldd	r22, Z+2	; 0x02
     72c:	73 81       	ldd	r23, Z+3	; 0x03
     72e:	fc 01       	movw	r30, r24
     730:	40 8b       	std	Z+16, r20	; 0x10
     732:	51 8b       	std	Z+17, r21	; 0x11
     734:	62 8b       	std	Z+18, r22	; 0x12
     736:	73 8b       	std	Z+19, r23	; 0x13
     738:	08 95       	ret

0000073a <_ZN3PID11update_timeEv>:
}




void PID::update_time(){
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	00 d0       	rcall	.+0      	; 0x748 <_ZN3PID11update_timeEv+0xe>
     748:	00 d0       	rcall	.+0      	; 0x74a <_ZN3PID11update_timeEv+0x10>
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	8c 01       	movw	r16, r24

		
	uint16_t time = TCNT1;
     750:	e4 e8       	ldi	r30, 0x84	; 132
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	e0 80       	ld	r14, Z
     756:	f1 80       	ldd	r15, Z+1	; 0x01
	
	volatile float result;
	

	if (TCNT1 < time_of_previous_scan){
     758:	20 81       	ld	r18, Z
     75a:	31 81       	ldd	r19, Z+1	; 0x01
     75c:	fc 01       	movw	r30, r24
     75e:	80 ad       	ldd	r24, Z+56	; 0x38
     760:	91 ad       	ldd	r25, Z+57	; 0x39
     762:	28 17       	cp	r18, r24
     764:	39 07       	cpc	r19, r25
     766:	70 f4       	brcc	.+28     	; 0x784 <_ZN3PID11update_timeEv+0x4a>

		result = 0xffff - time_of_previous_scan + time ;
     768:	b7 01       	movw	r22, r14
     76a:	61 50       	subi	r22, 0x01	; 1
     76c:	71 09       	sbc	r23, r1
     76e:	68 1b       	sub	r22, r24
     770:	79 0b       	sbc	r23, r25
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatunsisf>
     77a:	69 83       	std	Y+1, r22	; 0x01
     77c:	7a 83       	std	Y+2, r23	; 0x02
     77e:	8b 83       	std	Y+3, r24	; 0x03
     780:	9c 83       	std	Y+4, r25	; 0x04
     782:	0b c0       	rjmp	.+22     	; 0x79a <_ZN3PID11update_timeEv+0x60>

	}

	else{

		result = time - time_of_previous_scan;
     784:	b7 01       	movw	r22, r14
     786:	68 1b       	sub	r22, r24
     788:	79 0b       	sbc	r23, r25
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatunsisf>
     792:	69 83       	std	Y+1, r22	; 0x01
     794:	7a 83       	std	Y+2, r23	; 0x02
     796:	8b 83       	std	Y+3, r24	; 0x03
     798:	9c 83       	std	Y+4, r25	; 0x04
	}


	result /= (float)TIMER_BIT_RATE;
     79a:	69 81       	ldd	r22, Y+1	; 0x01
     79c:	7a 81       	ldd	r23, Y+2	; 0x02
     79e:	8b 81       	ldd	r24, Y+3	; 0x03
     7a0:	9c 81       	ldd	r25, Y+4	; 0x04
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	34 e2       	ldi	r19, 0x24	; 36
     7a6:	44 e7       	ldi	r20, 0x74	; 116
     7a8:	59 e4       	ldi	r21, 0x49	; 73
     7aa:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divsf3>
     7ae:	69 83       	std	Y+1, r22	; 0x01
     7b0:	7a 83       	std	Y+2, r23	; 0x02
     7b2:	8b 83       	std	Y+3, r24	; 0x03
     7b4:	9c 83       	std	Y+4, r25	; 0x04

	time_of_previous_scan = time;
     7b6:	f8 01       	movw	r30, r16
     7b8:	f1 ae       	std	Z+57, r15	; 0x39
     7ba:	e0 ae       	std	Z+56, r14	; 0x38

	time_elapsed = result;
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	9a 81       	ldd	r25, Y+2	; 0x02
     7c0:	ab 81       	ldd	r26, Y+3	; 0x03
     7c2:	bc 81       	ldd	r27, Y+4	; 0x04
     7c4:	84 ab       	std	Z+52, r24	; 0x34
     7c6:	95 ab       	std	Z+53, r25	; 0x35
     7c8:	a6 ab       	std	Z+54, r26	; 0x36
     7ca:	b7 ab       	std	Z+55, r27	; 0x37
	
	
}
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	08 95       	ret

000007e2 <_ZN3PID7refreshERKf>:

void PID::setDesiredPoint(const float &desired_point) {
	set_point = desired_point;
}

float PID::refresh(const float &feedback_input) {
     7e2:	4f 92       	push	r4
     7e4:	5f 92       	push	r5
     7e6:	6f 92       	push	r6
     7e8:	7f 92       	push	r7
     7ea:	8f 92       	push	r8
     7ec:	9f 92       	push	r9
     7ee:	af 92       	push	r10
     7f0:	bf 92       	push	r11
     7f2:	cf 92       	push	r12
     7f4:	df 92       	push	r13
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	00 d0       	rcall	.+0      	; 0x800 <_ZN3PID7refreshERKf+0x1e>
     800:	00 d0       	rcall	.+0      	; 0x802 <_ZN3PID7refreshERKf+0x20>
     802:	00 d0       	rcall	.+0      	; 0x804 <_ZN3PID7refreshERKf+0x22>
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	9e 83       	std	Y+6, r25	; 0x06
     80a:	8d 83       	std	Y+5, r24	; 0x05
     80c:	7b 01       	movw	r14, r22

	update_time();	// get the time for integral and derivative purposes
     80e:	0e 94 9d 03 	call	0x73a	; 0x73a <_ZN3PID11update_timeEv>

		
	last_error = current_error;
     812:	ad 81       	ldd	r26, Y+5	; 0x05
     814:	be 81       	ldd	r27, Y+6	; 0x06
     816:	4d 90       	ld	r4, X+
     818:	5d 90       	ld	r5, X+
     81a:	6d 90       	ld	r6, X+
     81c:	7c 90       	ld	r7, X
     81e:	13 97       	sbiw	r26, 0x03	; 3
     820:	fd 01       	movw	r30, r26
     822:	44 82       	std	Z+4, r4	; 0x04
     824:	55 82       	std	Z+5, r5	; 0x05
     826:	66 82       	std	Z+6, r6	; 0x06
     828:	77 82       	std	Z+7, r7	; 0x07
	last_output = output;		
     82a:	80 85       	ldd	r24, Z+8	; 0x08
     82c:	91 85       	ldd	r25, Z+9	; 0x09
     82e:	a2 85       	ldd	r26, Z+10	; 0x0a
     830:	b3 85       	ldd	r27, Z+11	; 0x0b
     832:	84 87       	std	Z+12, r24	; 0x0c
     834:	95 87       	std	Z+13, r25	; 0x0d
     836:	a6 87       	std	Z+14, r26	; 0x0e
     838:	b7 87       	std	Z+15, r27	; 0x0f
	
	current_error = set_point - feedback_input;	
     83a:	d7 01       	movw	r26, r14
     83c:	2d 91       	ld	r18, X+
     83e:	3d 91       	ld	r19, X+
     840:	4d 91       	ld	r20, X+
     842:	5c 91       	ld	r21, X
     844:	60 89       	ldd	r22, Z+16	; 0x10
     846:	71 89       	ldd	r23, Z+17	; 0x11
     848:	82 89       	ldd	r24, Z+18	; 0x12
     84a:	93 89       	ldd	r25, Z+19	; 0x13
     84c:	0e 94 17 0b 	call	0x162e	; 0x162e <__subsf3>
     850:	6b 01       	movw	r12, r22
     852:	7c 01       	movw	r14, r24
     854:	ed 81       	ldd	r30, Y+5	; 0x05
     856:	fe 81       	ldd	r31, Y+6	; 0x06
     858:	60 83       	st	Z, r22
     85a:	71 83       	std	Z+1, r23	; 0x01
     85c:	82 83       	std	Z+2, r24	; 0x02
     85e:	93 83       	std	Z+3, r25	; 0x03
	
	
	
	// To orevet corruptig he integral with noise spikes, updates willonly be made if they are reasonable
	if (  fabs((current_error + last_error) * time_elapsed /2.f) < 1 ){
     860:	84 a9       	ldd	r24, Z+52	; 0x34
     862:	95 a9       	ldd	r25, Z+53	; 0x35
     864:	a6 a9       	ldd	r26, Z+54	; 0x36
     866:	b7 a9       	ldd	r27, Z+55	; 0x37
     868:	89 83       	std	Y+1, r24	; 0x01
     86a:	9a 83       	std	Y+2, r25	; 0x02
     86c:	ab 83       	std	Y+3, r26	; 0x03
     86e:	bc 83       	std	Y+4, r27	; 0x04
     870:	a7 01       	movw	r20, r14
     872:	96 01       	movw	r18, r12
     874:	c3 01       	movw	r24, r6
     876:	b2 01       	movw	r22, r4
     878:	0e 94 18 0b 	call	0x1630	; 0x1630 <__addsf3>
     87c:	29 81       	ldd	r18, Y+1	; 0x01
     87e:	3a 81       	ldd	r19, Y+2	; 0x02
     880:	4b 81       	ldd	r20, Y+3	; 0x03
     882:	5c 81       	ldd	r21, Y+4	; 0x04
     884:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e0       	ldi	r20, 0x00	; 0
     88e:	5f e3       	ldi	r21, 0x3F	; 63
     890:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
     894:	4b 01       	movw	r8, r22
     896:	5c 01       	movw	r10, r24
     898:	9f 77       	andi	r25, 0x7F	; 127
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e8       	ldi	r20, 0x80	; 128
     8a0:	5f e3       	ldi	r21, 0x3F	; 63
     8a2:	0e 94 9f 0b 	call	0x173e	; 0x173e <__cmpsf2>
     8a6:	88 23       	and	r24, r24
     8a8:	94 f4       	brge	.+36     	; 0x8ce <_ZN3PID7refreshERKf+0xec>
		
		integral += (current_error + last_error) * time_elapsed /2.f;
     8aa:	a5 01       	movw	r20, r10
     8ac:	94 01       	movw	r18, r8
     8ae:	ed 81       	ldd	r30, Y+5	; 0x05
     8b0:	fe 81       	ldd	r31, Y+6	; 0x06
     8b2:	60 a1       	ldd	r22, Z+32	; 0x20
     8b4:	71 a1       	ldd	r23, Z+33	; 0x21
     8b6:	82 a1       	ldd	r24, Z+34	; 0x22
     8b8:	93 a1       	ldd	r25, Z+35	; 0x23
     8ba:	0e 94 18 0b 	call	0x1630	; 0x1630 <__addsf3>
     8be:	ad 81       	ldd	r26, Y+5	; 0x05
     8c0:	be 81       	ldd	r27, Y+6	; 0x06
     8c2:	90 96       	adiw	r26, 0x20	; 32
     8c4:	6d 93       	st	X+, r22
     8c6:	7d 93       	st	X+, r23
     8c8:	8d 93       	st	X+, r24
     8ca:	9c 93       	st	X, r25
     8cc:	93 97       	sbiw	r26, 0x23	; 35
	}
	
	
	// Same with the derivative
	if ( fabs((current_error-last_error)/time_elapsed) < 20 ){
     8ce:	a3 01       	movw	r20, r6
     8d0:	92 01       	movw	r18, r4
     8d2:	c7 01       	movw	r24, r14
     8d4:	b6 01       	movw	r22, r12
     8d6:	0e 94 17 0b 	call	0x162e	; 0x162e <__subsf3>
     8da:	4b 01       	movw	r8, r22
     8dc:	5c 01       	movw	r10, r24
     8de:	29 81       	ldd	r18, Y+1	; 0x01
     8e0:	3a 81       	ldd	r19, Y+2	; 0x02
     8e2:	4b 81       	ldd	r20, Y+3	; 0x03
     8e4:	5c 81       	ldd	r21, Y+4	; 0x04
     8e6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divsf3>
     8ea:	2b 01       	movw	r4, r22
     8ec:	3c 01       	movw	r6, r24
     8ee:	9f 77       	andi	r25, 0x7F	; 127
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 ea       	ldi	r20, 0xA0	; 160
     8f6:	51 e4       	ldi	r21, 0x41	; 65
     8f8:	0e 94 9f 0b 	call	0x173e	; 0x173e <__cmpsf2>
     8fc:	88 23       	and	r24, r24
     8fe:	34 f4       	brge	.+12     	; 0x90c <__stack+0xd>
		
		derivative = (current_error-last_error)/time_elapsed;
     900:	ed 81       	ldd	r30, Y+5	; 0x05
     902:	fe 81       	ldd	r31, Y+6	; 0x06
     904:	44 a2       	std	Z+36, r4	; 0x24
     906:	55 a2       	std	Z+37, r5	; 0x25
     908:	66 a2       	std	Z+38, r6	; 0x26
     90a:	77 a2       	std	Z+39, r7	; 0x27
	}
	
	
	// calculate the new output
	output = Kp*current_error + Ki*integral + Kd* (current_error-last_error)/time_elapsed;	
     90c:	ad 81       	ldd	r26, Y+5	; 0x05
     90e:	be 81       	ldd	r27, Y+6	; 0x06
     910:	90 96       	adiw	r26, 0x20	; 32
     912:	2d 91       	ld	r18, X+
     914:	3d 91       	ld	r19, X+
     916:	4d 91       	ld	r20, X+
     918:	5c 91       	ld	r21, X
     91a:	93 97       	sbiw	r26, 0x23	; 35
     91c:	58 96       	adiw	r26, 0x18	; 24
     91e:	6d 91       	ld	r22, X+
     920:	7d 91       	ld	r23, X+
     922:	8d 91       	ld	r24, X+
     924:	9c 91       	ld	r25, X
     926:	5b 97       	sbiw	r26, 0x1b	; 27
     928:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
     92c:	2b 01       	movw	r4, r22
     92e:	3c 01       	movw	r6, r24
     930:	ed 81       	ldd	r30, Y+5	; 0x05
     932:	fe 81       	ldd	r31, Y+6	; 0x06
     934:	24 89       	ldd	r18, Z+20	; 0x14
     936:	35 89       	ldd	r19, Z+21	; 0x15
     938:	46 89       	ldd	r20, Z+22	; 0x16
     93a:	57 89       	ldd	r21, Z+23	; 0x17
     93c:	c7 01       	movw	r24, r14
     93e:	b6 01       	movw	r22, r12
     940:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
     944:	9b 01       	movw	r18, r22
     946:	ac 01       	movw	r20, r24
     948:	c3 01       	movw	r24, r6
     94a:	b2 01       	movw	r22, r4
     94c:	0e 94 18 0b 	call	0x1630	; 0x1630 <__addsf3>
     950:	6b 01       	movw	r12, r22
     952:	7c 01       	movw	r14, r24
     954:	ad 81       	ldd	r26, Y+5	; 0x05
     956:	be 81       	ldd	r27, Y+6	; 0x06
     958:	5c 96       	adiw	r26, 0x1c	; 28
     95a:	2d 91       	ld	r18, X+
     95c:	3d 91       	ld	r19, X+
     95e:	4d 91       	ld	r20, X+
     960:	5c 91       	ld	r21, X
     962:	5f 97       	sbiw	r26, 0x1f	; 31
     964:	c5 01       	movw	r24, r10
     966:	b4 01       	movw	r22, r8
     968:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
     96c:	29 81       	ldd	r18, Y+1	; 0x01
     96e:	3a 81       	ldd	r19, Y+2	; 0x02
     970:	4b 81       	ldd	r20, Y+3	; 0x03
     972:	5c 81       	ldd	r21, Y+4	; 0x04
     974:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divsf3>
     978:	9b 01       	movw	r18, r22
     97a:	ac 01       	movw	r20, r24
     97c:	c7 01       	movw	r24, r14
     97e:	b6 01       	movw	r22, r12
     980:	0e 94 18 0b 	call	0x1630	; 0x1630 <__addsf3>
     984:	6b 01       	movw	r12, r22
     986:	7c 01       	movw	r14, r24
     988:	ed 81       	ldd	r30, Y+5	; 0x05
     98a:	fe 81       	ldd	r31, Y+6	; 0x06
     98c:	60 87       	std	Z+8, r22	; 0x08
     98e:	71 87       	std	Z+9, r23	; 0x09
     990:	82 87       	std	Z+10, r24	; 0x0a
     992:	93 87       	std	Z+11, r25	; 0x0b



	// checks wether output is maxed in either direction
	if (output < output_lower_limit){
     994:	80 a8       	ldd	r8, Z+48	; 0x30
     996:	91 a8       	ldd	r9, Z+49	; 0x31
     998:	a2 a8       	ldd	r10, Z+50	; 0x32
     99a:	b3 a8       	ldd	r11, Z+51	; 0x33
     99c:	a5 01       	movw	r20, r10
     99e:	94 01       	movw	r18, r8
     9a0:	0e 94 9f 0b 	call	0x173e	; 0x173e <__cmpsf2>
     9a4:	88 23       	and	r24, r24
     9a6:	4c f4       	brge	.+18     	; 0x9ba <__stack+0xbb>
		
		output = output_lower_limit;
     9a8:	ad 81       	ldd	r26, Y+5	; 0x05
     9aa:	be 81       	ldd	r27, Y+6	; 0x06
     9ac:	18 96       	adiw	r26, 0x08	; 8
     9ae:	8d 92       	st	X+, r8
     9b0:	9d 92       	st	X+, r9
     9b2:	ad 92       	st	X+, r10
     9b4:	bc 92       	st	X, r11
     9b6:	1b 97       	sbiw	r26, 0x0b	; 11
     9b8:	16 c0       	rjmp	.+44     	; 0x9e6 <__stack+0xe7>
	}
	
	else if (output > output_upper_limit){
     9ba:	ed 81       	ldd	r30, Y+5	; 0x05
     9bc:	fe 81       	ldd	r31, Y+6	; 0x06
     9be:	84 a4       	ldd	r8, Z+44	; 0x2c
     9c0:	95 a4       	ldd	r9, Z+45	; 0x2d
     9c2:	a6 a4       	ldd	r10, Z+46	; 0x2e
     9c4:	b7 a4       	ldd	r11, Z+47	; 0x2f
     9c6:	a5 01       	movw	r20, r10
     9c8:	94 01       	movw	r18, r8
     9ca:	c7 01       	movw	r24, r14
     9cc:	b6 01       	movw	r22, r12
     9ce:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__gesf2>
     9d2:	18 16       	cp	r1, r24
     9d4:	44 f4       	brge	.+16     	; 0x9e6 <__stack+0xe7>
		
		output = output_upper_limit;
     9d6:	ad 81       	ldd	r26, Y+5	; 0x05
     9d8:	be 81       	ldd	r27, Y+6	; 0x06
     9da:	18 96       	adiw	r26, 0x08	; 8
     9dc:	8d 92       	st	X+, r8
     9de:	9d 92       	st	X+, r9
     9e0:	ad 92       	st	X+, r10
     9e2:	bc 92       	st	X, r11
     9e4:	1b 97       	sbiw	r26, 0x0b	; 11
	}
	
		
		
			
	return output;
     9e6:	ed 81       	ldd	r30, Y+5	; 0x05
     9e8:	fe 81       	ldd	r31, Y+6	; 0x06
     9ea:	60 85       	ldd	r22, Z+8	; 0x08
     9ec:	71 85       	ldd	r23, Z+9	; 0x09
     9ee:	82 85       	ldd	r24, Z+10	; 0x0a
     9f0:	93 85       	ldd	r25, Z+11	; 0x0b
}
     9f2:	26 96       	adiw	r28, 0x06	; 6
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	de bf       	out	0x3e, r29	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	cd bf       	out	0x3d, r28	; 61
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	ff 90       	pop	r15
     a04:	ef 90       	pop	r14
     a06:	df 90       	pop	r13
     a08:	cf 90       	pop	r12
     a0a:	bf 90       	pop	r11
     a0c:	af 90       	pop	r10
     a0e:	9f 90       	pop	r9
     a10:	8f 90       	pop	r8
     a12:	7f 90       	pop	r7
     a14:	6f 90       	pop	r6
     a16:	5f 90       	pop	r5
     a18:	4f 90       	pop	r4
     a1a:	08 95       	ret

00000a1c <_ZN3PID12combine_dataEfff>:
	
}



void PID::combine_data(float bank_percentage, float pitch_percentage, float throttle_percentage){
     a1c:	4f 92       	push	r4
     a1e:	5f 92       	push	r5
     a20:	6f 92       	push	r6
     a22:	7f 92       	push	r7
     a24:	8f 92       	push	r8
     a26:	9f 92       	push	r9
     a28:	af 92       	push	r10
     a2a:	bf 92       	push	r11
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	4b 01       	movw	r8, r22
     a3e:	5c 01       	movw	r10, r24
     a40:	29 01       	movw	r4, r18
     a42:	3a 01       	movw	r6, r20
     a44:	67 01       	movw	r12, r14
     a46:	78 01       	movw	r14, r16

	//heavily depends on how the accelerometer and gyro are pointed and how the motors are plugged in.

	motor[0] = (int) (bank_percentage + pitch_percentage) * throttle_percentage / 200 ;
     a48:	c0 e1       	ldi	r28, 0x10	; 16
     a4a:	d1 e0       	ldi	r29, 0x01	; 1
     a4c:	0e 94 18 0b 	call	0x1630	; 0x1630 <__addsf3>
     a50:	0e 94 16 0c 	call	0x182c	; 0x182c <__fixsfsi>
     a54:	07 2e       	mov	r0, r23
     a56:	00 0c       	add	r0, r0
     a58:	88 0b       	sbc	r24, r24
     a5a:	99 0b       	sbc	r25, r25
     a5c:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatsisf>
     a60:	a7 01       	movw	r20, r14
     a62:	96 01       	movw	r18, r12
     a64:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	48 e4       	ldi	r20, 0x48	; 72
     a6e:	53 e4       	ldi	r21, 0x43	; 67
     a70:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divsf3>
     a74:	0e 94 16 0c 	call	0x182c	; 0x182c <__fixsfsi>
     a78:	79 83       	std	Y+1, r23	; 0x01
     a7a:	68 83       	st	Y, r22

	motor[1] = (int) (bank_percentage - pitch_percentage) * throttle_percentage / 200 ;
     a7c:	a3 01       	movw	r20, r6
     a7e:	92 01       	movw	r18, r4
     a80:	c5 01       	movw	r24, r10
     a82:	b4 01       	movw	r22, r8
     a84:	0e 94 17 0b 	call	0x162e	; 0x162e <__subsf3>
     a88:	0e 94 16 0c 	call	0x182c	; 0x182c <__fixsfsi>
     a8c:	07 2e       	mov	r0, r23
     a8e:	00 0c       	add	r0, r0
     a90:	88 0b       	sbc	r24, r24
     a92:	99 0b       	sbc	r25, r25
     a94:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatsisf>
     a98:	a7 01       	movw	r20, r14
     a9a:	96 01       	movw	r18, r12
     a9c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	48 e4       	ldi	r20, 0x48	; 72
     aa6:	53 e4       	ldi	r21, 0x43	; 67
     aa8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divsf3>
     aac:	0e 94 16 0c 	call	0x182c	; 0x182c <__fixsfsi>
     ab0:	7b 83       	std	Y+3, r23	; 0x03
     ab2:	6a 83       	std	Y+2, r22	; 0x02

	motor[2] = (int) (-bank_percentage + pitch_percentage) * throttle_percentage / 200;
     ab4:	a5 01       	movw	r20, r10
     ab6:	94 01       	movw	r18, r8
     ab8:	c3 01       	movw	r24, r6
     aba:	b2 01       	movw	r22, r4
     abc:	0e 94 17 0b 	call	0x162e	; 0x162e <__subsf3>
     ac0:	0e 94 16 0c 	call	0x182c	; 0x182c <__fixsfsi>
     ac4:	07 2e       	mov	r0, r23
     ac6:	00 0c       	add	r0, r0
     ac8:	88 0b       	sbc	r24, r24
     aca:	99 0b       	sbc	r25, r25
     acc:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatsisf>
     ad0:	a7 01       	movw	r20, r14
     ad2:	96 01       	movw	r18, r12
     ad4:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	48 e4       	ldi	r20, 0x48	; 72
     ade:	53 e4       	ldi	r21, 0x43	; 67
     ae0:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divsf3>
     ae4:	0e 94 16 0c 	call	0x182c	; 0x182c <__fixsfsi>
     ae8:	7d 83       	std	Y+5, r23	; 0x05
     aea:	6c 83       	std	Y+4, r22	; 0x04

	motor[3] = (int) (-bank_percentage - pitch_percentage) * throttle_percentage / 200;
     aec:	c5 01       	movw	r24, r10
     aee:	b4 01       	movw	r22, r8
     af0:	90 58       	subi	r25, 0x80	; 128
     af2:	a3 01       	movw	r20, r6
     af4:	92 01       	movw	r18, r4
     af6:	0e 94 17 0b 	call	0x162e	; 0x162e <__subsf3>
     afa:	0e 94 16 0c 	call	0x182c	; 0x182c <__fixsfsi>
     afe:	07 2e       	mov	r0, r23
     b00:	00 0c       	add	r0, r0
     b02:	88 0b       	sbc	r24, r24
     b04:	99 0b       	sbc	r25, r25
     b06:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatsisf>
     b0a:	a7 01       	movw	r20, r14
     b0c:	96 01       	movw	r18, r12
     b0e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	48 e4       	ldi	r20, 0x48	; 72
     b18:	53 e4       	ldi	r21, 0x43	; 67
     b1a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divsf3>
     b1e:	0e 94 16 0c 	call	0x182c	; 0x182c <__fixsfsi>
     b22:	7f 83       	std	Y+7, r23	; 0x07
     b24:	6e 83       	std	Y+6, r22	; 0x06

}
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	df 90       	pop	r13
     b34:	cf 90       	pop	r12
     b36:	bf 90       	pop	r11
     b38:	af 90       	pop	r10
     b3a:	9f 90       	pop	r9
     b3c:	8f 90       	pop	r8
     b3e:	7f 90       	pop	r7
     b40:	6f 90       	pop	r6
     b42:	5f 90       	pop	r5
     b44:	4f 90       	pop	r4
     b46:	08 95       	ret

00000b48 <_ZN18pilot_instructions13set_max_angleEh>:
}

int pilot_instructions::get_yaw_rate() const{

	return yaw_rate;
}
     b48:	fc 01       	movw	r30, r24
     b4a:	60 83       	st	Z, r22
     b4c:	08 95       	ret

00000b4e <_ZN18pilot_instructions16set_max_yaw_rateEh>:
     b4e:	fc 01       	movw	r30, r24
     b50:	61 83       	std	Z+1, r22	; 0x01
     b52:	08 95       	ret

00000b54 <_ZNK18pilot_instructions14get_bank_angleEv>:
     b54:	fc 01       	movw	r30, r24
     b56:	82 81       	ldd	r24, Z+2	; 0x02
     b58:	93 81       	ldd	r25, Z+3	; 0x03
     b5a:	08 95       	ret

00000b5c <_ZNK18pilot_instructions15get_pitch_angleEv>:
     b5c:	fc 01       	movw	r30, r24
     b5e:	84 81       	ldd	r24, Z+4	; 0x04
     b60:	95 81       	ldd	r25, Z+5	; 0x05
     b62:	08 95       	ret

00000b64 <_ZNK18pilot_instructions18get_throttle_powerEv>:


uint8_t pilot_instructions::get_throttle_power() const{

	return throttle_power;
}
     b64:	fc 01       	movw	r30, r24
     b66:	80 85       	ldd	r24, Z+8	; 0x08
     b68:	08 95       	ret

00000b6a <_ZN18pilot_instructions7computeEv>:



void pilot_instructions::compute(void){
     b6a:	4f 92       	push	r4
     b6c:	5f 92       	push	r5
     b6e:	6f 92       	push	r6
     b70:	7f 92       	push	r7
     b72:	8f 92       	push	r8
     b74:	9f 92       	push	r9
     b76:	af 92       	push	r10
     b78:	bf 92       	push	r11
     b7a:	cf 92       	push	r12
     b7c:	df 92       	push	r13
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	8c 01       	movw	r16, r24
	extern volatile uint16_t requested_throttle_pos;


	// 50% of the time the value read is actually the valley of the pwm, that is corrected here 

	if (requested_aileron_pos > 0x7000 ){
     b8c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <requested_aileron_pos>
     b90:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <requested_aileron_pos+0x1>
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	90 47       	sbci	r25, 0x70	; 112
     b98:	50 f0       	brcs	.+20     	; 0xbae <_ZN18pilot_instructions7computeEv+0x44>
			
		requested_aileron_pos = 0xffff - requested_aileron_pos;
     b9a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <requested_aileron_pos>
     b9e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <requested_aileron_pos+0x1>
     ba2:	80 95       	com	r24
     ba4:	90 95       	com	r25
     ba6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <requested_aileron_pos+0x1>
     baa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <requested_aileron_pos>
	}

	if (requested_elevator_pos > 0x7000 ){
     bae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <requested_elevator_pos>
     bb2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <requested_elevator_pos+0x1>
     bb6:	81 30       	cpi	r24, 0x01	; 1
     bb8:	90 47       	sbci	r25, 0x70	; 112
     bba:	50 f0       	brcs	.+20     	; 0xbd0 <_ZN18pilot_instructions7computeEv+0x66>
			
		requested_elevator_pos = 0xffff - requested_elevator_pos;
     bbc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <requested_elevator_pos>
     bc0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <requested_elevator_pos+0x1>
     bc4:	80 95       	com	r24
     bc6:	90 95       	com	r25
     bc8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <requested_elevator_pos+0x1>
     bcc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <requested_elevator_pos>
	}

	if (requested_rudder_pos > 0x7000 ){
     bd0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <requested_rudder_pos>
     bd4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <requested_rudder_pos+0x1>
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	90 47       	sbci	r25, 0x70	; 112
     bdc:	50 f0       	brcs	.+20     	; 0xbf2 <_ZN18pilot_instructions7computeEv+0x88>
			
		requested_rudder_pos = 0xffff - requested_rudder_pos;
     bde:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <requested_rudder_pos>
     be2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <requested_rudder_pos+0x1>
     be6:	80 95       	com	r24
     be8:	90 95       	com	r25
     bea:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <requested_rudder_pos+0x1>
     bee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <requested_rudder_pos>
	}

	if (requested_throttle_pos > 0x7000 ){
     bf2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <requested_throttle_pos>
     bf6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <requested_throttle_pos+0x1>
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	90 47       	sbci	r25, 0x70	; 112
     bfe:	50 f0       	brcs	.+20     	; 0xc14 <_ZN18pilot_instructions7computeEv+0xaa>
			
		requested_throttle_pos = 0xffff - requested_throttle_pos;
     c00:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <requested_throttle_pos>
     c04:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <requested_throttle_pos+0x1>
     c08:	80 95       	com	r24
     c0a:	90 95       	com	r25
     c0c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <requested_throttle_pos+0x1>
     c10:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <requested_throttle_pos>





	throttle_power = ((requested_throttle_pos - 1015) / 8);	// computes the percentage of the max the pilot wants
     c14:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <requested_throttle_pos>
     c18:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <requested_throttle_pos+0x1>
     c1c:	87 5f       	subi	r24, 0xF7	; 247
     c1e:	93 40       	sbci	r25, 0x03	; 3
     c20:	96 95       	lsr	r25
     c22:	87 95       	ror	r24
     c24:	96 95       	lsr	r25
     c26:	87 95       	ror	r24
     c28:	96 95       	lsr	r25
     c2a:	87 95       	ror	r24
     c2c:	f8 01       	movw	r30, r16
     c2e:	80 87       	std	Z+8, r24	; 0x08
	
	//yaw_rate = ( requested_rudder_pos / 6553 ) * max_yaw_rate;	// computes the percentage of the max the pilot wants
	
	
	float temp_pitch_angle = (requested_elevator_pos - 1110.f);	// computes the percentage of the max the pilot wants
     c30:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <requested_elevator_pos>
     c34:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <requested_elevator_pos+0x1>
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatunsisf>
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 ec       	ldi	r19, 0xC0	; 192
     c44:	4a e8       	ldi	r20, 0x8A	; 138
     c46:	54 e4       	ldi	r21, 0x44	; 68
     c48:	0e 94 17 0b 	call	0x162e	; 0x162e <__subsf3>
	temp_pitch_angle /= 800;
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	48 e4       	ldi	r20, 0x48	; 72
     c52:	54 e4       	ldi	r21, 0x44	; 68
     c54:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divsf3>
     c58:	4b 01       	movw	r8, r22
     c5a:	5c 01       	movw	r10, r24
	temp_pitch_angle *= 2 * max_angle;
     c5c:	f8 01       	movw	r30, r16
     c5e:	c0 81       	ld	r28, Z
     c60:	d0 e0       	ldi	r29, 0x00	; 0
     c62:	be 01       	movw	r22, r28
     c64:	66 0f       	add	r22, r22
     c66:	77 1f       	adc	r23, r23
     c68:	07 2e       	mov	r0, r23
     c6a:	00 0c       	add	r0, r0
     c6c:	88 0b       	sbc	r24, r24
     c6e:	99 0b       	sbc	r25, r25
     c70:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatsisf>
     c74:	6b 01       	movw	r12, r22
     c76:	7c 01       	movw	r14, r24
     c78:	9b 01       	movw	r18, r22
     c7a:	ac 01       	movw	r20, r24
     c7c:	c5 01       	movw	r24, r10
     c7e:	b4 01       	movw	r22, r8
     c80:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
     c84:	4b 01       	movw	r8, r22
     c86:	5c 01       	movw	r10, r24
	temp_pitch_angle -= max_angle;
     c88:	be 01       	movw	r22, r28
     c8a:	dd 0f       	add	r29, r29
     c8c:	88 0b       	sbc	r24, r24
     c8e:	99 0b       	sbc	r25, r25
     c90:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatsisf>
     c94:	2b 01       	movw	r4, r22
     c96:	3c 01       	movw	r6, r24
	pitch_angle = (int) temp_pitch_angle;
     c98:	9b 01       	movw	r18, r22
     c9a:	ac 01       	movw	r20, r24
     c9c:	c5 01       	movw	r24, r10
     c9e:	b4 01       	movw	r22, r8
     ca0:	0e 94 17 0b 	call	0x162e	; 0x162e <__subsf3>
     ca4:	0e 94 16 0c 	call	0x182c	; 0x182c <__fixsfsi>
     ca8:	f8 01       	movw	r30, r16
     caa:	75 83       	std	Z+5, r23	; 0x05
     cac:	64 83       	std	Z+4, r22	; 0x04
	
	

	float temp_bank_angle = (requested_aileron_pos - 1120.f);	// computes the percentage of the max the pilot wants
     cae:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <requested_aileron_pos>
     cb2:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <requested_aileron_pos+0x1>
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatunsisf>
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	4c e8       	ldi	r20, 0x8C	; 140
     cc4:	54 e4       	ldi	r21, 0x44	; 68
     cc6:	0e 94 17 0b 	call	0x162e	; 0x162e <__subsf3>
	temp_bank_angle /= 800;
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	48 e4       	ldi	r20, 0x48	; 72
     cd0:	54 e4       	ldi	r21, 0x44	; 68
     cd2:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divsf3>
     cd6:	9b 01       	movw	r18, r22
     cd8:	ac 01       	movw	r20, r24
	temp_bank_angle *= 2 * max_angle;
     cda:	c7 01       	movw	r24, r14
     cdc:	b6 01       	movw	r22, r12
     cde:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
	temp_bank_angle -= max_angle;
	bank_angle = (int) temp_bank_angle + 2;
     ce2:	a3 01       	movw	r20, r6
     ce4:	92 01       	movw	r18, r4
     ce6:	0e 94 17 0b 	call	0x162e	; 0x162e <__subsf3>
     cea:	0e 94 16 0c 	call	0x182c	; 0x182c <__fixsfsi>
     cee:	6e 5f       	subi	r22, 0xFE	; 254
     cf0:	7f 4f       	sbci	r23, 0xFF	; 255
     cf2:	f8 01       	movw	r30, r16
     cf4:	73 83       	std	Z+3, r23	; 0x03
     cf6:	62 83       	std	Z+2, r22	; 0x02

     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	bf 90       	pop	r11
     d0a:	af 90       	pop	r10
     d0c:	9f 90       	pop	r9
     d0e:	8f 90       	pop	r8
     d10:	7f 90       	pop	r7
     d12:	6f 90       	pop	r6
     d14:	5f 90       	pop	r5
     d16:	4f 90       	pop	r4
     d18:	08 95       	ret

00000d1a <_ZN8pwm_chipC1E9I2C_328pbh>:
#include "pwm_chip.h"



pwm_chip::pwm_chip(I2C_328pb i2c, uint8_t prescaler){
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	1f 92       	push	r1
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	69 83       	std	Y+1, r22	; 0x01
     d28:	14 2f       	mov	r17, r20
	
	
	DDRB |= (1 << 2);	// set OE to 0;
     d2a:	22 9a       	sbi	0x04, 2	; 4
	//This function sets the auto increment, the prescaler and any other necessary feature required for the pwm chip to run 

	//TWBR0 = (1 << 1); // I'll run the cpu at 1 MHz, this divides the value by 2 for 50 KHZ


	i2c.start();
     d2c:	ce 01       	movw	r24, r28
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     d34:	6e e9       	ldi	r22, 0x9E	; 158
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	ce 01       	movw	r24, r28
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x0); // mode register 1
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	ce 01       	movw	r24, r28
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x21); //clock on, autoincrement enable
     d4c:	61 e2       	ldi	r22, 0x21	; 33
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	ce 01       	movw	r24, r28
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
     d58:	ce 01       	movw	r24, r28
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0x9E);
     d60:	6e e9       	ldi	r22, 0x9E	; 158
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	ce 01       	movw	r24, r28
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0xFE);	//pre scale register
     d6c:	6e ef       	ldi	r22, 0xFE	; 254
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	ce 01       	movw	r24, r28
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN9I2C_328pb8send_regEi>
	i2c.send(prescaler);	//prescaler
     d78:	61 2f       	mov	r22, r17
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	ce 01       	movw	r24, r28
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     d84:	ce 01       	movw	r24, r28
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	0e 94 18 03 	call	0x630	; 0x630 <_ZN9I2C_328pb4stopEv>

}
     d8c:	0f 90       	pop	r0
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	08 95       	ret

00000d96 <_ZN8pwm_chip13encode_motorsEhPiPh>:

}

void pwm_chip::encode_motors(uint8_t motor, int* motors, uint8_t* instruction){
	
	uint16_t temp = motors[motor]*2;	// the actualslope of this curve is 2.05
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	66 0f       	add	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	fa 01       	movw	r30, r20
     d9e:	e6 0f       	add	r30, r22
     da0:	f7 1f       	adc	r31, r23
     da2:	80 81       	ld	r24, Z
     da4:	91 81       	ldd	r25, Z+1	; 0x01
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
	
	temp += 205;	// 205 is the value corresponding to 0 for the esc
     daa:	83 53       	subi	r24, 0x33	; 51
     dac:	9f 4f       	sbci	r25, 0xFF	; 255
	
	instruction[0] = ( temp & 0xff );	// conserves only the low byte
     dae:	f9 01       	movw	r30, r18
     db0:	80 83       	st	Z, r24
	
	instruction[1] = ( temp >> 8);	// conserves only the high half-byte
     db2:	91 83       	std	Z+1, r25	; 0x01
     db4:	08 95       	ret

00000db6 <_ZN8pwm_chip4passE9I2C_328pbPi>:
}




void pwm_chip::pass(I2C_328pb i2c, int* motors){
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <_ZN8pwm_chip4passE9I2C_328pbPi+0xe>
     dc4:	1f 92       	push	r1
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	8c 01       	movw	r16, r24
     dcc:	6b 83       	std	Y+3, r22	; 0x03
     dce:	7a 01       	movw	r14, r20

// this function will communicate over I2C to the pwmchip for final controll of the motors

	uint8_t instruction[2];
	
	encode_motors(0, motors, instruction);
     dd0:	9e 01       	movw	r18, r28
     dd2:	2f 5f       	subi	r18, 0xFF	; 255
     dd4:	3f 4f       	sbci	r19, 0xFF	; 255
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN8pwm_chip13encode_motorsEhPiPh>

	i2c.start();
     ddc:	ce 01       	movw	r24, r28
     dde:	03 96       	adiw	r24, 0x03	; 3
     de0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     de4:	6e e9       	ldi	r22, 0x9E	; 158
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	ce 01       	movw	r24, r28
     dea:	03 96       	adiw	r24, 0x03	; 3
     dec:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x06);		//LED0_ON_L
     df0:	66 e0       	ldi	r22, 0x06	; 6
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	ce 01       	movw	r24, r28
     df6:	03 96       	adiw	r24, 0x03	; 3
     df8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	ce 01       	movw	r24, r28
     e02:	03 96       	adiw	r24, 0x03	; 3
     e04:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	ce 01       	movw	r24, r28
     e0e:	03 96       	adiw	r24, 0x03	; 3
     e10:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     e14:	69 81       	ldd	r22, Y+1	; 0x01
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	ce 01       	movw	r24, r28
     e1a:	03 96       	adiw	r24, 0x03	; 3
     e1c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
     e20:	6a 81       	ldd	r22, Y+2	; 0x02
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	ce 01       	movw	r24, r28
     e26:	03 96       	adiw	r24, 0x03	; 3
     e28:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     e2c:	ce 01       	movw	r24, r28
     e2e:	03 96       	adiw	r24, 0x03	; 3
     e30:	0e 94 18 03 	call	0x630	; 0x630 <_ZN9I2C_328pb4stopEv>


	encode_motors(1, motors, instruction);
     e34:	9e 01       	movw	r18, r28
     e36:	2f 5f       	subi	r18, 0xFF	; 255
     e38:	3f 4f       	sbci	r19, 0xFF	; 255
     e3a:	a7 01       	movw	r20, r14
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	c8 01       	movw	r24, r16
     e40:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN8pwm_chip13encode_motorsEhPiPh>
	

	i2c.start();
     e44:	ce 01       	movw	r24, r28
     e46:	03 96       	adiw	r24, 0x03	; 3
     e48:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     e4c:	6e e9       	ldi	r22, 0x9E	; 158
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	ce 01       	movw	r24, r28
     e52:	03 96       	adiw	r24, 0x03	; 3
     e54:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x16);		//LED4_ON_L
     e58:	66 e1       	ldi	r22, 0x16	; 22
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	ce 01       	movw	r24, r28
     e5e:	03 96       	adiw	r24, 0x03	; 3
     e60:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	ce 01       	movw	r24, r28
     e6a:	03 96       	adiw	r24, 0x03	; 3
     e6c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	ce 01       	movw	r24, r28
     e76:	03 96       	adiw	r24, 0x03	; 3
     e78:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     e7c:	69 81       	ldd	r22, Y+1	; 0x01
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	ce 01       	movw	r24, r28
     e82:	03 96       	adiw	r24, 0x03	; 3
     e84:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
     e88:	6a 81       	ldd	r22, Y+2	; 0x02
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	ce 01       	movw	r24, r28
     e8e:	03 96       	adiw	r24, 0x03	; 3
     e90:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     e94:	ce 01       	movw	r24, r28
     e96:	03 96       	adiw	r24, 0x03	; 3
     e98:	0e 94 18 03 	call	0x630	; 0x630 <_ZN9I2C_328pb4stopEv>

	
	encode_motors(2, motors, instruction);
     e9c:	9e 01       	movw	r18, r28
     e9e:	2f 5f       	subi	r18, 0xFF	; 255
     ea0:	3f 4f       	sbci	r19, 0xFF	; 255
     ea2:	a7 01       	movw	r20, r14
     ea4:	62 e0       	ldi	r22, 0x02	; 2
     ea6:	c8 01       	movw	r24, r16
     ea8:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN8pwm_chip13encode_motorsEhPiPh>



	i2c.start();
     eac:	ce 01       	movw	r24, r28
     eae:	03 96       	adiw	r24, 0x03	; 3
     eb0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     eb4:	6e e9       	ldi	r22, 0x9E	; 158
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	ce 01       	movw	r24, r28
     eba:	03 96       	adiw	r24, 0x03	; 3
     ebc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x2E);		//LED8_ON_L
     ec0:	6e e2       	ldi	r22, 0x2E	; 46
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	ce 01       	movw	r24, r28
     ec6:	03 96       	adiw	r24, 0x03	; 3
     ec8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	ce 01       	movw	r24, r28
     ed2:	03 96       	adiw	r24, 0x03	; 3
     ed4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	ce 01       	movw	r24, r28
     ede:	03 96       	adiw	r24, 0x03	; 3
     ee0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     ee4:	69 81       	ldd	r22, Y+1	; 0x01
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	ce 01       	movw	r24, r28
     eea:	03 96       	adiw	r24, 0x03	; 3
     eec:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
     ef0:	6a 81       	ldd	r22, Y+2	; 0x02
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	ce 01       	movw	r24, r28
     ef6:	03 96       	adiw	r24, 0x03	; 3
     ef8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     efc:	ce 01       	movw	r24, r28
     efe:	03 96       	adiw	r24, 0x03	; 3
     f00:	0e 94 18 03 	call	0x630	; 0x630 <_ZN9I2C_328pb4stopEv>



	encode_motors(3, motors, instruction);
     f04:	9e 01       	movw	r18, r28
     f06:	2f 5f       	subi	r18, 0xFF	; 255
     f08:	3f 4f       	sbci	r19, 0xFF	; 255
     f0a:	a7 01       	movw	r20, r14
     f0c:	63 e0       	ldi	r22, 0x03	; 3
     f0e:	c8 01       	movw	r24, r16
     f10:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN8pwm_chip13encode_motorsEhPiPh>


	i2c.start();
     f14:	ce 01       	movw	r24, r28
     f16:	03 96       	adiw	r24, 0x03	; 3
     f18:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     f1c:	6e e9       	ldi	r22, 0x9E	; 158
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	ce 01       	movw	r24, r28
     f22:	03 96       	adiw	r24, 0x03	; 3
     f24:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x42);		//LED8_ON_L
     f28:	62 e4       	ldi	r22, 0x42	; 66
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	ce 01       	movw	r24, r28
     f2e:	03 96       	adiw	r24, 0x03	; 3
     f30:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	ce 01       	movw	r24, r28
     f3a:	03 96       	adiw	r24, 0x03	; 3
     f3c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	ce 01       	movw	r24, r28
     f46:	03 96       	adiw	r24, 0x03	; 3
     f48:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     f4c:	69 81       	ldd	r22, Y+1	; 0x01
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	ce 01       	movw	r24, r28
     f52:	03 96       	adiw	r24, 0x03	; 3
     f54:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
     f58:	6a 81       	ldd	r22, Y+2	; 0x02
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	ce 01       	movw	r24, r28
     f5e:	03 96       	adiw	r24, 0x03	; 3
     f60:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     f64:	ce 01       	movw	r24, r28
     f66:	03 96       	adiw	r24, 0x03	; 3
     f68:	0e 94 18 03 	call	0x630	; 0x630 <_ZN9I2C_328pb4stopEv>


}
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	ff 90       	pop	r15
     f7c:	ef 90       	pop	r14
     f7e:	08 95       	ret

00000f80 <_ZN7sensorsC1E9I2C_328pb>:
#include "sensors.h"



sensors::sensors(I2C_328pb i2c){
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	1f 92       	push	r1
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	8c 01       	movw	r16, r24
     f90:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
     f92:	ce 01       	movw	r24, r28
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x32);	// acc slave + w
     f9a:	62 e3       	ldi	r22, 0x32	; 50
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	ce 01       	movw	r24, r28
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0xA0);	// Control register 1 + autoincrement
     fa6:	60 ea       	ldi	r22, 0xA0	; 160
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	ce 01       	movw	r24, r28
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x67);	// all axis enable data refresh rate is 200Hz
     fb2:	67 e6       	ldi	r22, 0x67	; 103
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	ce 01       	movw	r24, r28
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(0x0);	// CR2 default values
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	ce 01       	movw	r24, r28
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(0x0);	// CR3 default values
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	ce 01       	movw	r24, r28
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(0x10);	// CR4  +- 4g and 8mg/digit, The value 32767 corresponds to 4 g's
     fd6:	60 e1       	ldi	r22, 0x10	; 16
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	ce 01       	movw	r24, r28
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     fe2:	ce 01       	movw	r24, r28
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	0e 94 18 03 	call	0x630	; 0x630 <_ZN9I2C_328pb4stopEv>
	

////////////////////////////// accelerometer init above and gyro init below

	i2c.start();
     fea:	ce 01       	movw	r24, r28
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0xD6); // gyro slave + w
     ff2:	66 ed       	ldi	r22, 0xD6	; 214
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	ce 01       	movw	r24, r28
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x20);	// Control register 1
     ffe:	60 e2       	ldi	r22, 0x20	; 32
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	ce 01       	movw	r24, r28
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x0F);	// all axis enable data refresh rate is 100Hz (a lot of other params also affected)
    100a:	6f e0       	ldi	r22, 0x0F	; 15
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	ce 01       	movw	r24, r28
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
    1016:	ce 01       	movw	r24, r28
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	0e 94 18 03 	call	0x630	; 0x630 <_ZN9I2C_328pb4stopEv>

			// default sensitivity is 8.75 mdps/digit
			
			
	pitch = 0.f;
    101e:	f8 01       	movw	r30, r16
    1020:	14 86       	std	Z+12, r1	; 0x0c
    1022:	15 86       	std	Z+13, r1	; 0x0d
    1024:	16 86       	std	Z+14, r1	; 0x0e
    1026:	17 86       	std	Z+15, r1	; 0x0f
	roll = 0.f;
    1028:	10 8a       	std	Z+16, r1	; 0x10
    102a:	11 8a       	std	Z+17, r1	; 0x11
    102c:	12 8a       	std	Z+18, r1	; 0x12
    102e:	13 8a       	std	Z+19, r1	; 0x13
	yaw_rate = 0.f;
    1030:	14 8a       	std	Z+20, r1	; 0x14
    1032:	15 8a       	std	Z+21, r1	; 0x15
    1034:	16 8a       	std	Z+22, r1	; 0x16
    1036:	17 8a       	std	Z+23, r1	; 0x17

	time_of_previous_scan = TCNT1;
    1038:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    103c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1040:	91 8f       	std	Z+25, r25	; 0x19
    1042:	80 8f       	std	Z+24, r24	; 0x18

}
    1044:	0f 90       	pop	r0
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	08 95       	ret

00001050 <_ZN7sensors8read_accE9I2C_328pb>:



void sensors::read_acc(I2C_328pb i2c){
    1050:	ef 92       	push	r14
    1052:	ff 92       	push	r15
    1054:	0f 93       	push	r16
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	1f 92       	push	r1
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	8c 01       	movw	r16, r24
    1064:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
    1066:	ce 01       	movw	r24, r28
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x32);	// acc slave + w
    106e:	62 e3       	ldi	r22, 0x32	; 50
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	ce 01       	movw	r24, r28
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN9I2C_328pb10send_slaveEi>
	i2c.send(0xA8);	// X_low +auto increment
    107a:	68 ea       	ldi	r22, 0xA8	; 168
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	ce 01       	movw	r24, r28
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
    1086:	ce 01       	movw	r24, r28
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0x33);	// acc slave + r
    108e:	63 e3       	ldi	r22, 0x33	; 51
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	ce 01       	movw	r24, r28
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN9I2C_328pb10send_slaveEi>

	i2c.get_next_byte();
    109a:	ce 01       	movw	r24, r28
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN9I2C_328pb13get_next_byteEv>
	acc_x_data = TWDR0;	// read low byte
    10a2:	0f 2e       	mov	r0, r31
    10a4:	fb eb       	ldi	r31, 0xBB	; 187
    10a6:	ef 2e       	mov	r14, r31
    10a8:	f1 2c       	mov	r15, r1
    10aa:	f0 2d       	mov	r31, r0
    10ac:	f7 01       	movw	r30, r14
    10ae:	80 81       	ld	r24, Z
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	f8 01       	movw	r30, r16
    10b4:	91 83       	std	Z+1, r25	; 0x01
    10b6:	80 83       	st	Z, r24
	i2c.get_next_byte();
    10b8:	ce 01       	movw	r24, r28
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN9I2C_328pb13get_next_byteEv>
	acc_x_data |= (TWDR0 << 8);	// read high byte
    10c0:	f7 01       	movw	r30, r14
    10c2:	20 81       	ld	r18, Z
    10c4:	f8 01       	movw	r30, r16
    10c6:	80 81       	ld	r24, Z
    10c8:	91 81       	ldd	r25, Z+1	; 0x01
    10ca:	92 2b       	or	r25, r18
    10cc:	91 83       	std	Z+1, r25	; 0x01
    10ce:	80 83       	st	Z, r24
	i2c.get_next_byte();
    10d0:	ce 01       	movw	r24, r28
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN9I2C_328pb13get_next_byteEv>


	acc_y_data = TWDR0;	// read low byte
    10d8:	f7 01       	movw	r30, r14
    10da:	80 81       	ld	r24, Z
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	f8 01       	movw	r30, r16
    10e0:	93 83       	std	Z+3, r25	; 0x03
    10e2:	82 83       	std	Z+2, r24	; 0x02
	i2c.get_next_byte();
    10e4:	ce 01       	movw	r24, r28
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN9I2C_328pb13get_next_byteEv>
	acc_y_data |= (TWDR0 << 8);	// read high byte
    10ec:	f7 01       	movw	r30, r14
    10ee:	20 81       	ld	r18, Z
    10f0:	f8 01       	movw	r30, r16
    10f2:	82 81       	ldd	r24, Z+2	; 0x02
    10f4:	93 81       	ldd	r25, Z+3	; 0x03
    10f6:	92 2b       	or	r25, r18
    10f8:	93 83       	std	Z+3, r25	; 0x03
    10fa:	82 83       	std	Z+2, r24	; 0x02
	i2c.get_next_byte();
    10fc:	ce 01       	movw	r24, r28
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN9I2C_328pb13get_next_byteEv>


	acc_z_data = TWDR0;	// read low byte
    1104:	f7 01       	movw	r30, r14
    1106:	80 81       	ld	r24, Z
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	f8 01       	movw	r30, r16
    110c:	95 83       	std	Z+5, r25	; 0x05
    110e:	84 83       	std	Z+4, r24	; 0x04
	i2c.get_next_byte();
    1110:	ce 01       	movw	r24, r28
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN9I2C_328pb13get_next_byteEv>
	acc_z_data |= (TWDR0 << 8);	// read high byte
    1118:	f7 01       	movw	r30, r14
    111a:	20 81       	ld	r18, Z
    111c:	f8 01       	movw	r30, r16
    111e:	84 81       	ldd	r24, Z+4	; 0x04
    1120:	95 81       	ldd	r25, Z+5	; 0x05
    1122:	92 2b       	or	r25, r18
    1124:	95 83       	std	Z+5, r25	; 0x05
    1126:	84 83       	std	Z+4, r24	; 0x04


	i2c.end_data_read();
    1128:	ce 01       	movw	r24, r28
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN9I2C_328pb13end_data_readEv>
	i2c.stop();
    1130:	ce 01       	movw	r24, r28
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	0e 94 18 03 	call	0x630	; 0x630 <_ZN9I2C_328pb4stopEv>
}
    1138:	0f 90       	pop	r0
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	08 95       	ret

00001148 <_ZN7sensors9read_gyroE9I2C_328pb>:

void sensors::read_gyro(I2C_328pb i2c){
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	1f 92       	push	r1
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	8c 01       	movw	r16, r24
    115c:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
    115e:	ce 01       	movw	r24, r28
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0xD6);	// gyro slave + w
    1166:	66 ed       	ldi	r22, 0xD6	; 214
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	ce 01       	movw	r24, r28
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN9I2C_328pb10send_slaveEi>
	i2c.send(0xA8);	// X_low +auto increment
    1172:	68 ea       	ldi	r22, 0xA8	; 168
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	ce 01       	movw	r24, r28
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
    117e:	ce 01       	movw	r24, r28
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0xD7);	// gyro slave + r
    1186:	67 ed       	ldi	r22, 0xD7	; 215
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	ce 01       	movw	r24, r28
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN9I2C_328pb10send_slaveEi>

	i2c.get_next_byte();
    1192:	ce 01       	movw	r24, r28
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN9I2C_328pb13get_next_byteEv>
	gyro_x_data = TWDR0;	// read low byte
    119a:	0f 2e       	mov	r0, r31
    119c:	fb eb       	ldi	r31, 0xBB	; 187
    119e:	ef 2e       	mov	r14, r31
    11a0:	f1 2c       	mov	r15, r1
    11a2:	f0 2d       	mov	r31, r0
    11a4:	f7 01       	movw	r30, r14
    11a6:	80 81       	ld	r24, Z
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	f8 01       	movw	r30, r16
    11ac:	97 83       	std	Z+7, r25	; 0x07
    11ae:	86 83       	std	Z+6, r24	; 0x06
	i2c.get_next_byte();
    11b0:	ce 01       	movw	r24, r28
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN9I2C_328pb13get_next_byteEv>
	gyro_x_data |= (TWDR0 << 8);	// read high byte
    11b8:	f7 01       	movw	r30, r14
    11ba:	20 81       	ld	r18, Z
    11bc:	f8 01       	movw	r30, r16
    11be:	86 81       	ldd	r24, Z+6	; 0x06
    11c0:	97 81       	ldd	r25, Z+7	; 0x07
    11c2:	92 2b       	or	r25, r18
    11c4:	97 83       	std	Z+7, r25	; 0x07
    11c6:	86 83       	std	Z+6, r24	; 0x06
	i2c.get_next_byte();
    11c8:	ce 01       	movw	r24, r28
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN9I2C_328pb13get_next_byteEv>


	gyro_y_data = TWDR0;	// read low byte
    11d0:	f7 01       	movw	r30, r14
    11d2:	80 81       	ld	r24, Z
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	f8 01       	movw	r30, r16
    11d8:	91 87       	std	Z+9, r25	; 0x09
    11da:	80 87       	std	Z+8, r24	; 0x08
	i2c.get_next_byte();
    11dc:	ce 01       	movw	r24, r28
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN9I2C_328pb13get_next_byteEv>
	gyro_y_data |= (TWDR0 << 8);	// read high byte
    11e4:	f7 01       	movw	r30, r14
    11e6:	20 81       	ld	r18, Z
    11e8:	f8 01       	movw	r30, r16
    11ea:	80 85       	ldd	r24, Z+8	; 0x08
    11ec:	91 85       	ldd	r25, Z+9	; 0x09
    11ee:	92 2b       	or	r25, r18
    11f0:	91 87       	std	Z+9, r25	; 0x09
    11f2:	80 87       	std	Z+8, r24	; 0x08
	i2c.get_next_byte();
    11f4:	ce 01       	movw	r24, r28
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN9I2C_328pb13get_next_byteEv>

  
	gyro_z_data = TWDR0;	// read low byte
    11fc:	f7 01       	movw	r30, r14
    11fe:	80 81       	ld	r24, Z
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	f8 01       	movw	r30, r16
    1204:	93 87       	std	Z+11, r25	; 0x0b
    1206:	82 87       	std	Z+10, r24	; 0x0a
	i2c.get_next_byte();
    1208:	ce 01       	movw	r24, r28
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	0e 94 06 03 	call	0x60c	; 0x60c <_ZN9I2C_328pb13get_next_byteEv>
	gyro_z_data |= (TWDR0 << 8);	// read high byte
    1210:	f7 01       	movw	r30, r14
    1212:	20 81       	ld	r18, Z
    1214:	f8 01       	movw	r30, r16
    1216:	82 85       	ldd	r24, Z+10	; 0x0a
    1218:	93 85       	ldd	r25, Z+11	; 0x0b
    121a:	92 2b       	or	r25, r18
    121c:	93 87       	std	Z+11, r25	; 0x0b
    121e:	82 87       	std	Z+10, r24	; 0x0a

	i2c.end_data_read();
    1220:	ce 01       	movw	r24, r28
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	0e 94 0f 03 	call	0x61e	; 0x61e <_ZN9I2C_328pb13end_data_readEv>
	i2c.stop();
    1228:	ce 01       	movw	r24, r28
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	0e 94 18 03 	call	0x630	; 0x630 <_ZN9I2C_328pb4stopEv>
}
    1230:	0f 90       	pop	r0
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	08 95       	ret

00001240 <_ZN7sensors8get_timeEv>:


}


float sensors:: get_time(){
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	00 d0       	rcall	.+0      	; 0x124e <_ZN7sensors8get_timeEv+0xe>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <_ZN7sensors8get_timeEv+0x10>
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	8c 01       	movw	r16, r24

	uint16_t time = TCNT1;
    1256:	e4 e8       	ldi	r30, 0x84	; 132
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	e0 80       	ld	r14, Z
    125c:	f1 80       	ldd	r15, Z+1	; 0x01
	
	volatile float result;
	

	if (TCNT1 < time_of_previous_scan){
    125e:	20 81       	ld	r18, Z
    1260:	31 81       	ldd	r19, Z+1	; 0x01
    1262:	fc 01       	movw	r30, r24
    1264:	80 8d       	ldd	r24, Z+24	; 0x18
    1266:	91 8d       	ldd	r25, Z+25	; 0x19
    1268:	28 17       	cp	r18, r24
    126a:	39 07       	cpc	r19, r25
    126c:	70 f4       	brcc	.+28     	; 0x128a <_ZN7sensors8get_timeEv+0x4a>

		result = 0xffff - time_of_previous_scan + time ;
    126e:	b7 01       	movw	r22, r14
    1270:	61 50       	subi	r22, 0x01	; 1
    1272:	71 09       	sbc	r23, r1
    1274:	68 1b       	sub	r22, r24
    1276:	79 0b       	sbc	r23, r25
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatunsisf>
    1280:	69 83       	std	Y+1, r22	; 0x01
    1282:	7a 83       	std	Y+2, r23	; 0x02
    1284:	8b 83       	std	Y+3, r24	; 0x03
    1286:	9c 83       	std	Y+4, r25	; 0x04
    1288:	0b c0       	rjmp	.+22     	; 0x12a0 <_ZN7sensors8get_timeEv+0x60>

	}

	else{

		result = time - time_of_previous_scan;
    128a:	b7 01       	movw	r22, r14
    128c:	68 1b       	sub	r22, r24
    128e:	79 0b       	sbc	r23, r25
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatunsisf>
    1298:	69 83       	std	Y+1, r22	; 0x01
    129a:	7a 83       	std	Y+2, r23	; 0x02
    129c:	8b 83       	std	Y+3, r24	; 0x03
    129e:	9c 83       	std	Y+4, r25	; 0x04
	}


	result /= (float)TIMER_BIT_RATE;
    12a0:	69 81       	ldd	r22, Y+1	; 0x01
    12a2:	7a 81       	ldd	r23, Y+2	; 0x02
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	34 e2       	ldi	r19, 0x24	; 36
    12ac:	44 e7       	ldi	r20, 0x74	; 116
    12ae:	59 e4       	ldi	r21, 0x49	; 73
    12b0:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divsf3>
    12b4:	69 83       	std	Y+1, r22	; 0x01
    12b6:	7a 83       	std	Y+2, r23	; 0x02
    12b8:	8b 83       	std	Y+3, r24	; 0x03
    12ba:	9c 83       	std	Y+4, r25	; 0x04

	time_of_previous_scan = time;
    12bc:	f8 01       	movw	r30, r16
    12be:	f1 8e       	std	Z+25, r15	; 0x19
    12c0:	e0 8e       	std	Z+24, r14	; 0x18

	return result;
    12c2:	69 81       	ldd	r22, Y+1	; 0x01
    12c4:	7a 81       	ldd	r23, Y+2	; 0x02
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04


}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	ff 90       	pop	r15
    12dc:	ef 90       	pop	r14
    12de:	08 95       	ret

000012e0 <_ZN7sensors16compute_positionEv>:
}




void sensors::compute_position(){
    12e0:	4f 92       	push	r4
    12e2:	5f 92       	push	r5
    12e4:	6f 92       	push	r6
    12e6:	7f 92       	push	r7
    12e8:	8f 92       	push	r8
    12ea:	9f 92       	push	r9
    12ec:	af 92       	push	r10
    12ee:	bf 92       	push	r11
    12f0:	cf 92       	push	r12
    12f2:	df 92       	push	r13
    12f4:	ef 92       	push	r14
    12f6:	ff 92       	push	r15
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	64 97       	sbiw	r28, 0x14	; 20
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	8c 01       	movw	r16, r24

	volatile float R;	// what the accelerometer thinks the total acceleration is
	volatile float trust_factor; // to what degree do I trust the accelerometer's readings
	const float time_between_measurements = get_time();
    1312:	0e 94 20 09 	call	0x1240	; 0x1240 <_ZN7sensors8get_timeEv>
    1316:	6b 01       	movw	r12, r22
    1318:	7c 01       	movw	r14, r24
 
	
	pitch += (gyro_y_data * GYRO_SENSITIVITY * time_between_measurements);
    131a:	f8 01       	movw	r30, r16
    131c:	60 85       	ldd	r22, Z+8	; 0x08
    131e:	71 85       	ldd	r23, Z+9	; 0x09
    1320:	07 2e       	mov	r0, r23
    1322:	00 0c       	add	r0, r0
    1324:	88 0b       	sbc	r24, r24
    1326:	99 0b       	sbc	r25, r25
    1328:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatsisf>
    132c:	29 e2       	ldi	r18, 0x29	; 41
    132e:	3c e5       	ldi	r19, 0x5C	; 92
    1330:	4f e0       	ldi	r20, 0x0F	; 15
    1332:	5c e3       	ldi	r21, 0x3C	; 60
    1334:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
    1338:	a7 01       	movw	r20, r14
    133a:	96 01       	movw	r18, r12
    133c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
    1340:	f8 01       	movw	r30, r16
    1342:	24 85       	ldd	r18, Z+12	; 0x0c
    1344:	35 85       	ldd	r19, Z+13	; 0x0d
    1346:	46 85       	ldd	r20, Z+14	; 0x0e
    1348:	57 85       	ldd	r21, Z+15	; 0x0f
    134a:	0e 94 18 0b 	call	0x1630	; 0x1630 <__addsf3>
    134e:	4b 01       	movw	r8, r22
    1350:	5c 01       	movw	r10, r24
    1352:	f8 01       	movw	r30, r16
    1354:	64 87       	std	Z+12, r22	; 0x0c
    1356:	75 87       	std	Z+13, r23	; 0x0d
    1358:	86 87       	std	Z+14, r24	; 0x0e
    135a:	97 87       	std	Z+15, r25	; 0x0f
	roll += (gyro_x_data * GYRO_SENSITIVITY * time_between_measurements);
    135c:	66 81       	ldd	r22, Z+6	; 0x06
    135e:	77 81       	ldd	r23, Z+7	; 0x07
    1360:	07 2e       	mov	r0, r23
    1362:	00 0c       	add	r0, r0
    1364:	88 0b       	sbc	r24, r24
    1366:	99 0b       	sbc	r25, r25
    1368:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatsisf>
    136c:	29 e2       	ldi	r18, 0x29	; 41
    136e:	3c e5       	ldi	r19, 0x5C	; 92
    1370:	4f e0       	ldi	r20, 0x0F	; 15
    1372:	5c e3       	ldi	r21, 0x3C	; 60
    1374:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
    1378:	a7 01       	movw	r20, r14
    137a:	96 01       	movw	r18, r12
    137c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
    1380:	f8 01       	movw	r30, r16
    1382:	20 89       	ldd	r18, Z+16	; 0x10
    1384:	31 89       	ldd	r19, Z+17	; 0x11
    1386:	42 89       	ldd	r20, Z+18	; 0x12
    1388:	53 89       	ldd	r21, Z+19	; 0x13
    138a:	0e 94 18 0b 	call	0x1630	; 0x1630 <__addsf3>
    138e:	2b 01       	movw	r4, r22
    1390:	3c 01       	movw	r6, r24
    1392:	f8 01       	movw	r30, r16
    1394:	60 8b       	std	Z+16, r22	; 0x10
    1396:	71 8b       	std	Z+17, r23	; 0x11
    1398:	82 8b       	std	Z+18, r24	; 0x12
    139a:	93 8b       	std	Z+19, r25	; 0x13
	yaw_rate = (gyro_z_data * GYRO_SENSITIVITY );
    139c:	62 85       	ldd	r22, Z+10	; 0x0a
    139e:	73 85       	ldd	r23, Z+11	; 0x0b
    13a0:	07 2e       	mov	r0, r23
    13a2:	00 0c       	add	r0, r0
    13a4:	88 0b       	sbc	r24, r24
    13a6:	99 0b       	sbc	r25, r25
    13a8:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatsisf>
    13ac:	29 e2       	ldi	r18, 0x29	; 41
    13ae:	3c e5       	ldi	r19, 0x5C	; 92
    13b0:	4f e0       	ldi	r20, 0x0F	; 15
    13b2:	5c e3       	ldi	r21, 0x3C	; 60
    13b4:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
    13b8:	f8 01       	movw	r30, r16
    13ba:	64 8b       	std	Z+20, r22	; 0x14
    13bc:	75 8b       	std	Z+21, r23	; 0x15
    13be:	86 8b       	std	Z+22, r24	; 0x16
    13c0:	97 8b       	std	Z+23, r25	; 0x17



	R = sqrt( square( acc_x_data ) + square( acc_y_data ) + square( acc_z_data ) );
    13c2:	60 81       	ld	r22, Z
    13c4:	71 81       	ldd	r23, Z+1	; 0x01
    13c6:	07 2e       	mov	r0, r23
    13c8:	00 0c       	add	r0, r0
    13ca:	88 0b       	sbc	r24, r24
    13cc:	99 0b       	sbc	r25, r25
    13ce:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatsisf>
    13d2:	6d 87       	std	Y+13, r22	; 0x0d
    13d4:	7e 87       	std	Y+14, r23	; 0x0e
    13d6:	8f 87       	std	Y+15, r24	; 0x0f
    13d8:	98 8b       	std	Y+16, r25	; 0x10
    13da:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <square>
    13de:	6b 01       	movw	r12, r22
    13e0:	7c 01       	movw	r14, r24
    13e2:	f8 01       	movw	r30, r16
    13e4:	62 81       	ldd	r22, Z+2	; 0x02
    13e6:	73 81       	ldd	r23, Z+3	; 0x03
    13e8:	07 2e       	mov	r0, r23
    13ea:	00 0c       	add	r0, r0
    13ec:	88 0b       	sbc	r24, r24
    13ee:	99 0b       	sbc	r25, r25
    13f0:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatsisf>
    13f4:	69 8b       	std	Y+17, r22	; 0x11
    13f6:	7a 8b       	std	Y+18, r23	; 0x12
    13f8:	8b 8b       	std	Y+19, r24	; 0x13
    13fa:	9c 8b       	std	Y+20, r25	; 0x14
    13fc:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <square>
    1400:	9b 01       	movw	r18, r22
    1402:	ac 01       	movw	r20, r24
    1404:	c7 01       	movw	r24, r14
    1406:	b6 01       	movw	r22, r12
    1408:	0e 94 18 0b 	call	0x1630	; 0x1630 <__addsf3>
    140c:	6b 01       	movw	r12, r22
    140e:	7c 01       	movw	r14, r24
    1410:	f8 01       	movw	r30, r16
    1412:	64 81       	ldd	r22, Z+4	; 0x04
    1414:	75 81       	ldd	r23, Z+5	; 0x05
    1416:	07 2e       	mov	r0, r23
    1418:	00 0c       	add	r0, r0
    141a:	88 0b       	sbc	r24, r24
    141c:	99 0b       	sbc	r25, r25
    141e:	0e 94 4e 0c 	call	0x189c	; 0x189c <__floatsisf>
    1422:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <square>
    1426:	69 87       	std	Y+9, r22	; 0x09
    1428:	7a 87       	std	Y+10, r23	; 0x0a
    142a:	8b 87       	std	Y+11, r24	; 0x0b
    142c:	9c 87       	std	Y+12, r25	; 0x0c
    142e:	29 85       	ldd	r18, Y+9	; 0x09
    1430:	3a 85       	ldd	r19, Y+10	; 0x0a
    1432:	4b 85       	ldd	r20, Y+11	; 0x0b
    1434:	5c 85       	ldd	r21, Y+12	; 0x0c
    1436:	c7 01       	movw	r24, r14
    1438:	b6 01       	movw	r22, r12
    143a:	0e 94 18 0b 	call	0x1630	; 0x1630 <__addsf3>
    143e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <sqrt>
    1442:	69 83       	std	Y+1, r22	; 0x01
    1444:	7a 83       	std	Y+2, r23	; 0x02
    1446:	8b 83       	std	Y+3, r24	; 0x03
    1448:	9c 83       	std	Y+4, r25	; 0x04
	R *= ACC_SENSITIVITY;
    144a:	69 81       	ldd	r22, Y+1	; 0x01
    144c:	7a 81       	ldd	r23, Y+2	; 0x02
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	20 e9       	ldi	r18, 0x90	; 144
    1454:	39 ef       	ldi	r19, 0xF9	; 249
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	59 e3       	ldi	r21, 0x39	; 57
    145a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
    145e:	69 83       	std	Y+1, r22	; 0x01
    1460:	7a 83       	std	Y+2, r23	; 0x02
    1462:	8b 83       	std	Y+3, r24	; 0x03
    1464:	9c 83       	std	Y+4, r25	; 0x04
	

	if ( R > 1.5 || R < 0.5 ){
    1466:	69 81       	ldd	r22, Y+1	; 0x01
    1468:	7a 81       	ldd	r23, Y+2	; 0x02
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 ec       	ldi	r20, 0xC0	; 192
    1474:	5f e3       	ldi	r21, 0x3F	; 63
    1476:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__gesf2>
    147a:	18 16       	cp	r1, r24
    147c:	0c f4       	brge	.+2      	; 0x1480 <_ZN7sensors16compute_positionEv+0x1a0>
    147e:	b4 c0       	rjmp	.+360    	; 0x15e8 <_ZN7sensors16compute_positionEv+0x308>
    1480:	69 81       	ldd	r22, Y+1	; 0x01
    1482:	7a 81       	ldd	r23, Y+2	; 0x02
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9c 81       	ldd	r25, Y+4	; 0x04
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	5f e3       	ldi	r21, 0x3F	; 63
    1490:	0e 94 9f 0b 	call	0x173e	; 0x173e <__cmpsf2>
    1494:	88 23       	and	r24, r24
    1496:	0c f4       	brge	.+2      	; 0x149a <_ZN7sensors16compute_positionEv+0x1ba>
    1498:	a7 c0       	rjmp	.+334    	; 0x15e8 <_ZN7sensors16compute_positionEv+0x308>
		return;	// there is too much external factor for the accelerometer to be of any use

	}


	float acc_pitch_angle = asin(  acc_y_data / (R*8130) );	// accounts for +- sign 0 is the level value
    149a:	69 81       	ldd	r22, Y+1	; 0x01
    149c:	7a 81       	ldd	r23, Y+2	; 0x02
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e1       	ldi	r19, 0x10	; 16
    14a6:	4e ef       	ldi	r20, 0xFE	; 254
    14a8:	55 e4       	ldi	r21, 0x45	; 69
    14aa:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
    14ae:	9b 01       	movw	r18, r22
    14b0:	ac 01       	movw	r20, r24
    14b2:	69 89       	ldd	r22, Y+17	; 0x11
    14b4:	7a 89       	ldd	r23, Y+18	; 0x12
    14b6:	8b 89       	ldd	r24, Y+19	; 0x13
    14b8:	9c 89       	ldd	r25, Y+20	; 0x14
    14ba:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divsf3>
    14be:	0e 94 84 0b 	call	0x1708	; 0x1708 <asin>
    14c2:	69 87       	std	Y+9, r22	; 0x09
    14c4:	7a 87       	std	Y+10, r23	; 0x0a
    14c6:	8b 87       	std	Y+11, r24	; 0x0b
    14c8:	9c 87       	std	Y+12, r25	; 0x0c
	float acc_roll_angle = asin( acc_x_data / (R*8130) );	// accounts for +- sign 0 is the level value
    14ca:	69 81       	ldd	r22, Y+1	; 0x01
    14cc:	7a 81       	ldd	r23, Y+2	; 0x02
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e1       	ldi	r19, 0x10	; 16
    14d6:	4e ef       	ldi	r20, 0xFE	; 254
    14d8:	55 e4       	ldi	r21, 0x45	; 69
    14da:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
    14de:	9b 01       	movw	r18, r22
    14e0:	ac 01       	movw	r20, r24
    14e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    14e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    14e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e8:	98 89       	ldd	r25, Y+16	; 0x10
    14ea:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divsf3>
    14ee:	0e 94 84 0b 	call	0x1708	; 0x1708 <asin>
    14f2:	6d 87       	std	Y+13, r22	; 0x0d
    14f4:	7e 87       	std	Y+14, r23	; 0x0e
    14f6:	8f 87       	std	Y+15, r24	; 0x0f
    14f8:	98 8b       	std	Y+16, r25	; 0x10
	acc_pitch_angle *= 57.3;
	acc_roll_angle *= 57.3;	// conversion to degrees instead of radians.



	trust_factor = ( 1 - fabs(1 - R) ) / 10;
    14fa:	29 81       	ldd	r18, Y+1	; 0x01
    14fc:	3a 81       	ldd	r19, Y+2	; 0x02
    14fe:	4b 81       	ldd	r20, Y+3	; 0x03
    1500:	5c 81       	ldd	r21, Y+4	; 0x04
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	80 e8       	ldi	r24, 0x80	; 128
    1508:	9f e3       	ldi	r25, 0x3F	; 63
    150a:	0e 94 17 0b 	call	0x162e	; 0x162e <__subsf3>
    150e:	9b 01       	movw	r18, r22
    1510:	ac 01       	movw	r20, r24
    1512:	5f 77       	andi	r21, 0x7F	; 127
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	80 e8       	ldi	r24, 0x80	; 128
    151a:	9f e3       	ldi	r25, 0x3F	; 63
    151c:	0e 94 17 0b 	call	0x162e	; 0x162e <__subsf3>
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e2       	ldi	r20, 0x20	; 32
    1526:	51 e4       	ldi	r21, 0x41	; 65
    1528:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divsf3>
    152c:	6d 83       	std	Y+5, r22	; 0x05
    152e:	7e 83       	std	Y+6, r23	; 0x06
    1530:	8f 83       	std	Y+7, r24	; 0x07
    1532:	98 87       	std	Y+8, r25	; 0x08


	pitch = (pitch * (1 - trust_factor) + (acc_pitch_angle * trust_factor) );
    1534:	2d 81       	ldd	r18, Y+5	; 0x05
    1536:	3e 81       	ldd	r19, Y+6	; 0x06
    1538:	4f 81       	ldd	r20, Y+7	; 0x07
    153a:	58 85       	ldd	r21, Y+8	; 0x08
    153c:	cd 80       	ldd	r12, Y+5	; 0x05
    153e:	de 80       	ldd	r13, Y+6	; 0x06
    1540:	ef 80       	ldd	r14, Y+7	; 0x07
    1542:	f8 84       	ldd	r15, Y+8	; 0x08
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	80 e8       	ldi	r24, 0x80	; 128
    154a:	9f e3       	ldi	r25, 0x3F	; 63
    154c:	0e 94 17 0b 	call	0x162e	; 0x162e <__subsf3>
    1550:	a5 01       	movw	r20, r10
    1552:	94 01       	movw	r18, r8
    1554:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
    1558:	4b 01       	movw	r8, r22
    155a:	5c 01       	movw	r10, r24
    155c:	23 e3       	ldi	r18, 0x33	; 51
    155e:	33 e3       	ldi	r19, 0x33	; 51
    1560:	45 e6       	ldi	r20, 0x65	; 101
    1562:	52 e4       	ldi	r21, 0x42	; 66
    1564:	69 85       	ldd	r22, Y+9	; 0x09
    1566:	7a 85       	ldd	r23, Y+10	; 0x0a
    1568:	8b 85       	ldd	r24, Y+11	; 0x0b
    156a:	9c 85       	ldd	r25, Y+12	; 0x0c
    156c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
    1570:	a7 01       	movw	r20, r14
    1572:	96 01       	movw	r18, r12
    1574:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
    1578:	9b 01       	movw	r18, r22
    157a:	ac 01       	movw	r20, r24
    157c:	c5 01       	movw	r24, r10
    157e:	b4 01       	movw	r22, r8
    1580:	0e 94 18 0b 	call	0x1630	; 0x1630 <__addsf3>
    1584:	f8 01       	movw	r30, r16
    1586:	64 87       	std	Z+12, r22	; 0x0c
    1588:	75 87       	std	Z+13, r23	; 0x0d
    158a:	86 87       	std	Z+14, r24	; 0x0e
    158c:	97 87       	std	Z+15, r25	; 0x0f
	roll = (roll * (1 - trust_factor) + (acc_roll_angle * trust_factor) );
    158e:	2d 81       	ldd	r18, Y+5	; 0x05
    1590:	3e 81       	ldd	r19, Y+6	; 0x06
    1592:	4f 81       	ldd	r20, Y+7	; 0x07
    1594:	58 85       	ldd	r21, Y+8	; 0x08
    1596:	8d 80       	ldd	r8, Y+5	; 0x05
    1598:	9e 80       	ldd	r9, Y+6	; 0x06
    159a:	af 80       	ldd	r10, Y+7	; 0x07
    159c:	b8 84       	ldd	r11, Y+8	; 0x08
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	80 e8       	ldi	r24, 0x80	; 128
    15a4:	9f e3       	ldi	r25, 0x3F	; 63
    15a6:	0e 94 17 0b 	call	0x162e	; 0x162e <__subsf3>
    15aa:	a3 01       	movw	r20, r6
    15ac:	92 01       	movw	r18, r4
    15ae:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
    15b2:	2b 01       	movw	r4, r22
    15b4:	3c 01       	movw	r6, r24
    15b6:	23 e3       	ldi	r18, 0x33	; 51
    15b8:	33 e3       	ldi	r19, 0x33	; 51
    15ba:	45 e6       	ldi	r20, 0x65	; 101
    15bc:	52 e4       	ldi	r21, 0x42	; 66
    15be:	6d 85       	ldd	r22, Y+13	; 0x0d
    15c0:	7e 85       	ldd	r23, Y+14	; 0x0e
    15c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15c4:	98 89       	ldd	r25, Y+16	; 0x10
    15c6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
    15ca:	a5 01       	movw	r20, r10
    15cc:	94 01       	movw	r18, r8
    15ce:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
    15d2:	9b 01       	movw	r18, r22
    15d4:	ac 01       	movw	r20, r24
    15d6:	c3 01       	movw	r24, r6
    15d8:	b2 01       	movw	r22, r4
    15da:	0e 94 18 0b 	call	0x1630	; 0x1630 <__addsf3>
    15de:	f8 01       	movw	r30, r16
    15e0:	60 8b       	std	Z+16, r22	; 0x10
    15e2:	71 8b       	std	Z+17, r23	; 0x11
    15e4:	82 8b       	std	Z+18, r24	; 0x12
    15e6:	93 8b       	std	Z+19, r25	; 0x13
	
	
	return;


}
    15e8:	64 96       	adiw	r28, 0x14	; 20
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	df 90       	pop	r13
    1602:	cf 90       	pop	r12
    1604:	bf 90       	pop	r11
    1606:	af 90       	pop	r10
    1608:	9f 90       	pop	r9
    160a:	8f 90       	pop	r8
    160c:	7f 90       	pop	r7
    160e:	6f 90       	pop	r6
    1610:	5f 90       	pop	r5
    1612:	4f 90       	pop	r4
    1614:	08 95       	ret

00001616 <_ZNK7sensors9get_pitchEv>:

}

float sensors::get_pitch() const{
	
	return pitch;
    1616:	fc 01       	movw	r30, r24
    1618:	64 85       	ldd	r22, Z+12	; 0x0c
    161a:	75 85       	ldd	r23, Z+13	; 0x0d
    161c:	86 85       	ldd	r24, Z+14	; 0x0e
    161e:	97 85       	ldd	r25, Z+15	; 0x0f
}
    1620:	08 95       	ret

00001622 <_ZNK7sensors8get_rollEv>:

float sensors::get_roll() const{
	
	return roll;
    1622:	fc 01       	movw	r30, r24
    1624:	60 89       	ldd	r22, Z+16	; 0x10
    1626:	71 89       	ldd	r23, Z+17	; 0x11
    1628:	82 89       	ldd	r24, Z+18	; 0x12
    162a:	93 89       	ldd	r25, Z+19	; 0x13
}
    162c:	08 95       	ret

0000162e <__subsf3>:
    162e:	50 58       	subi	r21, 0x80	; 128

00001630 <__addsf3>:
    1630:	bb 27       	eor	r27, r27
    1632:	aa 27       	eor	r26, r26
    1634:	0e 94 2f 0b 	call	0x165e	; 0x165e <__addsf3x>
    1638:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__fp_round>
    163c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__fp_pscA>
    1640:	38 f0       	brcs	.+14     	; 0x1650 <__addsf3+0x20>
    1642:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__fp_pscB>
    1646:	20 f0       	brcs	.+8      	; 0x1650 <__addsf3+0x20>
    1648:	39 f4       	brne	.+14     	; 0x1658 <__addsf3+0x28>
    164a:	9f 3f       	cpi	r25, 0xFF	; 255
    164c:	19 f4       	brne	.+6      	; 0x1654 <__addsf3+0x24>
    164e:	26 f4       	brtc	.+8      	; 0x1658 <__addsf3+0x28>
    1650:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <__fp_nan>
    1654:	0e f4       	brtc	.+2      	; 0x1658 <__addsf3+0x28>
    1656:	e0 95       	com	r30
    1658:	e7 fb       	bst	r30, 7
    165a:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <__fp_inf>

0000165e <__addsf3x>:
    165e:	e9 2f       	mov	r30, r25
    1660:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__fp_split3>
    1664:	58 f3       	brcs	.-42     	; 0x163c <__addsf3+0xc>
    1666:	ba 17       	cp	r27, r26
    1668:	62 07       	cpc	r22, r18
    166a:	73 07       	cpc	r23, r19
    166c:	84 07       	cpc	r24, r20
    166e:	95 07       	cpc	r25, r21
    1670:	20 f0       	brcs	.+8      	; 0x167a <__addsf3x+0x1c>
    1672:	79 f4       	brne	.+30     	; 0x1692 <__addsf3x+0x34>
    1674:	a6 f5       	brtc	.+104    	; 0x16de <__addsf3x+0x80>
    1676:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__fp_zero>
    167a:	0e f4       	brtc	.+2      	; 0x167e <__addsf3x+0x20>
    167c:	e0 95       	com	r30
    167e:	0b 2e       	mov	r0, r27
    1680:	ba 2f       	mov	r27, r26
    1682:	a0 2d       	mov	r26, r0
    1684:	0b 01       	movw	r0, r22
    1686:	b9 01       	movw	r22, r18
    1688:	90 01       	movw	r18, r0
    168a:	0c 01       	movw	r0, r24
    168c:	ca 01       	movw	r24, r20
    168e:	a0 01       	movw	r20, r0
    1690:	11 24       	eor	r1, r1
    1692:	ff 27       	eor	r31, r31
    1694:	59 1b       	sub	r21, r25
    1696:	99 f0       	breq	.+38     	; 0x16be <__addsf3x+0x60>
    1698:	59 3f       	cpi	r21, 0xF9	; 249
    169a:	50 f4       	brcc	.+20     	; 0x16b0 <__addsf3x+0x52>
    169c:	50 3e       	cpi	r21, 0xE0	; 224
    169e:	68 f1       	brcs	.+90     	; 0x16fa <__addsf3x+0x9c>
    16a0:	1a 16       	cp	r1, r26
    16a2:	f0 40       	sbci	r31, 0x00	; 0
    16a4:	a2 2f       	mov	r26, r18
    16a6:	23 2f       	mov	r18, r19
    16a8:	34 2f       	mov	r19, r20
    16aa:	44 27       	eor	r20, r20
    16ac:	58 5f       	subi	r21, 0xF8	; 248
    16ae:	f3 cf       	rjmp	.-26     	; 0x1696 <__addsf3x+0x38>
    16b0:	46 95       	lsr	r20
    16b2:	37 95       	ror	r19
    16b4:	27 95       	ror	r18
    16b6:	a7 95       	ror	r26
    16b8:	f0 40       	sbci	r31, 0x00	; 0
    16ba:	53 95       	inc	r21
    16bc:	c9 f7       	brne	.-14     	; 0x16b0 <__addsf3x+0x52>
    16be:	7e f4       	brtc	.+30     	; 0x16de <__addsf3x+0x80>
    16c0:	1f 16       	cp	r1, r31
    16c2:	ba 0b       	sbc	r27, r26
    16c4:	62 0b       	sbc	r22, r18
    16c6:	73 0b       	sbc	r23, r19
    16c8:	84 0b       	sbc	r24, r20
    16ca:	ba f0       	brmi	.+46     	; 0x16fa <__addsf3x+0x9c>
    16cc:	91 50       	subi	r25, 0x01	; 1
    16ce:	a1 f0       	breq	.+40     	; 0x16f8 <__addsf3x+0x9a>
    16d0:	ff 0f       	add	r31, r31
    16d2:	bb 1f       	adc	r27, r27
    16d4:	66 1f       	adc	r22, r22
    16d6:	77 1f       	adc	r23, r23
    16d8:	88 1f       	adc	r24, r24
    16da:	c2 f7       	brpl	.-16     	; 0x16cc <__addsf3x+0x6e>
    16dc:	0e c0       	rjmp	.+28     	; 0x16fa <__addsf3x+0x9c>
    16de:	ba 0f       	add	r27, r26
    16e0:	62 1f       	adc	r22, r18
    16e2:	73 1f       	adc	r23, r19
    16e4:	84 1f       	adc	r24, r20
    16e6:	48 f4       	brcc	.+18     	; 0x16fa <__addsf3x+0x9c>
    16e8:	87 95       	ror	r24
    16ea:	77 95       	ror	r23
    16ec:	67 95       	ror	r22
    16ee:	b7 95       	ror	r27
    16f0:	f7 95       	ror	r31
    16f2:	9e 3f       	cpi	r25, 0xFE	; 254
    16f4:	08 f0       	brcs	.+2      	; 0x16f8 <__addsf3x+0x9a>
    16f6:	b0 cf       	rjmp	.-160    	; 0x1658 <__addsf3+0x28>
    16f8:	93 95       	inc	r25
    16fa:	88 0f       	add	r24, r24
    16fc:	08 f0       	brcs	.+2      	; 0x1700 <__addsf3x+0xa2>
    16fe:	99 27       	eor	r25, r25
    1700:	ee 0f       	add	r30, r30
    1702:	97 95       	ror	r25
    1704:	87 95       	ror	r24
    1706:	08 95       	ret

00001708 <asin>:
    1708:	9f 93       	push	r25
    170a:	9f 77       	andi	r25, 0x7F	; 127
    170c:	ee e3       	ldi	r30, 0x3E	; 62
    170e:	89 37       	cpi	r24, 0x79	; 121
    1710:	9e 07       	cpc	r25, r30
    1712:	28 f4       	brcc	.+10     	; 0x171e <asin+0x16>
    1714:	e4 eb       	ldi	r30, 0xB4	; 180
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__fp_powsodd>
    171c:	0c c0       	rjmp	.+24     	; 0x1736 <asin+0x2e>
    171e:	0e 94 89 0c 	call	0x1912	; 0x1912 <__fp_arccos>
    1722:	90 58       	subi	r25, 0x80	; 128
    1724:	a2 ea       	ldi	r26, 0xA2	; 162
    1726:	2a ed       	ldi	r18, 0xDA	; 218
    1728:	3f e0       	ldi	r19, 0x0F	; 15
    172a:	49 ec       	ldi	r20, 0xC9	; 201
    172c:	5f e3       	ldi	r21, 0x3F	; 63
    172e:	0e 94 2f 0b 	call	0x165e	; 0x165e <__addsf3x>
    1732:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fp_round>
    1736:	0f 90       	pop	r0
    1738:	07 fc       	sbrc	r0, 7
    173a:	90 58       	subi	r25, 0x80	; 128
    173c:	08 95       	ret

0000173e <__cmpsf2>:
    173e:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__fp_cmp>
    1742:	08 f4       	brcc	.+2      	; 0x1746 <__cmpsf2+0x8>
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	08 95       	ret

00001748 <__divsf3>:
    1748:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__divsf3x>
    174c:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__fp_round>
    1750:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__fp_pscB>
    1754:	58 f0       	brcs	.+22     	; 0x176c <__divsf3+0x24>
    1756:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__fp_pscA>
    175a:	40 f0       	brcs	.+16     	; 0x176c <__divsf3+0x24>
    175c:	29 f4       	brne	.+10     	; 0x1768 <__divsf3+0x20>
    175e:	5f 3f       	cpi	r21, 0xFF	; 255
    1760:	29 f0       	breq	.+10     	; 0x176c <__divsf3+0x24>
    1762:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <__fp_inf>
    1766:	51 11       	cpse	r21, r1
    1768:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__fp_szero>
    176c:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <__fp_nan>

00001770 <__divsf3x>:
    1770:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__fp_split3>
    1774:	68 f3       	brcs	.-38     	; 0x1750 <__divsf3+0x8>

00001776 <__divsf3_pse>:
    1776:	99 23       	and	r25, r25
    1778:	b1 f3       	breq	.-20     	; 0x1766 <__divsf3+0x1e>
    177a:	55 23       	and	r21, r21
    177c:	91 f3       	breq	.-28     	; 0x1762 <__divsf3+0x1a>
    177e:	95 1b       	sub	r25, r21
    1780:	55 0b       	sbc	r21, r21
    1782:	bb 27       	eor	r27, r27
    1784:	aa 27       	eor	r26, r26
    1786:	62 17       	cp	r22, r18
    1788:	73 07       	cpc	r23, r19
    178a:	84 07       	cpc	r24, r20
    178c:	38 f0       	brcs	.+14     	; 0x179c <__divsf3_pse+0x26>
    178e:	9f 5f       	subi	r25, 0xFF	; 255
    1790:	5f 4f       	sbci	r21, 0xFF	; 255
    1792:	22 0f       	add	r18, r18
    1794:	33 1f       	adc	r19, r19
    1796:	44 1f       	adc	r20, r20
    1798:	aa 1f       	adc	r26, r26
    179a:	a9 f3       	breq	.-22     	; 0x1786 <__divsf3_pse+0x10>
    179c:	35 d0       	rcall	.+106    	; 0x1808 <__divsf3_pse+0x92>
    179e:	0e 2e       	mov	r0, r30
    17a0:	3a f0       	brmi	.+14     	; 0x17b0 <__divsf3_pse+0x3a>
    17a2:	e0 e8       	ldi	r30, 0x80	; 128
    17a4:	32 d0       	rcall	.+100    	; 0x180a <__divsf3_pse+0x94>
    17a6:	91 50       	subi	r25, 0x01	; 1
    17a8:	50 40       	sbci	r21, 0x00	; 0
    17aa:	e6 95       	lsr	r30
    17ac:	00 1c       	adc	r0, r0
    17ae:	ca f7       	brpl	.-14     	; 0x17a2 <__divsf3_pse+0x2c>
    17b0:	2b d0       	rcall	.+86     	; 0x1808 <__divsf3_pse+0x92>
    17b2:	fe 2f       	mov	r31, r30
    17b4:	29 d0       	rcall	.+82     	; 0x1808 <__divsf3_pse+0x92>
    17b6:	66 0f       	add	r22, r22
    17b8:	77 1f       	adc	r23, r23
    17ba:	88 1f       	adc	r24, r24
    17bc:	bb 1f       	adc	r27, r27
    17be:	26 17       	cp	r18, r22
    17c0:	37 07       	cpc	r19, r23
    17c2:	48 07       	cpc	r20, r24
    17c4:	ab 07       	cpc	r26, r27
    17c6:	b0 e8       	ldi	r27, 0x80	; 128
    17c8:	09 f0       	breq	.+2      	; 0x17cc <__divsf3_pse+0x56>
    17ca:	bb 0b       	sbc	r27, r27
    17cc:	80 2d       	mov	r24, r0
    17ce:	bf 01       	movw	r22, r30
    17d0:	ff 27       	eor	r31, r31
    17d2:	93 58       	subi	r25, 0x83	; 131
    17d4:	5f 4f       	sbci	r21, 0xFF	; 255
    17d6:	3a f0       	brmi	.+14     	; 0x17e6 <__divsf3_pse+0x70>
    17d8:	9e 3f       	cpi	r25, 0xFE	; 254
    17da:	51 05       	cpc	r21, r1
    17dc:	78 f0       	brcs	.+30     	; 0x17fc <__divsf3_pse+0x86>
    17de:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <__fp_inf>
    17e2:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__fp_szero>
    17e6:	5f 3f       	cpi	r21, 0xFF	; 255
    17e8:	e4 f3       	brlt	.-8      	; 0x17e2 <__divsf3_pse+0x6c>
    17ea:	98 3e       	cpi	r25, 0xE8	; 232
    17ec:	d4 f3       	brlt	.-12     	; 0x17e2 <__divsf3_pse+0x6c>
    17ee:	86 95       	lsr	r24
    17f0:	77 95       	ror	r23
    17f2:	67 95       	ror	r22
    17f4:	b7 95       	ror	r27
    17f6:	f7 95       	ror	r31
    17f8:	9f 5f       	subi	r25, 0xFF	; 255
    17fa:	c9 f7       	brne	.-14     	; 0x17ee <__divsf3_pse+0x78>
    17fc:	88 0f       	add	r24, r24
    17fe:	91 1d       	adc	r25, r1
    1800:	96 95       	lsr	r25
    1802:	87 95       	ror	r24
    1804:	97 f9       	bld	r25, 7
    1806:	08 95       	ret
    1808:	e1 e0       	ldi	r30, 0x01	; 1
    180a:	66 0f       	add	r22, r22
    180c:	77 1f       	adc	r23, r23
    180e:	88 1f       	adc	r24, r24
    1810:	bb 1f       	adc	r27, r27
    1812:	62 17       	cp	r22, r18
    1814:	73 07       	cpc	r23, r19
    1816:	84 07       	cpc	r24, r20
    1818:	ba 07       	cpc	r27, r26
    181a:	20 f0       	brcs	.+8      	; 0x1824 <__divsf3_pse+0xae>
    181c:	62 1b       	sub	r22, r18
    181e:	73 0b       	sbc	r23, r19
    1820:	84 0b       	sbc	r24, r20
    1822:	ba 0b       	sbc	r27, r26
    1824:	ee 1f       	adc	r30, r30
    1826:	88 f7       	brcc	.-30     	; 0x180a <__divsf3_pse+0x94>
    1828:	e0 95       	com	r30
    182a:	08 95       	ret

0000182c <__fixsfsi>:
    182c:	0e 94 1d 0c 	call	0x183a	; 0x183a <__fixunssfsi>
    1830:	68 94       	set
    1832:	b1 11       	cpse	r27, r1
    1834:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__fp_szero>
    1838:	08 95       	ret

0000183a <__fixunssfsi>:
    183a:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__fp_splitA>
    183e:	88 f0       	brcs	.+34     	; 0x1862 <__fixunssfsi+0x28>
    1840:	9f 57       	subi	r25, 0x7F	; 127
    1842:	98 f0       	brcs	.+38     	; 0x186a <__fixunssfsi+0x30>
    1844:	b9 2f       	mov	r27, r25
    1846:	99 27       	eor	r25, r25
    1848:	b7 51       	subi	r27, 0x17	; 23
    184a:	b0 f0       	brcs	.+44     	; 0x1878 <__fixunssfsi+0x3e>
    184c:	e1 f0       	breq	.+56     	; 0x1886 <__fixunssfsi+0x4c>
    184e:	66 0f       	add	r22, r22
    1850:	77 1f       	adc	r23, r23
    1852:	88 1f       	adc	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	1a f0       	brmi	.+6      	; 0x185e <__fixunssfsi+0x24>
    1858:	ba 95       	dec	r27
    185a:	c9 f7       	brne	.-14     	; 0x184e <__fixunssfsi+0x14>
    185c:	14 c0       	rjmp	.+40     	; 0x1886 <__fixunssfsi+0x4c>
    185e:	b1 30       	cpi	r27, 0x01	; 1
    1860:	91 f0       	breq	.+36     	; 0x1886 <__fixunssfsi+0x4c>
    1862:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__fp_zero>
    1866:	b1 e0       	ldi	r27, 0x01	; 1
    1868:	08 95       	ret
    186a:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__fp_zero>
    186e:	67 2f       	mov	r22, r23
    1870:	78 2f       	mov	r23, r24
    1872:	88 27       	eor	r24, r24
    1874:	b8 5f       	subi	r27, 0xF8	; 248
    1876:	39 f0       	breq	.+14     	; 0x1886 <__fixunssfsi+0x4c>
    1878:	b9 3f       	cpi	r27, 0xF9	; 249
    187a:	cc f3       	brlt	.-14     	; 0x186e <__fixunssfsi+0x34>
    187c:	86 95       	lsr	r24
    187e:	77 95       	ror	r23
    1880:	67 95       	ror	r22
    1882:	b3 95       	inc	r27
    1884:	d9 f7       	brne	.-10     	; 0x187c <__fixunssfsi+0x42>
    1886:	3e f4       	brtc	.+14     	; 0x1896 <__fixunssfsi+0x5c>
    1888:	90 95       	com	r25
    188a:	80 95       	com	r24
    188c:	70 95       	com	r23
    188e:	61 95       	neg	r22
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	8f 4f       	sbci	r24, 0xFF	; 255
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	08 95       	ret

00001898 <__floatunsisf>:
    1898:	e8 94       	clt
    189a:	09 c0       	rjmp	.+18     	; 0x18ae <__floatsisf+0x12>

0000189c <__floatsisf>:
    189c:	97 fb       	bst	r25, 7
    189e:	3e f4       	brtc	.+14     	; 0x18ae <__floatsisf+0x12>
    18a0:	90 95       	com	r25
    18a2:	80 95       	com	r24
    18a4:	70 95       	com	r23
    18a6:	61 95       	neg	r22
    18a8:	7f 4f       	sbci	r23, 0xFF	; 255
    18aa:	8f 4f       	sbci	r24, 0xFF	; 255
    18ac:	9f 4f       	sbci	r25, 0xFF	; 255
    18ae:	99 23       	and	r25, r25
    18b0:	a9 f0       	breq	.+42     	; 0x18dc <__floatsisf+0x40>
    18b2:	f9 2f       	mov	r31, r25
    18b4:	96 e9       	ldi	r25, 0x96	; 150
    18b6:	bb 27       	eor	r27, r27
    18b8:	93 95       	inc	r25
    18ba:	f6 95       	lsr	r31
    18bc:	87 95       	ror	r24
    18be:	77 95       	ror	r23
    18c0:	67 95       	ror	r22
    18c2:	b7 95       	ror	r27
    18c4:	f1 11       	cpse	r31, r1
    18c6:	f8 cf       	rjmp	.-16     	; 0x18b8 <__floatsisf+0x1c>
    18c8:	fa f4       	brpl	.+62     	; 0x1908 <__floatsisf+0x6c>
    18ca:	bb 0f       	add	r27, r27
    18cc:	11 f4       	brne	.+4      	; 0x18d2 <__floatsisf+0x36>
    18ce:	60 ff       	sbrs	r22, 0
    18d0:	1b c0       	rjmp	.+54     	; 0x1908 <__floatsisf+0x6c>
    18d2:	6f 5f       	subi	r22, 0xFF	; 255
    18d4:	7f 4f       	sbci	r23, 0xFF	; 255
    18d6:	8f 4f       	sbci	r24, 0xFF	; 255
    18d8:	9f 4f       	sbci	r25, 0xFF	; 255
    18da:	16 c0       	rjmp	.+44     	; 0x1908 <__floatsisf+0x6c>
    18dc:	88 23       	and	r24, r24
    18de:	11 f0       	breq	.+4      	; 0x18e4 <__floatsisf+0x48>
    18e0:	96 e9       	ldi	r25, 0x96	; 150
    18e2:	11 c0       	rjmp	.+34     	; 0x1906 <__floatsisf+0x6a>
    18e4:	77 23       	and	r23, r23
    18e6:	21 f0       	breq	.+8      	; 0x18f0 <__floatsisf+0x54>
    18e8:	9e e8       	ldi	r25, 0x8E	; 142
    18ea:	87 2f       	mov	r24, r23
    18ec:	76 2f       	mov	r23, r22
    18ee:	05 c0       	rjmp	.+10     	; 0x18fa <__floatsisf+0x5e>
    18f0:	66 23       	and	r22, r22
    18f2:	71 f0       	breq	.+28     	; 0x1910 <__floatsisf+0x74>
    18f4:	96 e8       	ldi	r25, 0x86	; 134
    18f6:	86 2f       	mov	r24, r22
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	60 e0       	ldi	r22, 0x00	; 0
    18fc:	2a f0       	brmi	.+10     	; 0x1908 <__floatsisf+0x6c>
    18fe:	9a 95       	dec	r25
    1900:	66 0f       	add	r22, r22
    1902:	77 1f       	adc	r23, r23
    1904:	88 1f       	adc	r24, r24
    1906:	da f7       	brpl	.-10     	; 0x18fe <__floatsisf+0x62>
    1908:	88 0f       	add	r24, r24
    190a:	96 95       	lsr	r25
    190c:	87 95       	ror	r24
    190e:	97 f9       	bld	r25, 7
    1910:	08 95       	ret

00001912 <__fp_arccos>:
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	1f 93       	push	r17
    1918:	0f 93       	push	r16
    191a:	8b 01       	movw	r16, r22
    191c:	ec 01       	movw	r28, r24
    191e:	e8 ec       	ldi	r30, 0xC8	; 200
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__fp_powser>
    1926:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__fp_round>
    192a:	98 01       	movw	r18, r16
    192c:	ae 01       	movw	r20, r28
    192e:	8b 01       	movw	r16, r22
    1930:	ec 01       	movw	r28, r24
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	80 e8       	ldi	r24, 0x80	; 128
    1938:	9f e3       	ldi	r25, 0x3F	; 63
    193a:	0e 94 17 0b 	call	0x162e	; 0x162e <__subsf3>
    193e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <sqrt>
    1942:	98 01       	movw	r18, r16
    1944:	ae 01       	movw	r20, r28
    1946:	0f 91       	pop	r16
    1948:	1f 91       	pop	r17
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__mulsf3x>

00001952 <__fp_cmp>:
    1952:	99 0f       	add	r25, r25
    1954:	00 08       	sbc	r0, r0
    1956:	55 0f       	add	r21, r21
    1958:	aa 0b       	sbc	r26, r26
    195a:	e0 e8       	ldi	r30, 0x80	; 128
    195c:	fe ef       	ldi	r31, 0xFE	; 254
    195e:	16 16       	cp	r1, r22
    1960:	17 06       	cpc	r1, r23
    1962:	e8 07       	cpc	r30, r24
    1964:	f9 07       	cpc	r31, r25
    1966:	c0 f0       	brcs	.+48     	; 0x1998 <__fp_cmp+0x46>
    1968:	12 16       	cp	r1, r18
    196a:	13 06       	cpc	r1, r19
    196c:	e4 07       	cpc	r30, r20
    196e:	f5 07       	cpc	r31, r21
    1970:	98 f0       	brcs	.+38     	; 0x1998 <__fp_cmp+0x46>
    1972:	62 1b       	sub	r22, r18
    1974:	73 0b       	sbc	r23, r19
    1976:	84 0b       	sbc	r24, r20
    1978:	95 0b       	sbc	r25, r21
    197a:	39 f4       	brne	.+14     	; 0x198a <__fp_cmp+0x38>
    197c:	0a 26       	eor	r0, r26
    197e:	61 f0       	breq	.+24     	; 0x1998 <__fp_cmp+0x46>
    1980:	23 2b       	or	r18, r19
    1982:	24 2b       	or	r18, r20
    1984:	25 2b       	or	r18, r21
    1986:	21 f4       	brne	.+8      	; 0x1990 <__fp_cmp+0x3e>
    1988:	08 95       	ret
    198a:	0a 26       	eor	r0, r26
    198c:	09 f4       	brne	.+2      	; 0x1990 <__fp_cmp+0x3e>
    198e:	a1 40       	sbci	r26, 0x01	; 1
    1990:	a6 95       	lsr	r26
    1992:	8f ef       	ldi	r24, 0xFF	; 255
    1994:	81 1d       	adc	r24, r1
    1996:	81 1d       	adc	r24, r1
    1998:	08 95       	ret

0000199a <__fp_inf>:
    199a:	97 f9       	bld	r25, 7
    199c:	9f 67       	ori	r25, 0x7F	; 127
    199e:	80 e8       	ldi	r24, 0x80	; 128
    19a0:	70 e0       	ldi	r23, 0x00	; 0
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	08 95       	ret

000019a6 <__fp_nan>:
    19a6:	9f ef       	ldi	r25, 0xFF	; 255
    19a8:	80 ec       	ldi	r24, 0xC0	; 192
    19aa:	08 95       	ret

000019ac <__fp_powser>:
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	1f 93       	push	r17
    19b2:	0f 93       	push	r16
    19b4:	ff 92       	push	r15
    19b6:	ef 92       	push	r14
    19b8:	df 92       	push	r13
    19ba:	7b 01       	movw	r14, r22
    19bc:	8c 01       	movw	r16, r24
    19be:	68 94       	set
    19c0:	06 c0       	rjmp	.+12     	; 0x19ce <__fp_powser+0x22>
    19c2:	da 2e       	mov	r13, r26
    19c4:	ef 01       	movw	r28, r30
    19c6:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__mulsf3x>
    19ca:	fe 01       	movw	r30, r28
    19cc:	e8 94       	clt
    19ce:	a5 91       	lpm	r26, Z+
    19d0:	25 91       	lpm	r18, Z+
    19d2:	35 91       	lpm	r19, Z+
    19d4:	45 91       	lpm	r20, Z+
    19d6:	55 91       	lpm	r21, Z+
    19d8:	a6 f3       	brts	.-24     	; 0x19c2 <__fp_powser+0x16>
    19da:	ef 01       	movw	r28, r30
    19dc:	0e 94 2f 0b 	call	0x165e	; 0x165e <__addsf3x>
    19e0:	fe 01       	movw	r30, r28
    19e2:	97 01       	movw	r18, r14
    19e4:	a8 01       	movw	r20, r16
    19e6:	da 94       	dec	r13
    19e8:	69 f7       	brne	.-38     	; 0x19c4 <__fp_powser+0x18>
    19ea:	df 90       	pop	r13
    19ec:	ef 90       	pop	r14
    19ee:	ff 90       	pop	r15
    19f0:	0f 91       	pop	r16
    19f2:	1f 91       	pop	r17
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <__fp_powsodd>:
    19fa:	9f 93       	push	r25
    19fc:	8f 93       	push	r24
    19fe:	7f 93       	push	r23
    1a00:	6f 93       	push	r22
    1a02:	ff 93       	push	r31
    1a04:	ef 93       	push	r30
    1a06:	9b 01       	movw	r18, r22
    1a08:	ac 01       	movw	r20, r24
    1a0a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__mulsf3>
    1a0e:	ef 91       	pop	r30
    1a10:	ff 91       	pop	r31
    1a12:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__fp_powser>
    1a16:	2f 91       	pop	r18
    1a18:	3f 91       	pop	r19
    1a1a:	4f 91       	pop	r20
    1a1c:	5f 91       	pop	r21
    1a1e:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__mulsf3>

00001a22 <__fp_pscA>:
    1a22:	00 24       	eor	r0, r0
    1a24:	0a 94       	dec	r0
    1a26:	16 16       	cp	r1, r22
    1a28:	17 06       	cpc	r1, r23
    1a2a:	18 06       	cpc	r1, r24
    1a2c:	09 06       	cpc	r0, r25
    1a2e:	08 95       	ret

00001a30 <__fp_pscB>:
    1a30:	00 24       	eor	r0, r0
    1a32:	0a 94       	dec	r0
    1a34:	12 16       	cp	r1, r18
    1a36:	13 06       	cpc	r1, r19
    1a38:	14 06       	cpc	r1, r20
    1a3a:	05 06       	cpc	r0, r21
    1a3c:	08 95       	ret

00001a3e <__fp_round>:
    1a3e:	09 2e       	mov	r0, r25
    1a40:	03 94       	inc	r0
    1a42:	00 0c       	add	r0, r0
    1a44:	11 f4       	brne	.+4      	; 0x1a4a <__fp_round+0xc>
    1a46:	88 23       	and	r24, r24
    1a48:	52 f0       	brmi	.+20     	; 0x1a5e <__fp_round+0x20>
    1a4a:	bb 0f       	add	r27, r27
    1a4c:	40 f4       	brcc	.+16     	; 0x1a5e <__fp_round+0x20>
    1a4e:	bf 2b       	or	r27, r31
    1a50:	11 f4       	brne	.+4      	; 0x1a56 <__fp_round+0x18>
    1a52:	60 ff       	sbrs	r22, 0
    1a54:	04 c0       	rjmp	.+8      	; 0x1a5e <__fp_round+0x20>
    1a56:	6f 5f       	subi	r22, 0xFF	; 255
    1a58:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5e:	08 95       	ret

00001a60 <__fp_split3>:
    1a60:	57 fd       	sbrc	r21, 7
    1a62:	90 58       	subi	r25, 0x80	; 128
    1a64:	44 0f       	add	r20, r20
    1a66:	55 1f       	adc	r21, r21
    1a68:	59 f0       	breq	.+22     	; 0x1a80 <__fp_splitA+0x10>
    1a6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a6c:	71 f0       	breq	.+28     	; 0x1a8a <__fp_splitA+0x1a>
    1a6e:	47 95       	ror	r20

00001a70 <__fp_splitA>:
    1a70:	88 0f       	add	r24, r24
    1a72:	97 fb       	bst	r25, 7
    1a74:	99 1f       	adc	r25, r25
    1a76:	61 f0       	breq	.+24     	; 0x1a90 <__fp_splitA+0x20>
    1a78:	9f 3f       	cpi	r25, 0xFF	; 255
    1a7a:	79 f0       	breq	.+30     	; 0x1a9a <__fp_splitA+0x2a>
    1a7c:	87 95       	ror	r24
    1a7e:	08 95       	ret
    1a80:	12 16       	cp	r1, r18
    1a82:	13 06       	cpc	r1, r19
    1a84:	14 06       	cpc	r1, r20
    1a86:	55 1f       	adc	r21, r21
    1a88:	f2 cf       	rjmp	.-28     	; 0x1a6e <__fp_split3+0xe>
    1a8a:	46 95       	lsr	r20
    1a8c:	f1 df       	rcall	.-30     	; 0x1a70 <__fp_splitA>
    1a8e:	08 c0       	rjmp	.+16     	; 0x1aa0 <__fp_splitA+0x30>
    1a90:	16 16       	cp	r1, r22
    1a92:	17 06       	cpc	r1, r23
    1a94:	18 06       	cpc	r1, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	f1 cf       	rjmp	.-30     	; 0x1a7c <__fp_splitA+0xc>
    1a9a:	86 95       	lsr	r24
    1a9c:	71 05       	cpc	r23, r1
    1a9e:	61 05       	cpc	r22, r1
    1aa0:	08 94       	sec
    1aa2:	08 95       	ret

00001aa4 <__fp_zero>:
    1aa4:	e8 94       	clt

00001aa6 <__fp_szero>:
    1aa6:	bb 27       	eor	r27, r27
    1aa8:	66 27       	eor	r22, r22
    1aaa:	77 27       	eor	r23, r23
    1aac:	cb 01       	movw	r24, r22
    1aae:	97 f9       	bld	r25, 7
    1ab0:	08 95       	ret

00001ab2 <__gesf2>:
    1ab2:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__fp_cmp>
    1ab6:	08 f4       	brcc	.+2      	; 0x1aba <__gesf2+0x8>
    1ab8:	8f ef       	ldi	r24, 0xFF	; 255
    1aba:	08 95       	ret

00001abc <__mulsf3>:
    1abc:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__mulsf3x>
    1ac0:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__fp_round>
    1ac4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__fp_pscA>
    1ac8:	38 f0       	brcs	.+14     	; 0x1ad8 <__mulsf3+0x1c>
    1aca:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__fp_pscB>
    1ace:	20 f0       	brcs	.+8      	; 0x1ad8 <__mulsf3+0x1c>
    1ad0:	95 23       	and	r25, r21
    1ad2:	11 f0       	breq	.+4      	; 0x1ad8 <__mulsf3+0x1c>
    1ad4:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <__fp_inf>
    1ad8:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <__fp_nan>
    1adc:	11 24       	eor	r1, r1
    1ade:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__fp_szero>

00001ae2 <__mulsf3x>:
    1ae2:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__fp_split3>
    1ae6:	70 f3       	brcs	.-36     	; 0x1ac4 <__mulsf3+0x8>

00001ae8 <__mulsf3_pse>:
    1ae8:	95 9f       	mul	r25, r21
    1aea:	c1 f3       	breq	.-16     	; 0x1adc <__mulsf3+0x20>
    1aec:	95 0f       	add	r25, r21
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	55 1f       	adc	r21, r21
    1af2:	62 9f       	mul	r22, r18
    1af4:	f0 01       	movw	r30, r0
    1af6:	72 9f       	mul	r23, r18
    1af8:	bb 27       	eor	r27, r27
    1afa:	f0 0d       	add	r31, r0
    1afc:	b1 1d       	adc	r27, r1
    1afe:	63 9f       	mul	r22, r19
    1b00:	aa 27       	eor	r26, r26
    1b02:	f0 0d       	add	r31, r0
    1b04:	b1 1d       	adc	r27, r1
    1b06:	aa 1f       	adc	r26, r26
    1b08:	64 9f       	mul	r22, r20
    1b0a:	66 27       	eor	r22, r22
    1b0c:	b0 0d       	add	r27, r0
    1b0e:	a1 1d       	adc	r26, r1
    1b10:	66 1f       	adc	r22, r22
    1b12:	82 9f       	mul	r24, r18
    1b14:	22 27       	eor	r18, r18
    1b16:	b0 0d       	add	r27, r0
    1b18:	a1 1d       	adc	r26, r1
    1b1a:	62 1f       	adc	r22, r18
    1b1c:	73 9f       	mul	r23, r19
    1b1e:	b0 0d       	add	r27, r0
    1b20:	a1 1d       	adc	r26, r1
    1b22:	62 1f       	adc	r22, r18
    1b24:	83 9f       	mul	r24, r19
    1b26:	a0 0d       	add	r26, r0
    1b28:	61 1d       	adc	r22, r1
    1b2a:	22 1f       	adc	r18, r18
    1b2c:	74 9f       	mul	r23, r20
    1b2e:	33 27       	eor	r19, r19
    1b30:	a0 0d       	add	r26, r0
    1b32:	61 1d       	adc	r22, r1
    1b34:	23 1f       	adc	r18, r19
    1b36:	84 9f       	mul	r24, r20
    1b38:	60 0d       	add	r22, r0
    1b3a:	21 1d       	adc	r18, r1
    1b3c:	82 2f       	mov	r24, r18
    1b3e:	76 2f       	mov	r23, r22
    1b40:	6a 2f       	mov	r22, r26
    1b42:	11 24       	eor	r1, r1
    1b44:	9f 57       	subi	r25, 0x7F	; 127
    1b46:	50 40       	sbci	r21, 0x00	; 0
    1b48:	9a f0       	brmi	.+38     	; 0x1b70 <__mulsf3_pse+0x88>
    1b4a:	f1 f0       	breq	.+60     	; 0x1b88 <__mulsf3_pse+0xa0>
    1b4c:	88 23       	and	r24, r24
    1b4e:	4a f0       	brmi	.+18     	; 0x1b62 <__mulsf3_pse+0x7a>
    1b50:	ee 0f       	add	r30, r30
    1b52:	ff 1f       	adc	r31, r31
    1b54:	bb 1f       	adc	r27, r27
    1b56:	66 1f       	adc	r22, r22
    1b58:	77 1f       	adc	r23, r23
    1b5a:	88 1f       	adc	r24, r24
    1b5c:	91 50       	subi	r25, 0x01	; 1
    1b5e:	50 40       	sbci	r21, 0x00	; 0
    1b60:	a9 f7       	brne	.-22     	; 0x1b4c <__mulsf3_pse+0x64>
    1b62:	9e 3f       	cpi	r25, 0xFE	; 254
    1b64:	51 05       	cpc	r21, r1
    1b66:	80 f0       	brcs	.+32     	; 0x1b88 <__mulsf3_pse+0xa0>
    1b68:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <__fp_inf>
    1b6c:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__fp_szero>
    1b70:	5f 3f       	cpi	r21, 0xFF	; 255
    1b72:	e4 f3       	brlt	.-8      	; 0x1b6c <__mulsf3_pse+0x84>
    1b74:	98 3e       	cpi	r25, 0xE8	; 232
    1b76:	d4 f3       	brlt	.-12     	; 0x1b6c <__mulsf3_pse+0x84>
    1b78:	86 95       	lsr	r24
    1b7a:	77 95       	ror	r23
    1b7c:	67 95       	ror	r22
    1b7e:	b7 95       	ror	r27
    1b80:	f7 95       	ror	r31
    1b82:	e7 95       	ror	r30
    1b84:	9f 5f       	subi	r25, 0xFF	; 255
    1b86:	c1 f7       	brne	.-16     	; 0x1b78 <__mulsf3_pse+0x90>
    1b88:	fe 2b       	or	r31, r30
    1b8a:	88 0f       	add	r24, r24
    1b8c:	91 1d       	adc	r25, r1
    1b8e:	96 95       	lsr	r25
    1b90:	87 95       	ror	r24
    1b92:	97 f9       	bld	r25, 7
    1b94:	08 95       	ret
    1b96:	19 f4       	brne	.+6      	; 0x1b9e <__mulsf3_pse+0xb6>
    1b98:	16 f4       	brtc	.+4      	; 0x1b9e <__mulsf3_pse+0xb6>
    1b9a:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <__fp_nan>
    1b9e:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <__fp_mpack>

00001ba2 <sqrt>:
    1ba2:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__fp_splitA>
    1ba6:	b8 f3       	brcs	.-18     	; 0x1b96 <__mulsf3_pse+0xae>
    1ba8:	99 23       	and	r25, r25
    1baa:	c9 f3       	breq	.-14     	; 0x1b9e <__mulsf3_pse+0xb6>
    1bac:	b6 f3       	brts	.-20     	; 0x1b9a <__mulsf3_pse+0xb2>
    1bae:	9f 57       	subi	r25, 0x7F	; 127
    1bb0:	55 0b       	sbc	r21, r21
    1bb2:	87 ff       	sbrs	r24, 7
    1bb4:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__fp_norm2>
    1bb8:	00 24       	eor	r0, r0
    1bba:	a0 e6       	ldi	r26, 0x60	; 96
    1bbc:	40 ea       	ldi	r20, 0xA0	; 160
    1bbe:	90 01       	movw	r18, r0
    1bc0:	80 58       	subi	r24, 0x80	; 128
    1bc2:	56 95       	lsr	r21
    1bc4:	97 95       	ror	r25
    1bc6:	28 f4       	brcc	.+10     	; 0x1bd2 <sqrt+0x30>
    1bc8:	80 5c       	subi	r24, 0xC0	; 192
    1bca:	66 0f       	add	r22, r22
    1bcc:	77 1f       	adc	r23, r23
    1bce:	88 1f       	adc	r24, r24
    1bd0:	20 f0       	brcs	.+8      	; 0x1bda <sqrt+0x38>
    1bd2:	26 17       	cp	r18, r22
    1bd4:	37 07       	cpc	r19, r23
    1bd6:	48 07       	cpc	r20, r24
    1bd8:	30 f4       	brcc	.+12     	; 0x1be6 <sqrt+0x44>
    1bda:	62 1b       	sub	r22, r18
    1bdc:	73 0b       	sbc	r23, r19
    1bde:	84 0b       	sbc	r24, r20
    1be0:	20 29       	or	r18, r0
    1be2:	31 29       	or	r19, r1
    1be4:	4a 2b       	or	r20, r26
    1be6:	a6 95       	lsr	r26
    1be8:	17 94       	ror	r1
    1bea:	07 94       	ror	r0
    1bec:	20 25       	eor	r18, r0
    1bee:	31 25       	eor	r19, r1
    1bf0:	4a 27       	eor	r20, r26
    1bf2:	58 f7       	brcc	.-42     	; 0x1bca <sqrt+0x28>
    1bf4:	66 0f       	add	r22, r22
    1bf6:	77 1f       	adc	r23, r23
    1bf8:	88 1f       	adc	r24, r24
    1bfa:	20 f0       	brcs	.+8      	; 0x1c04 <sqrt+0x62>
    1bfc:	26 17       	cp	r18, r22
    1bfe:	37 07       	cpc	r19, r23
    1c00:	48 07       	cpc	r20, r24
    1c02:	30 f4       	brcc	.+12     	; 0x1c10 <sqrt+0x6e>
    1c04:	62 0b       	sbc	r22, r18
    1c06:	73 0b       	sbc	r23, r19
    1c08:	84 0b       	sbc	r24, r20
    1c0a:	20 0d       	add	r18, r0
    1c0c:	31 1d       	adc	r19, r1
    1c0e:	41 1d       	adc	r20, r1
    1c10:	a0 95       	com	r26
    1c12:	81 f7       	brne	.-32     	; 0x1bf4 <sqrt+0x52>
    1c14:	b9 01       	movw	r22, r18
    1c16:	84 2f       	mov	r24, r20
    1c18:	91 58       	subi	r25, 0x81	; 129
    1c1a:	88 0f       	add	r24, r24
    1c1c:	96 95       	lsr	r25
    1c1e:	87 95       	ror	r24
    1c20:	08 95       	ret

00001c22 <square>:
    1c22:	9b 01       	movw	r18, r22
    1c24:	ac 01       	movw	r20, r24
    1c26:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__mulsf3>

00001c2a <__fp_mpack>:
    1c2a:	9f 3f       	cpi	r25, 0xFF	; 255
    1c2c:	31 f0       	breq	.+12     	; 0x1c3a <__fp_mpack_finite+0xc>

00001c2e <__fp_mpack_finite>:
    1c2e:	91 50       	subi	r25, 0x01	; 1
    1c30:	20 f4       	brcc	.+8      	; 0x1c3a <__fp_mpack_finite+0xc>
    1c32:	87 95       	ror	r24
    1c34:	77 95       	ror	r23
    1c36:	67 95       	ror	r22
    1c38:	b7 95       	ror	r27
    1c3a:	88 0f       	add	r24, r24
    1c3c:	91 1d       	adc	r25, r1
    1c3e:	96 95       	lsr	r25
    1c40:	87 95       	ror	r24
    1c42:	97 f9       	bld	r25, 7
    1c44:	08 95       	ret

00001c46 <__fp_norm2>:
    1c46:	91 50       	subi	r25, 0x01	; 1
    1c48:	50 40       	sbci	r21, 0x00	; 0
    1c4a:	66 0f       	add	r22, r22
    1c4c:	77 1f       	adc	r23, r23
    1c4e:	88 1f       	adc	r24, r24
    1c50:	d2 f7       	brpl	.-12     	; 0x1c46 <__fp_norm2>
    1c52:	08 95       	ret

00001c54 <_exit>:
    1c54:	f8 94       	cli

00001c56 <__stop_program>:
    1c56:	ff cf       	rjmp	.-2      	; 0x1c56 <__stop_program>
