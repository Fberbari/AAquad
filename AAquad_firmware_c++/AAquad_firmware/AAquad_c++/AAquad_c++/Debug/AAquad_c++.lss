
AAquad_c++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000d3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800100  00800100  00000d3e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002155  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f4e  00000000  00000000  0000304d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a98  00000000  00000000  00003f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00004a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a83  00000000  00000000  00004d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080b  00000000  00000000  000057ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005ffa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_1>
   8:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_2>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_4>
  14:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_5>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	aa 31       	cpi	r26, 0x1A	; 26
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:
	volatile uint16_t temp_timer_throttle = 0; 

	volatile uint16_t temp0;
	

int main(void){
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	2e 97       	sbiw	r28, 0x0e	; 14
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	cd bf       	out	0x3d, r28	; 61

	initialize::timers();
  f0:	0e 94 31 02 	call	0x462	; 0x462 <_ZN10initialize6timersEv>
	initialize::interrupts();
  f4:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN10initialize10interruptsEv>
	

	I2C_328pb i2c(0xFA); // 
  f8:	6a ef       	ldi	r22, 0xFA	; 250
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	ce 01       	movw	r24, r28
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN9I2C_328pbC1Ei>
	
	pilot_instructions pilot;
	pilot.set_max_angle(30);
 104:	6e e1       	ldi	r22, 0x1E	; 30
 106:	ce 01       	movw	r24, r28
 108:	02 96       	adiw	r24, 0x02	; 2
 10a:	0e 94 37 02 	call	0x46e	; 0x46e <_ZN18pilot_instructions13set_max_angleEh>
	pilot.set_max_yaw_rate(45);	// this retrieves and holds the pilot's wishes
 10e:	6d e2       	ldi	r22, 0x2D	; 45
 110:	ce 01       	movw	r24, r28
 112:	02 96       	adiw	r24, 0x02	; 2
 114:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN18pilot_instructions16set_max_yaw_rateEh>

	

	I2C_328pb sensor_I2C(2000);	// object created just for use in the sensor object
 118:	60 ed       	ldi	r22, 0xD0	; 208
 11a:	77 e0       	ldi	r23, 0x07	; 7
 11c:	ce 01       	movw	r24, r28
 11e:	0b 96       	adiw	r24, 0x0b	; 11
 120:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN9I2C_328pbC1Ei>
	pitch_pid.setOutputLowerLimit(-30);
	pitch_pid.setOutputUpperLimit(30);
	
*/

	I2C_328pb pwm_chip_I2c(0xAA);
 124:	6a ea       	ldi	r22, 0xAA	; 170
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	ce 01       	movw	r24, r28
 12a:	0c 96       	adiw	r24, 0x0c	; 12
 12c:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN9I2C_328pbC1Ei>
	pwm_chip pwm(pwm_chip_I2c, 10);
 130:	4a e0       	ldi	r20, 0x0A	; 10
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	ce 01       	movw	r24, r28
 136:	0d 96       	adiw	r24, 0x0d	; 13
 138:	0e 94 20 03 	call	0x640	; 0x640 <_ZN8pwm_chipC1E9I2C_328pbh>

	sei();
 13c:	78 94       	sei
		pitch_pid.setDesiredPoint(pilot.get_pitch_angle());
		
		PID::combine_data(bank_pid.refresh(sense.get_bank()), pitch_pid.refresh(sense.get_pitch), pilot.get_throttle_power());

	*/
		motors[0] = pilot.get_throttle_power();
 13e:	02 e1       	ldi	r16, 0x12	; 18
 140:	11 e0       	ldi	r17, 0x01	; 1
	/*	
		sense.read_acc(sensor_I2C);
		sense.read_gyro(sensor_I2C);	// all sensor data processed
		sense.compute_position();
	*/	
		pilot.compute();	// all pilot data processed
 142:	ce 01       	movw	r24, r28
 144:	02 96       	adiw	r24, 0x02	; 2
 146:	0e 94 48 02 	call	0x490	; 0x490 <_ZN18pilot_instructions7computeEv>
		pitch_pid.setDesiredPoint(pilot.get_pitch_angle());
		
		PID::combine_data(bank_pid.refresh(sense.get_bank()), pitch_pid.refresh(sense.get_pitch), pilot.get_throttle_power());

	*/
		motors[0] = pilot.get_throttle_power();
 14a:	ce 01       	movw	r24, r28
 14c:	02 96       	adiw	r24, 0x02	; 2
 14e:	0e 94 45 02 	call	0x48a	; 0x48a <_ZNK18pilot_instructions18get_throttle_powerEv>
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	f8 01       	movw	r30, r16
 156:	91 83       	std	Z+1, r25	; 0x01
 158:	80 83       	st	Z, r24
		motors[1] = pilot.get_bank_angle();
 15a:	ce 01       	movw	r24, r28
 15c:	02 96       	adiw	r24, 0x02	; 2
 15e:	0e 94 3d 02 	call	0x47a	; 0x47a <_ZNK18pilot_instructions14get_bank_angleEv>
 162:	f8 01       	movw	r30, r16
 164:	93 83       	std	Z+3, r25	; 0x03
 166:	82 83       	std	Z+2, r24	; 0x02
		motors[2] = pilot.get_pitch_angle();
 168:	ce 01       	movw	r24, r28
 16a:	02 96       	adiw	r24, 0x02	; 2
 16c:	0e 94 41 02 	call	0x482	; 0x482 <_ZNK18pilot_instructions15get_pitch_angleEv>
 170:	f8 01       	movw	r30, r16
 172:	95 83       	std	Z+5, r25	; 0x05
 174:	84 83       	std	Z+4, r24	; 0x04
		pwm.pass(pwm_chip_I2c, motors);	
 176:	a8 01       	movw	r20, r16
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	ce 01       	movw	r24, r28
 17c:	0d 96       	adiw	r24, 0x0d	; 13
 17e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <_ZN8pwm_chip4passE9I2C_328pbPi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	87 e8       	ldi	r24, 0x87	; 135
 184:	93 e1       	ldi	r25, 0x13	; 19
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0xaa>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0xb0>
 18c:	00 00       	nop
 18e:	d9 cf       	rjmp	.-78     	; 0x142 <main+0x66>

00000190 <__vector_1>:

}



ISR(INT0_vect){
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
	
		uint16_t temp = TCNT1;
 1a6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1aa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

		if ( temp < temp_timer_aileron){	// timer overflow
 1ae:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <temp_timer_aileron>
 1b2:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
 1b6:	82 17       	cp	r24, r18
 1b8:	93 07       	cpc	r25, r19
 1ba:	70 f4       	brcc	.+28     	; 0x1d8 <__vector_1+0x48>

			requested_aileron_pos = (0xffff - temp_timer_aileron) + temp ;
 1bc:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <temp_timer_aileron>
 1c0:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
 1c4:	9c 01       	movw	r18, r24
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	31 09       	sbc	r19, r1
 1ca:	24 1b       	sub	r18, r20
 1cc:	35 0b       	sbc	r19, r21
 1ce:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <requested_aileron_pos+0x1>
 1d2:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <requested_aileron_pos>
 1d6:	0b c0       	rjmp	.+22     	; 0x1ee <__vector_1+0x5e>
		}

		else {	// regular case
	
			requested_aileron_pos = temp - temp_timer_aileron;
 1d8:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <temp_timer_aileron>
 1dc:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
 1e0:	ac 01       	movw	r20, r24
 1e2:	42 1b       	sub	r20, r18
 1e4:	53 0b       	sbc	r21, r19
 1e6:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <requested_aileron_pos+0x1>
 1ea:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp;
 1ee:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <temp_timer_aileron+0x1>
 1f2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <temp_timer_aileron>
		
		
		// here, there is a chance that the value stored in requested aileron is actually (0xffff - actual requested aileron) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
	
}
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <__vector_2>:

ISR(INT1_vect){
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
	
		temp0 = TCNT1;
 21e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 222:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 226:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 22a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		

		if ( temp0 < temp_timer_throttle){	// timer overflow
 22e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 232:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 236:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp_timer_throttle>
 23a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
 23e:	28 17       	cp	r18, r24
 240:	39 07       	cpc	r19, r25
 242:	80 f4       	brcc	.+32     	; 0x264 <__vector_2+0x58>

			requested_throttle_pos = (0xffff - temp_timer_throttle) + temp0 ;
 244:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 248:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 24c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_throttle>
 250:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	82 1b       	sub	r24, r18
 258:	93 0b       	sbc	r25, r19
 25a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
 25e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>
 262:	0e c0       	rjmp	.+28     	; 0x280 <__vector_2+0x74>
		}

		else {	// regular case
	
			requested_throttle_pos = temp0 - temp_timer_throttle;
 264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 268:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 26c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_throttle>
 270:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
 274:	82 1b       	sub	r24, r18
 276:	93 0b       	sbc	r25, r19
 278:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
 27c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>
			
		}
	
		
		temp_timer_throttle = temp0;
 280:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 284:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 288:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <temp_timer_throttle+0x1>
 28c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_timer_throttle>
		
		
		// here, there is a chance that the value stored in requested throttle is actually (0xffff - actual requested throttle) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
}
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <__vector_4>:




ISR(PCINT1_vect){
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	8f 93       	push	r24
 2b6:	9f 93       	push	r25

	uint16_t temp = TCNT1;
 2b8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2bc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

	if ( temp < temp_timer_rudder){	// timer overflow
 2c0:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <temp_timer_rudder>
 2c4:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
 2c8:	82 17       	cp	r24, r18
 2ca:	93 07       	cpc	r25, r19
 2cc:	70 f4       	brcc	.+28     	; 0x2ea <__vector_4+0x48>

		requested_rudder_pos = (0xffff - temp_timer_rudder) + temp ;
 2ce:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <temp_timer_rudder>
 2d2:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
 2d6:	9c 01       	movw	r18, r24
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	31 09       	sbc	r19, r1
 2dc:	24 1b       	sub	r18, r20
 2de:	35 0b       	sbc	r19, r21
 2e0:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <requested_rudder_pos+0x1>
 2e4:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <requested_rudder_pos>
 2e8:	0b c0       	rjmp	.+22     	; 0x300 <__vector_4+0x5e>
	}

	else {	// regular case

		requested_rudder_pos = temp - temp_timer_rudder;
 2ea:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <temp_timer_rudder>
 2ee:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
 2f2:	ac 01       	movw	r20, r24
 2f4:	42 1b       	sub	r20, r18
 2f6:	53 0b       	sbc	r21, r19
 2f8:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <requested_rudder_pos+0x1>
 2fc:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <requested_rudder_pos>
		
	}

	
	temp_timer_rudder = temp;
 300:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <temp_timer_rudder+0x1>
 304:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <temp_timer_rudder>
	
	

}
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	5f 91       	pop	r21
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <__vector_5>:

ISR(PCINT2_vect){
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	2f 93       	push	r18
 32a:	3f 93       	push	r19
 32c:	4f 93       	push	r20
 32e:	5f 93       	push	r21
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25

	uint16_t temp = TCNT1;
 334:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 338:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	

	if ( temp < temp_timer_elevator){	// timer overflow
 33c:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temp_timer_elevator>
 340:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
 344:	82 17       	cp	r24, r18
 346:	93 07       	cpc	r25, r19
 348:	70 f4       	brcc	.+28     	; 0x366 <__vector_5+0x48>

		requested_elevator_pos = (0xffff - temp_timer_elevator) + temp ;
 34a:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_timer_elevator>
 34e:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
 352:	9c 01       	movw	r18, r24
 354:	21 50       	subi	r18, 0x01	; 1
 356:	31 09       	sbc	r19, r1
 358:	24 1b       	sub	r18, r20
 35a:	35 0b       	sbc	r19, r21
 35c:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <requested_elevator_pos+0x1>
 360:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <requested_elevator_pos>
 364:	0b c0       	rjmp	.+22     	; 0x37c <__vector_5+0x5e>
	}

	else {	// regular case

		requested_elevator_pos = temp - temp_timer_elevator;
 366:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temp_timer_elevator>
 36a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
 36e:	ac 01       	movw	r20, r24
 370:	42 1b       	sub	r20, r18
 372:	53 0b       	sbc	r21, r19
 374:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <requested_elevator_pos+0x1>
 378:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <requested_elevator_pos>
		
	}

	
	temp_timer_elevator = temp;
 37c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <temp_timer_elevator+0x1>
 380:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temp_timer_elevator>
	
	

}
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	5f 91       	pop	r21
 38a:	4f 91       	pop	r20
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <_ZN9I2C_328pbC1Ei>:
	TWCR0 = ( (1 << TWINT) );

	while (! (TWCR0 & (1 << TWINT)) );


}
 39a:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 39e:	88 b1       	in	r24, 0x08	; 8
 3a0:	80 63       	ori	r24, 0x30	; 48
 3a2:	88 b9       	out	0x08, r24	; 8
 3a4:	08 95       	ret

000003a6 <_ZN9I2C_328pb5startEv>:
 3a6:	84 ea       	ldi	r24, 0xA4	; 164
 3a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3ac:	ec eb       	ldi	r30, 0xBC	; 188
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	88 23       	and	r24, r24
 3b4:	ec f7       	brge	.-6      	; 0x3b0 <_ZN9I2C_328pb5startEv+0xa>
 3b6:	08 95       	ret

000003b8 <_ZN9I2C_328pb12repeat_startEv>:
 3b8:	84 ea       	ldi	r24, 0xA4	; 164
 3ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3be:	ec eb       	ldi	r30, 0xBC	; 188
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	88 23       	and	r24, r24
 3c6:	ec f7       	brge	.-6      	; 0x3c2 <_ZN9I2C_328pb12repeat_startEv+0xa>
 3c8:	08 95       	ret

000003ca <_ZN9I2C_328pb10send_slaveEi>:
 3ca:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 3ce:	84 e8       	ldi	r24, 0x84	; 132
 3d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3d4:	ec eb       	ldi	r30, 0xBC	; 188
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	88 23       	and	r24, r24
 3dc:	ec f7       	brge	.-6      	; 0x3d8 <_ZN9I2C_328pb10send_slaveEi+0xe>
 3de:	08 95       	ret

000003e0 <_ZN9I2C_328pb8send_regEi>:
 3e0:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 3e4:	84 e8       	ldi	r24, 0x84	; 132
 3e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3ea:	ec eb       	ldi	r30, 0xBC	; 188
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	88 23       	and	r24, r24
 3f2:	ec f7       	brge	.-6      	; 0x3ee <_ZN9I2C_328pb8send_regEi+0xe>
 3f4:	08 95       	ret

000003f6 <_ZN9I2C_328pb4sendEi>:
 3f6:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 3fa:	84 e8       	ldi	r24, 0x84	; 132
 3fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 400:	ec eb       	ldi	r30, 0xBC	; 188
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	88 23       	and	r24, r24
 408:	ec f7       	brge	.-6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 40a:	08 95       	ret

0000040c <_ZN9I2C_328pb4stopEv>:

void I2C_328pb::stop(){


	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) ); 
 40c:	ec eb       	ldi	r30, 0xBC	; 188
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	84 69       	ori	r24, 0x94	; 148
 414:	80 83       	st	Z, r24
 416:	08 95       	ret

00000418 <_ZN10initialize10interruptsEv>:


void initialize::interrupts(){

	// external int 0
	EIMSK |= (1 << INT0); // enable the int0 interrupt												
 418:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC00);	// will fire at any logical change
 41a:	e9 e6       	ldi	r30, 0x69	; 105
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	81 60       	ori	r24, 0x01	; 1
 422:	80 83       	st	Z, r24

	// external int 1
	EIMSK |= (1 << INT1); // enable the int0 interrupt
 424:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= (1 << ISC10);	// will fire at any logical change
 426:	80 81       	ld	r24, Z
 428:	84 60       	ori	r24, 0x04	; 4
 42a:	80 83       	st	Z, r24

	// pcint 0 (for pin C3)
	PCICR |= (1 << PCIE1);
 42c:	e8 e6       	ldi	r30, 0x68	; 104
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	82 60       	ori	r24, 0x02	; 2
 434:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);
 436:	ac e6       	ldi	r26, 0x6C	; 108
 438:	b0 e0       	ldi	r27, 0x00	; 0
 43a:	8c 91       	ld	r24, X
 43c:	88 60       	ori	r24, 0x08	; 8
 43e:	8c 93       	st	X, r24

	//pcint 1 (for pin B1)
	PCICR |= (1 << PCIE2);
 440:	80 81       	ld	r24, Z
 442:	84 60       	ori	r24, 0x04	; 4
 444:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT17);
 446:	ed e6       	ldi	r30, 0x6D	; 109
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	82 60       	ori	r24, 0x02	; 2
 44e:	80 83       	st	Z, r24
	
	// setting the pullup resistors on everything (will not be necessary once all wires are connected

	DDRD &= ~(1 << 2);
 450:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << 2);
 452:	5a 9a       	sbi	0x0b, 2	; 11
	
	DDRC &= ~(1 << 3);
 454:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1 << 3);
 456:	43 9a       	sbi	0x08, 3	; 8
	
	DDRD &= ~(1 << 3);
 458:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1 << 3);
 45a:	5b 9a       	sbi	0x0b, 3	; 11
	
	DDRD &= ~(1 << 4);
 45c:	54 98       	cbi	0x0a, 4	; 10
	PORTD |= (1 << 4);
 45e:	5c 9a       	sbi	0x0b, 4	; 11
 460:	08 95       	ret

00000462 <_ZN10initialize6timersEv>:
}

void initialize::timers(){

	// by default the timer is set to normal mode
	TCCR1B |= ( (1 << CS10));	// timer will run without prescaler and willoverrun 15 times/second
 462:	e1 e8       	ldi	r30, 0x81	; 129
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	81 60       	ori	r24, 0x01	; 1
 46a:	80 83       	st	Z, r24
 46c:	08 95       	ret

0000046e <_ZN18pilot_instructions13set_max_angleEh>:
}

int pilot_instructions::get_yaw_rate() const{

	return yaw_rate;
}
 46e:	fc 01       	movw	r30, r24
 470:	60 83       	st	Z, r22
 472:	08 95       	ret

00000474 <_ZN18pilot_instructions16set_max_yaw_rateEh>:
 474:	fc 01       	movw	r30, r24
 476:	61 83       	std	Z+1, r22	; 0x01
 478:	08 95       	ret

0000047a <_ZNK18pilot_instructions14get_bank_angleEv>:
 47a:	fc 01       	movw	r30, r24
 47c:	82 81       	ldd	r24, Z+2	; 0x02
 47e:	93 81       	ldd	r25, Z+3	; 0x03
 480:	08 95       	ret

00000482 <_ZNK18pilot_instructions15get_pitch_angleEv>:
 482:	fc 01       	movw	r30, r24
 484:	84 81       	ldd	r24, Z+4	; 0x04
 486:	95 81       	ldd	r25, Z+5	; 0x05
 488:	08 95       	ret

0000048a <_ZNK18pilot_instructions18get_throttle_powerEv>:


uint8_t pilot_instructions::get_throttle_power() const{

	return throttle_power;
}
 48a:	fc 01       	movw	r30, r24
 48c:	80 85       	ldd	r24, Z+8	; 0x08
 48e:	08 95       	ret

00000490 <_ZN18pilot_instructions7computeEv>:



void pilot_instructions::compute(void){
 490:	4f 92       	push	r4
 492:	5f 92       	push	r5
 494:	6f 92       	push	r6
 496:	7f 92       	push	r7
 498:	8f 92       	push	r8
 49a:	9f 92       	push	r9
 49c:	af 92       	push	r10
 49e:	bf 92       	push	r11
 4a0:	cf 92       	push	r12
 4a2:	df 92       	push	r13
 4a4:	ef 92       	push	r14
 4a6:	ff 92       	push	r15
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	8c 01       	movw	r16, r24
	extern volatile uint16_t requested_throttle_pos;


	// 50% of the time the value read is actually the valley of the pwm, that is corrected here 

	if (requested_aileron_pos > 0x7000 ){
 4b2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <requested_aileron_pos>
 4b6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <requested_aileron_pos+0x1>
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	90 47       	sbci	r25, 0x70	; 112
 4be:	50 f0       	brcs	.+20     	; 0x4d4 <_ZN18pilot_instructions7computeEv+0x44>
			
		requested_aileron_pos = 0xffff - requested_aileron_pos;
 4c0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <requested_aileron_pos>
 4c4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <requested_aileron_pos+0x1>
 4c8:	80 95       	com	r24
 4ca:	90 95       	com	r25
 4cc:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <requested_aileron_pos+0x1>
 4d0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <requested_aileron_pos>
	}

	if (requested_elevator_pos > 0x7000 ){
 4d4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <requested_elevator_pos>
 4d8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <requested_elevator_pos+0x1>
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	90 47       	sbci	r25, 0x70	; 112
 4e0:	50 f0       	brcs	.+20     	; 0x4f6 <_ZN18pilot_instructions7computeEv+0x66>
			
		requested_elevator_pos = 0xffff - requested_elevator_pos;
 4e2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <requested_elevator_pos>
 4e6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <requested_elevator_pos+0x1>
 4ea:	80 95       	com	r24
 4ec:	90 95       	com	r25
 4ee:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <requested_elevator_pos+0x1>
 4f2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <requested_elevator_pos>
	}

	if (requested_rudder_pos > 0x7000 ){
 4f6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <requested_rudder_pos>
 4fa:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <requested_rudder_pos+0x1>
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	90 47       	sbci	r25, 0x70	; 112
 502:	50 f0       	brcs	.+20     	; 0x518 <_ZN18pilot_instructions7computeEv+0x88>
			
		requested_rudder_pos = 0xffff - requested_rudder_pos;
 504:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <requested_rudder_pos>
 508:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <requested_rudder_pos+0x1>
 50c:	80 95       	com	r24
 50e:	90 95       	com	r25
 510:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <requested_rudder_pos+0x1>
 514:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <requested_rudder_pos>
	}

	if (requested_throttle_pos > 0x7000 ){
 518:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_throttle_pos>
 51c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
 520:	81 30       	cpi	r24, 0x01	; 1
 522:	90 47       	sbci	r25, 0x70	; 112
 524:	50 f0       	brcs	.+20     	; 0x53a <_ZN18pilot_instructions7computeEv+0xaa>
			
		requested_throttle_pos = 0xffff - requested_throttle_pos;
 526:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_throttle_pos>
 52a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
 52e:	80 95       	com	r24
 530:	90 95       	com	r25
 532:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
 536:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>





	throttle_power = ((requested_throttle_pos - 1015) / 8);	// computes the percentage of the max the pilot wants
 53a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_throttle_pos>
 53e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
 542:	87 5f       	subi	r24, 0xF7	; 247
 544:	93 40       	sbci	r25, 0x03	; 3
 546:	96 95       	lsr	r25
 548:	87 95       	ror	r24
 54a:	96 95       	lsr	r25
 54c:	87 95       	ror	r24
 54e:	96 95       	lsr	r25
 550:	87 95       	ror	r24
 552:	f8 01       	movw	r30, r16
 554:	80 87       	std	Z+8, r24	; 0x08
	
	//yaw_rate = ( requested_rudder_pos / 6553 ) * max_yaw_rate;	// computes the percentage of the max the pilot wants
	
	
	float temp_pitch_angle = (requested_elevator_pos - 1110.f);	// computes the percentage of the max the pilot wants
 556:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <requested_elevator_pos>
 55a:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <requested_elevator_pos+0x1>
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 68 05 	call	0xad0	; 0xad0 <__floatunsisf>
 566:	20 e0       	ldi	r18, 0x00	; 0
 568:	30 ec       	ldi	r19, 0xC0	; 192
 56a:	4a e8       	ldi	r20, 0x8A	; 138
 56c:	54 e4       	ldi	r21, 0x44	; 68
 56e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__subsf3>
	temp_pitch_angle /= 800;
 572:	20 e0       	ldi	r18, 0x00	; 0
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	48 e4       	ldi	r20, 0x48	; 72
 578:	54 e4       	ldi	r21, 0x44	; 68
 57a:	0e 94 c0 04 	call	0x980	; 0x980 <__divsf3>
 57e:	4b 01       	movw	r8, r22
 580:	5c 01       	movw	r10, r24
	temp_pitch_angle *= 2 * max_angle;
 582:	f8 01       	movw	r30, r16
 584:	c0 81       	ld	r28, Z
 586:	d0 e0       	ldi	r29, 0x00	; 0
 588:	be 01       	movw	r22, r28
 58a:	66 0f       	add	r22, r22
 58c:	77 1f       	adc	r23, r23
 58e:	07 2e       	mov	r0, r23
 590:	00 0c       	add	r0, r0
 592:	88 0b       	sbc	r24, r24
 594:	99 0b       	sbc	r25, r25
 596:	0e 94 6a 05 	call	0xad4	; 0xad4 <__floatsisf>
 59a:	6b 01       	movw	r12, r22
 59c:	7c 01       	movw	r14, r24
 59e:	9b 01       	movw	r18, r22
 5a0:	ac 01       	movw	r20, r24
 5a2:	c5 01       	movw	r24, r10
 5a4:	b4 01       	movw	r22, r8
 5a6:	0e 94 f6 05 	call	0xbec	; 0xbec <__mulsf3>
 5aa:	4b 01       	movw	r8, r22
 5ac:	5c 01       	movw	r10, r24
	temp_pitch_angle -= max_angle;
 5ae:	be 01       	movw	r22, r28
 5b0:	dd 0f       	add	r29, r29
 5b2:	88 0b       	sbc	r24, r24
 5b4:	99 0b       	sbc	r25, r25
 5b6:	0e 94 6a 05 	call	0xad4	; 0xad4 <__floatsisf>
 5ba:	2b 01       	movw	r4, r22
 5bc:	3c 01       	movw	r6, r24
	pitch_angle = (int) temp_pitch_angle;
 5be:	9b 01       	movw	r18, r22
 5c0:	ac 01       	movw	r20, r24
 5c2:	c5 01       	movw	r24, r10
 5c4:	b4 01       	movw	r22, r8
 5c6:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__subsf3>
 5ca:	0e 94 32 05 	call	0xa64	; 0xa64 <__fixsfsi>
 5ce:	f8 01       	movw	r30, r16
 5d0:	75 83       	std	Z+5, r23	; 0x05
 5d2:	64 83       	std	Z+4, r22	; 0x04
	
	

	float temp_bank_angle = (requested_aileron_pos - 1120.f);	// computes the percentage of the max the pilot wants
 5d4:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <requested_aileron_pos>
 5d8:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <requested_aileron_pos+0x1>
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 68 05 	call	0xad0	; 0xad0 <__floatunsisf>
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	4c e8       	ldi	r20, 0x8C	; 140
 5ea:	54 e4       	ldi	r21, 0x44	; 68
 5ec:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__subsf3>
	temp_bank_angle /= 800;
 5f0:	20 e0       	ldi	r18, 0x00	; 0
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	48 e4       	ldi	r20, 0x48	; 72
 5f6:	54 e4       	ldi	r21, 0x44	; 68
 5f8:	0e 94 c0 04 	call	0x980	; 0x980 <__divsf3>
 5fc:	9b 01       	movw	r18, r22
 5fe:	ac 01       	movw	r20, r24
	temp_bank_angle *= 2 * max_angle;
 600:	c7 01       	movw	r24, r14
 602:	b6 01       	movw	r22, r12
 604:	0e 94 f6 05 	call	0xbec	; 0xbec <__mulsf3>
	temp_bank_angle -= max_angle;
	bank_angle = (int) temp_bank_angle + 2;
 608:	a3 01       	movw	r20, r6
 60a:	92 01       	movw	r18, r4
 60c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__subsf3>
 610:	0e 94 32 05 	call	0xa64	; 0xa64 <__fixsfsi>
 614:	6e 5f       	subi	r22, 0xFE	; 254
 616:	7f 4f       	sbci	r23, 0xFF	; 255
 618:	f8 01       	movw	r30, r16
 61a:	73 83       	std	Z+3, r23	; 0x03
 61c:	62 83       	std	Z+2, r22	; 0x02

 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	1f 91       	pop	r17
 624:	0f 91       	pop	r16
 626:	ff 90       	pop	r15
 628:	ef 90       	pop	r14
 62a:	df 90       	pop	r13
 62c:	cf 90       	pop	r12
 62e:	bf 90       	pop	r11
 630:	af 90       	pop	r10
 632:	9f 90       	pop	r9
 634:	8f 90       	pop	r8
 636:	7f 90       	pop	r7
 638:	6f 90       	pop	r6
 63a:	5f 90       	pop	r5
 63c:	4f 90       	pop	r4
 63e:	08 95       	ret

00000640 <_ZN8pwm_chipC1E9I2C_328pbh>:
#include "pwm_chip.h"



pwm_chip::pwm_chip(I2C_328pb i2c, uint8_t prescaler){
 640:	1f 93       	push	r17
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	1f 92       	push	r1
 648:	cd b7       	in	r28, 0x3d	; 61
 64a:	de b7       	in	r29, 0x3e	; 62
 64c:	69 83       	std	Y+1, r22	; 0x01
 64e:	14 2f       	mov	r17, r20
	
	
	DDRB |= (1 << 2);	// set OE to 0;
 650:	22 9a       	sbi	0x04, 2	; 4
	//This function sets the auto increment, the prescaler and any other necessary feature required for the pwm chip to run 

	//TWBR0 = (1 << 1); // I'll run the cpu at 1 MHz, this divides the value by 2 for 50 KHZ


	i2c.start();
 652:	ce 01       	movw	r24, r28
 654:	01 96       	adiw	r24, 0x01	; 1
 656:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
 65a:	6e e9       	ldi	r22, 0x9E	; 158
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	ce 01       	movw	r24, r28
 660:	01 96       	adiw	r24, 0x01	; 1
 662:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x0); // mode register 1
 666:	60 e0       	ldi	r22, 0x00	; 0
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	ce 01       	movw	r24, r28
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x21); //clock on, autoincrement enable
 672:	61 e2       	ldi	r22, 0x21	; 33
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	ce 01       	movw	r24, r28
 678:	01 96       	adiw	r24, 0x01	; 1
 67a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
 67e:	ce 01       	movw	r24, r28
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0x9E);
 686:	6e e9       	ldi	r22, 0x9E	; 158
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	ce 01       	movw	r24, r28
 68c:	01 96       	adiw	r24, 0x01	; 1
 68e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0xFE);	//pre scale register
 692:	6e ef       	ldi	r22, 0xFE	; 254
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	ce 01       	movw	r24, r28
 698:	01 96       	adiw	r24, 0x01	; 1
 69a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN9I2C_328pb8send_regEi>
	i2c.send(prescaler);	//prescaler
 69e:	61 2f       	mov	r22, r17
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	ce 01       	movw	r24, r28
 6a4:	01 96       	adiw	r24, 0x01	; 1
 6a6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
 6aa:	ce 01       	movw	r24, r28
 6ac:	01 96       	adiw	r24, 0x01	; 1
 6ae:	0e 94 06 02 	call	0x40c	; 0x40c <_ZN9I2C_328pb4stopEv>

}
 6b2:	0f 90       	pop	r0
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	1f 91       	pop	r17
 6ba:	08 95       	ret

000006bc <_ZN8pwm_chip13encode_motorsEhPiPh>:

}

void pwm_chip::encode_motors(uint8_t motor, int* motors, uint8_t* instruction){
	
	uint16_t temp = motors[motor]*2;	// the actualslope of this curve is 2.05
 6bc:	70 e0       	ldi	r23, 0x00	; 0
 6be:	66 0f       	add	r22, r22
 6c0:	77 1f       	adc	r23, r23
 6c2:	fa 01       	movw	r30, r20
 6c4:	e6 0f       	add	r30, r22
 6c6:	f7 1f       	adc	r31, r23
 6c8:	80 81       	ld	r24, Z
 6ca:	91 81       	ldd	r25, Z+1	; 0x01
 6cc:	88 0f       	add	r24, r24
 6ce:	99 1f       	adc	r25, r25
	
	temp += 205;	// 205 is the value corresponding to 0 for the esc
 6d0:	83 53       	subi	r24, 0x33	; 51
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
	
	instruction[0] = ( temp & 0xff );	// conserves only the low byte
 6d4:	f9 01       	movw	r30, r18
 6d6:	80 83       	st	Z, r24
	
	instruction[1] = ( temp >> 8);	// conserves only the high half-byte
 6d8:	91 83       	std	Z+1, r25	; 0x01
 6da:	08 95       	ret

000006dc <_ZN8pwm_chip4passE9I2C_328pbPi>:
}




void pwm_chip::pass(I2C_328pb i2c, int* motors){
 6dc:	ef 92       	push	r14
 6de:	ff 92       	push	r15
 6e0:	0f 93       	push	r16
 6e2:	1f 93       	push	r17
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	00 d0       	rcall	.+0      	; 0x6ea <_ZN8pwm_chip4passE9I2C_328pbPi+0xe>
 6ea:	1f 92       	push	r1
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62
 6f0:	8c 01       	movw	r16, r24
 6f2:	6b 83       	std	Y+3, r22	; 0x03
 6f4:	7a 01       	movw	r14, r20

// this function will communicate over I2C to the pwmchip for final controll of the motors

	uint8_t instruction[2];
	
	encode_motors(0, motors, instruction);
 6f6:	9e 01       	movw	r18, r28
 6f8:	2f 5f       	subi	r18, 0xFF	; 255
 6fa:	3f 4f       	sbci	r19, 0xFF	; 255
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN8pwm_chip13encode_motorsEhPiPh>

	i2c.start();
 702:	ce 01       	movw	r24, r28
 704:	03 96       	adiw	r24, 0x03	; 3
 706:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
 70a:	6e e9       	ldi	r22, 0x9E	; 158
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	ce 01       	movw	r24, r28
 710:	03 96       	adiw	r24, 0x03	; 3
 712:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x06);		//LED0_ON_L
 716:	66 e0       	ldi	r22, 0x06	; 6
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	ce 01       	movw	r24, r28
 71c:	03 96       	adiw	r24, 0x03	; 3
 71e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
 722:	60 e0       	ldi	r22, 0x00	; 0
 724:	70 e0       	ldi	r23, 0x00	; 0
 726:	ce 01       	movw	r24, r28
 728:	03 96       	adiw	r24, 0x03	; 3
 72a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
 72e:	60 e0       	ldi	r22, 0x00	; 0
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	ce 01       	movw	r24, r28
 734:	03 96       	adiw	r24, 0x03	; 3
 736:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
 73a:	69 81       	ldd	r22, Y+1	; 0x01
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	ce 01       	movw	r24, r28
 740:	03 96       	adiw	r24, 0x03	; 3
 742:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
 746:	6a 81       	ldd	r22, Y+2	; 0x02
 748:	70 e0       	ldi	r23, 0x00	; 0
 74a:	ce 01       	movw	r24, r28
 74c:	03 96       	adiw	r24, 0x03	; 3
 74e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
 752:	ce 01       	movw	r24, r28
 754:	03 96       	adiw	r24, 0x03	; 3
 756:	0e 94 06 02 	call	0x40c	; 0x40c <_ZN9I2C_328pb4stopEv>


	encode_motors(1, motors, instruction);
 75a:	9e 01       	movw	r18, r28
 75c:	2f 5f       	subi	r18, 0xFF	; 255
 75e:	3f 4f       	sbci	r19, 0xFF	; 255
 760:	a7 01       	movw	r20, r14
 762:	61 e0       	ldi	r22, 0x01	; 1
 764:	c8 01       	movw	r24, r16
 766:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN8pwm_chip13encode_motorsEhPiPh>
	

	i2c.start();
 76a:	ce 01       	movw	r24, r28
 76c:	03 96       	adiw	r24, 0x03	; 3
 76e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
 772:	6e e9       	ldi	r22, 0x9E	; 158
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	ce 01       	movw	r24, r28
 778:	03 96       	adiw	r24, 0x03	; 3
 77a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x16);		//LED4_ON_L
 77e:	66 e1       	ldi	r22, 0x16	; 22
 780:	70 e0       	ldi	r23, 0x00	; 0
 782:	ce 01       	movw	r24, r28
 784:	03 96       	adiw	r24, 0x03	; 3
 786:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	70 e0       	ldi	r23, 0x00	; 0
 78e:	ce 01       	movw	r24, r28
 790:	03 96       	adiw	r24, 0x03	; 3
 792:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	70 e0       	ldi	r23, 0x00	; 0
 79a:	ce 01       	movw	r24, r28
 79c:	03 96       	adiw	r24, 0x03	; 3
 79e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
 7a2:	69 81       	ldd	r22, Y+1	; 0x01
 7a4:	70 e0       	ldi	r23, 0x00	; 0
 7a6:	ce 01       	movw	r24, r28
 7a8:	03 96       	adiw	r24, 0x03	; 3
 7aa:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
 7ae:	6a 81       	ldd	r22, Y+2	; 0x02
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	ce 01       	movw	r24, r28
 7b4:	03 96       	adiw	r24, 0x03	; 3
 7b6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
 7ba:	ce 01       	movw	r24, r28
 7bc:	03 96       	adiw	r24, 0x03	; 3
 7be:	0e 94 06 02 	call	0x40c	; 0x40c <_ZN9I2C_328pb4stopEv>

	
	encode_motors(2, motors, instruction);
 7c2:	9e 01       	movw	r18, r28
 7c4:	2f 5f       	subi	r18, 0xFF	; 255
 7c6:	3f 4f       	sbci	r19, 0xFF	; 255
 7c8:	a7 01       	movw	r20, r14
 7ca:	62 e0       	ldi	r22, 0x02	; 2
 7cc:	c8 01       	movw	r24, r16
 7ce:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN8pwm_chip13encode_motorsEhPiPh>



	i2c.start();
 7d2:	ce 01       	movw	r24, r28
 7d4:	03 96       	adiw	r24, 0x03	; 3
 7d6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
 7da:	6e e9       	ldi	r22, 0x9E	; 158
 7dc:	70 e0       	ldi	r23, 0x00	; 0
 7de:	ce 01       	movw	r24, r28
 7e0:	03 96       	adiw	r24, 0x03	; 3
 7e2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x2E);		//LED8_ON_L
 7e6:	6e e2       	ldi	r22, 0x2E	; 46
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	ce 01       	movw	r24, r28
 7ec:	03 96       	adiw	r24, 0x03	; 3
 7ee:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
 7f2:	60 e0       	ldi	r22, 0x00	; 0
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	ce 01       	movw	r24, r28
 7f8:	03 96       	adiw	r24, 0x03	; 3
 7fa:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	ce 01       	movw	r24, r28
 804:	03 96       	adiw	r24, 0x03	; 3
 806:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
 80a:	69 81       	ldd	r22, Y+1	; 0x01
 80c:	70 e0       	ldi	r23, 0x00	; 0
 80e:	ce 01       	movw	r24, r28
 810:	03 96       	adiw	r24, 0x03	; 3
 812:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
 816:	6a 81       	ldd	r22, Y+2	; 0x02
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	ce 01       	movw	r24, r28
 81c:	03 96       	adiw	r24, 0x03	; 3
 81e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
 822:	ce 01       	movw	r24, r28
 824:	03 96       	adiw	r24, 0x03	; 3
 826:	0e 94 06 02 	call	0x40c	; 0x40c <_ZN9I2C_328pb4stopEv>



	encode_motors(3, motors, instruction);
 82a:	9e 01       	movw	r18, r28
 82c:	2f 5f       	subi	r18, 0xFF	; 255
 82e:	3f 4f       	sbci	r19, 0xFF	; 255
 830:	a7 01       	movw	r20, r14
 832:	63 e0       	ldi	r22, 0x03	; 3
 834:	c8 01       	movw	r24, r16
 836:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN8pwm_chip13encode_motorsEhPiPh>


	i2c.start();
 83a:	ce 01       	movw	r24, r28
 83c:	03 96       	adiw	r24, 0x03	; 3
 83e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
 842:	6e e9       	ldi	r22, 0x9E	; 158
 844:	70 e0       	ldi	r23, 0x00	; 0
 846:	ce 01       	movw	r24, r28
 848:	03 96       	adiw	r24, 0x03	; 3
 84a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x42);		//LED8_ON_L
 84e:	62 e4       	ldi	r22, 0x42	; 66
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	ce 01       	movw	r24, r28
 854:	03 96       	adiw	r24, 0x03	; 3
 856:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
 85a:	60 e0       	ldi	r22, 0x00	; 0
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	ce 01       	movw	r24, r28
 860:	03 96       	adiw	r24, 0x03	; 3
 862:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	70 e0       	ldi	r23, 0x00	; 0
 86a:	ce 01       	movw	r24, r28
 86c:	03 96       	adiw	r24, 0x03	; 3
 86e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
 872:	69 81       	ldd	r22, Y+1	; 0x01
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	ce 01       	movw	r24, r28
 878:	03 96       	adiw	r24, 0x03	; 3
 87a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
 87e:	6a 81       	ldd	r22, Y+2	; 0x02
 880:	70 e0       	ldi	r23, 0x00	; 0
 882:	ce 01       	movw	r24, r28
 884:	03 96       	adiw	r24, 0x03	; 3
 886:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
 88a:	ce 01       	movw	r24, r28
 88c:	03 96       	adiw	r24, 0x03	; 3
 88e:	0e 94 06 02 	call	0x40c	; 0x40c <_ZN9I2C_328pb4stopEv>


}
 892:	0f 90       	pop	r0
 894:	0f 90       	pop	r0
 896:	0f 90       	pop	r0
 898:	df 91       	pop	r29
 89a:	cf 91       	pop	r28
 89c:	1f 91       	pop	r17
 89e:	0f 91       	pop	r16
 8a0:	ff 90       	pop	r15
 8a2:	ef 90       	pop	r14
 8a4:	08 95       	ret

000008a6 <__subsf3>:
 8a6:	50 58       	subi	r21, 0x80	; 128

000008a8 <__addsf3>:
 8a8:	bb 27       	eor	r27, r27
 8aa:	aa 27       	eor	r26, r26
 8ac:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__addsf3x>
 8b0:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_round>
 8b4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__fp_pscA>
 8b8:	38 f0       	brcs	.+14     	; 0x8c8 <__addsf3+0x20>
 8ba:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscB>
 8be:	20 f0       	brcs	.+8      	; 0x8c8 <__addsf3+0x20>
 8c0:	39 f4       	brne	.+14     	; 0x8d0 <__addsf3+0x28>
 8c2:	9f 3f       	cpi	r25, 0xFF	; 255
 8c4:	19 f4       	brne	.+6      	; 0x8cc <__addsf3+0x24>
 8c6:	26 f4       	brtc	.+8      	; 0x8d0 <__addsf3+0x28>
 8c8:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_nan>
 8cc:	0e f4       	brtc	.+2      	; 0x8d0 <__addsf3+0x28>
 8ce:	e0 95       	com	r30
 8d0:	e7 fb       	bst	r30, 7
 8d2:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_inf>

000008d6 <__addsf3x>:
 8d6:	e9 2f       	mov	r30, r25
 8d8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_split3>
 8dc:	58 f3       	brcs	.-42     	; 0x8b4 <__addsf3+0xc>
 8de:	ba 17       	cp	r27, r26
 8e0:	62 07       	cpc	r22, r18
 8e2:	73 07       	cpc	r23, r19
 8e4:	84 07       	cpc	r24, r20
 8e6:	95 07       	cpc	r25, r21
 8e8:	20 f0       	brcs	.+8      	; 0x8f2 <__addsf3x+0x1c>
 8ea:	79 f4       	brne	.+30     	; 0x90a <__stack+0xb>
 8ec:	a6 f5       	brtc	.+104    	; 0x956 <__stack+0x57>
 8ee:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_zero>
 8f2:	0e f4       	brtc	.+2      	; 0x8f6 <__addsf3x+0x20>
 8f4:	e0 95       	com	r30
 8f6:	0b 2e       	mov	r0, r27
 8f8:	ba 2f       	mov	r27, r26
 8fa:	a0 2d       	mov	r26, r0
 8fc:	0b 01       	movw	r0, r22
 8fe:	b9 01       	movw	r22, r18
 900:	90 01       	movw	r18, r0
 902:	0c 01       	movw	r0, r24
 904:	ca 01       	movw	r24, r20
 906:	a0 01       	movw	r20, r0
 908:	11 24       	eor	r1, r1
 90a:	ff 27       	eor	r31, r31
 90c:	59 1b       	sub	r21, r25
 90e:	99 f0       	breq	.+38     	; 0x936 <__stack+0x37>
 910:	59 3f       	cpi	r21, 0xF9	; 249
 912:	50 f4       	brcc	.+20     	; 0x928 <__stack+0x29>
 914:	50 3e       	cpi	r21, 0xE0	; 224
 916:	68 f1       	brcs	.+90     	; 0x972 <__stack+0x73>
 918:	1a 16       	cp	r1, r26
 91a:	f0 40       	sbci	r31, 0x00	; 0
 91c:	a2 2f       	mov	r26, r18
 91e:	23 2f       	mov	r18, r19
 920:	34 2f       	mov	r19, r20
 922:	44 27       	eor	r20, r20
 924:	58 5f       	subi	r21, 0xF8	; 248
 926:	f3 cf       	rjmp	.-26     	; 0x90e <__stack+0xf>
 928:	46 95       	lsr	r20
 92a:	37 95       	ror	r19
 92c:	27 95       	ror	r18
 92e:	a7 95       	ror	r26
 930:	f0 40       	sbci	r31, 0x00	; 0
 932:	53 95       	inc	r21
 934:	c9 f7       	brne	.-14     	; 0x928 <__stack+0x29>
 936:	7e f4       	brtc	.+30     	; 0x956 <__stack+0x57>
 938:	1f 16       	cp	r1, r31
 93a:	ba 0b       	sbc	r27, r26
 93c:	62 0b       	sbc	r22, r18
 93e:	73 0b       	sbc	r23, r19
 940:	84 0b       	sbc	r24, r20
 942:	ba f0       	brmi	.+46     	; 0x972 <__stack+0x73>
 944:	91 50       	subi	r25, 0x01	; 1
 946:	a1 f0       	breq	.+40     	; 0x970 <__stack+0x71>
 948:	ff 0f       	add	r31, r31
 94a:	bb 1f       	adc	r27, r27
 94c:	66 1f       	adc	r22, r22
 94e:	77 1f       	adc	r23, r23
 950:	88 1f       	adc	r24, r24
 952:	c2 f7       	brpl	.-16     	; 0x944 <__stack+0x45>
 954:	0e c0       	rjmp	.+28     	; 0x972 <__stack+0x73>
 956:	ba 0f       	add	r27, r26
 958:	62 1f       	adc	r22, r18
 95a:	73 1f       	adc	r23, r19
 95c:	84 1f       	adc	r24, r20
 95e:	48 f4       	brcc	.+18     	; 0x972 <__stack+0x73>
 960:	87 95       	ror	r24
 962:	77 95       	ror	r23
 964:	67 95       	ror	r22
 966:	b7 95       	ror	r27
 968:	f7 95       	ror	r31
 96a:	9e 3f       	cpi	r25, 0xFE	; 254
 96c:	08 f0       	brcs	.+2      	; 0x970 <__stack+0x71>
 96e:	b0 cf       	rjmp	.-160    	; 0x8d0 <__addsf3+0x28>
 970:	93 95       	inc	r25
 972:	88 0f       	add	r24, r24
 974:	08 f0       	brcs	.+2      	; 0x978 <__stack+0x79>
 976:	99 27       	eor	r25, r25
 978:	ee 0f       	add	r30, r30
 97a:	97 95       	ror	r25
 97c:	87 95       	ror	r24
 97e:	08 95       	ret

00000980 <__divsf3>:
 980:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__divsf3x>
 984:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_round>
 988:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscB>
 98c:	58 f0       	brcs	.+22     	; 0x9a4 <__divsf3+0x24>
 98e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__fp_pscA>
 992:	40 f0       	brcs	.+16     	; 0x9a4 <__divsf3+0x24>
 994:	29 f4       	brne	.+10     	; 0x9a0 <__divsf3+0x20>
 996:	5f 3f       	cpi	r21, 0xFF	; 255
 998:	29 f0       	breq	.+10     	; 0x9a4 <__divsf3+0x24>
 99a:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_inf>
 99e:	51 11       	cpse	r21, r1
 9a0:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_szero>
 9a4:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_nan>

000009a8 <__divsf3x>:
 9a8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_split3>
 9ac:	68 f3       	brcs	.-38     	; 0x988 <__divsf3+0x8>

000009ae <__divsf3_pse>:
 9ae:	99 23       	and	r25, r25
 9b0:	b1 f3       	breq	.-20     	; 0x99e <__divsf3+0x1e>
 9b2:	55 23       	and	r21, r21
 9b4:	91 f3       	breq	.-28     	; 0x99a <__divsf3+0x1a>
 9b6:	95 1b       	sub	r25, r21
 9b8:	55 0b       	sbc	r21, r21
 9ba:	bb 27       	eor	r27, r27
 9bc:	aa 27       	eor	r26, r26
 9be:	62 17       	cp	r22, r18
 9c0:	73 07       	cpc	r23, r19
 9c2:	84 07       	cpc	r24, r20
 9c4:	38 f0       	brcs	.+14     	; 0x9d4 <__divsf3_pse+0x26>
 9c6:	9f 5f       	subi	r25, 0xFF	; 255
 9c8:	5f 4f       	sbci	r21, 0xFF	; 255
 9ca:	22 0f       	add	r18, r18
 9cc:	33 1f       	adc	r19, r19
 9ce:	44 1f       	adc	r20, r20
 9d0:	aa 1f       	adc	r26, r26
 9d2:	a9 f3       	breq	.-22     	; 0x9be <__divsf3_pse+0x10>
 9d4:	35 d0       	rcall	.+106    	; 0xa40 <__divsf3_pse+0x92>
 9d6:	0e 2e       	mov	r0, r30
 9d8:	3a f0       	brmi	.+14     	; 0x9e8 <__divsf3_pse+0x3a>
 9da:	e0 e8       	ldi	r30, 0x80	; 128
 9dc:	32 d0       	rcall	.+100    	; 0xa42 <__divsf3_pse+0x94>
 9de:	91 50       	subi	r25, 0x01	; 1
 9e0:	50 40       	sbci	r21, 0x00	; 0
 9e2:	e6 95       	lsr	r30
 9e4:	00 1c       	adc	r0, r0
 9e6:	ca f7       	brpl	.-14     	; 0x9da <__divsf3_pse+0x2c>
 9e8:	2b d0       	rcall	.+86     	; 0xa40 <__divsf3_pse+0x92>
 9ea:	fe 2f       	mov	r31, r30
 9ec:	29 d0       	rcall	.+82     	; 0xa40 <__divsf3_pse+0x92>
 9ee:	66 0f       	add	r22, r22
 9f0:	77 1f       	adc	r23, r23
 9f2:	88 1f       	adc	r24, r24
 9f4:	bb 1f       	adc	r27, r27
 9f6:	26 17       	cp	r18, r22
 9f8:	37 07       	cpc	r19, r23
 9fa:	48 07       	cpc	r20, r24
 9fc:	ab 07       	cpc	r26, r27
 9fe:	b0 e8       	ldi	r27, 0x80	; 128
 a00:	09 f0       	breq	.+2      	; 0xa04 <__divsf3_pse+0x56>
 a02:	bb 0b       	sbc	r27, r27
 a04:	80 2d       	mov	r24, r0
 a06:	bf 01       	movw	r22, r30
 a08:	ff 27       	eor	r31, r31
 a0a:	93 58       	subi	r25, 0x83	; 131
 a0c:	5f 4f       	sbci	r21, 0xFF	; 255
 a0e:	3a f0       	brmi	.+14     	; 0xa1e <__divsf3_pse+0x70>
 a10:	9e 3f       	cpi	r25, 0xFE	; 254
 a12:	51 05       	cpc	r21, r1
 a14:	78 f0       	brcs	.+30     	; 0xa34 <__divsf3_pse+0x86>
 a16:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_inf>
 a1a:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_szero>
 a1e:	5f 3f       	cpi	r21, 0xFF	; 255
 a20:	e4 f3       	brlt	.-8      	; 0xa1a <__divsf3_pse+0x6c>
 a22:	98 3e       	cpi	r25, 0xE8	; 232
 a24:	d4 f3       	brlt	.-12     	; 0xa1a <__divsf3_pse+0x6c>
 a26:	86 95       	lsr	r24
 a28:	77 95       	ror	r23
 a2a:	67 95       	ror	r22
 a2c:	b7 95       	ror	r27
 a2e:	f7 95       	ror	r31
 a30:	9f 5f       	subi	r25, 0xFF	; 255
 a32:	c9 f7       	brne	.-14     	; 0xa26 <__divsf3_pse+0x78>
 a34:	88 0f       	add	r24, r24
 a36:	91 1d       	adc	r25, r1
 a38:	96 95       	lsr	r25
 a3a:	87 95       	ror	r24
 a3c:	97 f9       	bld	r25, 7
 a3e:	08 95       	ret
 a40:	e1 e0       	ldi	r30, 0x01	; 1
 a42:	66 0f       	add	r22, r22
 a44:	77 1f       	adc	r23, r23
 a46:	88 1f       	adc	r24, r24
 a48:	bb 1f       	adc	r27, r27
 a4a:	62 17       	cp	r22, r18
 a4c:	73 07       	cpc	r23, r19
 a4e:	84 07       	cpc	r24, r20
 a50:	ba 07       	cpc	r27, r26
 a52:	20 f0       	brcs	.+8      	; 0xa5c <__divsf3_pse+0xae>
 a54:	62 1b       	sub	r22, r18
 a56:	73 0b       	sbc	r23, r19
 a58:	84 0b       	sbc	r24, r20
 a5a:	ba 0b       	sbc	r27, r26
 a5c:	ee 1f       	adc	r30, r30
 a5e:	88 f7       	brcc	.-30     	; 0xa42 <__divsf3_pse+0x94>
 a60:	e0 95       	com	r30
 a62:	08 95       	ret

00000a64 <__fixsfsi>:
 a64:	0e 94 39 05 	call	0xa72	; 0xa72 <__fixunssfsi>
 a68:	68 94       	set
 a6a:	b1 11       	cpse	r27, r1
 a6c:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_szero>
 a70:	08 95       	ret

00000a72 <__fixunssfsi>:
 a72:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__fp_splitA>
 a76:	88 f0       	brcs	.+34     	; 0xa9a <__fixunssfsi+0x28>
 a78:	9f 57       	subi	r25, 0x7F	; 127
 a7a:	98 f0       	brcs	.+38     	; 0xaa2 <__fixunssfsi+0x30>
 a7c:	b9 2f       	mov	r27, r25
 a7e:	99 27       	eor	r25, r25
 a80:	b7 51       	subi	r27, 0x17	; 23
 a82:	b0 f0       	brcs	.+44     	; 0xab0 <__fixunssfsi+0x3e>
 a84:	e1 f0       	breq	.+56     	; 0xabe <__fixunssfsi+0x4c>
 a86:	66 0f       	add	r22, r22
 a88:	77 1f       	adc	r23, r23
 a8a:	88 1f       	adc	r24, r24
 a8c:	99 1f       	adc	r25, r25
 a8e:	1a f0       	brmi	.+6      	; 0xa96 <__fixunssfsi+0x24>
 a90:	ba 95       	dec	r27
 a92:	c9 f7       	brne	.-14     	; 0xa86 <__fixunssfsi+0x14>
 a94:	14 c0       	rjmp	.+40     	; 0xabe <__fixunssfsi+0x4c>
 a96:	b1 30       	cpi	r27, 0x01	; 1
 a98:	91 f0       	breq	.+36     	; 0xabe <__fixunssfsi+0x4c>
 a9a:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_zero>
 a9e:	b1 e0       	ldi	r27, 0x01	; 1
 aa0:	08 95       	ret
 aa2:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_zero>
 aa6:	67 2f       	mov	r22, r23
 aa8:	78 2f       	mov	r23, r24
 aaa:	88 27       	eor	r24, r24
 aac:	b8 5f       	subi	r27, 0xF8	; 248
 aae:	39 f0       	breq	.+14     	; 0xabe <__fixunssfsi+0x4c>
 ab0:	b9 3f       	cpi	r27, 0xF9	; 249
 ab2:	cc f3       	brlt	.-14     	; 0xaa6 <__fixunssfsi+0x34>
 ab4:	86 95       	lsr	r24
 ab6:	77 95       	ror	r23
 ab8:	67 95       	ror	r22
 aba:	b3 95       	inc	r27
 abc:	d9 f7       	brne	.-10     	; 0xab4 <__fixunssfsi+0x42>
 abe:	3e f4       	brtc	.+14     	; 0xace <__fixunssfsi+0x5c>
 ac0:	90 95       	com	r25
 ac2:	80 95       	com	r24
 ac4:	70 95       	com	r23
 ac6:	61 95       	neg	r22
 ac8:	7f 4f       	sbci	r23, 0xFF	; 255
 aca:	8f 4f       	sbci	r24, 0xFF	; 255
 acc:	9f 4f       	sbci	r25, 0xFF	; 255
 ace:	08 95       	ret

00000ad0 <__floatunsisf>:
 ad0:	e8 94       	clt
 ad2:	09 c0       	rjmp	.+18     	; 0xae6 <__floatsisf+0x12>

00000ad4 <__floatsisf>:
 ad4:	97 fb       	bst	r25, 7
 ad6:	3e f4       	brtc	.+14     	; 0xae6 <__floatsisf+0x12>
 ad8:	90 95       	com	r25
 ada:	80 95       	com	r24
 adc:	70 95       	com	r23
 ade:	61 95       	neg	r22
 ae0:	7f 4f       	sbci	r23, 0xFF	; 255
 ae2:	8f 4f       	sbci	r24, 0xFF	; 255
 ae4:	9f 4f       	sbci	r25, 0xFF	; 255
 ae6:	99 23       	and	r25, r25
 ae8:	a9 f0       	breq	.+42     	; 0xb14 <__floatsisf+0x40>
 aea:	f9 2f       	mov	r31, r25
 aec:	96 e9       	ldi	r25, 0x96	; 150
 aee:	bb 27       	eor	r27, r27
 af0:	93 95       	inc	r25
 af2:	f6 95       	lsr	r31
 af4:	87 95       	ror	r24
 af6:	77 95       	ror	r23
 af8:	67 95       	ror	r22
 afa:	b7 95       	ror	r27
 afc:	f1 11       	cpse	r31, r1
 afe:	f8 cf       	rjmp	.-16     	; 0xaf0 <__floatsisf+0x1c>
 b00:	fa f4       	brpl	.+62     	; 0xb40 <__floatsisf+0x6c>
 b02:	bb 0f       	add	r27, r27
 b04:	11 f4       	brne	.+4      	; 0xb0a <__floatsisf+0x36>
 b06:	60 ff       	sbrs	r22, 0
 b08:	1b c0       	rjmp	.+54     	; 0xb40 <__floatsisf+0x6c>
 b0a:	6f 5f       	subi	r22, 0xFF	; 255
 b0c:	7f 4f       	sbci	r23, 0xFF	; 255
 b0e:	8f 4f       	sbci	r24, 0xFF	; 255
 b10:	9f 4f       	sbci	r25, 0xFF	; 255
 b12:	16 c0       	rjmp	.+44     	; 0xb40 <__floatsisf+0x6c>
 b14:	88 23       	and	r24, r24
 b16:	11 f0       	breq	.+4      	; 0xb1c <__floatsisf+0x48>
 b18:	96 e9       	ldi	r25, 0x96	; 150
 b1a:	11 c0       	rjmp	.+34     	; 0xb3e <__floatsisf+0x6a>
 b1c:	77 23       	and	r23, r23
 b1e:	21 f0       	breq	.+8      	; 0xb28 <__floatsisf+0x54>
 b20:	9e e8       	ldi	r25, 0x8E	; 142
 b22:	87 2f       	mov	r24, r23
 b24:	76 2f       	mov	r23, r22
 b26:	05 c0       	rjmp	.+10     	; 0xb32 <__floatsisf+0x5e>
 b28:	66 23       	and	r22, r22
 b2a:	71 f0       	breq	.+28     	; 0xb48 <__floatsisf+0x74>
 b2c:	96 e8       	ldi	r25, 0x86	; 134
 b2e:	86 2f       	mov	r24, r22
 b30:	70 e0       	ldi	r23, 0x00	; 0
 b32:	60 e0       	ldi	r22, 0x00	; 0
 b34:	2a f0       	brmi	.+10     	; 0xb40 <__floatsisf+0x6c>
 b36:	9a 95       	dec	r25
 b38:	66 0f       	add	r22, r22
 b3a:	77 1f       	adc	r23, r23
 b3c:	88 1f       	adc	r24, r24
 b3e:	da f7       	brpl	.-10     	; 0xb36 <__floatsisf+0x62>
 b40:	88 0f       	add	r24, r24
 b42:	96 95       	lsr	r25
 b44:	87 95       	ror	r24
 b46:	97 f9       	bld	r25, 7
 b48:	08 95       	ret

00000b4a <__fp_inf>:
 b4a:	97 f9       	bld	r25, 7
 b4c:	9f 67       	ori	r25, 0x7F	; 127
 b4e:	80 e8       	ldi	r24, 0x80	; 128
 b50:	70 e0       	ldi	r23, 0x00	; 0
 b52:	60 e0       	ldi	r22, 0x00	; 0
 b54:	08 95       	ret

00000b56 <__fp_nan>:
 b56:	9f ef       	ldi	r25, 0xFF	; 255
 b58:	80 ec       	ldi	r24, 0xC0	; 192
 b5a:	08 95       	ret

00000b5c <__fp_pscA>:
 b5c:	00 24       	eor	r0, r0
 b5e:	0a 94       	dec	r0
 b60:	16 16       	cp	r1, r22
 b62:	17 06       	cpc	r1, r23
 b64:	18 06       	cpc	r1, r24
 b66:	09 06       	cpc	r0, r25
 b68:	08 95       	ret

00000b6a <__fp_pscB>:
 b6a:	00 24       	eor	r0, r0
 b6c:	0a 94       	dec	r0
 b6e:	12 16       	cp	r1, r18
 b70:	13 06       	cpc	r1, r19
 b72:	14 06       	cpc	r1, r20
 b74:	05 06       	cpc	r0, r21
 b76:	08 95       	ret

00000b78 <__fp_round>:
 b78:	09 2e       	mov	r0, r25
 b7a:	03 94       	inc	r0
 b7c:	00 0c       	add	r0, r0
 b7e:	11 f4       	brne	.+4      	; 0xb84 <__fp_round+0xc>
 b80:	88 23       	and	r24, r24
 b82:	52 f0       	brmi	.+20     	; 0xb98 <__fp_round+0x20>
 b84:	bb 0f       	add	r27, r27
 b86:	40 f4       	brcc	.+16     	; 0xb98 <__fp_round+0x20>
 b88:	bf 2b       	or	r27, r31
 b8a:	11 f4       	brne	.+4      	; 0xb90 <__fp_round+0x18>
 b8c:	60 ff       	sbrs	r22, 0
 b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__fp_round+0x20>
 b90:	6f 5f       	subi	r22, 0xFF	; 255
 b92:	7f 4f       	sbci	r23, 0xFF	; 255
 b94:	8f 4f       	sbci	r24, 0xFF	; 255
 b96:	9f 4f       	sbci	r25, 0xFF	; 255
 b98:	08 95       	ret

00000b9a <__fp_split3>:
 b9a:	57 fd       	sbrc	r21, 7
 b9c:	90 58       	subi	r25, 0x80	; 128
 b9e:	44 0f       	add	r20, r20
 ba0:	55 1f       	adc	r21, r21
 ba2:	59 f0       	breq	.+22     	; 0xbba <__fp_splitA+0x10>
 ba4:	5f 3f       	cpi	r21, 0xFF	; 255
 ba6:	71 f0       	breq	.+28     	; 0xbc4 <__fp_splitA+0x1a>
 ba8:	47 95       	ror	r20

00000baa <__fp_splitA>:
 baa:	88 0f       	add	r24, r24
 bac:	97 fb       	bst	r25, 7
 bae:	99 1f       	adc	r25, r25
 bb0:	61 f0       	breq	.+24     	; 0xbca <__fp_splitA+0x20>
 bb2:	9f 3f       	cpi	r25, 0xFF	; 255
 bb4:	79 f0       	breq	.+30     	; 0xbd4 <__fp_splitA+0x2a>
 bb6:	87 95       	ror	r24
 bb8:	08 95       	ret
 bba:	12 16       	cp	r1, r18
 bbc:	13 06       	cpc	r1, r19
 bbe:	14 06       	cpc	r1, r20
 bc0:	55 1f       	adc	r21, r21
 bc2:	f2 cf       	rjmp	.-28     	; 0xba8 <__fp_split3+0xe>
 bc4:	46 95       	lsr	r20
 bc6:	f1 df       	rcall	.-30     	; 0xbaa <__fp_splitA>
 bc8:	08 c0       	rjmp	.+16     	; 0xbda <__fp_splitA+0x30>
 bca:	16 16       	cp	r1, r22
 bcc:	17 06       	cpc	r1, r23
 bce:	18 06       	cpc	r1, r24
 bd0:	99 1f       	adc	r25, r25
 bd2:	f1 cf       	rjmp	.-30     	; 0xbb6 <__fp_splitA+0xc>
 bd4:	86 95       	lsr	r24
 bd6:	71 05       	cpc	r23, r1
 bd8:	61 05       	cpc	r22, r1
 bda:	08 94       	sec
 bdc:	08 95       	ret

00000bde <__fp_zero>:
 bde:	e8 94       	clt

00000be0 <__fp_szero>:
 be0:	bb 27       	eor	r27, r27
 be2:	66 27       	eor	r22, r22
 be4:	77 27       	eor	r23, r23
 be6:	cb 01       	movw	r24, r22
 be8:	97 f9       	bld	r25, 7
 bea:	08 95       	ret

00000bec <__mulsf3>:
 bec:	0e 94 09 06 	call	0xc12	; 0xc12 <__mulsf3x>
 bf0:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_round>
 bf4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__fp_pscA>
 bf8:	38 f0       	brcs	.+14     	; 0xc08 <__mulsf3+0x1c>
 bfa:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscB>
 bfe:	20 f0       	brcs	.+8      	; 0xc08 <__mulsf3+0x1c>
 c00:	95 23       	and	r25, r21
 c02:	11 f0       	breq	.+4      	; 0xc08 <__mulsf3+0x1c>
 c04:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_inf>
 c08:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_nan>
 c0c:	11 24       	eor	r1, r1
 c0e:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_szero>

00000c12 <__mulsf3x>:
 c12:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_split3>
 c16:	70 f3       	brcs	.-36     	; 0xbf4 <__mulsf3+0x8>

00000c18 <__mulsf3_pse>:
 c18:	95 9f       	mul	r25, r21
 c1a:	c1 f3       	breq	.-16     	; 0xc0c <__mulsf3+0x20>
 c1c:	95 0f       	add	r25, r21
 c1e:	50 e0       	ldi	r21, 0x00	; 0
 c20:	55 1f       	adc	r21, r21
 c22:	62 9f       	mul	r22, r18
 c24:	f0 01       	movw	r30, r0
 c26:	72 9f       	mul	r23, r18
 c28:	bb 27       	eor	r27, r27
 c2a:	f0 0d       	add	r31, r0
 c2c:	b1 1d       	adc	r27, r1
 c2e:	63 9f       	mul	r22, r19
 c30:	aa 27       	eor	r26, r26
 c32:	f0 0d       	add	r31, r0
 c34:	b1 1d       	adc	r27, r1
 c36:	aa 1f       	adc	r26, r26
 c38:	64 9f       	mul	r22, r20
 c3a:	66 27       	eor	r22, r22
 c3c:	b0 0d       	add	r27, r0
 c3e:	a1 1d       	adc	r26, r1
 c40:	66 1f       	adc	r22, r22
 c42:	82 9f       	mul	r24, r18
 c44:	22 27       	eor	r18, r18
 c46:	b0 0d       	add	r27, r0
 c48:	a1 1d       	adc	r26, r1
 c4a:	62 1f       	adc	r22, r18
 c4c:	73 9f       	mul	r23, r19
 c4e:	b0 0d       	add	r27, r0
 c50:	a1 1d       	adc	r26, r1
 c52:	62 1f       	adc	r22, r18
 c54:	83 9f       	mul	r24, r19
 c56:	a0 0d       	add	r26, r0
 c58:	61 1d       	adc	r22, r1
 c5a:	22 1f       	adc	r18, r18
 c5c:	74 9f       	mul	r23, r20
 c5e:	33 27       	eor	r19, r19
 c60:	a0 0d       	add	r26, r0
 c62:	61 1d       	adc	r22, r1
 c64:	23 1f       	adc	r18, r19
 c66:	84 9f       	mul	r24, r20
 c68:	60 0d       	add	r22, r0
 c6a:	21 1d       	adc	r18, r1
 c6c:	82 2f       	mov	r24, r18
 c6e:	76 2f       	mov	r23, r22
 c70:	6a 2f       	mov	r22, r26
 c72:	11 24       	eor	r1, r1
 c74:	9f 57       	subi	r25, 0x7F	; 127
 c76:	50 40       	sbci	r21, 0x00	; 0
 c78:	9a f0       	brmi	.+38     	; 0xca0 <__mulsf3_pse+0x88>
 c7a:	f1 f0       	breq	.+60     	; 0xcb8 <__mulsf3_pse+0xa0>
 c7c:	88 23       	and	r24, r24
 c7e:	4a f0       	brmi	.+18     	; 0xc92 <__mulsf3_pse+0x7a>
 c80:	ee 0f       	add	r30, r30
 c82:	ff 1f       	adc	r31, r31
 c84:	bb 1f       	adc	r27, r27
 c86:	66 1f       	adc	r22, r22
 c88:	77 1f       	adc	r23, r23
 c8a:	88 1f       	adc	r24, r24
 c8c:	91 50       	subi	r25, 0x01	; 1
 c8e:	50 40       	sbci	r21, 0x00	; 0
 c90:	a9 f7       	brne	.-22     	; 0xc7c <__mulsf3_pse+0x64>
 c92:	9e 3f       	cpi	r25, 0xFE	; 254
 c94:	51 05       	cpc	r21, r1
 c96:	80 f0       	brcs	.+32     	; 0xcb8 <__mulsf3_pse+0xa0>
 c98:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_inf>
 c9c:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_szero>
 ca0:	5f 3f       	cpi	r21, 0xFF	; 255
 ca2:	e4 f3       	brlt	.-8      	; 0xc9c <__mulsf3_pse+0x84>
 ca4:	98 3e       	cpi	r25, 0xE8	; 232
 ca6:	d4 f3       	brlt	.-12     	; 0xc9c <__mulsf3_pse+0x84>
 ca8:	86 95       	lsr	r24
 caa:	77 95       	ror	r23
 cac:	67 95       	ror	r22
 cae:	b7 95       	ror	r27
 cb0:	f7 95       	ror	r31
 cb2:	e7 95       	ror	r30
 cb4:	9f 5f       	subi	r25, 0xFF	; 255
 cb6:	c1 f7       	brne	.-16     	; 0xca8 <__mulsf3_pse+0x90>
 cb8:	fe 2b       	or	r31, r30
 cba:	88 0f       	add	r24, r24
 cbc:	91 1d       	adc	r25, r1
 cbe:	96 95       	lsr	r25
 cc0:	87 95       	ror	r24
 cc2:	97 f9       	bld	r25, 7
 cc4:	08 95       	ret

00000cc6 <_exit>:
 cc6:	f8 94       	cli

00000cc8 <__stop_program>:
 cc8:	ff cf       	rjmp	.-2      	; 0xcc8 <__stop_program>
