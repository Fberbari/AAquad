
AAquad_c++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001d4a  00001dde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800104  00800104  00001de2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001de2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000384b  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001475  00000000  00000000  0000588f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001062  00000000  00000000  00006d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f4  00000000  00000000  00007d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eda  00000000  00000000  0000835c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001089  00000000  00000000  00009236  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000a2bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_1>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_5>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      68:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      6c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      70:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      74:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      78:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      7c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      80:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      84:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      88:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      8c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      90:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      94:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      98:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      9c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      a0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      a4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      a8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      ac:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      b0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      b4:	03 6e       	ori	r16, 0xE3	; 227
      b6:	db 36       	cpi	r29, 0x6B	; 107
      b8:	3d 9a       	sbi	0x07, 5	; 7
      ba:	99 99       	sbic	0x13, 1	; 19
      bc:	99 3d       	cpi	r25, 0xD9	; 217
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	3e 00       	.word	0x003e	; ????
      c4:	00 00       	nop
      c6:	80 3f       	cpi	r24, 0xF0	; 240
      c8:	07 2c       	mov	r0, r7
      ca:	7a a5       	ldd	r23, Y+42	; 0x2a
      cc:	ba 6c       	ori	r27, 0xCA	; 202
      ce:	c5 90       	lpm	r12, Z+
      d0:	da 3b       	cpi	r29, 0xBA	; 186
      d2:	93 65       	ori	r25, 0x53	; 83
      d4:	fc 8b       	std	Y+20, r31	; 0x14
      d6:	bc 53       	subi	r27, 0x3C	; 60
      d8:	f8 10       	cpse	r15, r8
      da:	fd 3c       	cpi	r31, 0xCD	; 205
      dc:	56 92       	lac	Z, r5
      de:	83 4d       	sbci	r24, 0xD3	; 211
      e0:	bd 87       	std	Y+13, r27	; 0x0d
      e2:	9d 3a       	cpi	r25, 0xAD	; 173
      e4:	b6 3d       	cpi	r27, 0xD6	; 214
      e6:	cb c9       	rjmp	.-3178   	; 0xfffff47e <__eeprom_end+0xff7ef47e>
      e8:	bf 5b       	subi	r27, 0xBF	; 191
      ea:	be 73       	andi	r27, 0x3E	; 62
      ec:	da 0f       	add	r29, r26
      ee:	c9 3f       	cpi	r28, 0xF9	; 249

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d8 e0       	ldi	r29, 0x08	; 8
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
      fc:	11 e0       	ldi	r17, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	ea e4       	ldi	r30, 0x4A	; 74
     104:	fd e1       	ldi	r31, 0x1D	; 29
     106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x10>
     108:	05 90       	lpm	r0, Z+
     10a:	0d 92       	st	X+, r0
     10c:	a4 30       	cpi	r26, 0x04	; 4
     10e:	b1 07       	cpc	r27, r17
     110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0xc>

00000112 <__do_clear_bss>:
     112:	21 e0       	ldi	r18, 0x01	; 1
     114:	a4 e0       	ldi	r26, 0x04	; 4
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	01 c0       	rjmp	.+2      	; 0x11c <.do_clear_bss_start>

0000011a <.do_clear_bss_loop>:
     11a:	1d 92       	st	X+, r1

0000011c <.do_clear_bss_start>:
     11c:	a8 31       	cpi	r26, 0x18	; 24
     11e:	b2 07       	cpc	r27, r18
     120:	e1 f7       	brne	.-8      	; 0x11a <.do_clear_bss_loop>
     122:	0e 94 97 00 	call	0x12e	; 0x12e <main>
     126:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <main>:
	volatile uint16_t temp_timer_throttle = 0; 

	volatile uint16_t temp0;
	

int main(void){
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c6 5d       	subi	r28, 0xD6	; 214
     138:	d1 09       	sbc	r29, r1
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
	

	initialize::timers();
     144:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_ZN10initialize6timersEv>
	initialize::interrupts();
     148:	0e 94 cb 02 	call	0x596	; 0x596 <_ZN10initialize10interruptsEv>
	

	I2C_328pb i2c(0xAA); // 
     14c:	6a ea       	ldi	r22, 0xAA	; 170
     14e:	70 e0       	ldi	r23, 0x00	; 0
     150:	ce 01       	movw	r24, r28
     152:	c9 96       	adiw	r24, 0x39	; 57
     154:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_ZN9I2C_328pbC1Ei>
	
	pilot_instructions pilot;
	pilot.set_max_angle(30);
     158:	6e e1       	ldi	r22, 0x1E	; 30
     15a:	ce 01       	movw	r24, r28
     15c:	ca 96       	adiw	r24, 0x3a	; 58
     15e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_ZN18pilot_instructions13set_max_angleEh>
	pilot.set_max_yaw_rate(45);	// this retrieves and holds the pilot's wishes
     162:	6d e2       	ldi	r22, 0x2D	; 45
     164:	ce 01       	movw	r24, r28
     166:	ca 96       	adiw	r24, 0x3a	; 58
     168:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN18pilot_instructions16set_max_yaw_rateEh>

	

	I2C_328pb sensor_I2C(0xAA);	// object created just for use in the sensor object
     16c:	6a ea       	ldi	r22, 0xAA	; 170
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	ce 01       	movw	r24, r28
     172:	8d 5b       	subi	r24, 0xBD	; 189
     174:	9f 4f       	sbci	r25, 0xFF	; 255
     176:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_ZN9I2C_328pbC1Ei>
	sensors sense(sensor_I2C);
     17a:	60 e0       	ldi	r22, 0x00	; 0
     17c:	ce 01       	movw	r24, r28
     17e:	8c 5b       	subi	r24, 0xBC	; 188
     180:	9f 4f       	sbci	r25, 0xFF	; 255
     182:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN7sensorsC1E9I2C_328pb>

	PID bank_pid;
     186:	ce 01       	movw	r24, r28
     188:	82 5a       	subi	r24, 0xA2	; 162
     18a:	9f 4f       	sbci	r25, 0xFF	; 255
     18c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN3PIDC1Ev>
	bank_pid.setWeights(3,0.05,0.005);
     190:	0f 2e       	mov	r0, r31
     192:	fa e0       	ldi	r31, 0x0A	; 10
     194:	cf 2e       	mov	r12, r31
     196:	f7 ed       	ldi	r31, 0xD7	; 215
     198:	df 2e       	mov	r13, r31
     19a:	f3 ea       	ldi	r31, 0xA3	; 163
     19c:	ef 2e       	mov	r14, r31
     19e:	fb e3       	ldi	r31, 0x3B	; 59
     1a0:	ff 2e       	mov	r15, r31
     1a2:	f0 2d       	mov	r31, r0
     1a4:	cd aa       	std	Y+53, r12	; 0x35
     1a6:	de aa       	std	Y+54, r13	; 0x36
     1a8:	ef aa       	std	Y+55, r14	; 0x37
     1aa:	f8 ae       	std	Y+56, r15	; 0x38
     1ac:	8d ec       	ldi	r24, 0xCD	; 205
     1ae:	9c ec       	ldi	r25, 0xCC	; 204
     1b0:	ac e4       	ldi	r26, 0x4C	; 76
     1b2:	bd e3       	ldi	r27, 0x3D	; 61
     1b4:	89 ab       	std	Y+49, r24	; 0x31
     1b6:	9a ab       	std	Y+50, r25	; 0x32
     1b8:	ab ab       	std	Y+51, r26	; 0x33
     1ba:	bc ab       	std	Y+52, r27	; 0x34
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	a0 e4       	ldi	r26, 0x40	; 64
     1c2:	b0 e4       	ldi	r27, 0x40	; 64
     1c4:	8d a7       	std	Y+45, r24	; 0x2d
     1c6:	9e a7       	std	Y+46, r25	; 0x2e
     1c8:	af a7       	std	Y+47, r26	; 0x2f
     1ca:	b8 ab       	std	Y+48, r27	; 0x30
     1cc:	9e 01       	movw	r18, r28
     1ce:	2b 5c       	subi	r18, 0xCB	; 203
     1d0:	3f 4f       	sbci	r19, 0xFF	; 255
     1d2:	ae 01       	movw	r20, r28
     1d4:	4f 5c       	subi	r20, 0xCF	; 207
     1d6:	5f 4f       	sbci	r21, 0xFF	; 255
     1d8:	be 01       	movw	r22, r28
     1da:	63 5d       	subi	r22, 0xD3	; 211
     1dc:	7f 4f       	sbci	r23, 0xFF	; 255
     1de:	ce 01       	movw	r24, r28
     1e0:	82 5a       	subi	r24, 0xA2	; 162
     1e2:	9f 4f       	sbci	r25, 0xFF	; 255
     1e4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN3PID10setWeightsERKfS1_S1_>
	bank_pid.setOutputLowerLimit(-50);
     1e8:	0f 2e       	mov	r0, r31
     1ea:	41 2c       	mov	r4, r1
     1ec:	51 2c       	mov	r5, r1
     1ee:	f8 e4       	ldi	r31, 0x48	; 72
     1f0:	6f 2e       	mov	r6, r31
     1f2:	f2 ec       	ldi	r31, 0xC2	; 194
     1f4:	7f 2e       	mov	r7, r31
     1f6:	f0 2d       	mov	r31, r0
     1f8:	49 a6       	std	Y+41, r4	; 0x29
     1fa:	5a a6       	std	Y+42, r5	; 0x2a
     1fc:	6b a6       	std	Y+43, r6	; 0x2b
     1fe:	7c a6       	std	Y+44, r7	; 0x2c
     200:	be 01       	movw	r22, r28
     202:	67 5d       	subi	r22, 0xD7	; 215
     204:	7f 4f       	sbci	r23, 0xFF	; 255
     206:	ce 01       	movw	r24, r28
     208:	82 5a       	subi	r24, 0xA2	; 162
     20a:	9f 4f       	sbci	r25, 0xFF	; 255
     20c:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN3PID19setOutputLowerLimitERKf>
	bank_pid.setOutputUpperLimit(50);
     210:	0f 2e       	mov	r0, r31
     212:	81 2c       	mov	r8, r1
     214:	91 2c       	mov	r9, r1
     216:	f8 e4       	ldi	r31, 0x48	; 72
     218:	af 2e       	mov	r10, r31
     21a:	f2 e4       	ldi	r31, 0x42	; 66
     21c:	bf 2e       	mov	r11, r31
     21e:	f0 2d       	mov	r31, r0
     220:	8d a2       	std	Y+37, r8	; 0x25
     222:	9e a2       	std	Y+38, r9	; 0x26
     224:	af a2       	std	Y+39, r10	; 0x27
     226:	b8 a6       	std	Y+40, r11	; 0x28
     228:	be 01       	movw	r22, r28
     22a:	6b 5d       	subi	r22, 0xDB	; 219
     22c:	7f 4f       	sbci	r23, 0xFF	; 255
     22e:	ce 01       	movw	r24, r28
     230:	82 5a       	subi	r24, 0xA2	; 162
     232:	9f 4f       	sbci	r25, 0xFF	; 255
     234:	0e 94 28 03 	call	0x650	; 0x650 <_ZN3PID19setOutputUpperLimitERKf>

	PID pitch_pid;
     238:	ce 01       	movw	r24, r28
     23a:	88 56       	subi	r24, 0x68	; 104
     23c:	9f 4f       	sbci	r25, 0xFF	; 255
     23e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN3PIDC1Ev>
	pitch_pid.setWeights(0.5,0.5,0.005);
     242:	c9 a2       	std	Y+33, r12	; 0x21
     244:	da a2       	std	Y+34, r13	; 0x22
     246:	eb a2       	std	Y+35, r14	; 0x23
     248:	fc a2       	std	Y+36, r15	; 0x24
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	a0 e0       	ldi	r26, 0x00	; 0
     250:	bf e3       	ldi	r27, 0x3F	; 63
     252:	8d 8f       	std	Y+29, r24	; 0x1d
     254:	9e 8f       	std	Y+30, r25	; 0x1e
     256:	af 8f       	std	Y+31, r26	; 0x1f
     258:	b8 a3       	std	Y+32, r27	; 0x20
     25a:	89 8f       	std	Y+25, r24	; 0x19
     25c:	9a 8f       	std	Y+26, r25	; 0x1a
     25e:	ab 8f       	std	Y+27, r26	; 0x1b
     260:	bc 8f       	std	Y+28, r27	; 0x1c
     262:	9e 01       	movw	r18, r28
     264:	2f 5d       	subi	r18, 0xDF	; 223
     266:	3f 4f       	sbci	r19, 0xFF	; 255
     268:	ae 01       	movw	r20, r28
     26a:	43 5e       	subi	r20, 0xE3	; 227
     26c:	5f 4f       	sbci	r21, 0xFF	; 255
     26e:	be 01       	movw	r22, r28
     270:	67 5e       	subi	r22, 0xE7	; 231
     272:	7f 4f       	sbci	r23, 0xFF	; 255
     274:	ce 01       	movw	r24, r28
     276:	88 56       	subi	r24, 0x68	; 104
     278:	9f 4f       	sbci	r25, 0xFF	; 255
     27a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN3PID10setWeightsERKfS1_S1_>
	pitch_pid.setOutputLowerLimit(-50);
     27e:	4d 8a       	std	Y+21, r4	; 0x15
     280:	5e 8a       	std	Y+22, r5	; 0x16
     282:	6f 8a       	std	Y+23, r6	; 0x17
     284:	78 8e       	std	Y+24, r7	; 0x18
     286:	be 01       	movw	r22, r28
     288:	6b 5e       	subi	r22, 0xEB	; 235
     28a:	7f 4f       	sbci	r23, 0xFF	; 255
     28c:	ce 01       	movw	r24, r28
     28e:	88 56       	subi	r24, 0x68	; 104
     290:	9f 4f       	sbci	r25, 0xFF	; 255
     292:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN3PID19setOutputLowerLimitERKf>
	pitch_pid.setOutputUpperLimit(50);
     296:	89 8a       	std	Y+17, r8	; 0x11
     298:	9a 8a       	std	Y+18, r9	; 0x12
     29a:	ab 8a       	std	Y+19, r10	; 0x13
     29c:	bc 8a       	std	Y+20, r11	; 0x14
     29e:	be 01       	movw	r22, r28
     2a0:	6f 5e       	subi	r22, 0xEF	; 239
     2a2:	7f 4f       	sbci	r23, 0xFF	; 255
     2a4:	ce 01       	movw	r24, r28
     2a6:	88 56       	subi	r24, 0x68	; 104
     2a8:	9f 4f       	sbci	r25, 0xFF	; 255
     2aa:	0e 94 28 03 	call	0x650	; 0x650 <_ZN3PID19setOutputUpperLimitERKf>
	


	I2C_328pb pwm_chip_I2c(0xAA);
     2ae:	6a ea       	ldi	r22, 0xAA	; 170
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	ce 01       	movw	r24, r28
     2b4:	8e 52       	subi	r24, 0x2E	; 46
     2b6:	9f 4f       	sbci	r25, 0xFF	; 255
     2b8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_ZN9I2C_328pbC1Ei>
	pwm_chip pwm(pwm_chip_I2c, 10);
     2bc:	4a e0       	ldi	r20, 0x0A	; 10
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	ce 01       	movw	r24, r28
     2c2:	8d 52       	subi	r24, 0x2D	; 45
     2c4:	9f 4f       	sbci	r25, 0xFF	; 255
     2c6:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN8pwm_chipC1E9I2C_328pbh>

	sei();
     2ca:	78 94       	sei
	
	volatile int crap[3];
	volatile int cnt = 0;
     2cc:	cb 52       	subi	r28, 0x2B	; 43
     2ce:	df 4f       	sbci	r29, 0xFF	; 255
     2d0:	19 82       	std	Y+1, r1	; 0x01
     2d2:	18 82       	st	Y, r1
     2d4:	c5 5d       	subi	r28, 0xD5	; 213
     2d6:	d0 40       	sbci	r29, 0x00	; 0
	
	while(1){
		
		cnt ++;
     2d8:	cb 52       	subi	r28, 0x2B	; 43
     2da:	df 4f       	sbci	r29, 0xFF	; 255
     2dc:	88 81       	ld	r24, Y
     2de:	99 81       	ldd	r25, Y+1	; 0x01
     2e0:	c5 5d       	subi	r28, 0xD5	; 213
     2e2:	d0 40       	sbci	r29, 0x00	; 0
     2e4:	01 96       	adiw	r24, 0x01	; 1
     2e6:	cb 52       	subi	r28, 0x2B	; 43
     2e8:	df 4f       	sbci	r29, 0xFF	; 255
     2ea:	99 83       	std	Y+1, r25	; 0x01
     2ec:	88 83       	st	Y, r24
     2ee:	c5 5d       	subi	r28, 0xD5	; 213
     2f0:	d0 40       	sbci	r29, 0x00	; 0
			
		sense.read_acc(sensor_I2C);
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	ce 01       	movw	r24, r28
     2f6:	8c 5b       	subi	r24, 0xBC	; 188
     2f8:	9f 4f       	sbci	r25, 0xFF	; 255
     2fa:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZN7sensors8read_accE9I2C_328pb>
		sense.read_gyro(sensor_I2C);	// all sensor data processed
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	ce 01       	movw	r24, r28
     302:	8c 5b       	subi	r24, 0xBC	; 188
     304:	9f 4f       	sbci	r25, 0xFF	; 255
     306:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_ZN7sensors9read_gyroE9I2C_328pb>
	
		sense.compute_position();
     30a:	ce 01       	movw	r24, r28
     30c:	8c 5b       	subi	r24, 0xBC	; 188
     30e:	9f 4f       	sbci	r25, 0xFF	; 255
     310:	0e 94 c5 09 	call	0x138a	; 0x138a <_ZN7sensors16compute_positionEv>
		
		pilot.compute();	// all pilot data processed
     314:	ce 01       	movw	r24, r28
     316:	ca 96       	adiw	r24, 0x3a	; 58
     318:	0e 94 0a 06 	call	0xc14	; 0xc14 <_ZN18pilot_instructions7computeEv>

		
		
	
		bank_pid.setDesiredPoint(pilot.get_bank_angle());
     31c:	ce 01       	movw	r24, r28
     31e:	ca 96       	adiw	r24, 0x3a	; 58
     320:	0e 94 ff 05 	call	0xbfe	; 0xbfe <_ZNK18pilot_instructions14get_bank_angleEv>
     324:	bc 01       	movw	r22, r24
     326:	99 0f       	add	r25, r25
     328:	88 0b       	sbc	r24, r24
     32a:	99 0b       	sbc	r25, r25
     32c:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
     330:	6d 87       	std	Y+13, r22	; 0x0d
     332:	7e 87       	std	Y+14, r23	; 0x0e
     334:	8f 87       	std	Y+15, r24	; 0x0f
     336:	98 8b       	std	Y+16, r25	; 0x10
     338:	be 01       	movw	r22, r28
     33a:	63 5f       	subi	r22, 0xF3	; 243
     33c:	7f 4f       	sbci	r23, 0xFF	; 255
     33e:	ce 01       	movw	r24, r28
     340:	82 5a       	subi	r24, 0xA2	; 162
     342:	9f 4f       	sbci	r25, 0xFF	; 255
     344:	0e 94 33 03 	call	0x666	; 0x666 <_ZN3PID15setDesiredPointERKf>
		pitch_pid.setDesiredPoint(pilot.get_pitch_angle());
     348:	ce 01       	movw	r24, r28
     34a:	ca 96       	adiw	r24, 0x3a	; 58
     34c:	0e 94 03 06 	call	0xc06	; 0xc06 <_ZNK18pilot_instructions15get_pitch_angleEv>
     350:	bc 01       	movw	r22, r24
     352:	99 0f       	add	r25, r25
     354:	88 0b       	sbc	r24, r24
     356:	99 0b       	sbc	r25, r25
     358:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
     35c:	69 87       	std	Y+9, r22	; 0x09
     35e:	7a 87       	std	Y+10, r23	; 0x0a
     360:	8b 87       	std	Y+11, r24	; 0x0b
     362:	9c 87       	std	Y+12, r25	; 0x0c
     364:	be 01       	movw	r22, r28
     366:	67 5f       	subi	r22, 0xF7	; 247
     368:	7f 4f       	sbci	r23, 0xFF	; 255
     36a:	ce 01       	movw	r24, r28
     36c:	88 56       	subi	r24, 0x68	; 104
     36e:	9f 4f       	sbci	r25, 0xFF	; 255
     370:	0e 94 33 03 	call	0x666	; 0x666 <_ZN3PID15setDesiredPointERKf>
	
	//crap[0] = (int) bank_pid.refresh(sense.get_roll());
	//crap[1] =(int) pitch_pid.refresh(sense.get_pitch());
	
	PID::combine_data( bank_pid.refresh(sense.get_roll() ), pitch_pid.refresh(sense.get_pitch() ), pilot.get_throttle_power() );
     374:	ce 01       	movw	r24, r28
     376:	ca 96       	adiw	r24, 0x3a	; 58
     378:	0e 94 07 06 	call	0xc0e	; 0xc0e <_ZNK18pilot_instructions18get_throttle_powerEv>
     37c:	18 2f       	mov	r17, r24
     37e:	ce 01       	movw	r24, r28
     380:	8c 5b       	subi	r24, 0xBC	; 188
     382:	9f 4f       	sbci	r25, 0xFF	; 255
     384:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZNK7sensors9get_pitchEv>
     388:	6d 83       	std	Y+5, r22	; 0x05
     38a:	7e 83       	std	Y+6, r23	; 0x06
     38c:	8f 83       	std	Y+7, r24	; 0x07
     38e:	98 87       	std	Y+8, r25	; 0x08
     390:	be 01       	movw	r22, r28
     392:	6b 5f       	subi	r22, 0xFB	; 251
     394:	7f 4f       	sbci	r23, 0xFF	; 255
     396:	ce 01       	movw	r24, r28
     398:	88 56       	subi	r24, 0x68	; 104
     39a:	9f 4f       	sbci	r25, 0xFF	; 255
     39c:	0e 94 92 03 	call	0x724	; 0x724 <_ZN3PID7refreshERKf>
     3a0:	2b 01       	movw	r4, r22
     3a2:	3c 01       	movw	r6, r24
     3a4:	ce 01       	movw	r24, r28
     3a6:	8c 5b       	subi	r24, 0xBC	; 188
     3a8:	9f 4f       	sbci	r25, 0xFF	; 255
     3aa:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_ZNK7sensors8get_rollEv>
     3ae:	69 83       	std	Y+1, r22	; 0x01
     3b0:	7a 83       	std	Y+2, r23	; 0x02
     3b2:	8b 83       	std	Y+3, r24	; 0x03
     3b4:	9c 83       	std	Y+4, r25	; 0x04
     3b6:	be 01       	movw	r22, r28
     3b8:	6f 5f       	subi	r22, 0xFF	; 255
     3ba:	7f 4f       	sbci	r23, 0xFF	; 255
     3bc:	ce 01       	movw	r24, r28
     3be:	82 5a       	subi	r24, 0xA2	; 162
     3c0:	9f 4f       	sbci	r25, 0xFF	; 255
     3c2:	0e 94 92 03 	call	0x724	; 0x724 <_ZN3PID7refreshERKf>
     3c6:	4b 01       	movw	r8, r22
     3c8:	5c 01       	movw	r10, r24
     3ca:	61 2f       	mov	r22, r17
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatunsisf>
     3d6:	7b 01       	movw	r14, r22
     3d8:	8c 01       	movw	r16, r24
     3da:	a3 01       	movw	r20, r6
     3dc:	92 01       	movw	r18, r4
     3de:	c5 01       	movw	r24, r10
     3e0:	b4 01       	movw	r22, r8
     3e2:	0e 94 ef 04 	call	0x9de	; 0x9de <_ZN3PID12combine_dataEfff>

	
	

	
		pwm.pass(pwm_chip_I2c, PID::get_motor());	
     3e6:	0e 94 f6 05 	call	0xbec	; 0xbec <_ZN3PID9get_motorEv>
     3ea:	ac 01       	movw	r20, r24
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	ce 01       	movw	r24, r28
     3f0:	8d 52       	subi	r24, 0x2D	; 45
     3f2:	9f 4f       	sbci	r25, 0xFF	; 255
     3f4:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN8pwm_chip4passE9I2C_328pbPi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f8:	86 e0       	ldi	r24, 0x06	; 6
     3fa:	8a 95       	dec	r24
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <main+0x2cc>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
     400:	6b cf       	rjmp	.-298    	; 0x2d8 <main+0x1aa>

00000402 <__vector_1>:

}



ISR(INT0_vect){
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	2f 93       	push	r18
     40e:	3f 93       	push	r19
     410:	4f 93       	push	r20
     412:	5f 93       	push	r21
     414:	8f 93       	push	r24
     416:	9f 93       	push	r25
	
		uint16_t temp = TCNT1;
     418:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     41c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

		if ( temp < temp_timer_aileron){	// timer overflow
     420:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temp_timer_aileron>
     424:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temp_timer_aileron+0x1>
     428:	82 17       	cp	r24, r18
     42a:	93 07       	cpc	r25, r19
     42c:	70 f4       	brcc	.+28     	; 0x44a <__vector_1+0x48>

			requested_aileron_pos = (0xffff - temp_timer_aileron) + temp ;
     42e:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <temp_timer_aileron>
     432:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <temp_timer_aileron+0x1>
     436:	9c 01       	movw	r18, r24
     438:	21 50       	subi	r18, 0x01	; 1
     43a:	31 09       	sbc	r19, r1
     43c:	24 1b       	sub	r18, r20
     43e:	35 0b       	sbc	r19, r21
     440:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <requested_aileron_pos+0x1>
     444:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <requested_aileron_pos>
     448:	0b c0       	rjmp	.+22     	; 0x460 <__vector_1+0x5e>
		}

		else {	// regular case
	
			requested_aileron_pos = temp - temp_timer_aileron;
     44a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temp_timer_aileron>
     44e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temp_timer_aileron+0x1>
     452:	ac 01       	movw	r20, r24
     454:	42 1b       	sub	r20, r18
     456:	53 0b       	sbc	r21, r19
     458:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <requested_aileron_pos+0x1>
     45c:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp;
     460:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <temp_timer_aileron+0x1>
     464:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <temp_timer_aileron>
		
		
		// here, there is a chance that the value stored in requested aileron is actually (0xffff - actual requested aileron) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
	
}
     468:	9f 91       	pop	r25
     46a:	8f 91       	pop	r24
     46c:	5f 91       	pop	r21
     46e:	4f 91       	pop	r20
     470:	3f 91       	pop	r19
     472:	2f 91       	pop	r18
     474:	0f 90       	pop	r0
     476:	0f be       	out	0x3f, r0	; 63
     478:	0f 90       	pop	r0
     47a:	1f 90       	pop	r1
     47c:	18 95       	reti

0000047e <__vector_5>:

}

*/

ISR(PCINT2_vect){
     47e:	1f 92       	push	r1
     480:	0f 92       	push	r0
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	0f 92       	push	r0
     486:	11 24       	eor	r1, r1
     488:	2f 93       	push	r18
     48a:	3f 93       	push	r19
     48c:	4f 93       	push	r20
     48e:	5f 93       	push	r21
     490:	8f 93       	push	r24
     492:	9f 93       	push	r25

	uint16_t temp = TCNT1;
     494:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     498:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	

	if ( temp < temp_timer_elevator){	// timer overflow
     49c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
     4a0:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
     4a4:	82 17       	cp	r24, r18
     4a6:	93 07       	cpc	r25, r19
     4a8:	70 f4       	brcc	.+28     	; 0x4c6 <__vector_5+0x48>

		requested_elevator_pos = (0xffff - temp_timer_elevator) + temp ;
     4aa:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__data_end>
     4ae:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__data_end+0x1>
     4b2:	9c 01       	movw	r18, r24
     4b4:	21 50       	subi	r18, 0x01	; 1
     4b6:	31 09       	sbc	r19, r1
     4b8:	24 1b       	sub	r18, r20
     4ba:	35 0b       	sbc	r19, r21
     4bc:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <requested_elevator_pos+0x1>
     4c0:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <requested_elevator_pos>
     4c4:	0b c0       	rjmp	.+22     	; 0x4dc <__vector_5+0x5e>
	}

	else {	// regular case

		requested_elevator_pos = temp - temp_timer_elevator;
     4c6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
     4ca:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
     4ce:	ac 01       	movw	r20, r24
     4d0:	42 1b       	sub	r20, r18
     4d2:	53 0b       	sbc	r21, r19
     4d4:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <requested_elevator_pos+0x1>
     4d8:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <requested_elevator_pos>
		
	}

	
	temp_timer_elevator = temp;
     4dc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
     4e0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	
	

}
     4e4:	9f 91       	pop	r25
     4e6:	8f 91       	pop	r24
     4e8:	5f 91       	pop	r21
     4ea:	4f 91       	pop	r20
     4ec:	3f 91       	pop	r19
     4ee:	2f 91       	pop	r18
     4f0:	0f 90       	pop	r0
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	0f 90       	pop	r0
     4f6:	1f 90       	pop	r1
     4f8:	18 95       	reti

000004fa <_ZN9I2C_328pbC1Ei>:

I2C_328pb::I2C_328pb(int bit_rate){

	// takes care of any and all initialsation

	TWBR0 = bit_rate;
     4fa:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     4fe:	08 95       	ret

00000500 <_ZN9I2C_328pb5startEv>:



void I2C_328pb::start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
     500:	84 ea       	ldi	r24, 0xA4	; 164
     502:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     506:	ec eb       	ldi	r30, 0xBC	; 188
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	80 81       	ld	r24, Z
     50c:	88 23       	and	r24, r24
     50e:	ec f7       	brge	.-6      	; 0x50a <_ZN9I2C_328pb5startEv+0xa>
		return 0; 
	}

	return 1;
*/
}
     510:	08 95       	ret

00000512 <_ZN9I2C_328pb12repeat_startEv>:


void I2C_328pb::repeat_start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
     512:	84 ea       	ldi	r24, 0xA4	; 164
     514:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     518:	ec eb       	ldi	r30, 0xBC	; 188
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	88 23       	and	r24, r24
     520:	ec f7       	brge	.-6      	; 0x51c <_ZN9I2C_328pb12repeat_startEv+0xa>
		return 0; 
	}

	return 1;
*/
}
     522:	08 95       	ret

00000524 <_ZN9I2C_328pb10send_slaveEi>:

void I2C_328pb::send_slave(int address){

	// send slave address + write bit

	TWDR0 = address;
     524:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
     528:	84 e8       	ldi	r24, 0x84	; 132
     52a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     52e:	ec eb       	ldi	r30, 0xBC	; 188
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	80 81       	ld	r24, Z
     534:	88 23       	and	r24, r24
     536:	ec f7       	brge	.-6      	; 0x532 <_ZN9I2C_328pb10send_slaveEi+0xe>
	}

	return 1;
*/

}
     538:	08 95       	ret

0000053a <_ZN9I2C_328pb8send_regEi>:

void I2C_328pb::send_reg(int reg){

	// send  address of register to be written

	TWDR0 = reg; 
     53a:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

  	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
     53e:	84 e8       	ldi	r24, 0x84	; 132
     540:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     544:	ec eb       	ldi	r30, 0xBC	; 188
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	80 81       	ld	r24, Z
     54a:	88 23       	and	r24, r24
     54c:	ec f7       	brge	.-6      	; 0x548 <_ZN9I2C_328pb8send_regEi+0xe>
	}

	return 1;
*/

}
     54e:	08 95       	ret

00000550 <_ZN9I2C_328pb4sendEi>:


void I2C_328pb::send(int data){

	TWDR0 = data;
     550:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ((1 << TWINT) | (1 << TWEN));
     554:	84 e8       	ldi	r24, 0x84	; 132
     556:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     55a:	ec eb       	ldi	r30, 0xBC	; 188
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	80 81       	ld	r24, Z
     560:	88 23       	and	r24, r24
     562:	ec f7       	brge	.-6      	; 0x55e <_ZN9I2C_328pb4sendEi+0xe>
	}

	return 1;
*/

}
     564:	08 95       	ret

00000566 <_ZN9I2C_328pb13get_next_byteEv>:

void I2C_328pb::get_next_byte(){


	TWCR0 = ( (1 << TWEN) | (1 << TWINT) | (1 << TWEA));
     566:	84 ec       	ldi	r24, 0xC4	; 196
     568:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while (! (TWCR0 & (1 << TWINT)) );
     56c:	ec eb       	ldi	r30, 0xBC	; 188
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	80 81       	ld	r24, Z
     572:	88 23       	and	r24, r24
     574:	ec f7       	brge	.-6      	; 0x570 <_ZN9I2C_328pb13get_next_byteEv+0xa>
	return 1;

*/


}
     576:	08 95       	ret

00000578 <_ZN9I2C_328pb13end_data_readEv>:

void I2C_328pb::end_data_read(){


	TWCR0 = ( (1 << TWEN) | (1 << TWINT) );
     578:	84 e8       	ldi	r24, 0x84	; 132
     57a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while (! (TWCR0 & (1 << TWINT)) );
     57e:	ec eb       	ldi	r30, 0xBC	; 188
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	80 81       	ld	r24, Z
     584:	88 23       	and	r24, r24
     586:	ec f7       	brge	.-6      	; 0x582 <_ZN9I2C_328pb13end_data_readEv+0xa>


}
     588:	08 95       	ret

0000058a <_ZN9I2C_328pb4stopEv>:

void I2C_328pb::stop(){


	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) ); 
     58a:	ec eb       	ldi	r30, 0xBC	; 188
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	80 81       	ld	r24, Z
     590:	84 69       	ori	r24, 0x94	; 148
     592:	80 83       	st	Z, r24
     594:	08 95       	ret

00000596 <_ZN10initialize10interruptsEv>:


void initialize::interrupts(){

	// external int 0
	EIMSK |= (1 << INT0); // enable the int0 interrupt												
     596:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC00);	// will fire at any logical change
     598:	e9 e6       	ldi	r30, 0x69	; 105
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 81       	ld	r24, Z
     59e:	81 60       	ori	r24, 0x01	; 1
     5a0:	80 83       	st	Z, r24
	// pcint 1 (for pin C3)
	PCICR |= (1 << PCIE1);
	PCMSK1 |= (1 << PCINT11);
*/
	//pcint 2 (for pin B1)
	PCICR |= (1 << PCIE2);
     5a2:	e8 e6       	ldi	r30, 0x68	; 104
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	80 81       	ld	r24, Z
     5a8:	84 60       	ori	r24, 0x04	; 4
     5aa:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT17);
     5ac:	ed e6       	ldi	r30, 0x6D	; 109
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	80 81       	ld	r24, Z
     5b2:	82 60       	ori	r24, 0x02	; 2
     5b4:	80 83       	st	Z, r24
	
	// setting the pullup resistors on everything (will not be necessary once all wires are connected

	DDRD &= ~(1 << 2);
     5b6:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << 2);
     5b8:	5a 9a       	sbi	0x0b, 2	; 11
	
	DDRC &= ~(1 << 3);
     5ba:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1 << 3);
     5bc:	43 9a       	sbi	0x08, 3	; 8
	
	DDRD &= ~(1 << 3);
     5be:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1 << 3);
     5c0:	5b 9a       	sbi	0x0b, 3	; 11
	
	DDRD &= ~(1 << 4);
     5c2:	54 98       	cbi	0x0a, 4	; 10
	PORTD |= (1 << 4);
     5c4:	5c 9a       	sbi	0x0b, 4	; 11
     5c6:	08 95       	ret

000005c8 <_ZN10initialize6timersEv>:
}

void initialize::timers(){

	// by default the timer is set to normal mode
	TCCR1B |= ( (1 << CS10));	// timer will run without prescaler and willoverrun 15 times/second
     5c8:	e1 e8       	ldi	r30, 0x81	; 129
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	81 60       	ori	r24, 0x01	; 1
     5d0:	80 83       	st	Z, r24
     5d2:	08 95       	ret

000005d4 <_ZN3PIDC1Ev>:
#include "PID.h"


PID::PID(){
     5d4:	fc 01       	movw	r30, r24

    last_error = 0;
     5d6:	14 82       	std	Z+4, r1	; 0x04
     5d8:	15 82       	std	Z+5, r1	; 0x05
     5da:	16 82       	std	Z+6, r1	; 0x06
     5dc:	17 82       	std	Z+7, r1	; 0x07
	current_error = 0;
     5de:	10 82       	st	Z, r1
     5e0:	11 82       	std	Z+1, r1	; 0x01
     5e2:	12 82       	std	Z+2, r1	; 0x02
     5e4:	13 82       	std	Z+3, r1	; 0x03
    last_output = 0;
     5e6:	10 86       	std	Z+8, r1	; 0x08
     5e8:	11 86       	std	Z+9, r1	; 0x09
     5ea:	12 86       	std	Z+10, r1	; 0x0a
     5ec:	13 86       	std	Z+11, r1	; 0x0b
    integral = 0;
     5ee:	10 a2       	std	Z+32, r1	; 0x20
     5f0:	11 a2       	std	Z+33, r1	; 0x21
     5f2:	12 a2       	std	Z+34, r1	; 0x22
     5f4:	13 a2       	std	Z+35, r1	; 0x23
     5f6:	08 95       	ret

000005f8 <_ZN3PID10setWeightsERKfS1_S1_>:
 
// initialising this static array is required      
int PID::motor[4] = {0};


void PID::setWeights(const float &Kp, const float &Ki, const float &Kd) {
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	fc 01       	movw	r30, r24
	this->Kp = Kp;
     5fe:	eb 01       	movw	r28, r22
     600:	88 81       	ld	r24, Y
     602:	99 81       	ldd	r25, Y+1	; 0x01
     604:	aa 81       	ldd	r26, Y+2	; 0x02
     606:	bb 81       	ldd	r27, Y+3	; 0x03
     608:	84 8b       	std	Z+20, r24	; 0x14
     60a:	95 8b       	std	Z+21, r25	; 0x15
     60c:	a6 8b       	std	Z+22, r26	; 0x16
     60e:	b7 8b       	std	Z+23, r27	; 0x17
	this->Ki = Ki;
     610:	ea 01       	movw	r28, r20
     612:	88 81       	ld	r24, Y
     614:	99 81       	ldd	r25, Y+1	; 0x01
     616:	aa 81       	ldd	r26, Y+2	; 0x02
     618:	bb 81       	ldd	r27, Y+3	; 0x03
     61a:	80 8f       	std	Z+24, r24	; 0x18
     61c:	91 8f       	std	Z+25, r25	; 0x19
     61e:	a2 8f       	std	Z+26, r26	; 0x1a
     620:	b3 8f       	std	Z+27, r27	; 0x1b
	this->Kd = Kd;
     622:	e9 01       	movw	r28, r18
     624:	88 81       	ld	r24, Y
     626:	99 81       	ldd	r25, Y+1	; 0x01
     628:	aa 81       	ldd	r26, Y+2	; 0x02
     62a:	bb 81       	ldd	r27, Y+3	; 0x03
     62c:	84 8f       	std	Z+28, r24	; 0x1c
     62e:	95 8f       	std	Z+29, r25	; 0x1d
     630:	a6 8f       	std	Z+30, r26	; 0x1e
     632:	b7 8f       	std	Z+31, r27	; 0x1f
}
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <_ZN3PID19setOutputLowerLimitERKf>:
void PID::setErrorThreshold(const float &error_threshold) {
	this->error_threshold = error_threshold;
}
*/
void PID::setOutputLowerLimit(const float &output_lower_limit) {
	this->output_lower_limit = output_lower_limit;
     63a:	fb 01       	movw	r30, r22
     63c:	40 81       	ld	r20, Z
     63e:	51 81       	ldd	r21, Z+1	; 0x01
     640:	62 81       	ldd	r22, Z+2	; 0x02
     642:	73 81       	ldd	r23, Z+3	; 0x03
     644:	fc 01       	movw	r30, r24
     646:	40 ab       	std	Z+48, r20	; 0x30
     648:	51 ab       	std	Z+49, r21	; 0x31
     64a:	62 ab       	std	Z+50, r22	; 0x32
     64c:	73 ab       	std	Z+51, r23	; 0x33
     64e:	08 95       	ret

00000650 <_ZN3PID19setOutputUpperLimitERKf>:
}

void PID::setOutputUpperLimit(const float &output_upper_limit) {
	this->output_upper_limit = output_upper_limit;
     650:	fb 01       	movw	r30, r22
     652:	40 81       	ld	r20, Z
     654:	51 81       	ldd	r21, Z+1	; 0x01
     656:	62 81       	ldd	r22, Z+2	; 0x02
     658:	73 81       	ldd	r23, Z+3	; 0x03
     65a:	fc 01       	movw	r30, r24
     65c:	44 a7       	std	Z+44, r20	; 0x2c
     65e:	55 a7       	std	Z+45, r21	; 0x2d
     660:	66 a7       	std	Z+46, r22	; 0x2e
     662:	77 a7       	std	Z+47, r23	; 0x2f
     664:	08 95       	ret

00000666 <_ZN3PID15setDesiredPointERKf>:
}

void PID::setDesiredPoint(const float &desired_point) {
	set_point = desired_point;
     666:	fb 01       	movw	r30, r22
     668:	40 81       	ld	r20, Z
     66a:	51 81       	ldd	r21, Z+1	; 0x01
     66c:	62 81       	ldd	r22, Z+2	; 0x02
     66e:	73 81       	ldd	r23, Z+3	; 0x03
     670:	fc 01       	movw	r30, r24
     672:	40 8b       	std	Z+16, r20	; 0x10
     674:	51 8b       	std	Z+17, r21	; 0x11
     676:	62 8b       	std	Z+18, r22	; 0x12
     678:	73 8b       	std	Z+19, r23	; 0x13
     67a:	08 95       	ret

0000067c <_ZN3PID11update_timeEv>:
}




void PID::update_time(){
     67c:	ef 92       	push	r14
     67e:	ff 92       	push	r15
     680:	0f 93       	push	r16
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	00 d0       	rcall	.+0      	; 0x68a <_ZN3PID11update_timeEv+0xe>
     68a:	00 d0       	rcall	.+0      	; 0x68c <_ZN3PID11update_timeEv+0x10>
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	8c 01       	movw	r16, r24

		
	uint16_t time = TCNT1;
     692:	e4 e8       	ldi	r30, 0x84	; 132
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	e0 80       	ld	r14, Z
     698:	f1 80       	ldd	r15, Z+1	; 0x01
	
	volatile float result;
	

	if (TCNT1 < time_of_previous_scan){
     69a:	20 81       	ld	r18, Z
     69c:	31 81       	ldd	r19, Z+1	; 0x01
     69e:	fc 01       	movw	r30, r24
     6a0:	80 ad       	ldd	r24, Z+56	; 0x38
     6a2:	91 ad       	ldd	r25, Z+57	; 0x39
     6a4:	28 17       	cp	r18, r24
     6a6:	39 07       	cpc	r19, r25
     6a8:	70 f4       	brcc	.+28     	; 0x6c6 <_ZN3PID11update_timeEv+0x4a>

		result = 0xffff - time_of_previous_scan + time ;
     6aa:	b7 01       	movw	r22, r14
     6ac:	61 50       	subi	r22, 0x01	; 1
     6ae:	71 09       	sbc	r23, r1
     6b0:	68 1b       	sub	r22, r24
     6b2:	79 0b       	sbc	r23, r25
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatunsisf>
     6bc:	69 83       	std	Y+1, r22	; 0x01
     6be:	7a 83       	std	Y+2, r23	; 0x02
     6c0:	8b 83       	std	Y+3, r24	; 0x03
     6c2:	9c 83       	std	Y+4, r25	; 0x04
     6c4:	0b c0       	rjmp	.+22     	; 0x6dc <_ZN3PID11update_timeEv+0x60>

	}

	else{

		result = time - time_of_previous_scan;
     6c6:	b7 01       	movw	r22, r14
     6c8:	68 1b       	sub	r22, r24
     6ca:	79 0b       	sbc	r23, r25
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatunsisf>
     6d4:	69 83       	std	Y+1, r22	; 0x01
     6d6:	7a 83       	std	Y+2, r23	; 0x02
     6d8:	8b 83       	std	Y+3, r24	; 0x03
     6da:	9c 83       	std	Y+4, r25	; 0x04
	}


	result /= (float)TIMER_BIT_RATE;
     6dc:	69 81       	ldd	r22, Y+1	; 0x01
     6de:	7a 81       	ldd	r23, Y+2	; 0x02
     6e0:	8b 81       	ldd	r24, Y+3	; 0x03
     6e2:	9c 81       	ldd	r25, Y+4	; 0x04
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	34 e2       	ldi	r19, 0x24	; 36
     6e8:	44 e7       	ldi	r20, 0x74	; 116
     6ea:	59 e4       	ldi	r21, 0x49	; 73
     6ec:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divsf3>
     6f0:	69 83       	std	Y+1, r22	; 0x01
     6f2:	7a 83       	std	Y+2, r23	; 0x02
     6f4:	8b 83       	std	Y+3, r24	; 0x03
     6f6:	9c 83       	std	Y+4, r25	; 0x04

	time_of_previous_scan = time;
     6f8:	f8 01       	movw	r30, r16
     6fa:	f1 ae       	std	Z+57, r15	; 0x39
     6fc:	e0 ae       	std	Z+56, r14	; 0x38

	time_elapsed = result;
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	9a 81       	ldd	r25, Y+2	; 0x02
     702:	ab 81       	ldd	r26, Y+3	; 0x03
     704:	bc 81       	ldd	r27, Y+4	; 0x04
     706:	84 ab       	std	Z+52, r24	; 0x34
     708:	95 ab       	std	Z+53, r25	; 0x35
     70a:	a6 ab       	std	Z+54, r26	; 0x36
     70c:	b7 ab       	std	Z+55, r27	; 0x37
	
	
}
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	08 95       	ret

00000724 <_ZN3PID7refreshERKf>:

void PID::setDesiredPoint(const float &desired_point) {
	set_point = desired_point;
}

float PID::refresh(const float &feedback_input) {
     724:	2f 92       	push	r2
     726:	3f 92       	push	r3
     728:	4f 92       	push	r4
     72a:	5f 92       	push	r5
     72c:	6f 92       	push	r6
     72e:	7f 92       	push	r7
     730:	8f 92       	push	r8
     732:	9f 92       	push	r9
     734:	af 92       	push	r10
     736:	bf 92       	push	r11
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	68 97       	sbiw	r28, 0x18	; 24
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	f8 94       	cli
     752:	de bf       	out	0x3e, r29	; 62
     754:	0f be       	out	0x3f, r0	; 63
     756:	cd bf       	out	0x3d, r28	; 61
     758:	8c 01       	movw	r16, r24
     75a:	1b 01       	movw	r2, r22

	update_time();	// get the time for integral and derivative purposes
     75c:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN3PID11update_timeEv>

	volatile float crap; 
	static int cnt = 0;
	cnt++;
     760:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_ZZN3PID7refreshERKfE3cnt>
     764:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_ZZN3PID7refreshERKfE3cnt+0x1>
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <_ZZN3PID7refreshERKfE3cnt+0x1>
     76e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <_ZZN3PID7refreshERKfE3cnt>
	
	
	last_error = current_error;// this happens no matter what, every cycle
     772:	d8 01       	movw	r26, r16
     774:	4d 90       	ld	r4, X+
     776:	5d 90       	ld	r5, X+
     778:	6d 90       	ld	r6, X+
     77a:	7c 90       	ld	r7, X
     77c:	13 97       	sbiw	r26, 0x03	; 3
     77e:	f8 01       	movw	r30, r16
     780:	44 82       	std	Z+4, r4	; 0x04
     782:	55 82       	std	Z+5, r5	; 0x05
     784:	66 82       	std	Z+6, r6	; 0x06
     786:	77 82       	std	Z+7, r7	; 0x07
	current_error = set_point - feedback_input;
     788:	50 96       	adiw	r26, 0x10	; 16
     78a:	8d 91       	ld	r24, X+
     78c:	9d 91       	ld	r25, X+
     78e:	0d 90       	ld	r0, X+
     790:	bc 91       	ld	r27, X
     792:	a0 2d       	mov	r26, r0
     794:	8d 87       	std	Y+13, r24	; 0x0d
     796:	9e 87       	std	Y+14, r25	; 0x0e
     798:	af 87       	std	Y+15, r26	; 0x0f
     79a:	b8 8b       	std	Y+16, r27	; 0x10
     79c:	f1 01       	movw	r30, r2
     79e:	20 81       	ld	r18, Z
     7a0:	31 81       	ldd	r19, Z+1	; 0x01
     7a2:	42 81       	ldd	r20, Z+2	; 0x02
     7a4:	53 81       	ldd	r21, Z+3	; 0x03
     7a6:	bc 01       	movw	r22, r24
     7a8:	cd 01       	movw	r24, r26
     7aa:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
     7ae:	6b 01       	movw	r12, r22
     7b0:	7c 01       	movw	r14, r24
     7b2:	d8 01       	movw	r26, r16
     7b4:	6d 93       	st	X+, r22
     7b6:	7d 93       	st	X+, r23
     7b8:	8d 93       	st	X+, r24
     7ba:	9c 93       	st	X, r25
     7bc:	13 97       	sbiw	r26, 0x03	; 3
	
	
	// derivative must be refreshed every cycle
	derivative = (current_error-last_error)/time_elapsed;
     7be:	a3 01       	movw	r20, r6
     7c0:	92 01       	movw	r18, r4
     7c2:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
     7c6:	4b 01       	movw	r8, r22
     7c8:	5c 01       	movw	r10, r24
     7ca:	d8 01       	movw	r26, r16
     7cc:	d4 96       	adiw	r26, 0x34	; 52
     7ce:	8d 91       	ld	r24, X+
     7d0:	9d 91       	ld	r25, X+
     7d2:	0d 90       	ld	r0, X+
     7d4:	bc 91       	ld	r27, X
     7d6:	a0 2d       	mov	r26, r0
     7d8:	8d 83       	std	Y+5, r24	; 0x05
     7da:	9e 83       	std	Y+6, r25	; 0x06
     7dc:	af 83       	std	Y+7, r26	; 0x07
     7de:	b8 87       	std	Y+8, r27	; 0x08
     7e0:	9c 01       	movw	r18, r24
     7e2:	ad 01       	movw	r20, r26
     7e4:	c5 01       	movw	r24, r10
     7e6:	b4 01       	movw	r22, r8
     7e8:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divsf3>
     7ec:	69 8b       	std	Y+17, r22	; 0x11
     7ee:	7a 8b       	std	Y+18, r23	; 0x12
     7f0:	8b 8b       	std	Y+19, r24	; 0x13
     7f2:	9c 8b       	std	Y+20, r25	; 0x14
     7f4:	f8 01       	movw	r30, r16
     7f6:	64 a3       	std	Z+36, r22	; 0x24
     7f8:	75 a3       	std	Z+37, r23	; 0x25
     7fa:	86 a3       	std	Z+38, r24	; 0x26
     7fc:	97 a3       	std	Z+39, r25	; 0x27
	
	
	//only if the value that will be added to the integral is reasonable will it be added. Otherwise, the integral will be corrupted	
	if(  fabs((current_error + last_error) * time_elapsed /2.f) < 2){	
     7fe:	a7 01       	movw	r20, r14
     800:	96 01       	movw	r18, r12
     802:	c3 01       	movw	r24, r6
     804:	b2 01       	movw	r22, r4
     806:	0e 94 91 0b 	call	0x1722	; 0x1722 <__addsf3>
     80a:	2d 81       	ldd	r18, Y+5	; 0x05
     80c:	3e 81       	ldd	r19, Y+6	; 0x06
     80e:	4f 81       	ldd	r20, Y+7	; 0x07
     810:	58 85       	ldd	r21, Y+8	; 0x08
     812:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	5f e3       	ldi	r21, 0x3F	; 63
     81e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
     822:	2b 01       	movw	r4, r22
     824:	3c 01       	movw	r6, r24
     826:	9f 77       	andi	r25, 0x7F	; 127
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	50 e4       	ldi	r21, 0x40	; 64
     830:	0e 94 18 0c 	call	0x1830	; 0x1830 <__cmpsf2>
     834:	88 23       	and	r24, r24
     836:	84 f4       	brge	.+32     	; 0x858 <_ZN3PID7refreshERKf+0x134>
		
		integral += (current_error + last_error) * time_elapsed /2.f;
     838:	a3 01       	movw	r20, r6
     83a:	92 01       	movw	r18, r4
     83c:	d8 01       	movw	r26, r16
     83e:	90 96       	adiw	r26, 0x20	; 32
     840:	6d 91       	ld	r22, X+
     842:	7d 91       	ld	r23, X+
     844:	8d 91       	ld	r24, X+
     846:	9c 91       	ld	r25, X
     848:	93 97       	sbiw	r26, 0x23	; 35
     84a:	0e 94 91 0b 	call	0x1722	; 0x1722 <__addsf3>
     84e:	f8 01       	movw	r30, r16
     850:	60 a3       	std	Z+32, r22	; 0x20
     852:	71 a3       	std	Z+33, r23	; 0x21
     854:	82 a3       	std	Z+34, r24	; 0x22
     856:	93 a3       	std	Z+35, r25	; 0x23
	}
	
	
	// output is computed with current proportional and derivative data. integral data, however, is at least 1 cycle behind
	// This output will only be realeased if l
	output = Kp*current_error + Ki*integral - Kd* (current_error-last_error)/time_elapsed;
     858:	d8 01       	movw	r26, r16
     85a:	90 96       	adiw	r26, 0x20	; 32
     85c:	8d 91       	ld	r24, X+
     85e:	9d 91       	ld	r25, X+
     860:	0d 90       	ld	r0, X+
     862:	bc 91       	ld	r27, X
     864:	a0 2d       	mov	r26, r0
     866:	8d 8b       	std	Y+21, r24	; 0x15
     868:	9e 8b       	std	Y+22, r25	; 0x16
     86a:	af 8b       	std	Y+23, r26	; 0x17
     86c:	b8 8f       	std	Y+24, r27	; 0x18
     86e:	f8 01       	movw	r30, r16
     870:	24 89       	ldd	r18, Z+20	; 0x14
     872:	35 89       	ldd	r19, Z+21	; 0x15
     874:	46 89       	ldd	r20, Z+22	; 0x16
     876:	57 89       	ldd	r21, Z+23	; 0x17
     878:	c7 01       	movw	r24, r14
     87a:	b6 01       	movw	r22, r12
     87c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
     880:	69 87       	std	Y+9, r22	; 0x09
     882:	7a 87       	std	Y+10, r23	; 0x0a
     884:	8b 87       	std	Y+11, r24	; 0x0b
     886:	9c 87       	std	Y+12, r25	; 0x0c
     888:	d8 01       	movw	r26, r16
     88a:	58 96       	adiw	r26, 0x18	; 24
     88c:	2d 91       	ld	r18, X+
     88e:	3d 91       	ld	r19, X+
     890:	4d 91       	ld	r20, X+
     892:	5c 91       	ld	r21, X
     894:	5b 97       	sbiw	r26, 0x1b	; 27
     896:	6d 89       	ldd	r22, Y+21	; 0x15
     898:	7e 89       	ldd	r23, Y+22	; 0x16
     89a:	8f 89       	ldd	r24, Y+23	; 0x17
     89c:	98 8d       	ldd	r25, Y+24	; 0x18
     89e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
     8a2:	9b 01       	movw	r18, r22
     8a4:	ac 01       	movw	r20, r24
     8a6:	69 85       	ldd	r22, Y+9	; 0x09
     8a8:	7a 85       	ldd	r23, Y+10	; 0x0a
     8aa:	8b 85       	ldd	r24, Y+11	; 0x0b
     8ac:	9c 85       	ldd	r25, Y+12	; 0x0c
     8ae:	0e 94 91 0b 	call	0x1722	; 0x1722 <__addsf3>
     8b2:	69 87       	std	Y+9, r22	; 0x09
     8b4:	7a 87       	std	Y+10, r23	; 0x0a
     8b6:	8b 87       	std	Y+11, r24	; 0x0b
     8b8:	9c 87       	std	Y+12, r25	; 0x0c
     8ba:	f8 01       	movw	r30, r16
     8bc:	24 8d       	ldd	r18, Z+28	; 0x1c
     8be:	35 8d       	ldd	r19, Z+29	; 0x1d
     8c0:	46 8d       	ldd	r20, Z+30	; 0x1e
     8c2:	57 8d       	ldd	r21, Z+31	; 0x1f
     8c4:	c5 01       	movw	r24, r10
     8c6:	b4 01       	movw	r22, r8
     8c8:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
     8cc:	2d 81       	ldd	r18, Y+5	; 0x05
     8ce:	3e 81       	ldd	r19, Y+6	; 0x06
     8d0:	4f 81       	ldd	r20, Y+7	; 0x07
     8d2:	58 85       	ldd	r21, Y+8	; 0x08
     8d4:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divsf3>
     8d8:	9b 01       	movw	r18, r22
     8da:	ac 01       	movw	r20, r24
     8dc:	69 85       	ldd	r22, Y+9	; 0x09
     8de:	7a 85       	ldd	r23, Y+10	; 0x0a
     8e0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8e2:	9c 85       	ldd	r25, Y+12	; 0x0c
     8e4:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
     8e8:	4b 01       	movw	r8, r22
     8ea:	5c 01       	movw	r10, r24
     8ec:	d8 01       	movw	r26, r16
     8ee:	1c 96       	adiw	r26, 0x0c	; 12
     8f0:	6d 93       	st	X+, r22
     8f2:	7d 93       	st	X+, r23
     8f4:	8d 93       	st	X+, r24
     8f6:	9c 93       	st	X, r25
     8f8:	1f 97       	sbiw	r26, 0x0f	; 15

	
	
	//something went wrong with pilot or sensor data collection, output the last know stable output
	if ( (output > output_upper_limit) || (output < output_lower_limit)) {
     8fa:	9c 96       	adiw	r26, 0x2c	; 44
     8fc:	2d 91       	ld	r18, X+
     8fe:	3d 91       	ld	r19, X+
     900:	4d 91       	ld	r20, X+
     902:	5c 91       	ld	r21, X
     904:	9f 97       	sbiw	r26, 0x2f	; 47
     906:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__gesf2>
     90a:	18 16       	cp	r1, r24
     90c:	5c f0       	brlt	.+22     	; 0x924 <__stack+0x25>
     90e:	f8 01       	movw	r30, r16
     910:	20 a9       	ldd	r18, Z+48	; 0x30
     912:	31 a9       	ldd	r19, Z+49	; 0x31
     914:	42 a9       	ldd	r20, Z+50	; 0x32
     916:	53 a9       	ldd	r21, Z+51	; 0x33
     918:	c5 01       	movw	r24, r10
     91a:	b4 01       	movw	r22, r8
     91c:	0e 94 18 0c 	call	0x1830	; 0x1830 <__cmpsf2>
     920:	88 23       	and	r24, r24
     922:	44 f4       	brge	.+16     	; 0x934 <__stack+0x35>
		
		return last_output;			
     924:	d8 01       	movw	r26, r16
     926:	18 96       	adiw	r26, 0x08	; 8
     928:	8d 90       	ld	r8, X+
     92a:	9d 90       	ld	r9, X+
     92c:	ad 90       	ld	r10, X+
     92e:	bc 90       	ld	r11, X
     930:	1b 97       	sbiw	r26, 0x0b	; 11
     932:	3a c0       	rjmp	.+116    	; 0x9a8 <__stack+0xa9>
	
	// all is normal, update the integral and compute the derivative and the proportiona term

	

	last_output = output;	
     934:	f8 01       	movw	r30, r16
     936:	80 86       	std	Z+8, r8	; 0x08
     938:	91 86       	std	Z+9, r9	; 0x09
     93a:	a2 86       	std	Z+10, r10	; 0x0a
     93c:	b3 86       	std	Z+11, r11	; 0x0b


	
	crap = set_point;	
     93e:	8d 85       	ldd	r24, Y+13	; 0x0d
     940:	9e 85       	ldd	r25, Y+14	; 0x0e
     942:	af 85       	ldd	r26, Y+15	; 0x0f
     944:	b8 89       	ldd	r27, Y+16	; 0x10
     946:	89 83       	std	Y+1, r24	; 0x01
     948:	9a 83       	std	Y+2, r25	; 0x02
     94a:	ab 83       	std	Y+3, r26	; 0x03
     94c:	bc 83       	std	Y+4, r27	; 0x04
	crap = time_elapsed;
     94e:	8d 81       	ldd	r24, Y+5	; 0x05
     950:	9e 81       	ldd	r25, Y+6	; 0x06
     952:	af 81       	ldd	r26, Y+7	; 0x07
     954:	b8 85       	ldd	r27, Y+8	; 0x08
     956:	89 83       	std	Y+1, r24	; 0x01
     958:	9a 83       	std	Y+2, r25	; 0x02
     95a:	ab 83       	std	Y+3, r26	; 0x03
     95c:	bc 83       	std	Y+4, r27	; 0x04
	crap = feedback_input;	
     95e:	f1 01       	movw	r30, r2
     960:	80 81       	ld	r24, Z
     962:	91 81       	ldd	r25, Z+1	; 0x01
     964:	a2 81       	ldd	r26, Z+2	; 0x02
     966:	b3 81       	ldd	r27, Z+3	; 0x03
     968:	89 83       	std	Y+1, r24	; 0x01
     96a:	9a 83       	std	Y+2, r25	; 0x02
     96c:	ab 83       	std	Y+3, r26	; 0x03
     96e:	bc 83       	std	Y+4, r27	; 0x04
	crap = integral;
     970:	8d 89       	ldd	r24, Y+21	; 0x15
     972:	9e 89       	ldd	r25, Y+22	; 0x16
     974:	af 89       	ldd	r26, Y+23	; 0x17
     976:	b8 8d       	ldd	r27, Y+24	; 0x18
     978:	89 83       	std	Y+1, r24	; 0x01
     97a:	9a 83       	std	Y+2, r25	; 0x02
     97c:	ab 83       	std	Y+3, r26	; 0x03
     97e:	bc 83       	std	Y+4, r27	; 0x04
	crap = derivative;
     980:	89 89       	ldd	r24, Y+17	; 0x11
     982:	9a 89       	ldd	r25, Y+18	; 0x12
     984:	ab 89       	ldd	r26, Y+19	; 0x13
     986:	bc 89       	ldd	r27, Y+20	; 0x14
     988:	89 83       	std	Y+1, r24	; 0x01
     98a:	9a 83       	std	Y+2, r25	; 0x02
     98c:	ab 83       	std	Y+3, r26	; 0x03
     98e:	bc 83       	std	Y+4, r27	; 0x04
	crap = (current_error + last_error) * time_elapsed /2.f;
     990:	49 82       	std	Y+1, r4	; 0x01
     992:	5a 82       	std	Y+2, r5	; 0x02
     994:	6b 82       	std	Y+3, r6	; 0x03
     996:	7c 82       	std	Y+4, r7	; 0x04
	crap = current_error;
     998:	c9 82       	std	Y+1, r12	; 0x01
     99a:	da 82       	std	Y+2, r13	; 0x02
     99c:	eb 82       	std	Y+3, r14	; 0x03
     99e:	fc 82       	std	Y+4, r15	; 0x04
	crap = output;
     9a0:	89 82       	std	Y+1, r8	; 0x01
     9a2:	9a 82       	std	Y+2, r9	; 0x02
     9a4:	ab 82       	std	Y+3, r10	; 0x03
     9a6:	bc 82       	std	Y+4, r11	; 0x04
			
			
	
	return output;
}
     9a8:	c5 01       	movw	r24, r10
     9aa:	b4 01       	movw	r22, r8
     9ac:	68 96       	adiw	r28, 0x18	; 24
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	cd bf       	out	0x3d, r28	; 61
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	bf 90       	pop	r11
     9ca:	af 90       	pop	r10
     9cc:	9f 90       	pop	r9
     9ce:	8f 90       	pop	r8
     9d0:	7f 90       	pop	r7
     9d2:	6f 90       	pop	r6
     9d4:	5f 90       	pop	r5
     9d6:	4f 90       	pop	r4
     9d8:	3f 90       	pop	r3
     9da:	2f 90       	pop	r2
     9dc:	08 95       	ret

000009de <_ZN3PID12combine_dataEfff>:
	
}



void PID::combine_data(float bank_number, float pitch_number, float throttle_percentage){
     9de:	4f 92       	push	r4
     9e0:	5f 92       	push	r5
     9e2:	6f 92       	push	r6
     9e4:	7f 92       	push	r7
     9e6:	8f 92       	push	r8
     9e8:	9f 92       	push	r9
     9ea:	af 92       	push	r10
     9ec:	bf 92       	push	r11
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	64 97       	sbiw	r28, 0x14	; 20
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	de bf       	out	0x3e, r29	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	cd bf       	out	0x3d, r28	; 61
     a0e:	2b 01       	movw	r4, r22
     a10:	3c 01       	movw	r6, r24
     a12:	49 01       	movw	r8, r18
     a14:	5a 01       	movw	r10, r20
     a16:	67 01       	movw	r12, r14
     a18:	78 01       	movw	r14, r16

	//heavily depends on how the accelerometer and gyro are pointed and how the motors are plugged in.
	
	static uint16_t cnt = 0;
	cnt ++;
     a1a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZZN3PID12combine_dataEfffE3cnt>
     a1e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <_ZZN3PID12combine_dataEfffE3cnt+0x1>
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_ZZN3PID12combine_dataEfffE3cnt+0x1>
     a28:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZZN3PID12combine_dataEfffE3cnt>
	
	volatile float crap;

	motor[0] = (int) (bank_number + pitch_number) * throttle_percentage / 200 ;
     a2c:	c3 01       	movw	r24, r6
     a2e:	b2 01       	movw	r22, r4
     a30:	0e 94 91 0b 	call	0x1722	; 0x1722 <__addsf3>
     a34:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fixsfsi>
     a38:	07 2e       	mov	r0, r23
     a3a:	00 0c       	add	r0, r0
     a3c:	88 0b       	sbc	r24, r24
     a3e:	99 0b       	sbc	r25, r25
     a40:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
     a44:	a7 01       	movw	r20, r14
     a46:	96 01       	movw	r18, r12
     a48:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	48 e4       	ldi	r20, 0x48	; 72
     a52:	53 e4       	ldi	r21, 0x43	; 67
     a54:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divsf3>
     a58:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fixsfsi>
     a5c:	6d 83       	std	Y+5, r22	; 0x05
     a5e:	7e 83       	std	Y+6, r23	; 0x06
     a60:	8f 83       	std	Y+7, r24	; 0x07
     a62:	98 87       	std	Y+8, r25	; 0x08
     a64:	00 e1       	ldi	r16, 0x10	; 16
     a66:	11 e0       	ldi	r17, 0x01	; 1
     a68:	2d 81       	ldd	r18, Y+5	; 0x05
     a6a:	3e 81       	ldd	r19, Y+6	; 0x06
     a6c:	f8 01       	movw	r30, r16
     a6e:	31 83       	std	Z+1, r19	; 0x01
     a70:	20 83       	st	Z, r18

	motor[1] = (int) (bank_number - pitch_number) * throttle_percentage / 200 ;
     a72:	a5 01       	movw	r20, r10
     a74:	94 01       	movw	r18, r8
     a76:	c3 01       	movw	r24, r6
     a78:	b2 01       	movw	r22, r4
     a7a:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
     a7e:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fixsfsi>
     a82:	07 2e       	mov	r0, r23
     a84:	00 0c       	add	r0, r0
     a86:	88 0b       	sbc	r24, r24
     a88:	99 0b       	sbc	r25, r25
     a8a:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
     a8e:	a7 01       	movw	r20, r14
     a90:	96 01       	movw	r18, r12
     a92:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	48 e4       	ldi	r20, 0x48	; 72
     a9c:	53 e4       	ldi	r21, 0x43	; 67
     a9e:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divsf3>
     aa2:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fixsfsi>
     aa6:	69 87       	std	Y+9, r22	; 0x09
     aa8:	7a 87       	std	Y+10, r23	; 0x0a
     aaa:	8b 87       	std	Y+11, r24	; 0x0b
     aac:	9c 87       	std	Y+12, r25	; 0x0c
     aae:	29 85       	ldd	r18, Y+9	; 0x09
     ab0:	3a 85       	ldd	r19, Y+10	; 0x0a
     ab2:	f8 01       	movw	r30, r16
     ab4:	33 83       	std	Z+3, r19	; 0x03
     ab6:	22 83       	std	Z+2, r18	; 0x02

	motor[2] = (int) (-bank_number + pitch_number) * throttle_percentage / 200; // 200 because 100 is used to convert the throttle percentage
     ab8:	a3 01       	movw	r20, r6
     aba:	92 01       	movw	r18, r4
     abc:	c5 01       	movw	r24, r10
     abe:	b4 01       	movw	r22, r8
     ac0:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
     ac4:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fixsfsi>
     ac8:	07 2e       	mov	r0, r23
     aca:	00 0c       	add	r0, r0
     acc:	88 0b       	sbc	r24, r24
     ace:	99 0b       	sbc	r25, r25
     ad0:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
     ad4:	a7 01       	movw	r20, r14
     ad6:	96 01       	movw	r18, r12
     ad8:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	48 e4       	ldi	r20, 0x48	; 72
     ae2:	53 e4       	ldi	r21, 0x43	; 67
     ae4:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divsf3>
     ae8:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fixsfsi>
     aec:	6d 87       	std	Y+13, r22	; 0x0d
     aee:	7e 87       	std	Y+14, r23	; 0x0e
     af0:	8f 87       	std	Y+15, r24	; 0x0f
     af2:	98 8b       	std	Y+16, r25	; 0x10
     af4:	2d 85       	ldd	r18, Y+13	; 0x0d
     af6:	3e 85       	ldd	r19, Y+14	; 0x0e
     af8:	f8 01       	movw	r30, r16
     afa:	35 83       	std	Z+5, r19	; 0x05
     afc:	24 83       	std	Z+4, r18	; 0x04

	motor[3] = (int) (-bank_number - pitch_number) * throttle_percentage / 200;
     afe:	c3 01       	movw	r24, r6
     b00:	b2 01       	movw	r22, r4
     b02:	90 58       	subi	r25, 0x80	; 128
     b04:	a5 01       	movw	r20, r10
     b06:	94 01       	movw	r18, r8
     b08:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
     b0c:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fixsfsi>
     b10:	07 2e       	mov	r0, r23
     b12:	00 0c       	add	r0, r0
     b14:	88 0b       	sbc	r24, r24
     b16:	99 0b       	sbc	r25, r25
     b18:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
     b1c:	a7 01       	movw	r20, r14
     b1e:	96 01       	movw	r18, r12
     b20:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	48 e4       	ldi	r20, 0x48	; 72
     b2a:	53 e4       	ldi	r21, 0x43	; 67
     b2c:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divsf3>
     b30:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fixsfsi>
     b34:	69 8b       	std	Y+17, r22	; 0x11
     b36:	7a 8b       	std	Y+18, r23	; 0x12
     b38:	8b 8b       	std	Y+19, r24	; 0x13
     b3a:	9c 8b       	std	Y+20, r25	; 0x14
     b3c:	29 89       	ldd	r18, Y+17	; 0x11
     b3e:	3a 89       	ldd	r19, Y+18	; 0x12
     b40:	f8 01       	movw	r30, r16
     b42:	37 83       	std	Z+7, r19	; 0x07
     b44:	26 83       	std	Z+6, r18	; 0x06

	crap = bank_number;
     b46:	49 82       	std	Y+1, r4	; 0x01
     b48:	5a 82       	std	Y+2, r5	; 0x02
     b4a:	6b 82       	std	Y+3, r6	; 0x03
     b4c:	7c 82       	std	Y+4, r7	; 0x04
	crap = pitch_number;
     b4e:	89 82       	std	Y+1, r8	; 0x01
     b50:	9a 82       	std	Y+2, r9	; 0x02
     b52:	ab 82       	std	Y+3, r10	; 0x03
     b54:	bc 82       	std	Y+4, r11	; 0x04
	crap = throttle_percentage;
     b56:	c9 82       	std	Y+1, r12	; 0x01
     b58:	da 82       	std	Y+2, r13	; 0x02
     b5a:	eb 82       	std	Y+3, r14	; 0x03
     b5c:	fc 82       	std	Y+4, r15	; 0x04
	crap = motor[0];
     b5e:	ed 81       	ldd	r30, Y+5	; 0x05
     b60:	fe 81       	ldd	r31, Y+6	; 0x06
     b62:	bf 01       	movw	r22, r30
     b64:	ff 0f       	add	r31, r31
     b66:	88 0b       	sbc	r24, r24
     b68:	99 0b       	sbc	r25, r25
     b6a:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
     b6e:	69 83       	std	Y+1, r22	; 0x01
     b70:	7a 83       	std	Y+2, r23	; 0x02
     b72:	8b 83       	std	Y+3, r24	; 0x03
     b74:	9c 83       	std	Y+4, r25	; 0x04
	crap = motor[1];
     b76:	29 85       	ldd	r18, Y+9	; 0x09
     b78:	3a 85       	ldd	r19, Y+10	; 0x0a
     b7a:	b9 01       	movw	r22, r18
     b7c:	33 0f       	add	r19, r19
     b7e:	88 0b       	sbc	r24, r24
     b80:	99 0b       	sbc	r25, r25
     b82:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
     b86:	69 83       	std	Y+1, r22	; 0x01
     b88:	7a 83       	std	Y+2, r23	; 0x02
     b8a:	8b 83       	std	Y+3, r24	; 0x03
     b8c:	9c 83       	std	Y+4, r25	; 0x04
	crap = motor[2];
     b8e:	ed 85       	ldd	r30, Y+13	; 0x0d
     b90:	fe 85       	ldd	r31, Y+14	; 0x0e
     b92:	bf 01       	movw	r22, r30
     b94:	ff 0f       	add	r31, r31
     b96:	88 0b       	sbc	r24, r24
     b98:	99 0b       	sbc	r25, r25
     b9a:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
     b9e:	69 83       	std	Y+1, r22	; 0x01
     ba0:	7a 83       	std	Y+2, r23	; 0x02
     ba2:	8b 83       	std	Y+3, r24	; 0x03
     ba4:	9c 83       	std	Y+4, r25	; 0x04
	crap = motor[3];
     ba6:	29 89       	ldd	r18, Y+17	; 0x11
     ba8:	3a 89       	ldd	r19, Y+18	; 0x12
     baa:	b9 01       	movw	r22, r18
     bac:	33 0f       	add	r19, r19
     bae:	88 0b       	sbc	r24, r24
     bb0:	99 0b       	sbc	r25, r25
     bb2:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
     bb6:	69 83       	std	Y+1, r22	; 0x01
     bb8:	7a 83       	std	Y+2, r23	; 0x02
     bba:	8b 83       	std	Y+3, r24	; 0x03
     bbc:	9c 83       	std	Y+4, r25	; 0x04
}
     bbe:	64 96       	adiw	r28, 0x14	; 20
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	ff 90       	pop	r15
     bd4:	ef 90       	pop	r14
     bd6:	df 90       	pop	r13
     bd8:	cf 90       	pop	r12
     bda:	bf 90       	pop	r11
     bdc:	af 90       	pop	r10
     bde:	9f 90       	pop	r9
     be0:	8f 90       	pop	r8
     be2:	7f 90       	pop	r7
     be4:	6f 90       	pop	r6
     be6:	5f 90       	pop	r5
     be8:	4f 90       	pop	r4
     bea:	08 95       	ret

00000bec <_ZN3PID9get_motorEv>:

int* PID::get_motor(){ return motor; }
     bec:	80 e1       	ldi	r24, 0x10	; 16
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	08 95       	ret

00000bf2 <_ZN18pilot_instructions13set_max_angleEh>:
}

int pilot_instructions::get_yaw_rate() const{

	return yaw_rate;
}
     bf2:	fc 01       	movw	r30, r24
     bf4:	60 83       	st	Z, r22
     bf6:	08 95       	ret

00000bf8 <_ZN18pilot_instructions16set_max_yaw_rateEh>:
     bf8:	fc 01       	movw	r30, r24
     bfa:	61 83       	std	Z+1, r22	; 0x01
     bfc:	08 95       	ret

00000bfe <_ZNK18pilot_instructions14get_bank_angleEv>:
     bfe:	fc 01       	movw	r30, r24
     c00:	82 81       	ldd	r24, Z+2	; 0x02
     c02:	93 81       	ldd	r25, Z+3	; 0x03
     c04:	08 95       	ret

00000c06 <_ZNK18pilot_instructions15get_pitch_angleEv>:
     c06:	fc 01       	movw	r30, r24
     c08:	84 81       	ldd	r24, Z+4	; 0x04
     c0a:	95 81       	ldd	r25, Z+5	; 0x05
     c0c:	08 95       	ret

00000c0e <_ZNK18pilot_instructions18get_throttle_powerEv>:


uint8_t pilot_instructions::get_throttle_power() const{

	return throttle_power;
}
     c0e:	fc 01       	movw	r30, r24
     c10:	80 85       	ldd	r24, Z+8	; 0x08
     c12:	08 95       	ret

00000c14 <_ZN18pilot_instructions7computeEv>:



void pilot_instructions::compute(void){
     c14:	4f 92       	push	r4
     c16:	5f 92       	push	r5
     c18:	6f 92       	push	r6
     c1a:	7f 92       	push	r7
     c1c:	8f 92       	push	r8
     c1e:	9f 92       	push	r9
     c20:	af 92       	push	r10
     c22:	bf 92       	push	r11
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	8c 01       	movw	r16, r24
	extern volatile uint16_t requested_throttle_pos;


	// 50% of the time the value read is actually the valley of the pwm, that is corrected here 

	if (requested_aileron_pos > 0x7000 ){
     c36:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <requested_aileron_pos>
     c3a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <requested_aileron_pos+0x1>
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	90 47       	sbci	r25, 0x70	; 112
     c42:	50 f0       	brcs	.+20     	; 0xc58 <_ZN18pilot_instructions7computeEv+0x44>
			
		requested_aileron_pos = 0xffff - requested_aileron_pos;
     c44:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <requested_aileron_pos>
     c48:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <requested_aileron_pos+0x1>
     c4c:	80 95       	com	r24
     c4e:	90 95       	com	r25
     c50:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <requested_aileron_pos+0x1>
     c54:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <requested_aileron_pos>
	}

	if (requested_elevator_pos > 0x7000 ){
     c58:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <requested_elevator_pos>
     c5c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <requested_elevator_pos+0x1>
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	90 47       	sbci	r25, 0x70	; 112
     c64:	50 f0       	brcs	.+20     	; 0xc7a <_ZN18pilot_instructions7computeEv+0x66>
			
		requested_elevator_pos = 0xffff - requested_elevator_pos;
     c66:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <requested_elevator_pos>
     c6a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <requested_elevator_pos+0x1>
     c6e:	80 95       	com	r24
     c70:	90 95       	com	r25
     c72:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <requested_elevator_pos+0x1>
     c76:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <requested_elevator_pos>
	}

	if (requested_rudder_pos > 0x7000 ){
     c7a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <requested_rudder_pos>
     c7e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <requested_rudder_pos+0x1>
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	90 47       	sbci	r25, 0x70	; 112
     c86:	50 f0       	brcs	.+20     	; 0xc9c <_ZN18pilot_instructions7computeEv+0x88>
			
		requested_rudder_pos = 0xffff - requested_rudder_pos;
     c88:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <requested_rudder_pos>
     c8c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <requested_rudder_pos+0x1>
     c90:	80 95       	com	r24
     c92:	90 95       	com	r25
     c94:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <requested_rudder_pos+0x1>
     c98:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <requested_rudder_pos>
	}

	if (requested_throttle_pos > 0x7000 ){
     c9c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ca0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	90 47       	sbci	r25, 0x70	; 112
     ca8:	50 f0       	brcs	.+20     	; 0xcbe <_ZN18pilot_instructions7computeEv+0xaa>
			
		requested_throttle_pos = 0xffff - requested_throttle_pos;
     caa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     cae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     cb2:	80 95       	com	r24
     cb4:	90 95       	com	r25
     cb6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     cba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>





	throttle_power = ((requested_throttle_pos - 1015) / 8);	// computes the percentage of the max the pilot wants
     cbe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     cc2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     cc6:	87 5f       	subi	r24, 0xF7	; 247
     cc8:	93 40       	sbci	r25, 0x03	; 3
     cca:	96 95       	lsr	r25
     ccc:	87 95       	ror	r24
     cce:	96 95       	lsr	r25
     cd0:	87 95       	ror	r24
     cd2:	96 95       	lsr	r25
     cd4:	87 95       	ror	r24
     cd6:	f8 01       	movw	r30, r16
     cd8:	80 87       	std	Z+8, r24	; 0x08
	
	//yaw_rate = ( requested_rudder_pos / 6553 ) * max_yaw_rate;	// computes the percentage of the max the pilot wants
	
	
	float temp_pitch_angle = (requested_elevator_pos - 1110.f);	// computes the percentage of the max the pilot wants
     cda:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <requested_elevator_pos>
     cde:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <requested_elevator_pos+0x1>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatunsisf>
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 ec       	ldi	r19, 0xC0	; 192
     cee:	4a e8       	ldi	r20, 0x8A	; 138
     cf0:	54 e4       	ldi	r21, 0x44	; 68
     cf2:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
	temp_pitch_angle /= 800;
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	48 e4       	ldi	r20, 0x48	; 72
     cfc:	54 e4       	ldi	r21, 0x44	; 68
     cfe:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divsf3>
     d02:	4b 01       	movw	r8, r22
     d04:	5c 01       	movw	r10, r24
	temp_pitch_angle *= 2 * max_angle;
     d06:	f8 01       	movw	r30, r16
     d08:	c0 81       	ld	r28, Z
     d0a:	d0 e0       	ldi	r29, 0x00	; 0
     d0c:	be 01       	movw	r22, r28
     d0e:	66 0f       	add	r22, r22
     d10:	77 1f       	adc	r23, r23
     d12:	07 2e       	mov	r0, r23
     d14:	00 0c       	add	r0, r0
     d16:	88 0b       	sbc	r24, r24
     d18:	99 0b       	sbc	r25, r25
     d1a:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
     d1e:	6b 01       	movw	r12, r22
     d20:	7c 01       	movw	r14, r24
     d22:	9b 01       	movw	r18, r22
     d24:	ac 01       	movw	r20, r24
     d26:	c5 01       	movw	r24, r10
     d28:	b4 01       	movw	r22, r8
     d2a:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
     d2e:	4b 01       	movw	r8, r22
     d30:	5c 01       	movw	r10, r24
	temp_pitch_angle -= max_angle;
     d32:	be 01       	movw	r22, r28
     d34:	dd 0f       	add	r29, r29
     d36:	88 0b       	sbc	r24, r24
     d38:	99 0b       	sbc	r25, r25
     d3a:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
     d3e:	2b 01       	movw	r4, r22
     d40:	3c 01       	movw	r6, r24
	pitch_angle = (int) temp_pitch_angle;
     d42:	9b 01       	movw	r18, r22
     d44:	ac 01       	movw	r20, r24
     d46:	c5 01       	movw	r24, r10
     d48:	b4 01       	movw	r22, r8
     d4a:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
     d4e:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fixsfsi>
     d52:	f8 01       	movw	r30, r16
     d54:	75 83       	std	Z+5, r23	; 0x05
     d56:	64 83       	std	Z+4, r22	; 0x04
	
	

	float temp_bank_angle = (requested_aileron_pos - 1120.f);	// computes the percentage of the max the pilot wants
     d58:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <requested_aileron_pos>
     d5c:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <requested_aileron_pos+0x1>
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatunsisf>
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	4c e8       	ldi	r20, 0x8C	; 140
     d6e:	54 e4       	ldi	r21, 0x44	; 68
     d70:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
	temp_bank_angle /= 800;
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	48 e4       	ldi	r20, 0x48	; 72
     d7a:	54 e4       	ldi	r21, 0x44	; 68
     d7c:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divsf3>
     d80:	9b 01       	movw	r18, r22
     d82:	ac 01       	movw	r20, r24
	temp_bank_angle *= 2 * max_angle;
     d84:	c7 01       	movw	r24, r14
     d86:	b6 01       	movw	r22, r12
     d88:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
	temp_bank_angle -= max_angle;
	bank_angle = (int) temp_bank_angle + 2;
     d8c:	a3 01       	movw	r20, r6
     d8e:	92 01       	movw	r18, r4
     d90:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
     d94:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fixsfsi>
     d98:	6e 5f       	subi	r22, 0xFE	; 254
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	f8 01       	movw	r30, r16
     d9e:	73 83       	std	Z+3, r23	; 0x03
     da0:	62 83       	std	Z+2, r22	; 0x02

     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	ff 90       	pop	r15
     dac:	ef 90       	pop	r14
     dae:	df 90       	pop	r13
     db0:	cf 90       	pop	r12
     db2:	bf 90       	pop	r11
     db4:	af 90       	pop	r10
     db6:	9f 90       	pop	r9
     db8:	8f 90       	pop	r8
     dba:	7f 90       	pop	r7
     dbc:	6f 90       	pop	r6
     dbe:	5f 90       	pop	r5
     dc0:	4f 90       	pop	r4
     dc2:	08 95       	ret

00000dc4 <_ZN8pwm_chipC1E9I2C_328pbh>:
#include "pwm_chip.h"



pwm_chip::pwm_chip(I2C_328pb i2c, uint8_t prescaler){
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	1f 92       	push	r1
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	69 83       	std	Y+1, r22	; 0x01
     dd2:	14 2f       	mov	r17, r20
	
	
	DDRB |= (1 << 2);	// set OE to 0;
     dd4:	22 9a       	sbi	0x04, 2	; 4
	//This function sets the auto increment, the prescaler and any other necessary feature required for the pwm chip to run 

	//TWBR0 = (1 << 1); // I'll run the cpu at 1 MHz, this divides the value by 2 for 50 KHZ


	i2c.start();
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	0e 94 80 02 	call	0x500	; 0x500 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     dde:	6e e9       	ldi	r22, 0x9E	; 158
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	ce 01       	movw	r24, r28
     de4:	01 96       	adiw	r24, 0x01	; 1
     de6:	0e 94 92 02 	call	0x524	; 0x524 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x0); // mode register 1
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	ce 01       	movw	r24, r28
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x21); //clock on, autoincrement enable
     df6:	61 e2       	ldi	r22, 0x21	; 33
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	ce 01       	movw	r24, r28
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
     e02:	ce 01       	movw	r24, r28
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	0e 94 89 02 	call	0x512	; 0x512 <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0x9E);
     e0a:	6e e9       	ldi	r22, 0x9E	; 158
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	ce 01       	movw	r24, r28
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	0e 94 92 02 	call	0x524	; 0x524 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0xFE);	//pre scale register
     e16:	6e ef       	ldi	r22, 0xFE	; 254
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	ce 01       	movw	r24, r28
     e1c:	01 96       	adiw	r24, 0x01	; 1
     e1e:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN9I2C_328pb8send_regEi>
	i2c.send(prescaler);	//prescaler
     e22:	61 2f       	mov	r22, r17
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	ce 01       	movw	r24, r28
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     e2e:	ce 01       	movw	r24, r28
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN9I2C_328pb4stopEv>

}
     e36:	0f 90       	pop	r0
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	08 95       	ret

00000e40 <_ZN8pwm_chip13encode_motorsEhPiPh>:

}

void pwm_chip::encode_motors(uint8_t motor, int* motors, uint8_t* instruction){
	
	uint16_t temp = motors[motor]*2;	// the actualslope of this curve is 2.05
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	66 0f       	add	r22, r22
     e44:	77 1f       	adc	r23, r23
     e46:	fa 01       	movw	r30, r20
     e48:	e6 0f       	add	r30, r22
     e4a:	f7 1f       	adc	r31, r23
     e4c:	80 81       	ld	r24, Z
     e4e:	91 81       	ldd	r25, Z+1	; 0x01
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
	
	temp += 205;	// 205 is the value corresponding to 0 for the esc
     e54:	83 53       	subi	r24, 0x33	; 51
     e56:	9f 4f       	sbci	r25, 0xFF	; 255
	
	instruction[0] = ( temp & 0xff );	// conserves only the low byte
     e58:	f9 01       	movw	r30, r18
     e5a:	80 83       	st	Z, r24
	
	instruction[1] = ( temp >> 8);	// conserves only the high half-byte
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	08 95       	ret

00000e60 <_ZN8pwm_chip4passE9I2C_328pbPi>:
}




void pwm_chip::pass(I2C_328pb i2c, int* motors){
     e60:	ef 92       	push	r14
     e62:	ff 92       	push	r15
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <_ZN8pwm_chip4passE9I2C_328pbPi+0xe>
     e6e:	1f 92       	push	r1
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	8c 01       	movw	r16, r24
     e76:	6b 83       	std	Y+3, r22	; 0x03
     e78:	7a 01       	movw	r14, r20

// this function will communicate over I2C to the pwmchip for final controll of the motors

	uint8_t instruction[2];
	
	encode_motors(0, motors, instruction);
     e7a:	9e 01       	movw	r18, r28
     e7c:	2f 5f       	subi	r18, 0xFF	; 255
     e7e:	3f 4f       	sbci	r19, 0xFF	; 255
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	0e 94 20 07 	call	0xe40	; 0xe40 <_ZN8pwm_chip13encode_motorsEhPiPh>

	i2c.start();
     e86:	ce 01       	movw	r24, r28
     e88:	03 96       	adiw	r24, 0x03	; 3
     e8a:	0e 94 80 02 	call	0x500	; 0x500 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     e8e:	6e e9       	ldi	r22, 0x9E	; 158
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	ce 01       	movw	r24, r28
     e94:	03 96       	adiw	r24, 0x03	; 3
     e96:	0e 94 92 02 	call	0x524	; 0x524 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x06);		//LED0_ON_L
     e9a:	66 e0       	ldi	r22, 0x06	; 6
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	ce 01       	movw	r24, r28
     ea0:	03 96       	adiw	r24, 0x03	; 3
     ea2:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	ce 01       	movw	r24, r28
     eac:	03 96       	adiw	r24, 0x03	; 3
     eae:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	ce 01       	movw	r24, r28
     eb8:	03 96       	adiw	r24, 0x03	; 3
     eba:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     ebe:	69 81       	ldd	r22, Y+1	; 0x01
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	ce 01       	movw	r24, r28
     ec4:	03 96       	adiw	r24, 0x03	; 3
     ec6:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
     eca:	6a 81       	ldd	r22, Y+2	; 0x02
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	ce 01       	movw	r24, r28
     ed0:	03 96       	adiw	r24, 0x03	; 3
     ed2:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     ed6:	ce 01       	movw	r24, r28
     ed8:	03 96       	adiw	r24, 0x03	; 3
     eda:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN9I2C_328pb4stopEv>


	encode_motors(1, motors, instruction);
     ede:	9e 01       	movw	r18, r28
     ee0:	2f 5f       	subi	r18, 0xFF	; 255
     ee2:	3f 4f       	sbci	r19, 0xFF	; 255
     ee4:	a7 01       	movw	r20, r14
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	c8 01       	movw	r24, r16
     eea:	0e 94 20 07 	call	0xe40	; 0xe40 <_ZN8pwm_chip13encode_motorsEhPiPh>
	

	i2c.start();
     eee:	ce 01       	movw	r24, r28
     ef0:	03 96       	adiw	r24, 0x03	; 3
     ef2:	0e 94 80 02 	call	0x500	; 0x500 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     ef6:	6e e9       	ldi	r22, 0x9E	; 158
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	ce 01       	movw	r24, r28
     efc:	03 96       	adiw	r24, 0x03	; 3
     efe:	0e 94 92 02 	call	0x524	; 0x524 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x16);		//LED4_ON_L
     f02:	66 e1       	ldi	r22, 0x16	; 22
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	ce 01       	movw	r24, r28
     f08:	03 96       	adiw	r24, 0x03	; 3
     f0a:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	ce 01       	movw	r24, r28
     f14:	03 96       	adiw	r24, 0x03	; 3
     f16:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	ce 01       	movw	r24, r28
     f20:	03 96       	adiw	r24, 0x03	; 3
     f22:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     f26:	69 81       	ldd	r22, Y+1	; 0x01
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	ce 01       	movw	r24, r28
     f2c:	03 96       	adiw	r24, 0x03	; 3
     f2e:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
     f32:	6a 81       	ldd	r22, Y+2	; 0x02
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	ce 01       	movw	r24, r28
     f38:	03 96       	adiw	r24, 0x03	; 3
     f3a:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     f3e:	ce 01       	movw	r24, r28
     f40:	03 96       	adiw	r24, 0x03	; 3
     f42:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN9I2C_328pb4stopEv>

	
	encode_motors(2, motors, instruction);
     f46:	9e 01       	movw	r18, r28
     f48:	2f 5f       	subi	r18, 0xFF	; 255
     f4a:	3f 4f       	sbci	r19, 0xFF	; 255
     f4c:	a7 01       	movw	r20, r14
     f4e:	62 e0       	ldi	r22, 0x02	; 2
     f50:	c8 01       	movw	r24, r16
     f52:	0e 94 20 07 	call	0xe40	; 0xe40 <_ZN8pwm_chip13encode_motorsEhPiPh>



	i2c.start();
     f56:	ce 01       	movw	r24, r28
     f58:	03 96       	adiw	r24, 0x03	; 3
     f5a:	0e 94 80 02 	call	0x500	; 0x500 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     f5e:	6e e9       	ldi	r22, 0x9E	; 158
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	ce 01       	movw	r24, r28
     f64:	03 96       	adiw	r24, 0x03	; 3
     f66:	0e 94 92 02 	call	0x524	; 0x524 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x2E);		//LED8_ON_L
     f6a:	6e e2       	ldi	r22, 0x2E	; 46
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	ce 01       	movw	r24, r28
     f70:	03 96       	adiw	r24, 0x03	; 3
     f72:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	ce 01       	movw	r24, r28
     f7c:	03 96       	adiw	r24, 0x03	; 3
     f7e:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	ce 01       	movw	r24, r28
     f88:	03 96       	adiw	r24, 0x03	; 3
     f8a:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     f8e:	69 81       	ldd	r22, Y+1	; 0x01
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	ce 01       	movw	r24, r28
     f94:	03 96       	adiw	r24, 0x03	; 3
     f96:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
     f9a:	6a 81       	ldd	r22, Y+2	; 0x02
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	ce 01       	movw	r24, r28
     fa0:	03 96       	adiw	r24, 0x03	; 3
     fa2:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     fa6:	ce 01       	movw	r24, r28
     fa8:	03 96       	adiw	r24, 0x03	; 3
     faa:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN9I2C_328pb4stopEv>



	encode_motors(3, motors, instruction);
     fae:	9e 01       	movw	r18, r28
     fb0:	2f 5f       	subi	r18, 0xFF	; 255
     fb2:	3f 4f       	sbci	r19, 0xFF	; 255
     fb4:	a7 01       	movw	r20, r14
     fb6:	63 e0       	ldi	r22, 0x03	; 3
     fb8:	c8 01       	movw	r24, r16
     fba:	0e 94 20 07 	call	0xe40	; 0xe40 <_ZN8pwm_chip13encode_motorsEhPiPh>


	i2c.start();
     fbe:	ce 01       	movw	r24, r28
     fc0:	03 96       	adiw	r24, 0x03	; 3
     fc2:	0e 94 80 02 	call	0x500	; 0x500 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     fc6:	6e e9       	ldi	r22, 0x9E	; 158
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	ce 01       	movw	r24, r28
     fcc:	03 96       	adiw	r24, 0x03	; 3
     fce:	0e 94 92 02 	call	0x524	; 0x524 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x42);		//LED8_ON_L
     fd2:	62 e4       	ldi	r22, 0x42	; 66
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	ce 01       	movw	r24, r28
     fd8:	03 96       	adiw	r24, 0x03	; 3
     fda:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	ce 01       	movw	r24, r28
     fe4:	03 96       	adiw	r24, 0x03	; 3
     fe6:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	ce 01       	movw	r24, r28
     ff0:	03 96       	adiw	r24, 0x03	; 3
     ff2:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     ff6:	69 81       	ldd	r22, Y+1	; 0x01
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	ce 01       	movw	r24, r28
     ffc:	03 96       	adiw	r24, 0x03	; 3
     ffe:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
    1002:	6a 81       	ldd	r22, Y+2	; 0x02
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	ce 01       	movw	r24, r28
    1008:	03 96       	adiw	r24, 0x03	; 3
    100a:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
    100e:	ce 01       	movw	r24, r28
    1010:	03 96       	adiw	r24, 0x03	; 3
    1012:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN9I2C_328pb4stopEv>


}
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	08 95       	ret

0000102a <_ZN7sensorsC1E9I2C_328pb>:
#include "sensors.h"



sensors::sensors(I2C_328pb i2c){
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	1f 92       	push	r1
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	8c 01       	movw	r16, r24
    103a:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
    103c:	ce 01       	movw	r24, r28
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	0e 94 80 02 	call	0x500	; 0x500 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x32);	// acc slave + w
    1044:	62 e3       	ldi	r22, 0x32	; 50
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	ce 01       	movw	r24, r28
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	0e 94 92 02 	call	0x524	; 0x524 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0xA0);	// Control register 1 + autoincrement
    1050:	60 ea       	ldi	r22, 0xA0	; 160
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	ce 01       	movw	r24, r28
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x67);	// all axis enable data refresh rate is 200Hz
    105c:	67 e6       	ldi	r22, 0x67	; 103
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	ce 01       	movw	r24, r28
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.send(0x0);	// CR2 default values
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	ce 01       	movw	r24, r28
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.send(0x0);	// CR3 default values
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	ce 01       	movw	r24, r28
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.send(0x10);	// CR4  +- 4g and 8mg/digit, The value 32767 corresponds to 4 g's
    1080:	60 e1       	ldi	r22, 0x10	; 16
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	ce 01       	movw	r24, r28
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
    108c:	ce 01       	movw	r24, r28
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN9I2C_328pb4stopEv>
	

////////////////////////////// accelerometer init above and gyro init below

	i2c.start();
    1094:	ce 01       	movw	r24, r28
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	0e 94 80 02 	call	0x500	; 0x500 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0xD6); // gyro slave + w
    109c:	66 ed       	ldi	r22, 0xD6	; 214
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	ce 01       	movw	r24, r28
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	0e 94 92 02 	call	0x524	; 0x524 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x20);	// Control register 1
    10a8:	60 e2       	ldi	r22, 0x20	; 32
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	ce 01       	movw	r24, r28
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x0F);	// all axis enable data refresh rate is 100Hz (a lot of other params also affected)
    10b4:	6f e0       	ldi	r22, 0x0F	; 15
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	ce 01       	movw	r24, r28
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
    10c0:	ce 01       	movw	r24, r28
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN9I2C_328pb4stopEv>

			// default sensitivity is 8.75 mdps/digit
			
			
	pitch = 0.f;
    10c8:	f8 01       	movw	r30, r16
    10ca:	14 86       	std	Z+12, r1	; 0x0c
    10cc:	15 86       	std	Z+13, r1	; 0x0d
    10ce:	16 86       	std	Z+14, r1	; 0x0e
    10d0:	17 86       	std	Z+15, r1	; 0x0f
	roll = 0.f;
    10d2:	10 8a       	std	Z+16, r1	; 0x10
    10d4:	11 8a       	std	Z+17, r1	; 0x11
    10d6:	12 8a       	std	Z+18, r1	; 0x12
    10d8:	13 8a       	std	Z+19, r1	; 0x13
	yaw_rate = 0.f;
    10da:	14 8a       	std	Z+20, r1	; 0x14
    10dc:	15 8a       	std	Z+21, r1	; 0x15
    10de:	16 8a       	std	Z+22, r1	; 0x16
    10e0:	17 8a       	std	Z+23, r1	; 0x17

	time_of_previous_scan = TCNT1;
    10e2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    10e6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    10ea:	91 8f       	std	Z+25, r25	; 0x19
    10ec:	80 8f       	std	Z+24, r24	; 0x18

}
    10ee:	0f 90       	pop	r0
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	08 95       	ret

000010fa <_ZN7sensors8read_accE9I2C_328pb>:



void sensors::read_acc(I2C_328pb i2c){
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	1f 92       	push	r1
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	8c 01       	movw	r16, r24
    110e:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
    1110:	ce 01       	movw	r24, r28
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	0e 94 80 02 	call	0x500	; 0x500 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x32);	// acc slave + w
    1118:	62 e3       	ldi	r22, 0x32	; 50
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	ce 01       	movw	r24, r28
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	0e 94 92 02 	call	0x524	; 0x524 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send(0xA8);	// X_low +auto increment
    1124:	68 ea       	ldi	r22, 0xA8	; 168
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	ce 01       	movw	r24, r28
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
    1130:	ce 01       	movw	r24, r28
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	0e 94 89 02 	call	0x512	; 0x512 <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0x33);	// acc slave + r
    1138:	63 e3       	ldi	r22, 0x33	; 51
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	ce 01       	movw	r24, r28
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	0e 94 92 02 	call	0x524	; 0x524 <_ZN9I2C_328pb10send_slaveEi>

	i2c.get_next_byte();
    1144:	ce 01       	movw	r24, r28
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN9I2C_328pb13get_next_byteEv>
	acc_x_data = TWDR0;	// read low byte
    114c:	0f 2e       	mov	r0, r31
    114e:	fb eb       	ldi	r31, 0xBB	; 187
    1150:	ef 2e       	mov	r14, r31
    1152:	f1 2c       	mov	r15, r1
    1154:	f0 2d       	mov	r31, r0
    1156:	f7 01       	movw	r30, r14
    1158:	80 81       	ld	r24, Z
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	f8 01       	movw	r30, r16
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	80 83       	st	Z, r24
	i2c.get_next_byte();
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN9I2C_328pb13get_next_byteEv>
	acc_x_data |= (TWDR0 << 8);	// read high byte
    116a:	f7 01       	movw	r30, r14
    116c:	20 81       	ld	r18, Z
    116e:	f8 01       	movw	r30, r16
    1170:	80 81       	ld	r24, Z
    1172:	91 81       	ldd	r25, Z+1	; 0x01
    1174:	92 2b       	or	r25, r18
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	80 83       	st	Z, r24
	i2c.get_next_byte();
    117a:	ce 01       	movw	r24, r28
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN9I2C_328pb13get_next_byteEv>


	acc_y_data = TWDR0;	// read low byte
    1182:	f7 01       	movw	r30, r14
    1184:	80 81       	ld	r24, Z
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	f8 01       	movw	r30, r16
    118a:	93 83       	std	Z+3, r25	; 0x03
    118c:	82 83       	std	Z+2, r24	; 0x02
	i2c.get_next_byte();
    118e:	ce 01       	movw	r24, r28
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN9I2C_328pb13get_next_byteEv>
	acc_y_data |= (TWDR0 << 8);	// read high byte
    1196:	f7 01       	movw	r30, r14
    1198:	20 81       	ld	r18, Z
    119a:	f8 01       	movw	r30, r16
    119c:	82 81       	ldd	r24, Z+2	; 0x02
    119e:	93 81       	ldd	r25, Z+3	; 0x03
    11a0:	92 2b       	or	r25, r18
    11a2:	93 83       	std	Z+3, r25	; 0x03
    11a4:	82 83       	std	Z+2, r24	; 0x02
	i2c.get_next_byte();
    11a6:	ce 01       	movw	r24, r28
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN9I2C_328pb13get_next_byteEv>


	acc_z_data = TWDR0;	// read low byte
    11ae:	f7 01       	movw	r30, r14
    11b0:	80 81       	ld	r24, Z
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	f8 01       	movw	r30, r16
    11b6:	95 83       	std	Z+5, r25	; 0x05
    11b8:	84 83       	std	Z+4, r24	; 0x04
	i2c.get_next_byte();
    11ba:	ce 01       	movw	r24, r28
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN9I2C_328pb13get_next_byteEv>
	acc_z_data |= (TWDR0 << 8);	// read high byte
    11c2:	f7 01       	movw	r30, r14
    11c4:	20 81       	ld	r18, Z
    11c6:	f8 01       	movw	r30, r16
    11c8:	84 81       	ldd	r24, Z+4	; 0x04
    11ca:	95 81       	ldd	r25, Z+5	; 0x05
    11cc:	92 2b       	or	r25, r18
    11ce:	95 83       	std	Z+5, r25	; 0x05
    11d0:	84 83       	std	Z+4, r24	; 0x04


	i2c.end_data_read();
    11d2:	ce 01       	movw	r24, r28
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN9I2C_328pb13end_data_readEv>
	i2c.stop();
    11da:	ce 01       	movw	r24, r28
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN9I2C_328pb4stopEv>
}
    11e2:	0f 90       	pop	r0
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	08 95       	ret

000011f2 <_ZN7sensors9read_gyroE9I2C_328pb>:

void sensors::read_gyro(I2C_328pb i2c){
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	1f 92       	push	r1
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	8c 01       	movw	r16, r24
    1206:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
    1208:	ce 01       	movw	r24, r28
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	0e 94 80 02 	call	0x500	; 0x500 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0xD6);	// gyro slave + w
    1210:	66 ed       	ldi	r22, 0xD6	; 214
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	ce 01       	movw	r24, r28
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	0e 94 92 02 	call	0x524	; 0x524 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send(0xA8);	// X_low +auto increment
    121c:	68 ea       	ldi	r22, 0xA8	; 168
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	ce 01       	movw	r24, r28
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
    1228:	ce 01       	movw	r24, r28
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	0e 94 89 02 	call	0x512	; 0x512 <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0xD7);	// gyro slave + r
    1230:	67 ed       	ldi	r22, 0xD7	; 215
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	ce 01       	movw	r24, r28
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	0e 94 92 02 	call	0x524	; 0x524 <_ZN9I2C_328pb10send_slaveEi>

	i2c.get_next_byte();
    123c:	ce 01       	movw	r24, r28
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_x_data = TWDR0;	// read low byte
    1244:	0f 2e       	mov	r0, r31
    1246:	fb eb       	ldi	r31, 0xBB	; 187
    1248:	ef 2e       	mov	r14, r31
    124a:	f1 2c       	mov	r15, r1
    124c:	f0 2d       	mov	r31, r0
    124e:	f7 01       	movw	r30, r14
    1250:	80 81       	ld	r24, Z
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	f8 01       	movw	r30, r16
    1256:	97 83       	std	Z+7, r25	; 0x07
    1258:	86 83       	std	Z+6, r24	; 0x06
	i2c.get_next_byte();
    125a:	ce 01       	movw	r24, r28
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_x_data |= (TWDR0 << 8);	// read high byte
    1262:	f7 01       	movw	r30, r14
    1264:	20 81       	ld	r18, Z
    1266:	f8 01       	movw	r30, r16
    1268:	86 81       	ldd	r24, Z+6	; 0x06
    126a:	97 81       	ldd	r25, Z+7	; 0x07
    126c:	92 2b       	or	r25, r18
    126e:	97 83       	std	Z+7, r25	; 0x07
    1270:	86 83       	std	Z+6, r24	; 0x06
	i2c.get_next_byte();
    1272:	ce 01       	movw	r24, r28
    1274:	01 96       	adiw	r24, 0x01	; 1
    1276:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN9I2C_328pb13get_next_byteEv>


	gyro_y_data = TWDR0;	// read low byte
    127a:	f7 01       	movw	r30, r14
    127c:	80 81       	ld	r24, Z
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	f8 01       	movw	r30, r16
    1282:	91 87       	std	Z+9, r25	; 0x09
    1284:	80 87       	std	Z+8, r24	; 0x08
	i2c.get_next_byte();
    1286:	ce 01       	movw	r24, r28
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_y_data |= (TWDR0 << 8);	// read high byte
    128e:	f7 01       	movw	r30, r14
    1290:	20 81       	ld	r18, Z
    1292:	f8 01       	movw	r30, r16
    1294:	80 85       	ldd	r24, Z+8	; 0x08
    1296:	91 85       	ldd	r25, Z+9	; 0x09
    1298:	92 2b       	or	r25, r18
    129a:	91 87       	std	Z+9, r25	; 0x09
    129c:	80 87       	std	Z+8, r24	; 0x08
	i2c.get_next_byte();
    129e:	ce 01       	movw	r24, r28
    12a0:	01 96       	adiw	r24, 0x01	; 1
    12a2:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN9I2C_328pb13get_next_byteEv>

  
	gyro_z_data = TWDR0;	// read low byte
    12a6:	f7 01       	movw	r30, r14
    12a8:	80 81       	ld	r24, Z
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	f8 01       	movw	r30, r16
    12ae:	93 87       	std	Z+11, r25	; 0x0b
    12b0:	82 87       	std	Z+10, r24	; 0x0a
	i2c.get_next_byte();
    12b2:	ce 01       	movw	r24, r28
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	0e 94 b3 02 	call	0x566	; 0x566 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_z_data |= (TWDR0 << 8);	// read high byte
    12ba:	f7 01       	movw	r30, r14
    12bc:	20 81       	ld	r18, Z
    12be:	f8 01       	movw	r30, r16
    12c0:	82 85       	ldd	r24, Z+10	; 0x0a
    12c2:	93 85       	ldd	r25, Z+11	; 0x0b
    12c4:	92 2b       	or	r25, r18
    12c6:	93 87       	std	Z+11, r25	; 0x0b
    12c8:	82 87       	std	Z+10, r24	; 0x0a

	i2c.end_data_read();
    12ca:	ce 01       	movw	r24, r28
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	0e 94 bc 02 	call	0x578	; 0x578 <_ZN9I2C_328pb13end_data_readEv>
	i2c.stop();
    12d2:	ce 01       	movw	r24, r28
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN9I2C_328pb4stopEv>
}
    12da:	0f 90       	pop	r0
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	ff 90       	pop	r15
    12e6:	ef 90       	pop	r14
    12e8:	08 95       	ret

000012ea <_ZN7sensors8get_timeEv>:


}


float sensors:: get_time(){
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <_ZN7sensors8get_timeEv+0xe>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <_ZN7sensors8get_timeEv+0x10>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	8c 01       	movw	r16, r24

	uint16_t time = TCNT1;
    1300:	e4 e8       	ldi	r30, 0x84	; 132
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	e0 80       	ld	r14, Z
    1306:	f1 80       	ldd	r15, Z+1	; 0x01
	
	volatile float result;
	

	if (TCNT1 < time_of_previous_scan){
    1308:	20 81       	ld	r18, Z
    130a:	31 81       	ldd	r19, Z+1	; 0x01
    130c:	fc 01       	movw	r30, r24
    130e:	80 8d       	ldd	r24, Z+24	; 0x18
    1310:	91 8d       	ldd	r25, Z+25	; 0x19
    1312:	28 17       	cp	r18, r24
    1314:	39 07       	cpc	r19, r25
    1316:	70 f4       	brcc	.+28     	; 0x1334 <_ZN7sensors8get_timeEv+0x4a>

		result = 0xffff - time_of_previous_scan + time ;
    1318:	b7 01       	movw	r22, r14
    131a:	61 50       	subi	r22, 0x01	; 1
    131c:	71 09       	sbc	r23, r1
    131e:	68 1b       	sub	r22, r24
    1320:	79 0b       	sbc	r23, r25
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatunsisf>
    132a:	69 83       	std	Y+1, r22	; 0x01
    132c:	7a 83       	std	Y+2, r23	; 0x02
    132e:	8b 83       	std	Y+3, r24	; 0x03
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	0b c0       	rjmp	.+22     	; 0x134a <_ZN7sensors8get_timeEv+0x60>

	}

	else{

		result = time - time_of_previous_scan;
    1334:	b7 01       	movw	r22, r14
    1336:	68 1b       	sub	r22, r24
    1338:	79 0b       	sbc	r23, r25
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 c5 0c 	call	0x198a	; 0x198a <__floatunsisf>
    1342:	69 83       	std	Y+1, r22	; 0x01
    1344:	7a 83       	std	Y+2, r23	; 0x02
    1346:	8b 83       	std	Y+3, r24	; 0x03
    1348:	9c 83       	std	Y+4, r25	; 0x04
	}


	result /= (float)TIMER_BIT_RATE;
    134a:	69 81       	ldd	r22, Y+1	; 0x01
    134c:	7a 81       	ldd	r23, Y+2	; 0x02
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	34 e2       	ldi	r19, 0x24	; 36
    1356:	44 e7       	ldi	r20, 0x74	; 116
    1358:	59 e4       	ldi	r21, 0x49	; 73
    135a:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divsf3>
    135e:	69 83       	std	Y+1, r22	; 0x01
    1360:	7a 83       	std	Y+2, r23	; 0x02
    1362:	8b 83       	std	Y+3, r24	; 0x03
    1364:	9c 83       	std	Y+4, r25	; 0x04

	time_of_previous_scan = time;
    1366:	f8 01       	movw	r30, r16
    1368:	f1 8e       	std	Z+25, r15	; 0x19
    136a:	e0 8e       	std	Z+24, r14	; 0x18

	return result;
    136c:	69 81       	ldd	r22, Y+1	; 0x01
    136e:	7a 81       	ldd	r23, Y+2	; 0x02
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04


}
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	08 95       	ret

0000138a <_ZN7sensors16compute_positionEv>:
}




void sensors::compute_position(){
    138a:	4f 92       	push	r4
    138c:	5f 92       	push	r5
    138e:	6f 92       	push	r6
    1390:	7f 92       	push	r7
    1392:	8f 92       	push	r8
    1394:	9f 92       	push	r9
    1396:	af 92       	push	r10
    1398:	bf 92       	push	r11
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	64 97       	sbiw	r28, 0x14	; 20
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	8c 01       	movw	r16, r24

	volatile float R;	// what the accelerometer thinks the total acceleration is
	volatile float trust_factor; // to what degree do I trust the accelerometer's readings
	const float time_between_measurements = get_time();
    13bc:	0e 94 75 09 	call	0x12ea	; 0x12ea <_ZN7sensors8get_timeEv>
    13c0:	6b 01       	movw	r12, r22
    13c2:	7c 01       	movw	r14, r24
 
	
	pitch += (gyro_y_data * GYRO_SENSITIVITY * time_between_measurements);
    13c4:	f8 01       	movw	r30, r16
    13c6:	60 85       	ldd	r22, Z+8	; 0x08
    13c8:	71 85       	ldd	r23, Z+9	; 0x09
    13ca:	07 2e       	mov	r0, r23
    13cc:	00 0c       	add	r0, r0
    13ce:	88 0b       	sbc	r24, r24
    13d0:	99 0b       	sbc	r25, r25
    13d2:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
    13d6:	29 e2       	ldi	r18, 0x29	; 41
    13d8:	3c e5       	ldi	r19, 0x5C	; 92
    13da:	4f e0       	ldi	r20, 0x0F	; 15
    13dc:	5c e3       	ldi	r21, 0x3C	; 60
    13de:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
    13e2:	a7 01       	movw	r20, r14
    13e4:	96 01       	movw	r18, r12
    13e6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
    13ea:	f8 01       	movw	r30, r16
    13ec:	24 85       	ldd	r18, Z+12	; 0x0c
    13ee:	35 85       	ldd	r19, Z+13	; 0x0d
    13f0:	46 85       	ldd	r20, Z+14	; 0x0e
    13f2:	57 85       	ldd	r21, Z+15	; 0x0f
    13f4:	0e 94 91 0b 	call	0x1722	; 0x1722 <__addsf3>
    13f8:	4b 01       	movw	r8, r22
    13fa:	5c 01       	movw	r10, r24
    13fc:	f8 01       	movw	r30, r16
    13fe:	64 87       	std	Z+12, r22	; 0x0c
    1400:	75 87       	std	Z+13, r23	; 0x0d
    1402:	86 87       	std	Z+14, r24	; 0x0e
    1404:	97 87       	std	Z+15, r25	; 0x0f
	roll += (gyro_x_data * GYRO_SENSITIVITY * time_between_measurements);
    1406:	66 81       	ldd	r22, Z+6	; 0x06
    1408:	77 81       	ldd	r23, Z+7	; 0x07
    140a:	07 2e       	mov	r0, r23
    140c:	00 0c       	add	r0, r0
    140e:	88 0b       	sbc	r24, r24
    1410:	99 0b       	sbc	r25, r25
    1412:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
    1416:	29 e2       	ldi	r18, 0x29	; 41
    1418:	3c e5       	ldi	r19, 0x5C	; 92
    141a:	4f e0       	ldi	r20, 0x0F	; 15
    141c:	5c e3       	ldi	r21, 0x3C	; 60
    141e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
    1422:	a7 01       	movw	r20, r14
    1424:	96 01       	movw	r18, r12
    1426:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
    142a:	f8 01       	movw	r30, r16
    142c:	20 89       	ldd	r18, Z+16	; 0x10
    142e:	31 89       	ldd	r19, Z+17	; 0x11
    1430:	42 89       	ldd	r20, Z+18	; 0x12
    1432:	53 89       	ldd	r21, Z+19	; 0x13
    1434:	0e 94 91 0b 	call	0x1722	; 0x1722 <__addsf3>
    1438:	2b 01       	movw	r4, r22
    143a:	3c 01       	movw	r6, r24
    143c:	f8 01       	movw	r30, r16
    143e:	60 8b       	std	Z+16, r22	; 0x10
    1440:	71 8b       	std	Z+17, r23	; 0x11
    1442:	82 8b       	std	Z+18, r24	; 0x12
    1444:	93 8b       	std	Z+19, r25	; 0x13
	yaw_rate = (gyro_z_data * GYRO_SENSITIVITY );
    1446:	62 85       	ldd	r22, Z+10	; 0x0a
    1448:	73 85       	ldd	r23, Z+11	; 0x0b
    144a:	07 2e       	mov	r0, r23
    144c:	00 0c       	add	r0, r0
    144e:	88 0b       	sbc	r24, r24
    1450:	99 0b       	sbc	r25, r25
    1452:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
    1456:	29 e2       	ldi	r18, 0x29	; 41
    1458:	3c e5       	ldi	r19, 0x5C	; 92
    145a:	4f e0       	ldi	r20, 0x0F	; 15
    145c:	5c e3       	ldi	r21, 0x3C	; 60
    145e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
    1462:	f8 01       	movw	r30, r16
    1464:	64 8b       	std	Z+20, r22	; 0x14
    1466:	75 8b       	std	Z+21, r23	; 0x15
    1468:	86 8b       	std	Z+22, r24	; 0x16
    146a:	97 8b       	std	Z+23, r25	; 0x17



	R = sqrt( square( acc_x_data ) + square( acc_y_data ) + square( acc_z_data ) );
    146c:	60 81       	ld	r22, Z
    146e:	71 81       	ldd	r23, Z+1	; 0x01
    1470:	07 2e       	mov	r0, r23
    1472:	00 0c       	add	r0, r0
    1474:	88 0b       	sbc	r24, r24
    1476:	99 0b       	sbc	r25, r25
    1478:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
    147c:	6d 87       	std	Y+13, r22	; 0x0d
    147e:	7e 87       	std	Y+14, r23	; 0x0e
    1480:	8f 87       	std	Y+15, r24	; 0x0f
    1482:	98 8b       	std	Y+16, r25	; 0x10
    1484:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <square>
    1488:	6b 01       	movw	r12, r22
    148a:	7c 01       	movw	r14, r24
    148c:	f8 01       	movw	r30, r16
    148e:	62 81       	ldd	r22, Z+2	; 0x02
    1490:	73 81       	ldd	r23, Z+3	; 0x03
    1492:	07 2e       	mov	r0, r23
    1494:	00 0c       	add	r0, r0
    1496:	88 0b       	sbc	r24, r24
    1498:	99 0b       	sbc	r25, r25
    149a:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
    149e:	69 8b       	std	Y+17, r22	; 0x11
    14a0:	7a 8b       	std	Y+18, r23	; 0x12
    14a2:	8b 8b       	std	Y+19, r24	; 0x13
    14a4:	9c 8b       	std	Y+20, r25	; 0x14
    14a6:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <square>
    14aa:	9b 01       	movw	r18, r22
    14ac:	ac 01       	movw	r20, r24
    14ae:	c7 01       	movw	r24, r14
    14b0:	b6 01       	movw	r22, r12
    14b2:	0e 94 91 0b 	call	0x1722	; 0x1722 <__addsf3>
    14b6:	6b 01       	movw	r12, r22
    14b8:	7c 01       	movw	r14, r24
    14ba:	f8 01       	movw	r30, r16
    14bc:	64 81       	ldd	r22, Z+4	; 0x04
    14be:	75 81       	ldd	r23, Z+5	; 0x05
    14c0:	07 2e       	mov	r0, r23
    14c2:	00 0c       	add	r0, r0
    14c4:	88 0b       	sbc	r24, r24
    14c6:	99 0b       	sbc	r25, r25
    14c8:	0e 94 c7 0c 	call	0x198e	; 0x198e <__floatsisf>
    14cc:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <square>
    14d0:	69 87       	std	Y+9, r22	; 0x09
    14d2:	7a 87       	std	Y+10, r23	; 0x0a
    14d4:	8b 87       	std	Y+11, r24	; 0x0b
    14d6:	9c 87       	std	Y+12, r25	; 0x0c
    14d8:	29 85       	ldd	r18, Y+9	; 0x09
    14da:	3a 85       	ldd	r19, Y+10	; 0x0a
    14dc:	4b 85       	ldd	r20, Y+11	; 0x0b
    14de:	5c 85       	ldd	r21, Y+12	; 0x0c
    14e0:	c7 01       	movw	r24, r14
    14e2:	b6 01       	movw	r22, r12
    14e4:	0e 94 91 0b 	call	0x1722	; 0x1722 <__addsf3>
    14e8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <sqrt>
    14ec:	69 83       	std	Y+1, r22	; 0x01
    14ee:	7a 83       	std	Y+2, r23	; 0x02
    14f0:	8b 83       	std	Y+3, r24	; 0x03
    14f2:	9c 83       	std	Y+4, r25	; 0x04
	R *= ACC_SENSITIVITY;
    14f4:	69 81       	ldd	r22, Y+1	; 0x01
    14f6:	7a 81       	ldd	r23, Y+2	; 0x02
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	9c 81       	ldd	r25, Y+4	; 0x04
    14fc:	20 e9       	ldi	r18, 0x90	; 144
    14fe:	39 ef       	ldi	r19, 0xF9	; 249
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	59 e3       	ldi	r21, 0x39	; 57
    1504:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
    1508:	69 83       	std	Y+1, r22	; 0x01
    150a:	7a 83       	std	Y+2, r23	; 0x02
    150c:	8b 83       	std	Y+3, r24	; 0x03
    150e:	9c 83       	std	Y+4, r25	; 0x04
	

	if ( R > 1.5 || R < 0.5 ){
    1510:	69 81       	ldd	r22, Y+1	; 0x01
    1512:	7a 81       	ldd	r23, Y+2	; 0x02
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 ec       	ldi	r20, 0xC0	; 192
    151e:	5f e3       	ldi	r21, 0x3F	; 63
    1520:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__gesf2>
    1524:	18 16       	cp	r1, r24
    1526:	0c f4       	brge	.+2      	; 0x152a <_ZN7sensors16compute_positionEv+0x1a0>
    1528:	b4 c0       	rjmp	.+360    	; 0x1692 <_ZN7sensors16compute_positionEv+0x308>
    152a:	69 81       	ldd	r22, Y+1	; 0x01
    152c:	7a 81       	ldd	r23, Y+2	; 0x02
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	40 e0       	ldi	r20, 0x00	; 0
    1538:	5f e3       	ldi	r21, 0x3F	; 63
    153a:	0e 94 18 0c 	call	0x1830	; 0x1830 <__cmpsf2>
    153e:	88 23       	and	r24, r24
    1540:	0c f4       	brge	.+2      	; 0x1544 <_ZN7sensors16compute_positionEv+0x1ba>
    1542:	a7 c0       	rjmp	.+334    	; 0x1692 <_ZN7sensors16compute_positionEv+0x308>
		return;	// there is too much external factor for the accelerometer to be of any use

	}


	float acc_pitch_angle = asin(  acc_y_data / (R*8130) );	// accounts for +- sign 0 is the level value
    1544:	69 81       	ldd	r22, Y+1	; 0x01
    1546:	7a 81       	ldd	r23, Y+2	; 0x02
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e1       	ldi	r19, 0x10	; 16
    1550:	4e ef       	ldi	r20, 0xFE	; 254
    1552:	55 e4       	ldi	r21, 0x45	; 69
    1554:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
    1558:	9b 01       	movw	r18, r22
    155a:	ac 01       	movw	r20, r24
    155c:	69 89       	ldd	r22, Y+17	; 0x11
    155e:	7a 89       	ldd	r23, Y+18	; 0x12
    1560:	8b 89       	ldd	r24, Y+19	; 0x13
    1562:	9c 89       	ldd	r25, Y+20	; 0x14
    1564:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divsf3>
    1568:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <asin>
    156c:	69 87       	std	Y+9, r22	; 0x09
    156e:	7a 87       	std	Y+10, r23	; 0x0a
    1570:	8b 87       	std	Y+11, r24	; 0x0b
    1572:	9c 87       	std	Y+12, r25	; 0x0c
	float acc_roll_angle = asin( acc_x_data / (R*8130) );	// accounts for +- sign 0 is the level value
    1574:	69 81       	ldd	r22, Y+1	; 0x01
    1576:	7a 81       	ldd	r23, Y+2	; 0x02
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e1       	ldi	r19, 0x10	; 16
    1580:	4e ef       	ldi	r20, 0xFE	; 254
    1582:	55 e4       	ldi	r21, 0x45	; 69
    1584:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
    1588:	9b 01       	movw	r18, r22
    158a:	ac 01       	movw	r20, r24
    158c:	6d 85       	ldd	r22, Y+13	; 0x0d
    158e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1590:	8f 85       	ldd	r24, Y+15	; 0x0f
    1592:	98 89       	ldd	r25, Y+16	; 0x10
    1594:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divsf3>
    1598:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <asin>
    159c:	6d 87       	std	Y+13, r22	; 0x0d
    159e:	7e 87       	std	Y+14, r23	; 0x0e
    15a0:	8f 87       	std	Y+15, r24	; 0x0f
    15a2:	98 8b       	std	Y+16, r25	; 0x10
	acc_pitch_angle *= 57.3;
	acc_roll_angle *= 57.3;	// conversion to degrees instead of radians.



	trust_factor = ( 1 - fabs(1 - R) ) / 10;
    15a4:	29 81       	ldd	r18, Y+1	; 0x01
    15a6:	3a 81       	ldd	r19, Y+2	; 0x02
    15a8:	4b 81       	ldd	r20, Y+3	; 0x03
    15aa:	5c 81       	ldd	r21, Y+4	; 0x04
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	80 e8       	ldi	r24, 0x80	; 128
    15b2:	9f e3       	ldi	r25, 0x3F	; 63
    15b4:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
    15b8:	9b 01       	movw	r18, r22
    15ba:	ac 01       	movw	r20, r24
    15bc:	5f 77       	andi	r21, 0x7F	; 127
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	80 e8       	ldi	r24, 0x80	; 128
    15c4:	9f e3       	ldi	r25, 0x3F	; 63
    15c6:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e2       	ldi	r20, 0x20	; 32
    15d0:	51 e4       	ldi	r21, 0x41	; 65
    15d2:	0e 94 1d 0c 	call	0x183a	; 0x183a <__divsf3>
    15d6:	6d 83       	std	Y+5, r22	; 0x05
    15d8:	7e 83       	std	Y+6, r23	; 0x06
    15da:	8f 83       	std	Y+7, r24	; 0x07
    15dc:	98 87       	std	Y+8, r25	; 0x08


	pitch = (pitch * (1 - trust_factor) + (acc_pitch_angle * trust_factor) );
    15de:	2d 81       	ldd	r18, Y+5	; 0x05
    15e0:	3e 81       	ldd	r19, Y+6	; 0x06
    15e2:	4f 81       	ldd	r20, Y+7	; 0x07
    15e4:	58 85       	ldd	r21, Y+8	; 0x08
    15e6:	cd 80       	ldd	r12, Y+5	; 0x05
    15e8:	de 80       	ldd	r13, Y+6	; 0x06
    15ea:	ef 80       	ldd	r14, Y+7	; 0x07
    15ec:	f8 84       	ldd	r15, Y+8	; 0x08
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	80 e8       	ldi	r24, 0x80	; 128
    15f4:	9f e3       	ldi	r25, 0x3F	; 63
    15f6:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
    15fa:	a5 01       	movw	r20, r10
    15fc:	94 01       	movw	r18, r8
    15fe:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
    1602:	4b 01       	movw	r8, r22
    1604:	5c 01       	movw	r10, r24
    1606:	23 e3       	ldi	r18, 0x33	; 51
    1608:	33 e3       	ldi	r19, 0x33	; 51
    160a:	45 e6       	ldi	r20, 0x65	; 101
    160c:	52 e4       	ldi	r21, 0x42	; 66
    160e:	69 85       	ldd	r22, Y+9	; 0x09
    1610:	7a 85       	ldd	r23, Y+10	; 0x0a
    1612:	8b 85       	ldd	r24, Y+11	; 0x0b
    1614:	9c 85       	ldd	r25, Y+12	; 0x0c
    1616:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
    161a:	a7 01       	movw	r20, r14
    161c:	96 01       	movw	r18, r12
    161e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
    1622:	9b 01       	movw	r18, r22
    1624:	ac 01       	movw	r20, r24
    1626:	c5 01       	movw	r24, r10
    1628:	b4 01       	movw	r22, r8
    162a:	0e 94 91 0b 	call	0x1722	; 0x1722 <__addsf3>
    162e:	f8 01       	movw	r30, r16
    1630:	64 87       	std	Z+12, r22	; 0x0c
    1632:	75 87       	std	Z+13, r23	; 0x0d
    1634:	86 87       	std	Z+14, r24	; 0x0e
    1636:	97 87       	std	Z+15, r25	; 0x0f
	roll = (roll * (1 - trust_factor) + (acc_roll_angle * trust_factor) );
    1638:	2d 81       	ldd	r18, Y+5	; 0x05
    163a:	3e 81       	ldd	r19, Y+6	; 0x06
    163c:	4f 81       	ldd	r20, Y+7	; 0x07
    163e:	58 85       	ldd	r21, Y+8	; 0x08
    1640:	8d 80       	ldd	r8, Y+5	; 0x05
    1642:	9e 80       	ldd	r9, Y+6	; 0x06
    1644:	af 80       	ldd	r10, Y+7	; 0x07
    1646:	b8 84       	ldd	r11, Y+8	; 0x08
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	80 e8       	ldi	r24, 0x80	; 128
    164e:	9f e3       	ldi	r25, 0x3F	; 63
    1650:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
    1654:	a3 01       	movw	r20, r6
    1656:	92 01       	movw	r18, r4
    1658:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
    165c:	2b 01       	movw	r4, r22
    165e:	3c 01       	movw	r6, r24
    1660:	23 e3       	ldi	r18, 0x33	; 51
    1662:	33 e3       	ldi	r19, 0x33	; 51
    1664:	45 e6       	ldi	r20, 0x65	; 101
    1666:	52 e4       	ldi	r21, 0x42	; 66
    1668:	6d 85       	ldd	r22, Y+13	; 0x0d
    166a:	7e 85       	ldd	r23, Y+14	; 0x0e
    166c:	8f 85       	ldd	r24, Y+15	; 0x0f
    166e:	98 89       	ldd	r25, Y+16	; 0x10
    1670:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
    1674:	a5 01       	movw	r20, r10
    1676:	94 01       	movw	r18, r8
    1678:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
    167c:	9b 01       	movw	r18, r22
    167e:	ac 01       	movw	r20, r24
    1680:	c3 01       	movw	r24, r6
    1682:	b2 01       	movw	r22, r4
    1684:	0e 94 91 0b 	call	0x1722	; 0x1722 <__addsf3>
    1688:	f8 01       	movw	r30, r16
    168a:	60 8b       	std	Z+16, r22	; 0x10
    168c:	71 8b       	std	Z+17, r23	; 0x11
    168e:	82 8b       	std	Z+18, r24	; 0x12
    1690:	93 8b       	std	Z+19, r25	; 0x13
	
	
	return;


}
    1692:	64 96       	adiw	r28, 0x14	; 20
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	df 90       	pop	r13
    16ac:	cf 90       	pop	r12
    16ae:	bf 90       	pop	r11
    16b0:	af 90       	pop	r10
    16b2:	9f 90       	pop	r9
    16b4:	8f 90       	pop	r8
    16b6:	7f 90       	pop	r7
    16b8:	6f 90       	pop	r6
    16ba:	5f 90       	pop	r5
    16bc:	4f 90       	pop	r4
    16be:	08 95       	ret

000016c0 <_ZNK7sensors9get_pitchEv>:
	return result;


}

float sensors::get_pitch() const{
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <_ZNK7sensors9get_pitchEv+0x6>
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <_ZNK7sensors9get_pitchEv+0x8>
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
	
		volatile float crap_pitch;
	
	crap_pitch = roll;
    16cc:	fc 01       	movw	r30, r24
    16ce:	40 89       	ldd	r20, Z+16	; 0x10
    16d0:	51 89       	ldd	r21, Z+17	; 0x11
    16d2:	62 89       	ldd	r22, Z+18	; 0x12
    16d4:	73 89       	ldd	r23, Z+19	; 0x13
    16d6:	49 83       	std	Y+1, r20	; 0x01
    16d8:	5a 83       	std	Y+2, r21	; 0x02
    16da:	6b 83       	std	Y+3, r22	; 0x03
    16dc:	7c 83       	std	Y+4, r23	; 0x04
	
	return pitch;
    16de:	64 85       	ldd	r22, Z+12	; 0x0c
    16e0:	75 85       	ldd	r23, Z+13	; 0x0d
    16e2:	86 85       	ldd	r24, Z+14	; 0x0e
    16e4:	97 85       	ldd	r25, Z+15	; 0x0f
}
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	08 95       	ret

000016f4 <_ZNK7sensors8get_rollEv>:

float sensors::get_roll() const{
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <_ZNK7sensors8get_rollEv+0x6>
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <_ZNK7sensors8get_rollEv+0x8>
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
	
	volatile float crap_roll;
	
	crap_roll = roll;
    1700:	fc 01       	movw	r30, r24
    1702:	60 89       	ldd	r22, Z+16	; 0x10
    1704:	71 89       	ldd	r23, Z+17	; 0x11
    1706:	82 89       	ldd	r24, Z+18	; 0x12
    1708:	93 89       	ldd	r25, Z+19	; 0x13
    170a:	69 83       	std	Y+1, r22	; 0x01
    170c:	7a 83       	std	Y+2, r23	; 0x02
    170e:	8b 83       	std	Y+3, r24	; 0x03
    1710:	9c 83       	std	Y+4, r25	; 0x04
	
	return roll;
}
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	08 95       	ret

00001720 <__subsf3>:
    1720:	50 58       	subi	r21, 0x80	; 128

00001722 <__addsf3>:
    1722:	bb 27       	eor	r27, r27
    1724:	aa 27       	eor	r26, r26
    1726:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__addsf3x>
    172a:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_round>
    172e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__fp_pscA>
    1732:	38 f0       	brcs	.+14     	; 0x1742 <__addsf3+0x20>
    1734:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__fp_pscB>
    1738:	20 f0       	brcs	.+8      	; 0x1742 <__addsf3+0x20>
    173a:	39 f4       	brne	.+14     	; 0x174a <__addsf3+0x28>
    173c:	9f 3f       	cpi	r25, 0xFF	; 255
    173e:	19 f4       	brne	.+6      	; 0x1746 <__addsf3+0x24>
    1740:	26 f4       	brtc	.+8      	; 0x174a <__addsf3+0x28>
    1742:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__fp_nan>
    1746:	0e f4       	brtc	.+2      	; 0x174a <__addsf3+0x28>
    1748:	e0 95       	com	r30
    174a:	e7 fb       	bst	r30, 7
    174c:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__fp_inf>

00001750 <__addsf3x>:
    1750:	e9 2f       	mov	r30, r25
    1752:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__fp_split3>
    1756:	58 f3       	brcs	.-42     	; 0x172e <__addsf3+0xc>
    1758:	ba 17       	cp	r27, r26
    175a:	62 07       	cpc	r22, r18
    175c:	73 07       	cpc	r23, r19
    175e:	84 07       	cpc	r24, r20
    1760:	95 07       	cpc	r25, r21
    1762:	20 f0       	brcs	.+8      	; 0x176c <__addsf3x+0x1c>
    1764:	79 f4       	brne	.+30     	; 0x1784 <__addsf3x+0x34>
    1766:	a6 f5       	brtc	.+104    	; 0x17d0 <__addsf3x+0x80>
    1768:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__fp_zero>
    176c:	0e f4       	brtc	.+2      	; 0x1770 <__addsf3x+0x20>
    176e:	e0 95       	com	r30
    1770:	0b 2e       	mov	r0, r27
    1772:	ba 2f       	mov	r27, r26
    1774:	a0 2d       	mov	r26, r0
    1776:	0b 01       	movw	r0, r22
    1778:	b9 01       	movw	r22, r18
    177a:	90 01       	movw	r18, r0
    177c:	0c 01       	movw	r0, r24
    177e:	ca 01       	movw	r24, r20
    1780:	a0 01       	movw	r20, r0
    1782:	11 24       	eor	r1, r1
    1784:	ff 27       	eor	r31, r31
    1786:	59 1b       	sub	r21, r25
    1788:	99 f0       	breq	.+38     	; 0x17b0 <__addsf3x+0x60>
    178a:	59 3f       	cpi	r21, 0xF9	; 249
    178c:	50 f4       	brcc	.+20     	; 0x17a2 <__addsf3x+0x52>
    178e:	50 3e       	cpi	r21, 0xE0	; 224
    1790:	68 f1       	brcs	.+90     	; 0x17ec <__addsf3x+0x9c>
    1792:	1a 16       	cp	r1, r26
    1794:	f0 40       	sbci	r31, 0x00	; 0
    1796:	a2 2f       	mov	r26, r18
    1798:	23 2f       	mov	r18, r19
    179a:	34 2f       	mov	r19, r20
    179c:	44 27       	eor	r20, r20
    179e:	58 5f       	subi	r21, 0xF8	; 248
    17a0:	f3 cf       	rjmp	.-26     	; 0x1788 <__addsf3x+0x38>
    17a2:	46 95       	lsr	r20
    17a4:	37 95       	ror	r19
    17a6:	27 95       	ror	r18
    17a8:	a7 95       	ror	r26
    17aa:	f0 40       	sbci	r31, 0x00	; 0
    17ac:	53 95       	inc	r21
    17ae:	c9 f7       	brne	.-14     	; 0x17a2 <__addsf3x+0x52>
    17b0:	7e f4       	brtc	.+30     	; 0x17d0 <__addsf3x+0x80>
    17b2:	1f 16       	cp	r1, r31
    17b4:	ba 0b       	sbc	r27, r26
    17b6:	62 0b       	sbc	r22, r18
    17b8:	73 0b       	sbc	r23, r19
    17ba:	84 0b       	sbc	r24, r20
    17bc:	ba f0       	brmi	.+46     	; 0x17ec <__addsf3x+0x9c>
    17be:	91 50       	subi	r25, 0x01	; 1
    17c0:	a1 f0       	breq	.+40     	; 0x17ea <__addsf3x+0x9a>
    17c2:	ff 0f       	add	r31, r31
    17c4:	bb 1f       	adc	r27, r27
    17c6:	66 1f       	adc	r22, r22
    17c8:	77 1f       	adc	r23, r23
    17ca:	88 1f       	adc	r24, r24
    17cc:	c2 f7       	brpl	.-16     	; 0x17be <__addsf3x+0x6e>
    17ce:	0e c0       	rjmp	.+28     	; 0x17ec <__addsf3x+0x9c>
    17d0:	ba 0f       	add	r27, r26
    17d2:	62 1f       	adc	r22, r18
    17d4:	73 1f       	adc	r23, r19
    17d6:	84 1f       	adc	r24, r20
    17d8:	48 f4       	brcc	.+18     	; 0x17ec <__addsf3x+0x9c>
    17da:	87 95       	ror	r24
    17dc:	77 95       	ror	r23
    17de:	67 95       	ror	r22
    17e0:	b7 95       	ror	r27
    17e2:	f7 95       	ror	r31
    17e4:	9e 3f       	cpi	r25, 0xFE	; 254
    17e6:	08 f0       	brcs	.+2      	; 0x17ea <__addsf3x+0x9a>
    17e8:	b0 cf       	rjmp	.-160    	; 0x174a <__addsf3+0x28>
    17ea:	93 95       	inc	r25
    17ec:	88 0f       	add	r24, r24
    17ee:	08 f0       	brcs	.+2      	; 0x17f2 <__addsf3x+0xa2>
    17f0:	99 27       	eor	r25, r25
    17f2:	ee 0f       	add	r30, r30
    17f4:	97 95       	ror	r25
    17f6:	87 95       	ror	r24
    17f8:	08 95       	ret

000017fa <asin>:
    17fa:	9f 93       	push	r25
    17fc:	9f 77       	andi	r25, 0x7F	; 127
    17fe:	ee e3       	ldi	r30, 0x3E	; 62
    1800:	89 37       	cpi	r24, 0x79	; 121
    1802:	9e 07       	cpc	r25, r30
    1804:	28 f4       	brcc	.+10     	; 0x1810 <asin+0x16>
    1806:	e4 eb       	ldi	r30, 0xB4	; 180
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__fp_powsodd>
    180e:	0c c0       	rjmp	.+24     	; 0x1828 <asin+0x2e>
    1810:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__fp_arccos>
    1814:	90 58       	subi	r25, 0x80	; 128
    1816:	a2 ea       	ldi	r26, 0xA2	; 162
    1818:	2a ed       	ldi	r18, 0xDA	; 218
    181a:	3f e0       	ldi	r19, 0x0F	; 15
    181c:	49 ec       	ldi	r20, 0xC9	; 201
    181e:	5f e3       	ldi	r21, 0x3F	; 63
    1820:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__addsf3x>
    1824:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__fp_round>
    1828:	0f 90       	pop	r0
    182a:	07 fc       	sbrc	r0, 7
    182c:	90 58       	subi	r25, 0x80	; 128
    182e:	08 95       	ret

00001830 <__cmpsf2>:
    1830:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__fp_cmp>
    1834:	08 f4       	brcc	.+2      	; 0x1838 <__cmpsf2+0x8>
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	08 95       	ret

0000183a <__divsf3>:
    183a:	0e 94 31 0c 	call	0x1862	; 0x1862 <__divsf3x>
    183e:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_round>
    1842:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__fp_pscB>
    1846:	58 f0       	brcs	.+22     	; 0x185e <__divsf3+0x24>
    1848:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__fp_pscA>
    184c:	40 f0       	brcs	.+16     	; 0x185e <__divsf3+0x24>
    184e:	29 f4       	brne	.+10     	; 0x185a <__divsf3+0x20>
    1850:	5f 3f       	cpi	r21, 0xFF	; 255
    1852:	29 f0       	breq	.+10     	; 0x185e <__divsf3+0x24>
    1854:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__fp_inf>
    1858:	51 11       	cpse	r21, r1
    185a:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__fp_szero>
    185e:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__fp_nan>

00001862 <__divsf3x>:
    1862:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__fp_split3>
    1866:	68 f3       	brcs	.-38     	; 0x1842 <__divsf3+0x8>

00001868 <__divsf3_pse>:
    1868:	99 23       	and	r25, r25
    186a:	b1 f3       	breq	.-20     	; 0x1858 <__divsf3+0x1e>
    186c:	55 23       	and	r21, r21
    186e:	91 f3       	breq	.-28     	; 0x1854 <__divsf3+0x1a>
    1870:	95 1b       	sub	r25, r21
    1872:	55 0b       	sbc	r21, r21
    1874:	bb 27       	eor	r27, r27
    1876:	aa 27       	eor	r26, r26
    1878:	62 17       	cp	r22, r18
    187a:	73 07       	cpc	r23, r19
    187c:	84 07       	cpc	r24, r20
    187e:	38 f0       	brcs	.+14     	; 0x188e <__divsf3_pse+0x26>
    1880:	9f 5f       	subi	r25, 0xFF	; 255
    1882:	5f 4f       	sbci	r21, 0xFF	; 255
    1884:	22 0f       	add	r18, r18
    1886:	33 1f       	adc	r19, r19
    1888:	44 1f       	adc	r20, r20
    188a:	aa 1f       	adc	r26, r26
    188c:	a9 f3       	breq	.-22     	; 0x1878 <__divsf3_pse+0x10>
    188e:	35 d0       	rcall	.+106    	; 0x18fa <__divsf3_pse+0x92>
    1890:	0e 2e       	mov	r0, r30
    1892:	3a f0       	brmi	.+14     	; 0x18a2 <__divsf3_pse+0x3a>
    1894:	e0 e8       	ldi	r30, 0x80	; 128
    1896:	32 d0       	rcall	.+100    	; 0x18fc <__divsf3_pse+0x94>
    1898:	91 50       	subi	r25, 0x01	; 1
    189a:	50 40       	sbci	r21, 0x00	; 0
    189c:	e6 95       	lsr	r30
    189e:	00 1c       	adc	r0, r0
    18a0:	ca f7       	brpl	.-14     	; 0x1894 <__divsf3_pse+0x2c>
    18a2:	2b d0       	rcall	.+86     	; 0x18fa <__divsf3_pse+0x92>
    18a4:	fe 2f       	mov	r31, r30
    18a6:	29 d0       	rcall	.+82     	; 0x18fa <__divsf3_pse+0x92>
    18a8:	66 0f       	add	r22, r22
    18aa:	77 1f       	adc	r23, r23
    18ac:	88 1f       	adc	r24, r24
    18ae:	bb 1f       	adc	r27, r27
    18b0:	26 17       	cp	r18, r22
    18b2:	37 07       	cpc	r19, r23
    18b4:	48 07       	cpc	r20, r24
    18b6:	ab 07       	cpc	r26, r27
    18b8:	b0 e8       	ldi	r27, 0x80	; 128
    18ba:	09 f0       	breq	.+2      	; 0x18be <__divsf3_pse+0x56>
    18bc:	bb 0b       	sbc	r27, r27
    18be:	80 2d       	mov	r24, r0
    18c0:	bf 01       	movw	r22, r30
    18c2:	ff 27       	eor	r31, r31
    18c4:	93 58       	subi	r25, 0x83	; 131
    18c6:	5f 4f       	sbci	r21, 0xFF	; 255
    18c8:	3a f0       	brmi	.+14     	; 0x18d8 <__divsf3_pse+0x70>
    18ca:	9e 3f       	cpi	r25, 0xFE	; 254
    18cc:	51 05       	cpc	r21, r1
    18ce:	78 f0       	brcs	.+30     	; 0x18ee <__divsf3_pse+0x86>
    18d0:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__fp_inf>
    18d4:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__fp_szero>
    18d8:	5f 3f       	cpi	r21, 0xFF	; 255
    18da:	e4 f3       	brlt	.-8      	; 0x18d4 <__divsf3_pse+0x6c>
    18dc:	98 3e       	cpi	r25, 0xE8	; 232
    18de:	d4 f3       	brlt	.-12     	; 0x18d4 <__divsf3_pse+0x6c>
    18e0:	86 95       	lsr	r24
    18e2:	77 95       	ror	r23
    18e4:	67 95       	ror	r22
    18e6:	b7 95       	ror	r27
    18e8:	f7 95       	ror	r31
    18ea:	9f 5f       	subi	r25, 0xFF	; 255
    18ec:	c9 f7       	brne	.-14     	; 0x18e0 <__divsf3_pse+0x78>
    18ee:	88 0f       	add	r24, r24
    18f0:	91 1d       	adc	r25, r1
    18f2:	96 95       	lsr	r25
    18f4:	87 95       	ror	r24
    18f6:	97 f9       	bld	r25, 7
    18f8:	08 95       	ret
    18fa:	e1 e0       	ldi	r30, 0x01	; 1
    18fc:	66 0f       	add	r22, r22
    18fe:	77 1f       	adc	r23, r23
    1900:	88 1f       	adc	r24, r24
    1902:	bb 1f       	adc	r27, r27
    1904:	62 17       	cp	r22, r18
    1906:	73 07       	cpc	r23, r19
    1908:	84 07       	cpc	r24, r20
    190a:	ba 07       	cpc	r27, r26
    190c:	20 f0       	brcs	.+8      	; 0x1916 <__divsf3_pse+0xae>
    190e:	62 1b       	sub	r22, r18
    1910:	73 0b       	sbc	r23, r19
    1912:	84 0b       	sbc	r24, r20
    1914:	ba 0b       	sbc	r27, r26
    1916:	ee 1f       	adc	r30, r30
    1918:	88 f7       	brcc	.-30     	; 0x18fc <__divsf3_pse+0x94>
    191a:	e0 95       	com	r30
    191c:	08 95       	ret

0000191e <__fixsfsi>:
    191e:	0e 94 96 0c 	call	0x192c	; 0x192c <__fixunssfsi>
    1922:	68 94       	set
    1924:	b1 11       	cpse	r27, r1
    1926:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__fp_szero>
    192a:	08 95       	ret

0000192c <__fixunssfsi>:
    192c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__fp_splitA>
    1930:	88 f0       	brcs	.+34     	; 0x1954 <__fixunssfsi+0x28>
    1932:	9f 57       	subi	r25, 0x7F	; 127
    1934:	98 f0       	brcs	.+38     	; 0x195c <__fixunssfsi+0x30>
    1936:	b9 2f       	mov	r27, r25
    1938:	99 27       	eor	r25, r25
    193a:	b7 51       	subi	r27, 0x17	; 23
    193c:	b0 f0       	brcs	.+44     	; 0x196a <__fixunssfsi+0x3e>
    193e:	e1 f0       	breq	.+56     	; 0x1978 <__fixunssfsi+0x4c>
    1940:	66 0f       	add	r22, r22
    1942:	77 1f       	adc	r23, r23
    1944:	88 1f       	adc	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	1a f0       	brmi	.+6      	; 0x1950 <__fixunssfsi+0x24>
    194a:	ba 95       	dec	r27
    194c:	c9 f7       	brne	.-14     	; 0x1940 <__fixunssfsi+0x14>
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <__fixunssfsi+0x4c>
    1950:	b1 30       	cpi	r27, 0x01	; 1
    1952:	91 f0       	breq	.+36     	; 0x1978 <__fixunssfsi+0x4c>
    1954:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <__fp_zero>
    1958:	b1 e0       	ldi	r27, 0x01	; 1
    195a:	08 95       	ret
    195c:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__fp_zero>
    1960:	67 2f       	mov	r22, r23
    1962:	78 2f       	mov	r23, r24
    1964:	88 27       	eor	r24, r24
    1966:	b8 5f       	subi	r27, 0xF8	; 248
    1968:	39 f0       	breq	.+14     	; 0x1978 <__fixunssfsi+0x4c>
    196a:	b9 3f       	cpi	r27, 0xF9	; 249
    196c:	cc f3       	brlt	.-14     	; 0x1960 <__fixunssfsi+0x34>
    196e:	86 95       	lsr	r24
    1970:	77 95       	ror	r23
    1972:	67 95       	ror	r22
    1974:	b3 95       	inc	r27
    1976:	d9 f7       	brne	.-10     	; 0x196e <__fixunssfsi+0x42>
    1978:	3e f4       	brtc	.+14     	; 0x1988 <__fixunssfsi+0x5c>
    197a:	90 95       	com	r25
    197c:	80 95       	com	r24
    197e:	70 95       	com	r23
    1980:	61 95       	neg	r22
    1982:	7f 4f       	sbci	r23, 0xFF	; 255
    1984:	8f 4f       	sbci	r24, 0xFF	; 255
    1986:	9f 4f       	sbci	r25, 0xFF	; 255
    1988:	08 95       	ret

0000198a <__floatunsisf>:
    198a:	e8 94       	clt
    198c:	09 c0       	rjmp	.+18     	; 0x19a0 <__floatsisf+0x12>

0000198e <__floatsisf>:
    198e:	97 fb       	bst	r25, 7
    1990:	3e f4       	brtc	.+14     	; 0x19a0 <__floatsisf+0x12>
    1992:	90 95       	com	r25
    1994:	80 95       	com	r24
    1996:	70 95       	com	r23
    1998:	61 95       	neg	r22
    199a:	7f 4f       	sbci	r23, 0xFF	; 255
    199c:	8f 4f       	sbci	r24, 0xFF	; 255
    199e:	9f 4f       	sbci	r25, 0xFF	; 255
    19a0:	99 23       	and	r25, r25
    19a2:	a9 f0       	breq	.+42     	; 0x19ce <__floatsisf+0x40>
    19a4:	f9 2f       	mov	r31, r25
    19a6:	96 e9       	ldi	r25, 0x96	; 150
    19a8:	bb 27       	eor	r27, r27
    19aa:	93 95       	inc	r25
    19ac:	f6 95       	lsr	r31
    19ae:	87 95       	ror	r24
    19b0:	77 95       	ror	r23
    19b2:	67 95       	ror	r22
    19b4:	b7 95       	ror	r27
    19b6:	f1 11       	cpse	r31, r1
    19b8:	f8 cf       	rjmp	.-16     	; 0x19aa <__floatsisf+0x1c>
    19ba:	fa f4       	brpl	.+62     	; 0x19fa <__floatsisf+0x6c>
    19bc:	bb 0f       	add	r27, r27
    19be:	11 f4       	brne	.+4      	; 0x19c4 <__floatsisf+0x36>
    19c0:	60 ff       	sbrs	r22, 0
    19c2:	1b c0       	rjmp	.+54     	; 0x19fa <__floatsisf+0x6c>
    19c4:	6f 5f       	subi	r22, 0xFF	; 255
    19c6:	7f 4f       	sbci	r23, 0xFF	; 255
    19c8:	8f 4f       	sbci	r24, 0xFF	; 255
    19ca:	9f 4f       	sbci	r25, 0xFF	; 255
    19cc:	16 c0       	rjmp	.+44     	; 0x19fa <__floatsisf+0x6c>
    19ce:	88 23       	and	r24, r24
    19d0:	11 f0       	breq	.+4      	; 0x19d6 <__floatsisf+0x48>
    19d2:	96 e9       	ldi	r25, 0x96	; 150
    19d4:	11 c0       	rjmp	.+34     	; 0x19f8 <__floatsisf+0x6a>
    19d6:	77 23       	and	r23, r23
    19d8:	21 f0       	breq	.+8      	; 0x19e2 <__floatsisf+0x54>
    19da:	9e e8       	ldi	r25, 0x8E	; 142
    19dc:	87 2f       	mov	r24, r23
    19de:	76 2f       	mov	r23, r22
    19e0:	05 c0       	rjmp	.+10     	; 0x19ec <__floatsisf+0x5e>
    19e2:	66 23       	and	r22, r22
    19e4:	71 f0       	breq	.+28     	; 0x1a02 <__floatsisf+0x74>
    19e6:	96 e8       	ldi	r25, 0x86	; 134
    19e8:	86 2f       	mov	r24, r22
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	2a f0       	brmi	.+10     	; 0x19fa <__floatsisf+0x6c>
    19f0:	9a 95       	dec	r25
    19f2:	66 0f       	add	r22, r22
    19f4:	77 1f       	adc	r23, r23
    19f6:	88 1f       	adc	r24, r24
    19f8:	da f7       	brpl	.-10     	; 0x19f0 <__floatsisf+0x62>
    19fa:	88 0f       	add	r24, r24
    19fc:	96 95       	lsr	r25
    19fe:	87 95       	ror	r24
    1a00:	97 f9       	bld	r25, 7
    1a02:	08 95       	ret

00001a04 <__fp_arccos>:
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	1f 93       	push	r17
    1a0a:	0f 93       	push	r16
    1a0c:	8b 01       	movw	r16, r22
    1a0e:	ec 01       	movw	r28, r24
    1a10:	e8 ec       	ldi	r30, 0xC8	; 200
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__fp_powser>
    1a18:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__fp_round>
    1a1c:	98 01       	movw	r18, r16
    1a1e:	ae 01       	movw	r20, r28
    1a20:	8b 01       	movw	r16, r22
    1a22:	ec 01       	movw	r28, r24
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	80 e8       	ldi	r24, 0x80	; 128
    1a2a:	9f e3       	ldi	r25, 0x3F	; 63
    1a2c:	0e 94 90 0b 	call	0x1720	; 0x1720 <__subsf3>
    1a30:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <sqrt>
    1a34:	98 01       	movw	r18, r16
    1a36:	ae 01       	movw	r20, r28
    1a38:	0f 91       	pop	r16
    1a3a:	1f 91       	pop	r17
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	0c 94 ea 0d 	jmp	0x1bd4	; 0x1bd4 <__mulsf3x>

00001a44 <__fp_cmp>:
    1a44:	99 0f       	add	r25, r25
    1a46:	00 08       	sbc	r0, r0
    1a48:	55 0f       	add	r21, r21
    1a4a:	aa 0b       	sbc	r26, r26
    1a4c:	e0 e8       	ldi	r30, 0x80	; 128
    1a4e:	fe ef       	ldi	r31, 0xFE	; 254
    1a50:	16 16       	cp	r1, r22
    1a52:	17 06       	cpc	r1, r23
    1a54:	e8 07       	cpc	r30, r24
    1a56:	f9 07       	cpc	r31, r25
    1a58:	c0 f0       	brcs	.+48     	; 0x1a8a <__fp_cmp+0x46>
    1a5a:	12 16       	cp	r1, r18
    1a5c:	13 06       	cpc	r1, r19
    1a5e:	e4 07       	cpc	r30, r20
    1a60:	f5 07       	cpc	r31, r21
    1a62:	98 f0       	brcs	.+38     	; 0x1a8a <__fp_cmp+0x46>
    1a64:	62 1b       	sub	r22, r18
    1a66:	73 0b       	sbc	r23, r19
    1a68:	84 0b       	sbc	r24, r20
    1a6a:	95 0b       	sbc	r25, r21
    1a6c:	39 f4       	brne	.+14     	; 0x1a7c <__fp_cmp+0x38>
    1a6e:	0a 26       	eor	r0, r26
    1a70:	61 f0       	breq	.+24     	; 0x1a8a <__fp_cmp+0x46>
    1a72:	23 2b       	or	r18, r19
    1a74:	24 2b       	or	r18, r20
    1a76:	25 2b       	or	r18, r21
    1a78:	21 f4       	brne	.+8      	; 0x1a82 <__fp_cmp+0x3e>
    1a7a:	08 95       	ret
    1a7c:	0a 26       	eor	r0, r26
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <__fp_cmp+0x3e>
    1a80:	a1 40       	sbci	r26, 0x01	; 1
    1a82:	a6 95       	lsr	r26
    1a84:	8f ef       	ldi	r24, 0xFF	; 255
    1a86:	81 1d       	adc	r24, r1
    1a88:	81 1d       	adc	r24, r1
    1a8a:	08 95       	ret

00001a8c <__fp_inf>:
    1a8c:	97 f9       	bld	r25, 7
    1a8e:	9f 67       	ori	r25, 0x7F	; 127
    1a90:	80 e8       	ldi	r24, 0x80	; 128
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	08 95       	ret

00001a98 <__fp_nan>:
    1a98:	9f ef       	ldi	r25, 0xFF	; 255
    1a9a:	80 ec       	ldi	r24, 0xC0	; 192
    1a9c:	08 95       	ret

00001a9e <__fp_powser>:
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	1f 93       	push	r17
    1aa4:	0f 93       	push	r16
    1aa6:	ff 92       	push	r15
    1aa8:	ef 92       	push	r14
    1aaa:	df 92       	push	r13
    1aac:	7b 01       	movw	r14, r22
    1aae:	8c 01       	movw	r16, r24
    1ab0:	68 94       	set
    1ab2:	06 c0       	rjmp	.+12     	; 0x1ac0 <__fp_powser+0x22>
    1ab4:	da 2e       	mov	r13, r26
    1ab6:	ef 01       	movw	r28, r30
    1ab8:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__mulsf3x>
    1abc:	fe 01       	movw	r30, r28
    1abe:	e8 94       	clt
    1ac0:	a5 91       	lpm	r26, Z+
    1ac2:	25 91       	lpm	r18, Z+
    1ac4:	35 91       	lpm	r19, Z+
    1ac6:	45 91       	lpm	r20, Z+
    1ac8:	55 91       	lpm	r21, Z+
    1aca:	a6 f3       	brts	.-24     	; 0x1ab4 <__fp_powser+0x16>
    1acc:	ef 01       	movw	r28, r30
    1ace:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__addsf3x>
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	97 01       	movw	r18, r14
    1ad6:	a8 01       	movw	r20, r16
    1ad8:	da 94       	dec	r13
    1ada:	69 f7       	brne	.-38     	; 0x1ab6 <__fp_powser+0x18>
    1adc:	df 90       	pop	r13
    1ade:	ef 90       	pop	r14
    1ae0:	ff 90       	pop	r15
    1ae2:	0f 91       	pop	r16
    1ae4:	1f 91       	pop	r17
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <__fp_powsodd>:
    1aec:	9f 93       	push	r25
    1aee:	8f 93       	push	r24
    1af0:	7f 93       	push	r23
    1af2:	6f 93       	push	r22
    1af4:	ff 93       	push	r31
    1af6:	ef 93       	push	r30
    1af8:	9b 01       	movw	r18, r22
    1afa:	ac 01       	movw	r20, r24
    1afc:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__mulsf3>
    1b00:	ef 91       	pop	r30
    1b02:	ff 91       	pop	r31
    1b04:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__fp_powser>
    1b08:	2f 91       	pop	r18
    1b0a:	3f 91       	pop	r19
    1b0c:	4f 91       	pop	r20
    1b0e:	5f 91       	pop	r21
    1b10:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__mulsf3>

00001b14 <__fp_pscA>:
    1b14:	00 24       	eor	r0, r0
    1b16:	0a 94       	dec	r0
    1b18:	16 16       	cp	r1, r22
    1b1a:	17 06       	cpc	r1, r23
    1b1c:	18 06       	cpc	r1, r24
    1b1e:	09 06       	cpc	r0, r25
    1b20:	08 95       	ret

00001b22 <__fp_pscB>:
    1b22:	00 24       	eor	r0, r0
    1b24:	0a 94       	dec	r0
    1b26:	12 16       	cp	r1, r18
    1b28:	13 06       	cpc	r1, r19
    1b2a:	14 06       	cpc	r1, r20
    1b2c:	05 06       	cpc	r0, r21
    1b2e:	08 95       	ret

00001b30 <__fp_round>:
    1b30:	09 2e       	mov	r0, r25
    1b32:	03 94       	inc	r0
    1b34:	00 0c       	add	r0, r0
    1b36:	11 f4       	brne	.+4      	; 0x1b3c <__fp_round+0xc>
    1b38:	88 23       	and	r24, r24
    1b3a:	52 f0       	brmi	.+20     	; 0x1b50 <__fp_round+0x20>
    1b3c:	bb 0f       	add	r27, r27
    1b3e:	40 f4       	brcc	.+16     	; 0x1b50 <__fp_round+0x20>
    1b40:	bf 2b       	or	r27, r31
    1b42:	11 f4       	brne	.+4      	; 0x1b48 <__fp_round+0x18>
    1b44:	60 ff       	sbrs	r22, 0
    1b46:	04 c0       	rjmp	.+8      	; 0x1b50 <__fp_round+0x20>
    1b48:	6f 5f       	subi	r22, 0xFF	; 255
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b50:	08 95       	ret

00001b52 <__fp_split3>:
    1b52:	57 fd       	sbrc	r21, 7
    1b54:	90 58       	subi	r25, 0x80	; 128
    1b56:	44 0f       	add	r20, r20
    1b58:	55 1f       	adc	r21, r21
    1b5a:	59 f0       	breq	.+22     	; 0x1b72 <__fp_splitA+0x10>
    1b5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b5e:	71 f0       	breq	.+28     	; 0x1b7c <__fp_splitA+0x1a>
    1b60:	47 95       	ror	r20

00001b62 <__fp_splitA>:
    1b62:	88 0f       	add	r24, r24
    1b64:	97 fb       	bst	r25, 7
    1b66:	99 1f       	adc	r25, r25
    1b68:	61 f0       	breq	.+24     	; 0x1b82 <__fp_splitA+0x20>
    1b6a:	9f 3f       	cpi	r25, 0xFF	; 255
    1b6c:	79 f0       	breq	.+30     	; 0x1b8c <__fp_splitA+0x2a>
    1b6e:	87 95       	ror	r24
    1b70:	08 95       	ret
    1b72:	12 16       	cp	r1, r18
    1b74:	13 06       	cpc	r1, r19
    1b76:	14 06       	cpc	r1, r20
    1b78:	55 1f       	adc	r21, r21
    1b7a:	f2 cf       	rjmp	.-28     	; 0x1b60 <__fp_split3+0xe>
    1b7c:	46 95       	lsr	r20
    1b7e:	f1 df       	rcall	.-30     	; 0x1b62 <__fp_splitA>
    1b80:	08 c0       	rjmp	.+16     	; 0x1b92 <__fp_splitA+0x30>
    1b82:	16 16       	cp	r1, r22
    1b84:	17 06       	cpc	r1, r23
    1b86:	18 06       	cpc	r1, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	f1 cf       	rjmp	.-30     	; 0x1b6e <__fp_splitA+0xc>
    1b8c:	86 95       	lsr	r24
    1b8e:	71 05       	cpc	r23, r1
    1b90:	61 05       	cpc	r22, r1
    1b92:	08 94       	sec
    1b94:	08 95       	ret

00001b96 <__fp_zero>:
    1b96:	e8 94       	clt

00001b98 <__fp_szero>:
    1b98:	bb 27       	eor	r27, r27
    1b9a:	66 27       	eor	r22, r22
    1b9c:	77 27       	eor	r23, r23
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	97 f9       	bld	r25, 7
    1ba2:	08 95       	ret

00001ba4 <__gesf2>:
    1ba4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__fp_cmp>
    1ba8:	08 f4       	brcc	.+2      	; 0x1bac <__gesf2+0x8>
    1baa:	8f ef       	ldi	r24, 0xFF	; 255
    1bac:	08 95       	ret

00001bae <__mulsf3>:
    1bae:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__mulsf3x>
    1bb2:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__fp_round>
    1bb6:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__fp_pscA>
    1bba:	38 f0       	brcs	.+14     	; 0x1bca <__mulsf3+0x1c>
    1bbc:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__fp_pscB>
    1bc0:	20 f0       	brcs	.+8      	; 0x1bca <__mulsf3+0x1c>
    1bc2:	95 23       	and	r25, r21
    1bc4:	11 f0       	breq	.+4      	; 0x1bca <__mulsf3+0x1c>
    1bc6:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__fp_inf>
    1bca:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__fp_nan>
    1bce:	11 24       	eor	r1, r1
    1bd0:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__fp_szero>

00001bd4 <__mulsf3x>:
    1bd4:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__fp_split3>
    1bd8:	70 f3       	brcs	.-36     	; 0x1bb6 <__mulsf3+0x8>

00001bda <__mulsf3_pse>:
    1bda:	95 9f       	mul	r25, r21
    1bdc:	c1 f3       	breq	.-16     	; 0x1bce <__mulsf3+0x20>
    1bde:	95 0f       	add	r25, r21
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	55 1f       	adc	r21, r21
    1be4:	62 9f       	mul	r22, r18
    1be6:	f0 01       	movw	r30, r0
    1be8:	72 9f       	mul	r23, r18
    1bea:	bb 27       	eor	r27, r27
    1bec:	f0 0d       	add	r31, r0
    1bee:	b1 1d       	adc	r27, r1
    1bf0:	63 9f       	mul	r22, r19
    1bf2:	aa 27       	eor	r26, r26
    1bf4:	f0 0d       	add	r31, r0
    1bf6:	b1 1d       	adc	r27, r1
    1bf8:	aa 1f       	adc	r26, r26
    1bfa:	64 9f       	mul	r22, r20
    1bfc:	66 27       	eor	r22, r22
    1bfe:	b0 0d       	add	r27, r0
    1c00:	a1 1d       	adc	r26, r1
    1c02:	66 1f       	adc	r22, r22
    1c04:	82 9f       	mul	r24, r18
    1c06:	22 27       	eor	r18, r18
    1c08:	b0 0d       	add	r27, r0
    1c0a:	a1 1d       	adc	r26, r1
    1c0c:	62 1f       	adc	r22, r18
    1c0e:	73 9f       	mul	r23, r19
    1c10:	b0 0d       	add	r27, r0
    1c12:	a1 1d       	adc	r26, r1
    1c14:	62 1f       	adc	r22, r18
    1c16:	83 9f       	mul	r24, r19
    1c18:	a0 0d       	add	r26, r0
    1c1a:	61 1d       	adc	r22, r1
    1c1c:	22 1f       	adc	r18, r18
    1c1e:	74 9f       	mul	r23, r20
    1c20:	33 27       	eor	r19, r19
    1c22:	a0 0d       	add	r26, r0
    1c24:	61 1d       	adc	r22, r1
    1c26:	23 1f       	adc	r18, r19
    1c28:	84 9f       	mul	r24, r20
    1c2a:	60 0d       	add	r22, r0
    1c2c:	21 1d       	adc	r18, r1
    1c2e:	82 2f       	mov	r24, r18
    1c30:	76 2f       	mov	r23, r22
    1c32:	6a 2f       	mov	r22, r26
    1c34:	11 24       	eor	r1, r1
    1c36:	9f 57       	subi	r25, 0x7F	; 127
    1c38:	50 40       	sbci	r21, 0x00	; 0
    1c3a:	9a f0       	brmi	.+38     	; 0x1c62 <__mulsf3_pse+0x88>
    1c3c:	f1 f0       	breq	.+60     	; 0x1c7a <__mulsf3_pse+0xa0>
    1c3e:	88 23       	and	r24, r24
    1c40:	4a f0       	brmi	.+18     	; 0x1c54 <__mulsf3_pse+0x7a>
    1c42:	ee 0f       	add	r30, r30
    1c44:	ff 1f       	adc	r31, r31
    1c46:	bb 1f       	adc	r27, r27
    1c48:	66 1f       	adc	r22, r22
    1c4a:	77 1f       	adc	r23, r23
    1c4c:	88 1f       	adc	r24, r24
    1c4e:	91 50       	subi	r25, 0x01	; 1
    1c50:	50 40       	sbci	r21, 0x00	; 0
    1c52:	a9 f7       	brne	.-22     	; 0x1c3e <__mulsf3_pse+0x64>
    1c54:	9e 3f       	cpi	r25, 0xFE	; 254
    1c56:	51 05       	cpc	r21, r1
    1c58:	80 f0       	brcs	.+32     	; 0x1c7a <__mulsf3_pse+0xa0>
    1c5a:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__fp_inf>
    1c5e:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__fp_szero>
    1c62:	5f 3f       	cpi	r21, 0xFF	; 255
    1c64:	e4 f3       	brlt	.-8      	; 0x1c5e <__mulsf3_pse+0x84>
    1c66:	98 3e       	cpi	r25, 0xE8	; 232
    1c68:	d4 f3       	brlt	.-12     	; 0x1c5e <__mulsf3_pse+0x84>
    1c6a:	86 95       	lsr	r24
    1c6c:	77 95       	ror	r23
    1c6e:	67 95       	ror	r22
    1c70:	b7 95       	ror	r27
    1c72:	f7 95       	ror	r31
    1c74:	e7 95       	ror	r30
    1c76:	9f 5f       	subi	r25, 0xFF	; 255
    1c78:	c1 f7       	brne	.-16     	; 0x1c6a <__mulsf3_pse+0x90>
    1c7a:	fe 2b       	or	r31, r30
    1c7c:	88 0f       	add	r24, r24
    1c7e:	91 1d       	adc	r25, r1
    1c80:	96 95       	lsr	r25
    1c82:	87 95       	ror	r24
    1c84:	97 f9       	bld	r25, 7
    1c86:	08 95       	ret
    1c88:	19 f4       	brne	.+6      	; 0x1c90 <__mulsf3_pse+0xb6>
    1c8a:	16 f4       	brtc	.+4      	; 0x1c90 <__mulsf3_pse+0xb6>
    1c8c:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__fp_nan>
    1c90:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__fp_mpack>

00001c94 <sqrt>:
    1c94:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__fp_splitA>
    1c98:	b8 f3       	brcs	.-18     	; 0x1c88 <__mulsf3_pse+0xae>
    1c9a:	99 23       	and	r25, r25
    1c9c:	c9 f3       	breq	.-14     	; 0x1c90 <__mulsf3_pse+0xb6>
    1c9e:	b6 f3       	brts	.-20     	; 0x1c8c <__mulsf3_pse+0xb2>
    1ca0:	9f 57       	subi	r25, 0x7F	; 127
    1ca2:	55 0b       	sbc	r21, r21
    1ca4:	87 ff       	sbrs	r24, 7
    1ca6:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__fp_norm2>
    1caa:	00 24       	eor	r0, r0
    1cac:	a0 e6       	ldi	r26, 0x60	; 96
    1cae:	40 ea       	ldi	r20, 0xA0	; 160
    1cb0:	90 01       	movw	r18, r0
    1cb2:	80 58       	subi	r24, 0x80	; 128
    1cb4:	56 95       	lsr	r21
    1cb6:	97 95       	ror	r25
    1cb8:	28 f4       	brcc	.+10     	; 0x1cc4 <sqrt+0x30>
    1cba:	80 5c       	subi	r24, 0xC0	; 192
    1cbc:	66 0f       	add	r22, r22
    1cbe:	77 1f       	adc	r23, r23
    1cc0:	88 1f       	adc	r24, r24
    1cc2:	20 f0       	brcs	.+8      	; 0x1ccc <sqrt+0x38>
    1cc4:	26 17       	cp	r18, r22
    1cc6:	37 07       	cpc	r19, r23
    1cc8:	48 07       	cpc	r20, r24
    1cca:	30 f4       	brcc	.+12     	; 0x1cd8 <sqrt+0x44>
    1ccc:	62 1b       	sub	r22, r18
    1cce:	73 0b       	sbc	r23, r19
    1cd0:	84 0b       	sbc	r24, r20
    1cd2:	20 29       	or	r18, r0
    1cd4:	31 29       	or	r19, r1
    1cd6:	4a 2b       	or	r20, r26
    1cd8:	a6 95       	lsr	r26
    1cda:	17 94       	ror	r1
    1cdc:	07 94       	ror	r0
    1cde:	20 25       	eor	r18, r0
    1ce0:	31 25       	eor	r19, r1
    1ce2:	4a 27       	eor	r20, r26
    1ce4:	58 f7       	brcc	.-42     	; 0x1cbc <sqrt+0x28>
    1ce6:	66 0f       	add	r22, r22
    1ce8:	77 1f       	adc	r23, r23
    1cea:	88 1f       	adc	r24, r24
    1cec:	20 f0       	brcs	.+8      	; 0x1cf6 <sqrt+0x62>
    1cee:	26 17       	cp	r18, r22
    1cf0:	37 07       	cpc	r19, r23
    1cf2:	48 07       	cpc	r20, r24
    1cf4:	30 f4       	brcc	.+12     	; 0x1d02 <sqrt+0x6e>
    1cf6:	62 0b       	sbc	r22, r18
    1cf8:	73 0b       	sbc	r23, r19
    1cfa:	84 0b       	sbc	r24, r20
    1cfc:	20 0d       	add	r18, r0
    1cfe:	31 1d       	adc	r19, r1
    1d00:	41 1d       	adc	r20, r1
    1d02:	a0 95       	com	r26
    1d04:	81 f7       	brne	.-32     	; 0x1ce6 <sqrt+0x52>
    1d06:	b9 01       	movw	r22, r18
    1d08:	84 2f       	mov	r24, r20
    1d0a:	91 58       	subi	r25, 0x81	; 129
    1d0c:	88 0f       	add	r24, r24
    1d0e:	96 95       	lsr	r25
    1d10:	87 95       	ror	r24
    1d12:	08 95       	ret

00001d14 <square>:
    1d14:	9b 01       	movw	r18, r22
    1d16:	ac 01       	movw	r20, r24
    1d18:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__mulsf3>

00001d1c <__fp_mpack>:
    1d1c:	9f 3f       	cpi	r25, 0xFF	; 255
    1d1e:	31 f0       	breq	.+12     	; 0x1d2c <__fp_mpack_finite+0xc>

00001d20 <__fp_mpack_finite>:
    1d20:	91 50       	subi	r25, 0x01	; 1
    1d22:	20 f4       	brcc	.+8      	; 0x1d2c <__fp_mpack_finite+0xc>
    1d24:	87 95       	ror	r24
    1d26:	77 95       	ror	r23
    1d28:	67 95       	ror	r22
    1d2a:	b7 95       	ror	r27
    1d2c:	88 0f       	add	r24, r24
    1d2e:	91 1d       	adc	r25, r1
    1d30:	96 95       	lsr	r25
    1d32:	87 95       	ror	r24
    1d34:	97 f9       	bld	r25, 7
    1d36:	08 95       	ret

00001d38 <__fp_norm2>:
    1d38:	91 50       	subi	r25, 0x01	; 1
    1d3a:	50 40       	sbci	r21, 0x00	; 0
    1d3c:	66 0f       	add	r22, r22
    1d3e:	77 1f       	adc	r23, r23
    1d40:	88 1f       	adc	r24, r24
    1d42:	d2 f7       	brpl	.-12     	; 0x1d38 <__fp_norm2>
    1d44:	08 95       	ret

00001d46 <_exit>:
    1d46:	f8 94       	cli

00001d48 <__stop_program>:
    1d48:	ff cf       	rjmp	.-2      	; 0x1d48 <__stop_program>
