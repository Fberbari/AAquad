
AAquad_c++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000165a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800100  00800100  0000165a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000165a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000168c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002df5  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001183  00000000  00000000  00004661  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e15  00000000  00000000  000057e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ac  00000000  00000000  000065fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c86  00000000  00000000  00006aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000caa  00000000  00000000  0000772e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  000083d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_1>
       8:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_2>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_4>
      14:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_5>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      68:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      6c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      70:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      74:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      78:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      7c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      80:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      84:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      88:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      8c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      90:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      94:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      98:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      9c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      a8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      ac:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      b0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      b4:	03 6e       	ori	r16, 0xE3	; 227
      b6:	db 36       	cpi	r29, 0x6B	; 107
      b8:	3d 9a       	sbi	0x07, 5	; 7
      ba:	99 99       	sbic	0x13, 1	; 19
      bc:	99 3d       	cpi	r25, 0xD9	; 217
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	3e 00       	.word	0x003e	; ????
      c4:	00 00       	nop
      c6:	80 3f       	cpi	r24, 0xF0	; 240
      c8:	07 2c       	mov	r0, r7
      ca:	7a a5       	ldd	r23, Y+42	; 0x2a
      cc:	ba 6c       	ori	r27, 0xCA	; 202
      ce:	c5 90       	lpm	r12, Z+
      d0:	da 3b       	cpi	r29, 0xBA	; 186
      d2:	93 65       	ori	r25, 0x53	; 83
      d4:	fc 8b       	std	Y+20, r31	; 0x14
      d6:	bc 53       	subi	r27, 0x3C	; 60
      d8:	f8 10       	cpse	r15, r8
      da:	fd 3c       	cpi	r31, 0xCD	; 205
      dc:	56 92       	lac	Z, r5
      de:	83 4d       	sbci	r24, 0xD3	; 211
      e0:	bd 87       	std	Y+13, r27	; 0x0d
      e2:	9d 3a       	cpi	r25, 0xAD	; 173
      e4:	b6 3d       	cpi	r27, 0xD6	; 214
      e6:	cb c9       	rjmp	.-3178   	; 0xfffff47e <__eeprom_end+0xff7ef47e>
      e8:	bf 5b       	subi	r27, 0xBF	; 191
      ea:	be 73       	andi	r27, 0x3E	; 62
      ec:	da 0f       	add	r29, r26
      ee:	c9 3f       	cpi	r28, 0xF9	; 249

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d8 e0       	ldi	r29, 0x08	; 8
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_clear_bss>:
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	aa 31       	cpi	r26, 0x1A	; 26
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>
     10c:	0e 94 8c 00 	call	0x118	; 0x118 <main>
     110:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <main>:
	volatile uint16_t temp_timer_throttle = 0; 

	volatile uint16_t temp0;
	

int main(void){
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	a8 97       	sbiw	r28, 0x28	; 40
     122:	0f b6       	in	r0, 0x3f	; 63
     124:	f8 94       	cli
     126:	de bf       	out	0x3e, r29	; 62
     128:	0f be       	out	0x3f, r0	; 63
     12a:	cd bf       	out	0x3d, r28	; 61

	initialize::timers();
     12c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <_ZN10initialize6timersEv>
	initialize::interrupts();
     130:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN10initialize10interruptsEv>
	

	I2C_328pb i2c(0xAA); // 
     134:	6a ea       	ldi	r22, 0xAA	; 170
     136:	70 e0       	ldi	r23, 0x00	; 0
     138:	ce 01       	movw	r24, r28
     13a:	01 96       	adiw	r24, 0x01	; 1
     13c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN9I2C_328pbC1Ei>
	
	pilot_instructions pilot;
	pilot.set_max_angle(30);
     140:	6e e1       	ldi	r22, 0x1E	; 30
     142:	ce 01       	movw	r24, r28
     144:	02 96       	adiw	r24, 0x02	; 2
     146:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN18pilot_instructions13set_max_angleEh>
	pilot.set_max_yaw_rate(45);	// this retrieves and holds the pilot's wishes
     14a:	6d e2       	ldi	r22, 0x2D	; 45
     14c:	ce 01       	movw	r24, r28
     14e:	02 96       	adiw	r24, 0x02	; 2
     150:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_ZN18pilot_instructions16set_max_yaw_rateEh>

	

	I2C_328pb sensor_I2C(0xAA);	// object created just for use in the sensor object
     154:	6a ea       	ldi	r22, 0xAA	; 170
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	ce 01       	movw	r24, r28
     15a:	0b 96       	adiw	r24, 0x0b	; 11
     15c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN9I2C_328pbC1Ei>
	sensors sense(sensor_I2C);
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	ce 01       	movw	r24, r28
     164:	0c 96       	adiw	r24, 0x0c	; 12
     166:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN7sensorsC1E9I2C_328pb>
	pitch_pid.setOutputLowerLimit(-30);
	pitch_pid.setOutputUpperLimit(30);
	
*/

	I2C_328pb pwm_chip_I2c(0xAA);
     16a:	6a ea       	ldi	r22, 0xAA	; 170
     16c:	70 e0       	ldi	r23, 0x00	; 0
     16e:	ce 01       	movw	r24, r28
     170:	86 96       	adiw	r24, 0x26	; 38
     172:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN9I2C_328pbC1Ei>
	pwm_chip pwm(pwm_chip_I2c, 10);
     176:	4a e0       	ldi	r20, 0x0A	; 10
     178:	60 e0       	ldi	r22, 0x00	; 0
     17a:	ce 01       	movw	r24, r28
     17c:	87 96       	adiw	r24, 0x27	; 39
     17e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_ZN8pwm_chipC1E9I2C_328pbh>

	sei();
     182:	78 94       	sei
		sense.read_acc(sensor_I2C);
		sense.read_gyro(sensor_I2C);	// all sensor data processed
	
		sense.compute_position();
		
		motors[0] = (int)sense.get_pitch();
     184:	02 e1       	ldi	r16, 0x12	; 18
     186:	11 e0       	ldi	r17, 0x01	; 1

	
	while(1){
		
			
		sense.read_acc(sensor_I2C);
     188:	60 e0       	ldi	r22, 0x00	; 0
     18a:	ce 01       	movw	r24, r28
     18c:	0c 96       	adiw	r24, 0x0c	; 12
     18e:	0e 94 ef 04 	call	0x9de	; 0x9de <_ZN7sensors8read_accE9I2C_328pb>
		sense.read_gyro(sensor_I2C);	// all sensor data processed
     192:	60 e0       	ldi	r22, 0x00	; 0
     194:	ce 01       	movw	r24, r28
     196:	0c 96       	adiw	r24, 0x0c	; 12
     198:	0e 94 6b 05 	call	0xad6	; 0xad6 <_ZN7sensors9read_gyroE9I2C_328pb>
	
		sense.compute_position();
     19c:	ce 01       	movw	r24, r28
     19e:	0c 96       	adiw	r24, 0x0c	; 12
     1a0:	0e 94 37 06 	call	0xc6e	; 0xc6e <_ZN7sensors16compute_positionEv>
		
		motors[0] = (int)sense.get_pitch();
     1a4:	ce 01       	movw	r24, r28
     1a6:	0c 96       	adiw	r24, 0x0c	; 12
     1a8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <_ZNK7sensors9get_pitchEv>
     1ac:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fixsfsi>
     1b0:	f8 01       	movw	r30, r16
     1b2:	71 83       	std	Z+1, r23	; 0x01
     1b4:	60 83       	st	Z, r22
		motors[1] = (int)sense.get_roll();
     1b6:	ce 01       	movw	r24, r28
     1b8:	0c 96       	adiw	r24, 0x0c	; 12
     1ba:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZNK7sensors8get_rollEv>
     1be:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fixsfsi>
     1c2:	f8 01       	movw	r30, r16
     1c4:	73 83       	std	Z+3, r23	; 0x03
     1c6:	62 83       	std	Z+2, r22	; 0x02
		
		pilot.compute();	// all pilot data processed
     1c8:	ce 01       	movw	r24, r28
     1ca:	02 96       	adiw	r24, 0x02	; 2
     1cc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_ZN18pilot_instructions7computeEv>
		
		PID::combine_data(bank_pid.refresh(sense.get_bank()), pitch_pid.refresh(sense.get_pitch), pilot.get_throttle_power());

	*/

		pwm.pass(pwm_chip_I2c, motors);	
     1d0:	a8 01       	movw	r20, r16
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	ce 01       	movw	r24, r28
     1d6:	87 96       	adiw	r24, 0x27	; 39
     1d8:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN8pwm_chip4passE9I2C_328pbPi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1dc:	87 e8       	ldi	r24, 0x87	; 135
     1de:	93 e1       	ldi	r25, 0x13	; 19
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <main+0xc8>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0xce>
     1e6:	00 00       	nop
     1e8:	cf cf       	rjmp	.-98     	; 0x188 <main+0x70>

000001ea <__vector_1>:

}



ISR(INT0_vect){
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	2f 93       	push	r18
     1f6:	3f 93       	push	r19
     1f8:	4f 93       	push	r20
     1fa:	5f 93       	push	r21
     1fc:	8f 93       	push	r24
     1fe:	9f 93       	push	r25
	
		uint16_t temp = TCNT1;
     200:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     204:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

		if ( temp < temp_timer_aileron){	// timer overflow
     208:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <temp_timer_aileron>
     20c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
     210:	82 17       	cp	r24, r18
     212:	93 07       	cpc	r25, r19
     214:	70 f4       	brcc	.+28     	; 0x232 <__vector_1+0x48>

			requested_aileron_pos = (0xffff - temp_timer_aileron) + temp ;
     216:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <temp_timer_aileron>
     21a:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
     21e:	9c 01       	movw	r18, r24
     220:	21 50       	subi	r18, 0x01	; 1
     222:	31 09       	sbc	r19, r1
     224:	24 1b       	sub	r18, r20
     226:	35 0b       	sbc	r19, r21
     228:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <requested_aileron_pos+0x1>
     22c:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <requested_aileron_pos>
     230:	0b c0       	rjmp	.+22     	; 0x248 <__vector_1+0x5e>
		}

		else {	// regular case
	
			requested_aileron_pos = temp - temp_timer_aileron;
     232:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <temp_timer_aileron>
     236:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
     23a:	ac 01       	movw	r20, r24
     23c:	42 1b       	sub	r20, r18
     23e:	53 0b       	sbc	r21, r19
     240:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <requested_aileron_pos+0x1>
     244:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp;
     248:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <temp_timer_aileron+0x1>
     24c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <temp_timer_aileron>
		
		
		// here, there is a chance that the value stored in requested aileron is actually (0xffff - actual requested aileron) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
	
}
     250:	9f 91       	pop	r25
     252:	8f 91       	pop	r24
     254:	5f 91       	pop	r21
     256:	4f 91       	pop	r20
     258:	3f 91       	pop	r19
     25a:	2f 91       	pop	r18
     25c:	0f 90       	pop	r0
     25e:	0f be       	out	0x3f, r0	; 63
     260:	0f 90       	pop	r0
     262:	1f 90       	pop	r1
     264:	18 95       	reti

00000266 <__vector_2>:

ISR(INT1_vect){
     266:	1f 92       	push	r1
     268:	0f 92       	push	r0
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	0f 92       	push	r0
     26e:	11 24       	eor	r1, r1
     270:	2f 93       	push	r18
     272:	3f 93       	push	r19
     274:	8f 93       	push	r24
     276:	9f 93       	push	r25
	
		temp0 = TCNT1;
     278:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     27c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     280:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
     284:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		

		if ( temp0 < temp_timer_throttle){	// timer overflow
     288:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
     28c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
     290:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp_timer_throttle>
     294:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
     298:	28 17       	cp	r18, r24
     29a:	39 07       	cpc	r19, r25
     29c:	80 f4       	brcc	.+32     	; 0x2be <__vector_2+0x58>

			requested_throttle_pos = (0xffff - temp_timer_throttle) + temp0 ;
     29e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     2a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
     2a6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_throttle>
     2aa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	82 1b       	sub	r24, r18
     2b2:	93 0b       	sbc	r25, r19
     2b4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
     2b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>
     2bc:	0e c0       	rjmp	.+28     	; 0x2da <__vector_2+0x74>
		}

		else {	// regular case
	
			requested_throttle_pos = temp0 - temp_timer_throttle;
     2be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     2c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
     2c6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_throttle>
     2ca:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
     2ce:	82 1b       	sub	r24, r18
     2d0:	93 0b       	sbc	r25, r19
     2d2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
     2d6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>
			
		}
	
		
		temp_timer_throttle = temp0;
     2da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     2de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
     2e2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <temp_timer_throttle+0x1>
     2e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_timer_throttle>
		
		
		// here, there is a chance that the value stored in requested throttle is actually (0xffff - actual requested throttle) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
}
     2ea:	9f 91       	pop	r25
     2ec:	8f 91       	pop	r24
     2ee:	3f 91       	pop	r19
     2f0:	2f 91       	pop	r18
     2f2:	0f 90       	pop	r0
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	0f 90       	pop	r0
     2f8:	1f 90       	pop	r1
     2fa:	18 95       	reti

000002fc <__vector_4>:




ISR(PCINT1_vect){
     2fc:	1f 92       	push	r1
     2fe:	0f 92       	push	r0
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	0f 92       	push	r0
     304:	11 24       	eor	r1, r1
     306:	2f 93       	push	r18
     308:	3f 93       	push	r19
     30a:	4f 93       	push	r20
     30c:	5f 93       	push	r21
     30e:	8f 93       	push	r24
     310:	9f 93       	push	r25

	uint16_t temp = TCNT1;
     312:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     316:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

	if ( temp < temp_timer_rudder){	// timer overflow
     31a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <temp_timer_rudder>
     31e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
     322:	82 17       	cp	r24, r18
     324:	93 07       	cpc	r25, r19
     326:	70 f4       	brcc	.+28     	; 0x344 <__vector_4+0x48>

		requested_rudder_pos = (0xffff - temp_timer_rudder) + temp ;
     328:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <temp_timer_rudder>
     32c:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
     330:	9c 01       	movw	r18, r24
     332:	21 50       	subi	r18, 0x01	; 1
     334:	31 09       	sbc	r19, r1
     336:	24 1b       	sub	r18, r20
     338:	35 0b       	sbc	r19, r21
     33a:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <requested_rudder_pos+0x1>
     33e:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <requested_rudder_pos>
     342:	0b c0       	rjmp	.+22     	; 0x35a <__vector_4+0x5e>
	}

	else {	// regular case

		requested_rudder_pos = temp - temp_timer_rudder;
     344:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <temp_timer_rudder>
     348:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
     34c:	ac 01       	movw	r20, r24
     34e:	42 1b       	sub	r20, r18
     350:	53 0b       	sbc	r21, r19
     352:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <requested_rudder_pos+0x1>
     356:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <requested_rudder_pos>
		
	}

	
	temp_timer_rudder = temp;
     35a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <temp_timer_rudder+0x1>
     35e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <temp_timer_rudder>
	
	

}
     362:	9f 91       	pop	r25
     364:	8f 91       	pop	r24
     366:	5f 91       	pop	r21
     368:	4f 91       	pop	r20
     36a:	3f 91       	pop	r19
     36c:	2f 91       	pop	r18
     36e:	0f 90       	pop	r0
     370:	0f be       	out	0x3f, r0	; 63
     372:	0f 90       	pop	r0
     374:	1f 90       	pop	r1
     376:	18 95       	reti

00000378 <__vector_5>:

ISR(PCINT2_vect){
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	2f 93       	push	r18
     384:	3f 93       	push	r19
     386:	4f 93       	push	r20
     388:	5f 93       	push	r21
     38a:	8f 93       	push	r24
     38c:	9f 93       	push	r25

	uint16_t temp = TCNT1;
     38e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     392:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	

	if ( temp < temp_timer_elevator){	// timer overflow
     396:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temp_timer_elevator>
     39a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
     39e:	82 17       	cp	r24, r18
     3a0:	93 07       	cpc	r25, r19
     3a2:	70 f4       	brcc	.+28     	; 0x3c0 <__vector_5+0x48>

		requested_elevator_pos = (0xffff - temp_timer_elevator) + temp ;
     3a4:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_timer_elevator>
     3a8:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
     3ac:	9c 01       	movw	r18, r24
     3ae:	21 50       	subi	r18, 0x01	; 1
     3b0:	31 09       	sbc	r19, r1
     3b2:	24 1b       	sub	r18, r20
     3b4:	35 0b       	sbc	r19, r21
     3b6:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <requested_elevator_pos+0x1>
     3ba:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <requested_elevator_pos>
     3be:	0b c0       	rjmp	.+22     	; 0x3d6 <__vector_5+0x5e>
	}

	else {	// regular case

		requested_elevator_pos = temp - temp_timer_elevator;
     3c0:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temp_timer_elevator>
     3c4:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
     3c8:	ac 01       	movw	r20, r24
     3ca:	42 1b       	sub	r20, r18
     3cc:	53 0b       	sbc	r21, r19
     3ce:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <requested_elevator_pos+0x1>
     3d2:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <requested_elevator_pos>
		
	}

	
	temp_timer_elevator = temp;
     3d6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <temp_timer_elevator+0x1>
     3da:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temp_timer_elevator>
	
	

}
     3de:	9f 91       	pop	r25
     3e0:	8f 91       	pop	r24
     3e2:	5f 91       	pop	r21
     3e4:	4f 91       	pop	r20
     3e6:	3f 91       	pop	r19
     3e8:	2f 91       	pop	r18
     3ea:	0f 90       	pop	r0
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	0f 90       	pop	r0
     3f0:	1f 90       	pop	r1
     3f2:	18 95       	reti

000003f4 <_ZN9I2C_328pbC1Ei>:

I2C_328pb::I2C_328pb(int bit_rate){

	// takes care of any and all initialsation

	TWBR0 = bit_rate;
     3f4:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	
	PORTC |= ((1 << 4) | (1 << 5));
     3f8:	88 b1       	in	r24, 0x08	; 8
     3fa:	80 63       	ori	r24, 0x30	; 48
     3fc:	88 b9       	out	0x08, r24	; 8
     3fe:	08 95       	ret

00000400 <_ZN9I2C_328pb5startEv>:



void I2C_328pb::start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
     400:	84 ea       	ldi	r24, 0xA4	; 164
     402:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     406:	ec eb       	ldi	r30, 0xBC	; 188
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	88 23       	and	r24, r24
     40e:	ec f7       	brge	.-6      	; 0x40a <_ZN9I2C_328pb5startEv+0xa>
		return 0; 
	}

	return 1;
*/
}
     410:	08 95       	ret

00000412 <_ZN9I2C_328pb12repeat_startEv>:


void I2C_328pb::repeat_start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
     412:	84 ea       	ldi	r24, 0xA4	; 164
     414:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     418:	ec eb       	ldi	r30, 0xBC	; 188
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	88 23       	and	r24, r24
     420:	ec f7       	brge	.-6      	; 0x41c <_ZN9I2C_328pb12repeat_startEv+0xa>
		return 0; 
	}

	return 1;
*/
}
     422:	08 95       	ret

00000424 <_ZN9I2C_328pb10send_slaveEi>:

void I2C_328pb::send_slave(int address){

	// send slave address + write bit

	TWDR0 = address;
     424:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
     428:	84 e8       	ldi	r24, 0x84	; 132
     42a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     42e:	ec eb       	ldi	r30, 0xBC	; 188
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	80 81       	ld	r24, Z
     434:	88 23       	and	r24, r24
     436:	ec f7       	brge	.-6      	; 0x432 <_ZN9I2C_328pb10send_slaveEi+0xe>
	}

	return 1;
*/

}
     438:	08 95       	ret

0000043a <_ZN9I2C_328pb8send_regEi>:

void I2C_328pb::send_reg(int reg){

	// send  address of register to be written

	TWDR0 = reg; 
     43a:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

  	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
     43e:	84 e8       	ldi	r24, 0x84	; 132
     440:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     444:	ec eb       	ldi	r30, 0xBC	; 188
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	80 81       	ld	r24, Z
     44a:	88 23       	and	r24, r24
     44c:	ec f7       	brge	.-6      	; 0x448 <_ZN9I2C_328pb8send_regEi+0xe>
	}

	return 1;
*/

}
     44e:	08 95       	ret

00000450 <_ZN9I2C_328pb4sendEi>:


void I2C_328pb::send(int data){

	TWDR0 = data;
     450:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ((1 << TWINT) | (1 << TWEN));
     454:	84 e8       	ldi	r24, 0x84	; 132
     456:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
     45a:	ec eb       	ldi	r30, 0xBC	; 188
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	80 81       	ld	r24, Z
     460:	88 23       	and	r24, r24
     462:	ec f7       	brge	.-6      	; 0x45e <_ZN9I2C_328pb4sendEi+0xe>
	}

	return 1;
*/

}
     464:	08 95       	ret

00000466 <_ZN9I2C_328pb13get_next_byteEv>:

void I2C_328pb::get_next_byte(){


	TWCR0 = ( (1 << TWEN) | (1 << TWINT) | (1 << TWEA));
     466:	84 ec       	ldi	r24, 0xC4	; 196
     468:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while (! (TWCR0 & (1 << TWINT)) );
     46c:	ec eb       	ldi	r30, 0xBC	; 188
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	88 23       	and	r24, r24
     474:	ec f7       	brge	.-6      	; 0x470 <_ZN9I2C_328pb13get_next_byteEv+0xa>
	return 1;

*/


}
     476:	08 95       	ret

00000478 <_ZN9I2C_328pb13end_data_readEv>:

void I2C_328pb::end_data_read(){


	TWCR0 = ( (1 << TWEN) | (1 << TWINT) );
     478:	84 e8       	ldi	r24, 0x84	; 132
     47a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while (! (TWCR0 & (1 << TWINT)) );
     47e:	ec eb       	ldi	r30, 0xBC	; 188
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	88 23       	and	r24, r24
     486:	ec f7       	brge	.-6      	; 0x482 <_ZN9I2C_328pb13end_data_readEv+0xa>


}
     488:	08 95       	ret

0000048a <_ZN9I2C_328pb4stopEv>:

void I2C_328pb::stop(){


	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) ); 
     48a:	ec eb       	ldi	r30, 0xBC	; 188
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 81       	ld	r24, Z
     490:	84 69       	ori	r24, 0x94	; 148
     492:	80 83       	st	Z, r24
     494:	08 95       	ret

00000496 <_ZN10initialize10interruptsEv>:


void initialize::interrupts(){

	// external int 0
	EIMSK |= (1 << INT0); // enable the int0 interrupt												
     496:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC00);	// will fire at any logical change
     498:	e9 e6       	ldi	r30, 0x69	; 105
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	81 60       	ori	r24, 0x01	; 1
     4a0:	80 83       	st	Z, r24

	// external int 1
	EIMSK |= (1 << INT1); // enable the int0 interrupt
     4a2:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= (1 << ISC10);	// will fire at any logical change
     4a4:	80 81       	ld	r24, Z
     4a6:	84 60       	ori	r24, 0x04	; 4
     4a8:	80 83       	st	Z, r24

	// pcint 0 (for pin C3)
	PCICR |= (1 << PCIE1);
     4aa:	e8 e6       	ldi	r30, 0x68	; 104
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	82 60       	ori	r24, 0x02	; 2
     4b2:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);
     4b4:	ac e6       	ldi	r26, 0x6C	; 108
     4b6:	b0 e0       	ldi	r27, 0x00	; 0
     4b8:	8c 91       	ld	r24, X
     4ba:	88 60       	ori	r24, 0x08	; 8
     4bc:	8c 93       	st	X, r24

	//pcint 1 (for pin B1)
	PCICR |= (1 << PCIE2);
     4be:	80 81       	ld	r24, Z
     4c0:	84 60       	ori	r24, 0x04	; 4
     4c2:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT17);
     4c4:	ed e6       	ldi	r30, 0x6D	; 109
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	80 81       	ld	r24, Z
     4ca:	82 60       	ori	r24, 0x02	; 2
     4cc:	80 83       	st	Z, r24
	
	// setting the pullup resistors on everything (will not be necessary once all wires are connected

	DDRD &= ~(1 << 2);
     4ce:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << 2);
     4d0:	5a 9a       	sbi	0x0b, 2	; 11
	
	DDRC &= ~(1 << 3);
     4d2:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1 << 3);
     4d4:	43 9a       	sbi	0x08, 3	; 8
	
	DDRD &= ~(1 << 3);
     4d6:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1 << 3);
     4d8:	5b 9a       	sbi	0x0b, 3	; 11
	
	DDRD &= ~(1 << 4);
     4da:	54 98       	cbi	0x0a, 4	; 10
	PORTD |= (1 << 4);
     4dc:	5c 9a       	sbi	0x0b, 4	; 11
     4de:	08 95       	ret

000004e0 <_ZN10initialize6timersEv>:
}

void initialize::timers(){

	// by default the timer is set to normal mode
	TCCR1B |= ( (1 << CS10));	// timer will run without prescaler and willoverrun 15 times/second
     4e0:	e1 e8       	ldi	r30, 0x81	; 129
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	81 60       	ori	r24, 0x01	; 1
     4e8:	80 83       	st	Z, r24
     4ea:	08 95       	ret

000004ec <_ZN18pilot_instructions13set_max_angleEh>:


uint8_t pilot_instructions::get_throttle_power() const{

	return throttle_power;
}
     4ec:	fc 01       	movw	r30, r24
     4ee:	60 83       	st	Z, r22
     4f0:	08 95       	ret

000004f2 <_ZN18pilot_instructions16set_max_yaw_rateEh>:
     4f2:	fc 01       	movw	r30, r24
     4f4:	61 83       	std	Z+1, r22	; 0x01
     4f6:	08 95       	ret

000004f8 <_ZN18pilot_instructions7computeEv>:



void pilot_instructions::compute(void){
     4f8:	4f 92       	push	r4
     4fa:	5f 92       	push	r5
     4fc:	6f 92       	push	r6
     4fe:	7f 92       	push	r7
     500:	8f 92       	push	r8
     502:	9f 92       	push	r9
     504:	af 92       	push	r10
     506:	bf 92       	push	r11
     508:	cf 92       	push	r12
     50a:	df 92       	push	r13
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	8c 01       	movw	r16, r24
	extern volatile uint16_t requested_throttle_pos;


	// 50% of the time the value read is actually the valley of the pwm, that is corrected here 

	if (requested_aileron_pos > 0x7000 ){
     51a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <requested_aileron_pos>
     51e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <requested_aileron_pos+0x1>
     522:	81 30       	cpi	r24, 0x01	; 1
     524:	90 47       	sbci	r25, 0x70	; 112
     526:	50 f0       	brcs	.+20     	; 0x53c <_ZN18pilot_instructions7computeEv+0x44>
			
		requested_aileron_pos = 0xffff - requested_aileron_pos;
     528:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <requested_aileron_pos>
     52c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <requested_aileron_pos+0x1>
     530:	80 95       	com	r24
     532:	90 95       	com	r25
     534:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <requested_aileron_pos+0x1>
     538:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <requested_aileron_pos>
	}

	if (requested_elevator_pos > 0x7000 ){
     53c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <requested_elevator_pos>
     540:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <requested_elevator_pos+0x1>
     544:	81 30       	cpi	r24, 0x01	; 1
     546:	90 47       	sbci	r25, 0x70	; 112
     548:	50 f0       	brcs	.+20     	; 0x55e <_ZN18pilot_instructions7computeEv+0x66>
			
		requested_elevator_pos = 0xffff - requested_elevator_pos;
     54a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <requested_elevator_pos>
     54e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <requested_elevator_pos+0x1>
     552:	80 95       	com	r24
     554:	90 95       	com	r25
     556:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <requested_elevator_pos+0x1>
     55a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <requested_elevator_pos>
	}

	if (requested_rudder_pos > 0x7000 ){
     55e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <requested_rudder_pos>
     562:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <requested_rudder_pos+0x1>
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	90 47       	sbci	r25, 0x70	; 112
     56a:	50 f0       	brcs	.+20     	; 0x580 <_ZN18pilot_instructions7computeEv+0x88>
			
		requested_rudder_pos = 0xffff - requested_rudder_pos;
     56c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <requested_rudder_pos>
     570:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <requested_rudder_pos+0x1>
     574:	80 95       	com	r24
     576:	90 95       	com	r25
     578:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <requested_rudder_pos+0x1>
     57c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <requested_rudder_pos>
	}

	if (requested_throttle_pos > 0x7000 ){
     580:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_throttle_pos>
     584:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
     588:	81 30       	cpi	r24, 0x01	; 1
     58a:	90 47       	sbci	r25, 0x70	; 112
     58c:	50 f0       	brcs	.+20     	; 0x5a2 <_ZN18pilot_instructions7computeEv+0xaa>
			
		requested_throttle_pos = 0xffff - requested_throttle_pos;
     58e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_throttle_pos>
     592:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
     596:	80 95       	com	r24
     598:	90 95       	com	r25
     59a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
     59e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>





	throttle_power = ((requested_throttle_pos - 1015) / 8);	// computes the percentage of the max the pilot wants
     5a2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_throttle_pos>
     5a6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
     5aa:	87 5f       	subi	r24, 0xF7	; 247
     5ac:	93 40       	sbci	r25, 0x03	; 3
     5ae:	96 95       	lsr	r25
     5b0:	87 95       	ror	r24
     5b2:	96 95       	lsr	r25
     5b4:	87 95       	ror	r24
     5b6:	96 95       	lsr	r25
     5b8:	87 95       	ror	r24
     5ba:	f8 01       	movw	r30, r16
     5bc:	80 87       	std	Z+8, r24	; 0x08
	
	//yaw_rate = ( requested_rudder_pos / 6553 ) * max_yaw_rate;	// computes the percentage of the max the pilot wants
	
	
	float temp_pitch_angle = (requested_elevator_pos - 1110.f);	// computes the percentage of the max the pilot wants
     5be:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <requested_elevator_pos>
     5c2:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <requested_elevator_pos+0x1>
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 13 09 	call	0x1226	; 0x1226 <__floatunsisf>
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 ec       	ldi	r19, 0xC0	; 192
     5d2:	4a e8       	ldi	r20, 0x8A	; 138
     5d4:	54 e4       	ldi	r21, 0x44	; 68
     5d6:	0e 94 de 07 	call	0xfbc	; 0xfbc <__subsf3>
	temp_pitch_angle /= 800;
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	48 e4       	ldi	r20, 0x48	; 72
     5e0:	54 e4       	ldi	r21, 0x44	; 68
     5e2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__divsf3>
     5e6:	4b 01       	movw	r8, r22
     5e8:	5c 01       	movw	r10, r24
	temp_pitch_angle *= 2 * max_angle;
     5ea:	f8 01       	movw	r30, r16
     5ec:	c0 81       	ld	r28, Z
     5ee:	d0 e0       	ldi	r29, 0x00	; 0
     5f0:	be 01       	movw	r22, r28
     5f2:	66 0f       	add	r22, r22
     5f4:	77 1f       	adc	r23, r23
     5f6:	07 2e       	mov	r0, r23
     5f8:	00 0c       	add	r0, r0
     5fa:	88 0b       	sbc	r24, r24
     5fc:	99 0b       	sbc	r25, r25
     5fe:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     602:	6b 01       	movw	r12, r22
     604:	7c 01       	movw	r14, r24
     606:	9b 01       	movw	r18, r22
     608:	ac 01       	movw	r20, r24
     60a:	c5 01       	movw	r24, r10
     60c:	b4 01       	movw	r22, r8
     60e:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
     612:	4b 01       	movw	r8, r22
     614:	5c 01       	movw	r10, r24
	temp_pitch_angle -= max_angle;
     616:	be 01       	movw	r22, r28
     618:	dd 0f       	add	r29, r29
     61a:	88 0b       	sbc	r24, r24
     61c:	99 0b       	sbc	r25, r25
     61e:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     622:	2b 01       	movw	r4, r22
     624:	3c 01       	movw	r6, r24
	pitch_angle = (int) temp_pitch_angle;
     626:	9b 01       	movw	r18, r22
     628:	ac 01       	movw	r20, r24
     62a:	c5 01       	movw	r24, r10
     62c:	b4 01       	movw	r22, r8
     62e:	0e 94 de 07 	call	0xfbc	; 0xfbc <__subsf3>
     632:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fixsfsi>
     636:	f8 01       	movw	r30, r16
     638:	75 83       	std	Z+5, r23	; 0x05
     63a:	64 83       	std	Z+4, r22	; 0x04
	
	

	float temp_bank_angle = (requested_aileron_pos - 1120.f);	// computes the percentage of the max the pilot wants
     63c:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <requested_aileron_pos>
     640:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <requested_aileron_pos+0x1>
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 13 09 	call	0x1226	; 0x1226 <__floatunsisf>
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	4c e8       	ldi	r20, 0x8C	; 140
     652:	54 e4       	ldi	r21, 0x44	; 68
     654:	0e 94 de 07 	call	0xfbc	; 0xfbc <__subsf3>
	temp_bank_angle /= 800;
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	48 e4       	ldi	r20, 0x48	; 72
     65e:	54 e4       	ldi	r21, 0x44	; 68
     660:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__divsf3>
     664:	9b 01       	movw	r18, r22
     666:	ac 01       	movw	r20, r24
	temp_bank_angle *= 2 * max_angle;
     668:	c7 01       	movw	r24, r14
     66a:	b6 01       	movw	r22, r12
     66c:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
	temp_bank_angle -= max_angle;
	bank_angle = (int) temp_bank_angle + 2;
     670:	a3 01       	movw	r20, r6
     672:	92 01       	movw	r18, r4
     674:	0e 94 de 07 	call	0xfbc	; 0xfbc <__subsf3>
     678:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fixsfsi>
     67c:	6e 5f       	subi	r22, 0xFE	; 254
     67e:	7f 4f       	sbci	r23, 0xFF	; 255
     680:	f8 01       	movw	r30, r16
     682:	73 83       	std	Z+3, r23	; 0x03
     684:	62 83       	std	Z+2, r22	; 0x02

     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	ff 90       	pop	r15
     690:	ef 90       	pop	r14
     692:	df 90       	pop	r13
     694:	cf 90       	pop	r12
     696:	bf 90       	pop	r11
     698:	af 90       	pop	r10
     69a:	9f 90       	pop	r9
     69c:	8f 90       	pop	r8
     69e:	7f 90       	pop	r7
     6a0:	6f 90       	pop	r6
     6a2:	5f 90       	pop	r5
     6a4:	4f 90       	pop	r4
     6a6:	08 95       	ret

000006a8 <_ZN8pwm_chipC1E9I2C_328pbh>:
#include "pwm_chip.h"



pwm_chip::pwm_chip(I2C_328pb i2c, uint8_t prescaler){
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	1f 92       	push	r1
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
     6b4:	69 83       	std	Y+1, r22	; 0x01
     6b6:	14 2f       	mov	r17, r20
	
	
	DDRB |= (1 << 2);	// set OE to 0;
     6b8:	22 9a       	sbi	0x04, 2	; 4
	//This function sets the auto increment, the prescaler and any other necessary feature required for the pwm chip to run 

	//TWBR0 = (1 << 1); // I'll run the cpu at 1 MHz, this divides the value by 2 for 50 KHZ


	i2c.start();
     6ba:	ce 01       	movw	r24, r28
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	0e 94 00 02 	call	0x400	; 0x400 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     6c2:	6e e9       	ldi	r22, 0x9E	; 158
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	ce 01       	movw	r24, r28
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	0e 94 12 02 	call	0x424	; 0x424 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x0); // mode register 1
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	ce 01       	movw	r24, r28
     6d4:	01 96       	adiw	r24, 0x01	; 1
     6d6:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x21); //clock on, autoincrement enable
     6da:	61 e2       	ldi	r22, 0x21	; 33
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	ce 01       	movw	r24, r28
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
     6e6:	ce 01       	movw	r24, r28
     6e8:	01 96       	adiw	r24, 0x01	; 1
     6ea:	0e 94 09 02 	call	0x412	; 0x412 <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0x9E);
     6ee:	6e e9       	ldi	r22, 0x9E	; 158
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	ce 01       	movw	r24, r28
     6f4:	01 96       	adiw	r24, 0x01	; 1
     6f6:	0e 94 12 02 	call	0x424	; 0x424 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0xFE);	//pre scale register
     6fa:	6e ef       	ldi	r22, 0xFE	; 254
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	ce 01       	movw	r24, r28
     700:	01 96       	adiw	r24, 0x01	; 1
     702:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN9I2C_328pb8send_regEi>
	i2c.send(prescaler);	//prescaler
     706:	61 2f       	mov	r22, r17
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	ce 01       	movw	r24, r28
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     712:	ce 01       	movw	r24, r28
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN9I2C_328pb4stopEv>

}
     71a:	0f 90       	pop	r0
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	08 95       	ret

00000724 <_ZN8pwm_chip13encode_motorsEhPiPh>:

}

void pwm_chip::encode_motors(uint8_t motor, int* motors, uint8_t* instruction){
	
	uint16_t temp = motors[motor]*2;	// the actualslope of this curve is 2.05
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	66 0f       	add	r22, r22
     728:	77 1f       	adc	r23, r23
     72a:	fa 01       	movw	r30, r20
     72c:	e6 0f       	add	r30, r22
     72e:	f7 1f       	adc	r31, r23
     730:	80 81       	ld	r24, Z
     732:	91 81       	ldd	r25, Z+1	; 0x01
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
	
	temp += 205;	// 205 is the value corresponding to 0 for the esc
     738:	83 53       	subi	r24, 0x33	; 51
     73a:	9f 4f       	sbci	r25, 0xFF	; 255
	
	instruction[0] = ( temp & 0xff );	// conserves only the low byte
     73c:	f9 01       	movw	r30, r18
     73e:	80 83       	st	Z, r24
	
	instruction[1] = ( temp >> 8);	// conserves only the high half-byte
     740:	91 83       	std	Z+1, r25	; 0x01
     742:	08 95       	ret

00000744 <_ZN8pwm_chip4passE9I2C_328pbPi>:
}




void pwm_chip::pass(I2C_328pb i2c, int* motors){
     744:	ef 92       	push	r14
     746:	ff 92       	push	r15
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	00 d0       	rcall	.+0      	; 0x752 <_ZN8pwm_chip4passE9I2C_328pbPi+0xe>
     752:	1f 92       	push	r1
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
     758:	8c 01       	movw	r16, r24
     75a:	6b 83       	std	Y+3, r22	; 0x03
     75c:	7a 01       	movw	r14, r20

// this function will communicate over I2C to the pwmchip for final controll of the motors

	uint8_t instruction[2];
	
	encode_motors(0, motors, instruction);
     75e:	9e 01       	movw	r18, r28
     760:	2f 5f       	subi	r18, 0xFF	; 255
     762:	3f 4f       	sbci	r19, 0xFF	; 255
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	0e 94 92 03 	call	0x724	; 0x724 <_ZN8pwm_chip13encode_motorsEhPiPh>

	i2c.start();
     76a:	ce 01       	movw	r24, r28
     76c:	03 96       	adiw	r24, 0x03	; 3
     76e:	0e 94 00 02 	call	0x400	; 0x400 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     772:	6e e9       	ldi	r22, 0x9E	; 158
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	ce 01       	movw	r24, r28
     778:	03 96       	adiw	r24, 0x03	; 3
     77a:	0e 94 12 02 	call	0x424	; 0x424 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x06);		//LED0_ON_L
     77e:	66 e0       	ldi	r22, 0x06	; 6
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	ce 01       	movw	r24, r28
     784:	03 96       	adiw	r24, 0x03	; 3
     786:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	ce 01       	movw	r24, r28
     790:	03 96       	adiw	r24, 0x03	; 3
     792:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	ce 01       	movw	r24, r28
     79c:	03 96       	adiw	r24, 0x03	; 3
     79e:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     7a2:	69 81       	ldd	r22, Y+1	; 0x01
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	ce 01       	movw	r24, r28
     7a8:	03 96       	adiw	r24, 0x03	; 3
     7aa:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
     7ae:	6a 81       	ldd	r22, Y+2	; 0x02
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	ce 01       	movw	r24, r28
     7b4:	03 96       	adiw	r24, 0x03	; 3
     7b6:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     7ba:	ce 01       	movw	r24, r28
     7bc:	03 96       	adiw	r24, 0x03	; 3
     7be:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN9I2C_328pb4stopEv>


	encode_motors(1, motors, instruction);
     7c2:	9e 01       	movw	r18, r28
     7c4:	2f 5f       	subi	r18, 0xFF	; 255
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	a7 01       	movw	r20, r14
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	c8 01       	movw	r24, r16
     7ce:	0e 94 92 03 	call	0x724	; 0x724 <_ZN8pwm_chip13encode_motorsEhPiPh>
	

	i2c.start();
     7d2:	ce 01       	movw	r24, r28
     7d4:	03 96       	adiw	r24, 0x03	; 3
     7d6:	0e 94 00 02 	call	0x400	; 0x400 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     7da:	6e e9       	ldi	r22, 0x9E	; 158
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	ce 01       	movw	r24, r28
     7e0:	03 96       	adiw	r24, 0x03	; 3
     7e2:	0e 94 12 02 	call	0x424	; 0x424 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x16);		//LED4_ON_L
     7e6:	66 e1       	ldi	r22, 0x16	; 22
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	ce 01       	movw	r24, r28
     7ec:	03 96       	adiw	r24, 0x03	; 3
     7ee:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	ce 01       	movw	r24, r28
     7f8:	03 96       	adiw	r24, 0x03	; 3
     7fa:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	ce 01       	movw	r24, r28
     804:	03 96       	adiw	r24, 0x03	; 3
     806:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     80a:	69 81       	ldd	r22, Y+1	; 0x01
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	ce 01       	movw	r24, r28
     810:	03 96       	adiw	r24, 0x03	; 3
     812:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
     816:	6a 81       	ldd	r22, Y+2	; 0x02
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	ce 01       	movw	r24, r28
     81c:	03 96       	adiw	r24, 0x03	; 3
     81e:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     822:	ce 01       	movw	r24, r28
     824:	03 96       	adiw	r24, 0x03	; 3
     826:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN9I2C_328pb4stopEv>

	
	encode_motors(2, motors, instruction);
     82a:	9e 01       	movw	r18, r28
     82c:	2f 5f       	subi	r18, 0xFF	; 255
     82e:	3f 4f       	sbci	r19, 0xFF	; 255
     830:	a7 01       	movw	r20, r14
     832:	62 e0       	ldi	r22, 0x02	; 2
     834:	c8 01       	movw	r24, r16
     836:	0e 94 92 03 	call	0x724	; 0x724 <_ZN8pwm_chip13encode_motorsEhPiPh>



	i2c.start();
     83a:	ce 01       	movw	r24, r28
     83c:	03 96       	adiw	r24, 0x03	; 3
     83e:	0e 94 00 02 	call	0x400	; 0x400 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     842:	6e e9       	ldi	r22, 0x9E	; 158
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	ce 01       	movw	r24, r28
     848:	03 96       	adiw	r24, 0x03	; 3
     84a:	0e 94 12 02 	call	0x424	; 0x424 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x2E);		//LED8_ON_L
     84e:	6e e2       	ldi	r22, 0x2E	; 46
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	ce 01       	movw	r24, r28
     854:	03 96       	adiw	r24, 0x03	; 3
     856:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	ce 01       	movw	r24, r28
     860:	03 96       	adiw	r24, 0x03	; 3
     862:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	ce 01       	movw	r24, r28
     86c:	03 96       	adiw	r24, 0x03	; 3
     86e:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     872:	69 81       	ldd	r22, Y+1	; 0x01
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	ce 01       	movw	r24, r28
     878:	03 96       	adiw	r24, 0x03	; 3
     87a:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
     87e:	6a 81       	ldd	r22, Y+2	; 0x02
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	ce 01       	movw	r24, r28
     884:	03 96       	adiw	r24, 0x03	; 3
     886:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     88a:	ce 01       	movw	r24, r28
     88c:	03 96       	adiw	r24, 0x03	; 3
     88e:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN9I2C_328pb4stopEv>



	encode_motors(3, motors, instruction);
     892:	9e 01       	movw	r18, r28
     894:	2f 5f       	subi	r18, 0xFF	; 255
     896:	3f 4f       	sbci	r19, 0xFF	; 255
     898:	a7 01       	movw	r20, r14
     89a:	63 e0       	ldi	r22, 0x03	; 3
     89c:	c8 01       	movw	r24, r16
     89e:	0e 94 92 03 	call	0x724	; 0x724 <_ZN8pwm_chip13encode_motorsEhPiPh>


	i2c.start();
     8a2:	ce 01       	movw	r24, r28
     8a4:	03 96       	adiw	r24, 0x03	; 3
     8a6:	0e 94 00 02 	call	0x400	; 0x400 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
     8aa:	6e e9       	ldi	r22, 0x9E	; 158
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	ce 01       	movw	r24, r28
     8b0:	03 96       	adiw	r24, 0x03	; 3
     8b2:	0e 94 12 02 	call	0x424	; 0x424 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x42);		//LED8_ON_L
     8b6:	62 e4       	ldi	r22, 0x42	; 66
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	ce 01       	movw	r24, r28
     8bc:	03 96       	adiw	r24, 0x03	; 3
     8be:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	ce 01       	movw	r24, r28
     8c8:	03 96       	adiw	r24, 0x03	; 3
     8ca:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	ce 01       	movw	r24, r28
     8d4:	03 96       	adiw	r24, 0x03	; 3
     8d6:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
     8da:	69 81       	ldd	r22, Y+1	; 0x01
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	ce 01       	movw	r24, r28
     8e0:	03 96       	adiw	r24, 0x03	; 3
     8e2:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
     8e6:	6a 81       	ldd	r22, Y+2	; 0x02
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	ce 01       	movw	r24, r28
     8ec:	03 96       	adiw	r24, 0x03	; 3
     8ee:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     8f2:	ce 01       	movw	r24, r28
     8f4:	03 96       	adiw	r24, 0x03	; 3
     8f6:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN9I2C_328pb4stopEv>


}
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	08 95       	ret

0000090e <_ZN7sensorsC1E9I2C_328pb>:
#include "sensors.h"



sensors::sensors(I2C_328pb i2c){
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	1f 92       	push	r1
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	8c 01       	movw	r16, r24
     91e:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
     920:	ce 01       	movw	r24, r28
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	0e 94 00 02 	call	0x400	; 0x400 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x32);	// acc slave + w
     928:	62 e3       	ldi	r22, 0x32	; 50
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	ce 01       	movw	r24, r28
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	0e 94 12 02 	call	0x424	; 0x424 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0xA0);	// Control register 1 + autoincrement
     934:	60 ea       	ldi	r22, 0xA0	; 160
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	ce 01       	movw	r24, r28
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x67);	// all axis enable data refresh rate is 200Hz
     940:	67 e6       	ldi	r22, 0x67	; 103
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	ce 01       	movw	r24, r28
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.send(0x0);	// CR2 default values
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	ce 01       	movw	r24, r28
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.send(0x0);	// CR3 default values
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	ce 01       	movw	r24, r28
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.send(0x10);	// CR4  +- 4g and 8mg/digit, The value 32767 corresponds to 4 g's
     964:	60 e1       	ldi	r22, 0x10	; 16
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	ce 01       	movw	r24, r28
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     970:	ce 01       	movw	r24, r28
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN9I2C_328pb4stopEv>
	

////////////////////////////// accelerometer init above and gyro init below

	i2c.start();
     978:	ce 01       	movw	r24, r28
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	0e 94 00 02 	call	0x400	; 0x400 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0xD6); // gyro slave + w
     980:	66 ed       	ldi	r22, 0xD6	; 214
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	ce 01       	movw	r24, r28
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	0e 94 12 02 	call	0x424	; 0x424 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x20);	// Control register 1
     98c:	60 e2       	ldi	r22, 0x20	; 32
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	ce 01       	movw	r24, r28
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x0F);	// all axis enable data refresh rate is 100Hz (a lot of other params also affected)
     998:	6f e0       	ldi	r22, 0x0F	; 15
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	ce 01       	movw	r24, r28
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
     9a4:	ce 01       	movw	r24, r28
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN9I2C_328pb4stopEv>

			// default sensitivity is 8.75 mdps/digit
			
			
	pitch = 0.f;
     9ac:	f8 01       	movw	r30, r16
     9ae:	14 86       	std	Z+12, r1	; 0x0c
     9b0:	15 86       	std	Z+13, r1	; 0x0d
     9b2:	16 86       	std	Z+14, r1	; 0x0e
     9b4:	17 86       	std	Z+15, r1	; 0x0f
	roll = 0.f;
     9b6:	10 8a       	std	Z+16, r1	; 0x10
     9b8:	11 8a       	std	Z+17, r1	; 0x11
     9ba:	12 8a       	std	Z+18, r1	; 0x12
     9bc:	13 8a       	std	Z+19, r1	; 0x13
	yaw_rate = 0.f;
     9be:	14 8a       	std	Z+20, r1	; 0x14
     9c0:	15 8a       	std	Z+21, r1	; 0x15
     9c2:	16 8a       	std	Z+22, r1	; 0x16
     9c4:	17 8a       	std	Z+23, r1	; 0x17

	time_of_previous_scan = TCNT1;
     9c6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     9ca:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     9ce:	91 8f       	std	Z+25, r25	; 0x19
     9d0:	80 8f       	std	Z+24, r24	; 0x18

}
     9d2:	0f 90       	pop	r0
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	08 95       	ret

000009de <_ZN7sensors8read_accE9I2C_328pb>:



void sensors::read_acc(I2C_328pb i2c){
     9de:	ef 92       	push	r14
     9e0:	ff 92       	push	r15
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	1f 92       	push	r1
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	8c 01       	movw	r16, r24
     9f2:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
     9f4:	ce 01       	movw	r24, r28
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	0e 94 00 02 	call	0x400	; 0x400 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x32);	// acc slave + w
     9fc:	62 e3       	ldi	r22, 0x32	; 50
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	ce 01       	movw	r24, r28
     a02:	01 96       	adiw	r24, 0x01	; 1
     a04:	0e 94 12 02 	call	0x424	; 0x424 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send(0xA8);	// X_low +auto increment
     a08:	68 ea       	ldi	r22, 0xA8	; 168
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	ce 01       	movw	r24, r28
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
     a14:	ce 01       	movw	r24, r28
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	0e 94 09 02 	call	0x412	; 0x412 <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0x33);	// acc slave + r
     a1c:	63 e3       	ldi	r22, 0x33	; 51
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	ce 01       	movw	r24, r28
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	0e 94 12 02 	call	0x424	; 0x424 <_ZN9I2C_328pb10send_slaveEi>

	i2c.get_next_byte();
     a28:	ce 01       	movw	r24, r28
     a2a:	01 96       	adiw	r24, 0x01	; 1
     a2c:	0e 94 33 02 	call	0x466	; 0x466 <_ZN9I2C_328pb13get_next_byteEv>
	acc_x_data = TWDR0;	// read low byte
     a30:	0f 2e       	mov	r0, r31
     a32:	fb eb       	ldi	r31, 0xBB	; 187
     a34:	ef 2e       	mov	r14, r31
     a36:	f1 2c       	mov	r15, r1
     a38:	f0 2d       	mov	r31, r0
     a3a:	f7 01       	movw	r30, r14
     a3c:	80 81       	ld	r24, Z
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	f8 01       	movw	r30, r16
     a42:	91 83       	std	Z+1, r25	; 0x01
     a44:	80 83       	st	Z, r24
	i2c.get_next_byte();
     a46:	ce 01       	movw	r24, r28
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	0e 94 33 02 	call	0x466	; 0x466 <_ZN9I2C_328pb13get_next_byteEv>
	acc_x_data |= (TWDR0 << 8);	// read high byte
     a4e:	f7 01       	movw	r30, r14
     a50:	20 81       	ld	r18, Z
     a52:	f8 01       	movw	r30, r16
     a54:	80 81       	ld	r24, Z
     a56:	91 81       	ldd	r25, Z+1	; 0x01
     a58:	92 2b       	or	r25, r18
     a5a:	91 83       	std	Z+1, r25	; 0x01
     a5c:	80 83       	st	Z, r24
	i2c.get_next_byte();
     a5e:	ce 01       	movw	r24, r28
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	0e 94 33 02 	call	0x466	; 0x466 <_ZN9I2C_328pb13get_next_byteEv>


	acc_y_data = TWDR0;	// read low byte
     a66:	f7 01       	movw	r30, r14
     a68:	80 81       	ld	r24, Z
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	f8 01       	movw	r30, r16
     a6e:	93 83       	std	Z+3, r25	; 0x03
     a70:	82 83       	std	Z+2, r24	; 0x02
	i2c.get_next_byte();
     a72:	ce 01       	movw	r24, r28
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	0e 94 33 02 	call	0x466	; 0x466 <_ZN9I2C_328pb13get_next_byteEv>
	acc_y_data |= (TWDR0 << 8);	// read high byte
     a7a:	f7 01       	movw	r30, r14
     a7c:	20 81       	ld	r18, Z
     a7e:	f8 01       	movw	r30, r16
     a80:	82 81       	ldd	r24, Z+2	; 0x02
     a82:	93 81       	ldd	r25, Z+3	; 0x03
     a84:	92 2b       	or	r25, r18
     a86:	93 83       	std	Z+3, r25	; 0x03
     a88:	82 83       	std	Z+2, r24	; 0x02
	i2c.get_next_byte();
     a8a:	ce 01       	movw	r24, r28
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	0e 94 33 02 	call	0x466	; 0x466 <_ZN9I2C_328pb13get_next_byteEv>


	acc_z_data = TWDR0;	// read low byte
     a92:	f7 01       	movw	r30, r14
     a94:	80 81       	ld	r24, Z
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	f8 01       	movw	r30, r16
     a9a:	95 83       	std	Z+5, r25	; 0x05
     a9c:	84 83       	std	Z+4, r24	; 0x04
	i2c.get_next_byte();
     a9e:	ce 01       	movw	r24, r28
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	0e 94 33 02 	call	0x466	; 0x466 <_ZN9I2C_328pb13get_next_byteEv>
	acc_z_data |= (TWDR0 << 8);	// read high byte
     aa6:	f7 01       	movw	r30, r14
     aa8:	20 81       	ld	r18, Z
     aaa:	f8 01       	movw	r30, r16
     aac:	84 81       	ldd	r24, Z+4	; 0x04
     aae:	95 81       	ldd	r25, Z+5	; 0x05
     ab0:	92 2b       	or	r25, r18
     ab2:	95 83       	std	Z+5, r25	; 0x05
     ab4:	84 83       	std	Z+4, r24	; 0x04


	i2c.end_data_read();
     ab6:	ce 01       	movw	r24, r28
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN9I2C_328pb13end_data_readEv>
	i2c.stop();
     abe:	ce 01       	movw	r24, r28
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN9I2C_328pb4stopEv>
}
     ac6:	0f 90       	pop	r0
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	08 95       	ret

00000ad6 <_ZN7sensors9read_gyroE9I2C_328pb>:

void sensors::read_gyro(I2C_328pb i2c){
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	1f 92       	push	r1
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
     ae8:	8c 01       	movw	r16, r24
     aea:	69 83       	std	Y+1, r22	; 0x01

	i2c.start(); 
     aec:	ce 01       	movw	r24, r28
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	0e 94 00 02 	call	0x400	; 0x400 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0xD6);	// gyro slave + w
     af4:	66 ed       	ldi	r22, 0xD6	; 214
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	ce 01       	movw	r24, r28
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	0e 94 12 02 	call	0x424	; 0x424 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send(0xA8);	// X_low +auto increment
     b00:	68 ea       	ldi	r22, 0xA8	; 168
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	0e 94 28 02 	call	0x450	; 0x450 <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
     b0c:	ce 01       	movw	r24, r28
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	0e 94 09 02 	call	0x412	; 0x412 <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0xD7);	// gyro slave + r
     b14:	67 ed       	ldi	r22, 0xD7	; 215
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	ce 01       	movw	r24, r28
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	0e 94 12 02 	call	0x424	; 0x424 <_ZN9I2C_328pb10send_slaveEi>

	i2c.get_next_byte();
     b20:	ce 01       	movw	r24, r28
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	0e 94 33 02 	call	0x466	; 0x466 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_x_data = TWDR0;	// read low byte
     b28:	0f 2e       	mov	r0, r31
     b2a:	fb eb       	ldi	r31, 0xBB	; 187
     b2c:	ef 2e       	mov	r14, r31
     b2e:	f1 2c       	mov	r15, r1
     b30:	f0 2d       	mov	r31, r0
     b32:	f7 01       	movw	r30, r14
     b34:	80 81       	ld	r24, Z
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	f8 01       	movw	r30, r16
     b3a:	97 83       	std	Z+7, r25	; 0x07
     b3c:	86 83       	std	Z+6, r24	; 0x06
	i2c.get_next_byte();
     b3e:	ce 01       	movw	r24, r28
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	0e 94 33 02 	call	0x466	; 0x466 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_x_data |= (TWDR0 << 8);	// read high byte
     b46:	f7 01       	movw	r30, r14
     b48:	20 81       	ld	r18, Z
     b4a:	f8 01       	movw	r30, r16
     b4c:	86 81       	ldd	r24, Z+6	; 0x06
     b4e:	97 81       	ldd	r25, Z+7	; 0x07
     b50:	92 2b       	or	r25, r18
     b52:	97 83       	std	Z+7, r25	; 0x07
     b54:	86 83       	std	Z+6, r24	; 0x06
	i2c.get_next_byte();
     b56:	ce 01       	movw	r24, r28
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	0e 94 33 02 	call	0x466	; 0x466 <_ZN9I2C_328pb13get_next_byteEv>


	gyro_y_data = TWDR0;	// read low byte
     b5e:	f7 01       	movw	r30, r14
     b60:	80 81       	ld	r24, Z
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	f8 01       	movw	r30, r16
     b66:	91 87       	std	Z+9, r25	; 0x09
     b68:	80 87       	std	Z+8, r24	; 0x08
	i2c.get_next_byte();
     b6a:	ce 01       	movw	r24, r28
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	0e 94 33 02 	call	0x466	; 0x466 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_y_data |= (TWDR0 << 8);	// read high byte
     b72:	f7 01       	movw	r30, r14
     b74:	20 81       	ld	r18, Z
     b76:	f8 01       	movw	r30, r16
     b78:	80 85       	ldd	r24, Z+8	; 0x08
     b7a:	91 85       	ldd	r25, Z+9	; 0x09
     b7c:	92 2b       	or	r25, r18
     b7e:	91 87       	std	Z+9, r25	; 0x09
     b80:	80 87       	std	Z+8, r24	; 0x08
	i2c.get_next_byte();
     b82:	ce 01       	movw	r24, r28
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	0e 94 33 02 	call	0x466	; 0x466 <_ZN9I2C_328pb13get_next_byteEv>

  
	gyro_z_data = TWDR0;	// read low byte
     b8a:	f7 01       	movw	r30, r14
     b8c:	80 81       	ld	r24, Z
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	f8 01       	movw	r30, r16
     b92:	93 87       	std	Z+11, r25	; 0x0b
     b94:	82 87       	std	Z+10, r24	; 0x0a
	i2c.get_next_byte();
     b96:	ce 01       	movw	r24, r28
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	0e 94 33 02 	call	0x466	; 0x466 <_ZN9I2C_328pb13get_next_byteEv>
	gyro_z_data |= (TWDR0 << 8);	// read high byte
     b9e:	f7 01       	movw	r30, r14
     ba0:	20 81       	ld	r18, Z
     ba2:	f8 01       	movw	r30, r16
     ba4:	82 85       	ldd	r24, Z+10	; 0x0a
     ba6:	93 85       	ldd	r25, Z+11	; 0x0b
     ba8:	92 2b       	or	r25, r18
     baa:	93 87       	std	Z+11, r25	; 0x0b
     bac:	82 87       	std	Z+10, r24	; 0x0a

	i2c.end_data_read();
     bae:	ce 01       	movw	r24, r28
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN9I2C_328pb13end_data_readEv>
	i2c.stop();
     bb6:	ce 01       	movw	r24, r28
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	0e 94 45 02 	call	0x48a	; 0x48a <_ZN9I2C_328pb4stopEv>
}
     bbe:	0f 90       	pop	r0
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	08 95       	ret

00000bce <_ZN7sensors8get_timeEv>:


}


float sensors:: get_time(){
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	00 d0       	rcall	.+0      	; 0xbdc <_ZN7sensors8get_timeEv+0xe>
     bdc:	00 d0       	rcall	.+0      	; 0xbde <_ZN7sensors8get_timeEv+0x10>
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	8c 01       	movw	r16, r24

	uint16_t time = TCNT1;
     be4:	e4 e8       	ldi	r30, 0x84	; 132
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	e0 80       	ld	r14, Z
     bea:	f1 80       	ldd	r15, Z+1	; 0x01
	
	volatile float result;
	

	if (TCNT1 < time_of_previous_scan){
     bec:	20 81       	ld	r18, Z
     bee:	31 81       	ldd	r19, Z+1	; 0x01
     bf0:	fc 01       	movw	r30, r24
     bf2:	80 8d       	ldd	r24, Z+24	; 0x18
     bf4:	91 8d       	ldd	r25, Z+25	; 0x19
     bf6:	28 17       	cp	r18, r24
     bf8:	39 07       	cpc	r19, r25
     bfa:	70 f4       	brcc	.+28     	; 0xc18 <_ZN7sensors8get_timeEv+0x4a>

		result = 0xffff - time_of_previous_scan + time ;
     bfc:	b7 01       	movw	r22, r14
     bfe:	61 50       	subi	r22, 0x01	; 1
     c00:	71 09       	sbc	r23, r1
     c02:	68 1b       	sub	r22, r24
     c04:	79 0b       	sbc	r23, r25
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 13 09 	call	0x1226	; 0x1226 <__floatunsisf>
     c0e:	69 83       	std	Y+1, r22	; 0x01
     c10:	7a 83       	std	Y+2, r23	; 0x02
     c12:	8b 83       	std	Y+3, r24	; 0x03
     c14:	9c 83       	std	Y+4, r25	; 0x04
     c16:	0b c0       	rjmp	.+22     	; 0xc2e <_ZN7sensors8get_timeEv+0x60>

	}

	else{

		result = time - time_of_previous_scan;
     c18:	b7 01       	movw	r22, r14
     c1a:	68 1b       	sub	r22, r24
     c1c:	79 0b       	sbc	r23, r25
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 13 09 	call	0x1226	; 0x1226 <__floatunsisf>
     c26:	69 83       	std	Y+1, r22	; 0x01
     c28:	7a 83       	std	Y+2, r23	; 0x02
     c2a:	8b 83       	std	Y+3, r24	; 0x03
     c2c:	9c 83       	std	Y+4, r25	; 0x04
	}


	result /= (float)TIMER_BIT_RATE;
     c2e:	69 81       	ldd	r22, Y+1	; 0x01
     c30:	7a 81       	ldd	r23, Y+2	; 0x02
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	34 e2       	ldi	r19, 0x24	; 36
     c3a:	44 e7       	ldi	r20, 0x74	; 116
     c3c:	59 e4       	ldi	r21, 0x49	; 73
     c3e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__divsf3>
     c42:	69 83       	std	Y+1, r22	; 0x01
     c44:	7a 83       	std	Y+2, r23	; 0x02
     c46:	8b 83       	std	Y+3, r24	; 0x03
     c48:	9c 83       	std	Y+4, r25	; 0x04

	time_of_previous_scan = time;
     c4a:	f8 01       	movw	r30, r16
     c4c:	f1 8e       	std	Z+25, r15	; 0x19
     c4e:	e0 8e       	std	Z+24, r14	; 0x18

	return result;
     c50:	69 81       	ldd	r22, Y+1	; 0x01
     c52:	7a 81       	ldd	r23, Y+2	; 0x02
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04


}
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	08 95       	ret

00000c6e <_ZN7sensors16compute_positionEv>:
}




void sensors::compute_position(){
     c6e:	4f 92       	push	r4
     c70:	5f 92       	push	r5
     c72:	6f 92       	push	r6
     c74:	7f 92       	push	r7
     c76:	8f 92       	push	r8
     c78:	9f 92       	push	r9
     c7a:	af 92       	push	r10
     c7c:	bf 92       	push	r11
     c7e:	cf 92       	push	r12
     c80:	df 92       	push	r13
     c82:	ef 92       	push	r14
     c84:	ff 92       	push	r15
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	64 97       	sbiw	r28, 0x14	; 20
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	8c 01       	movw	r16, r24

	volatile float R;	// what the accelerometer thinks the total acceleration is
	volatile float trust_factor; // to what degree do I trust the accelerometer's readings
	const float time_between_measurements = get_time();
     ca0:	0e 94 e7 05 	call	0xbce	; 0xbce <_ZN7sensors8get_timeEv>
     ca4:	6b 01       	movw	r12, r22
     ca6:	7c 01       	movw	r14, r24
 
	
	pitch += (gyro_y_data * GYRO_SENSITIVITY * time_between_measurements);
     ca8:	f8 01       	movw	r30, r16
     caa:	60 85       	ldd	r22, Z+8	; 0x08
     cac:	71 85       	ldd	r23, Z+9	; 0x09
     cae:	07 2e       	mov	r0, r23
     cb0:	00 0c       	add	r0, r0
     cb2:	88 0b       	sbc	r24, r24
     cb4:	99 0b       	sbc	r25, r25
     cb6:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     cba:	29 e2       	ldi	r18, 0x29	; 41
     cbc:	3c e5       	ldi	r19, 0x5C	; 92
     cbe:	4f e0       	ldi	r20, 0x0F	; 15
     cc0:	5c e3       	ldi	r21, 0x3C	; 60
     cc2:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
     cc6:	a7 01       	movw	r20, r14
     cc8:	96 01       	movw	r18, r12
     cca:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
     cce:	f8 01       	movw	r30, r16
     cd0:	24 85       	ldd	r18, Z+12	; 0x0c
     cd2:	35 85       	ldd	r19, Z+13	; 0x0d
     cd4:	46 85       	ldd	r20, Z+14	; 0x0e
     cd6:	57 85       	ldd	r21, Z+15	; 0x0f
     cd8:	0e 94 df 07 	call	0xfbe	; 0xfbe <__addsf3>
     cdc:	4b 01       	movw	r8, r22
     cde:	5c 01       	movw	r10, r24
     ce0:	f8 01       	movw	r30, r16
     ce2:	64 87       	std	Z+12, r22	; 0x0c
     ce4:	75 87       	std	Z+13, r23	; 0x0d
     ce6:	86 87       	std	Z+14, r24	; 0x0e
     ce8:	97 87       	std	Z+15, r25	; 0x0f
	roll += (gyro_x_data * GYRO_SENSITIVITY * time_between_measurements);
     cea:	66 81       	ldd	r22, Z+6	; 0x06
     cec:	77 81       	ldd	r23, Z+7	; 0x07
     cee:	07 2e       	mov	r0, r23
     cf0:	00 0c       	add	r0, r0
     cf2:	88 0b       	sbc	r24, r24
     cf4:	99 0b       	sbc	r25, r25
     cf6:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     cfa:	29 e2       	ldi	r18, 0x29	; 41
     cfc:	3c e5       	ldi	r19, 0x5C	; 92
     cfe:	4f e0       	ldi	r20, 0x0F	; 15
     d00:	5c e3       	ldi	r21, 0x3C	; 60
     d02:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
     d06:	a7 01       	movw	r20, r14
     d08:	96 01       	movw	r18, r12
     d0a:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
     d0e:	f8 01       	movw	r30, r16
     d10:	20 89       	ldd	r18, Z+16	; 0x10
     d12:	31 89       	ldd	r19, Z+17	; 0x11
     d14:	42 89       	ldd	r20, Z+18	; 0x12
     d16:	53 89       	ldd	r21, Z+19	; 0x13
     d18:	0e 94 df 07 	call	0xfbe	; 0xfbe <__addsf3>
     d1c:	2b 01       	movw	r4, r22
     d1e:	3c 01       	movw	r6, r24
     d20:	f8 01       	movw	r30, r16
     d22:	60 8b       	std	Z+16, r22	; 0x10
     d24:	71 8b       	std	Z+17, r23	; 0x11
     d26:	82 8b       	std	Z+18, r24	; 0x12
     d28:	93 8b       	std	Z+19, r25	; 0x13
	yaw_rate = (gyro_z_data * GYRO_SENSITIVITY );
     d2a:	62 85       	ldd	r22, Z+10	; 0x0a
     d2c:	73 85       	ldd	r23, Z+11	; 0x0b
     d2e:	07 2e       	mov	r0, r23
     d30:	00 0c       	add	r0, r0
     d32:	88 0b       	sbc	r24, r24
     d34:	99 0b       	sbc	r25, r25
     d36:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     d3a:	29 e2       	ldi	r18, 0x29	; 41
     d3c:	3c e5       	ldi	r19, 0x5C	; 92
     d3e:	4f e0       	ldi	r20, 0x0F	; 15
     d40:	5c e3       	ldi	r21, 0x3C	; 60
     d42:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
     d46:	f8 01       	movw	r30, r16
     d48:	64 8b       	std	Z+20, r22	; 0x14
     d4a:	75 8b       	std	Z+21, r23	; 0x15
     d4c:	86 8b       	std	Z+22, r24	; 0x16
     d4e:	97 8b       	std	Z+23, r25	; 0x17



	R = sqrt( square( acc_x_data ) + square( acc_y_data ) + square( acc_z_data ) );
     d50:	60 81       	ld	r22, Z
     d52:	71 81       	ldd	r23, Z+1	; 0x01
     d54:	07 2e       	mov	r0, r23
     d56:	00 0c       	add	r0, r0
     d58:	88 0b       	sbc	r24, r24
     d5a:	99 0b       	sbc	r25, r25
     d5c:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     d60:	6d 87       	std	Y+13, r22	; 0x0d
     d62:	7e 87       	std	Y+14, r23	; 0x0e
     d64:	8f 87       	std	Y+15, r24	; 0x0f
     d66:	98 8b       	std	Y+16, r25	; 0x10
     d68:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <square>
     d6c:	6b 01       	movw	r12, r22
     d6e:	7c 01       	movw	r14, r24
     d70:	f8 01       	movw	r30, r16
     d72:	62 81       	ldd	r22, Z+2	; 0x02
     d74:	73 81       	ldd	r23, Z+3	; 0x03
     d76:	07 2e       	mov	r0, r23
     d78:	00 0c       	add	r0, r0
     d7a:	88 0b       	sbc	r24, r24
     d7c:	99 0b       	sbc	r25, r25
     d7e:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     d82:	69 8b       	std	Y+17, r22	; 0x11
     d84:	7a 8b       	std	Y+18, r23	; 0x12
     d86:	8b 8b       	std	Y+19, r24	; 0x13
     d88:	9c 8b       	std	Y+20, r25	; 0x14
     d8a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <square>
     d8e:	9b 01       	movw	r18, r22
     d90:	ac 01       	movw	r20, r24
     d92:	c7 01       	movw	r24, r14
     d94:	b6 01       	movw	r22, r12
     d96:	0e 94 df 07 	call	0xfbe	; 0xfbe <__addsf3>
     d9a:	6b 01       	movw	r12, r22
     d9c:	7c 01       	movw	r14, r24
     d9e:	f8 01       	movw	r30, r16
     da0:	64 81       	ldd	r22, Z+4	; 0x04
     da2:	75 81       	ldd	r23, Z+5	; 0x05
     da4:	07 2e       	mov	r0, r23
     da6:	00 0c       	add	r0, r0
     da8:	88 0b       	sbc	r24, r24
     daa:	99 0b       	sbc	r25, r25
     dac:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     db0:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <square>
     db4:	69 87       	std	Y+9, r22	; 0x09
     db6:	7a 87       	std	Y+10, r23	; 0x0a
     db8:	8b 87       	std	Y+11, r24	; 0x0b
     dba:	9c 87       	std	Y+12, r25	; 0x0c
     dbc:	29 85       	ldd	r18, Y+9	; 0x09
     dbe:	3a 85       	ldd	r19, Y+10	; 0x0a
     dc0:	4b 85       	ldd	r20, Y+11	; 0x0b
     dc2:	5c 85       	ldd	r21, Y+12	; 0x0c
     dc4:	c7 01       	movw	r24, r14
     dc6:	b6 01       	movw	r22, r12
     dc8:	0e 94 df 07 	call	0xfbe	; 0xfbe <__addsf3>
     dcc:	0e 94 98 0a 	call	0x1530	; 0x1530 <sqrt>
     dd0:	69 83       	std	Y+1, r22	; 0x01
     dd2:	7a 83       	std	Y+2, r23	; 0x02
     dd4:	8b 83       	std	Y+3, r24	; 0x03
     dd6:	9c 83       	std	Y+4, r25	; 0x04
	R *= ACC_SENSITIVITY;
     dd8:	69 81       	ldd	r22, Y+1	; 0x01
     dda:	7a 81       	ldd	r23, Y+2	; 0x02
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	20 e9       	ldi	r18, 0x90	; 144
     de2:	39 ef       	ldi	r19, 0xF9	; 249
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	59 e3       	ldi	r21, 0x39	; 57
     de8:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
     dec:	69 83       	std	Y+1, r22	; 0x01
     dee:	7a 83       	std	Y+2, r23	; 0x02
     df0:	8b 83       	std	Y+3, r24	; 0x03
     df2:	9c 83       	std	Y+4, r25	; 0x04
	

	if ( R > 1.5 || R < 0.5 ){
     df4:	69 81       	ldd	r22, Y+1	; 0x01
     df6:	7a 81       	ldd	r23, Y+2	; 0x02
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	9c 81       	ldd	r25, Y+4	; 0x04
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 ec       	ldi	r20, 0xC0	; 192
     e02:	5f e3       	ldi	r21, 0x3F	; 63
     e04:	0e 94 20 0a 	call	0x1440	; 0x1440 <__gesf2>
     e08:	18 16       	cp	r1, r24
     e0a:	0c f4       	brge	.+2      	; 0xe0e <_ZN7sensors16compute_positionEv+0x1a0>
     e0c:	b4 c0       	rjmp	.+360    	; 0xf76 <_ZN7sensors16compute_positionEv+0x308>
     e0e:	69 81       	ldd	r22, Y+1	; 0x01
     e10:	7a 81       	ldd	r23, Y+2	; 0x02
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	9c 81       	ldd	r25, Y+4	; 0x04
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	40 e0       	ldi	r20, 0x00	; 0
     e1c:	5f e3       	ldi	r21, 0x3F	; 63
     e1e:	0e 94 66 08 	call	0x10cc	; 0x10cc <__cmpsf2>
     e22:	88 23       	and	r24, r24
     e24:	0c f4       	brge	.+2      	; 0xe28 <_ZN7sensors16compute_positionEv+0x1ba>
     e26:	a7 c0       	rjmp	.+334    	; 0xf76 <_ZN7sensors16compute_positionEv+0x308>
		return;	// there is too much external factor for the accelerometer to be of any use

	}


	float acc_pitch_angle = asin(  acc_y_data / (R*8130) );	// accounts for +- sign 0 is the level value
     e28:	69 81       	ldd	r22, Y+1	; 0x01
     e2a:	7a 81       	ldd	r23, Y+2	; 0x02
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	9c 81       	ldd	r25, Y+4	; 0x04
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e1       	ldi	r19, 0x10	; 16
     e34:	4e ef       	ldi	r20, 0xFE	; 254
     e36:	55 e4       	ldi	r21, 0x45	; 69
     e38:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
     e3c:	9b 01       	movw	r18, r22
     e3e:	ac 01       	movw	r20, r24
     e40:	69 89       	ldd	r22, Y+17	; 0x11
     e42:	7a 89       	ldd	r23, Y+18	; 0x12
     e44:	8b 89       	ldd	r24, Y+19	; 0x13
     e46:	9c 89       	ldd	r25, Y+20	; 0x14
     e48:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__divsf3>
     e4c:	0e 94 4b 08 	call	0x1096	; 0x1096 <asin>
     e50:	69 87       	std	Y+9, r22	; 0x09
     e52:	7a 87       	std	Y+10, r23	; 0x0a
     e54:	8b 87       	std	Y+11, r24	; 0x0b
     e56:	9c 87       	std	Y+12, r25	; 0x0c
	float acc_roll_angle = asin( acc_x_data / (R*8130) );	// accounts for +- sign 0 is the level value
     e58:	69 81       	ldd	r22, Y+1	; 0x01
     e5a:	7a 81       	ldd	r23, Y+2	; 0x02
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	9c 81       	ldd	r25, Y+4	; 0x04
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e1       	ldi	r19, 0x10	; 16
     e64:	4e ef       	ldi	r20, 0xFE	; 254
     e66:	55 e4       	ldi	r21, 0x45	; 69
     e68:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
     e6c:	9b 01       	movw	r18, r22
     e6e:	ac 01       	movw	r20, r24
     e70:	6d 85       	ldd	r22, Y+13	; 0x0d
     e72:	7e 85       	ldd	r23, Y+14	; 0x0e
     e74:	8f 85       	ldd	r24, Y+15	; 0x0f
     e76:	98 89       	ldd	r25, Y+16	; 0x10
     e78:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__divsf3>
     e7c:	0e 94 4b 08 	call	0x1096	; 0x1096 <asin>
     e80:	6d 87       	std	Y+13, r22	; 0x0d
     e82:	7e 87       	std	Y+14, r23	; 0x0e
     e84:	8f 87       	std	Y+15, r24	; 0x0f
     e86:	98 8b       	std	Y+16, r25	; 0x10
	acc_pitch_angle *= 57.3;
	acc_roll_angle *= 57.3;	// conversion to degrees instead of radians.



	trust_factor = ( 1 - fabs(1 - R) ) / 10;
     e88:	29 81       	ldd	r18, Y+1	; 0x01
     e8a:	3a 81       	ldd	r19, Y+2	; 0x02
     e8c:	4b 81       	ldd	r20, Y+3	; 0x03
     e8e:	5c 81       	ldd	r21, Y+4	; 0x04
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	80 e8       	ldi	r24, 0x80	; 128
     e96:	9f e3       	ldi	r25, 0x3F	; 63
     e98:	0e 94 de 07 	call	0xfbc	; 0xfbc <__subsf3>
     e9c:	9b 01       	movw	r18, r22
     e9e:	ac 01       	movw	r20, r24
     ea0:	5f 77       	andi	r21, 0x7F	; 127
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	80 e8       	ldi	r24, 0x80	; 128
     ea8:	9f e3       	ldi	r25, 0x3F	; 63
     eaa:	0e 94 de 07 	call	0xfbc	; 0xfbc <__subsf3>
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e2       	ldi	r20, 0x20	; 32
     eb4:	51 e4       	ldi	r21, 0x41	; 65
     eb6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__divsf3>
     eba:	6d 83       	std	Y+5, r22	; 0x05
     ebc:	7e 83       	std	Y+6, r23	; 0x06
     ebe:	8f 83       	std	Y+7, r24	; 0x07
     ec0:	98 87       	std	Y+8, r25	; 0x08


	pitch = (pitch * (1 - trust_factor) + (acc_pitch_angle * trust_factor) );
     ec2:	2d 81       	ldd	r18, Y+5	; 0x05
     ec4:	3e 81       	ldd	r19, Y+6	; 0x06
     ec6:	4f 81       	ldd	r20, Y+7	; 0x07
     ec8:	58 85       	ldd	r21, Y+8	; 0x08
     eca:	cd 80       	ldd	r12, Y+5	; 0x05
     ecc:	de 80       	ldd	r13, Y+6	; 0x06
     ece:	ef 80       	ldd	r14, Y+7	; 0x07
     ed0:	f8 84       	ldd	r15, Y+8	; 0x08
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	80 e8       	ldi	r24, 0x80	; 128
     ed8:	9f e3       	ldi	r25, 0x3F	; 63
     eda:	0e 94 de 07 	call	0xfbc	; 0xfbc <__subsf3>
     ede:	a5 01       	movw	r20, r10
     ee0:	94 01       	movw	r18, r8
     ee2:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
     ee6:	4b 01       	movw	r8, r22
     ee8:	5c 01       	movw	r10, r24
     eea:	23 e3       	ldi	r18, 0x33	; 51
     eec:	33 e3       	ldi	r19, 0x33	; 51
     eee:	45 e6       	ldi	r20, 0x65	; 101
     ef0:	52 e4       	ldi	r21, 0x42	; 66
     ef2:	69 85       	ldd	r22, Y+9	; 0x09
     ef4:	7a 85       	ldd	r23, Y+10	; 0x0a
     ef6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ef8:	9c 85       	ldd	r25, Y+12	; 0x0c
     efa:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
     efe:	a7 01       	movw	r20, r14
     f00:	96 01       	movw	r18, r12
     f02:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
     f06:	9b 01       	movw	r18, r22
     f08:	ac 01       	movw	r20, r24
     f0a:	c5 01       	movw	r24, r10
     f0c:	b4 01       	movw	r22, r8
     f0e:	0e 94 df 07 	call	0xfbe	; 0xfbe <__addsf3>
     f12:	f8 01       	movw	r30, r16
     f14:	64 87       	std	Z+12, r22	; 0x0c
     f16:	75 87       	std	Z+13, r23	; 0x0d
     f18:	86 87       	std	Z+14, r24	; 0x0e
     f1a:	97 87       	std	Z+15, r25	; 0x0f
	roll = (roll * (1 - trust_factor) + (acc_roll_angle * trust_factor) );
     f1c:	2d 81       	ldd	r18, Y+5	; 0x05
     f1e:	3e 81       	ldd	r19, Y+6	; 0x06
     f20:	4f 81       	ldd	r20, Y+7	; 0x07
     f22:	58 85       	ldd	r21, Y+8	; 0x08
     f24:	8d 80       	ldd	r8, Y+5	; 0x05
     f26:	9e 80       	ldd	r9, Y+6	; 0x06
     f28:	af 80       	ldd	r10, Y+7	; 0x07
     f2a:	b8 84       	ldd	r11, Y+8	; 0x08
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	80 e8       	ldi	r24, 0x80	; 128
     f32:	9f e3       	ldi	r25, 0x3F	; 63
     f34:	0e 94 de 07 	call	0xfbc	; 0xfbc <__subsf3>
     f38:	a3 01       	movw	r20, r6
     f3a:	92 01       	movw	r18, r4
     f3c:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
     f40:	2b 01       	movw	r4, r22
     f42:	3c 01       	movw	r6, r24
     f44:	23 e3       	ldi	r18, 0x33	; 51
     f46:	33 e3       	ldi	r19, 0x33	; 51
     f48:	45 e6       	ldi	r20, 0x65	; 101
     f4a:	52 e4       	ldi	r21, 0x42	; 66
     f4c:	6d 85       	ldd	r22, Y+13	; 0x0d
     f4e:	7e 85       	ldd	r23, Y+14	; 0x0e
     f50:	8f 85       	ldd	r24, Y+15	; 0x0f
     f52:	98 89       	ldd	r25, Y+16	; 0x10
     f54:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
     f58:	a5 01       	movw	r20, r10
     f5a:	94 01       	movw	r18, r8
     f5c:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
     f60:	9b 01       	movw	r18, r22
     f62:	ac 01       	movw	r20, r24
     f64:	c3 01       	movw	r24, r6
     f66:	b2 01       	movw	r22, r4
     f68:	0e 94 df 07 	call	0xfbe	; 0xfbe <__addsf3>
     f6c:	f8 01       	movw	r30, r16
     f6e:	60 8b       	std	Z+16, r22	; 0x10
     f70:	71 8b       	std	Z+17, r23	; 0x11
     f72:	82 8b       	std	Z+18, r24	; 0x12
     f74:	93 8b       	std	Z+19, r25	; 0x13
	
	
	return;


}
     f76:	64 96       	adiw	r28, 0x14	; 20
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	df 90       	pop	r13
     f90:	cf 90       	pop	r12
     f92:	bf 90       	pop	r11
     f94:	af 90       	pop	r10
     f96:	9f 90       	pop	r9
     f98:	8f 90       	pop	r8
     f9a:	7f 90       	pop	r7
     f9c:	6f 90       	pop	r6
     f9e:	5f 90       	pop	r5
     fa0:	4f 90       	pop	r4
     fa2:	08 95       	ret

00000fa4 <_ZNK7sensors9get_pitchEv>:

}

float sensors::get_pitch() const{
	
	return pitch;
     fa4:	fc 01       	movw	r30, r24
     fa6:	64 85       	ldd	r22, Z+12	; 0x0c
     fa8:	75 85       	ldd	r23, Z+13	; 0x0d
     faa:	86 85       	ldd	r24, Z+14	; 0x0e
     fac:	97 85       	ldd	r25, Z+15	; 0x0f
}
     fae:	08 95       	ret

00000fb0 <_ZNK7sensors8get_rollEv>:

float sensors::get_roll() const{
	
	return roll;
     fb0:	fc 01       	movw	r30, r24
     fb2:	60 89       	ldd	r22, Z+16	; 0x10
     fb4:	71 89       	ldd	r23, Z+17	; 0x11
     fb6:	82 89       	ldd	r24, Z+18	; 0x12
     fb8:	93 89       	ldd	r25, Z+19	; 0x13
}
     fba:	08 95       	ret

00000fbc <__subsf3>:
     fbc:	50 58       	subi	r21, 0x80	; 128

00000fbe <__addsf3>:
     fbe:	bb 27       	eor	r27, r27
     fc0:	aa 27       	eor	r26, r26
     fc2:	0e 94 f6 07 	call	0xfec	; 0xfec <__addsf3x>
     fc6:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__fp_round>
     fca:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__fp_pscA>
     fce:	38 f0       	brcs	.+14     	; 0xfde <__addsf3+0x20>
     fd0:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_pscB>
     fd4:	20 f0       	brcs	.+8      	; 0xfde <__addsf3+0x20>
     fd6:	39 f4       	brne	.+14     	; 0xfe6 <__addsf3+0x28>
     fd8:	9f 3f       	cpi	r25, 0xFF	; 255
     fda:	19 f4       	brne	.+6      	; 0xfe2 <__addsf3+0x24>
     fdc:	26 f4       	brtc	.+8      	; 0xfe6 <__addsf3+0x28>
     fde:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_nan>
     fe2:	0e f4       	brtc	.+2      	; 0xfe6 <__addsf3+0x28>
     fe4:	e0 95       	com	r30
     fe6:	e7 fb       	bst	r30, 7
     fe8:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_inf>

00000fec <__addsf3x>:
     fec:	e9 2f       	mov	r30, r25
     fee:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fp_split3>
     ff2:	58 f3       	brcs	.-42     	; 0xfca <__addsf3+0xc>
     ff4:	ba 17       	cp	r27, r26
     ff6:	62 07       	cpc	r22, r18
     ff8:	73 07       	cpc	r23, r19
     ffa:	84 07       	cpc	r24, r20
     ffc:	95 07       	cpc	r25, r21
     ffe:	20 f0       	brcs	.+8      	; 0x1008 <__addsf3x+0x1c>
    1000:	79 f4       	brne	.+30     	; 0x1020 <__addsf3x+0x34>
    1002:	a6 f5       	brtc	.+104    	; 0x106c <__addsf3x+0x80>
    1004:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__fp_zero>
    1008:	0e f4       	brtc	.+2      	; 0x100c <__addsf3x+0x20>
    100a:	e0 95       	com	r30
    100c:	0b 2e       	mov	r0, r27
    100e:	ba 2f       	mov	r27, r26
    1010:	a0 2d       	mov	r26, r0
    1012:	0b 01       	movw	r0, r22
    1014:	b9 01       	movw	r22, r18
    1016:	90 01       	movw	r18, r0
    1018:	0c 01       	movw	r0, r24
    101a:	ca 01       	movw	r24, r20
    101c:	a0 01       	movw	r20, r0
    101e:	11 24       	eor	r1, r1
    1020:	ff 27       	eor	r31, r31
    1022:	59 1b       	sub	r21, r25
    1024:	99 f0       	breq	.+38     	; 0x104c <__addsf3x+0x60>
    1026:	59 3f       	cpi	r21, 0xF9	; 249
    1028:	50 f4       	brcc	.+20     	; 0x103e <__addsf3x+0x52>
    102a:	50 3e       	cpi	r21, 0xE0	; 224
    102c:	68 f1       	brcs	.+90     	; 0x1088 <__addsf3x+0x9c>
    102e:	1a 16       	cp	r1, r26
    1030:	f0 40       	sbci	r31, 0x00	; 0
    1032:	a2 2f       	mov	r26, r18
    1034:	23 2f       	mov	r18, r19
    1036:	34 2f       	mov	r19, r20
    1038:	44 27       	eor	r20, r20
    103a:	58 5f       	subi	r21, 0xF8	; 248
    103c:	f3 cf       	rjmp	.-26     	; 0x1024 <__addsf3x+0x38>
    103e:	46 95       	lsr	r20
    1040:	37 95       	ror	r19
    1042:	27 95       	ror	r18
    1044:	a7 95       	ror	r26
    1046:	f0 40       	sbci	r31, 0x00	; 0
    1048:	53 95       	inc	r21
    104a:	c9 f7       	brne	.-14     	; 0x103e <__addsf3x+0x52>
    104c:	7e f4       	brtc	.+30     	; 0x106c <__addsf3x+0x80>
    104e:	1f 16       	cp	r1, r31
    1050:	ba 0b       	sbc	r27, r26
    1052:	62 0b       	sbc	r22, r18
    1054:	73 0b       	sbc	r23, r19
    1056:	84 0b       	sbc	r24, r20
    1058:	ba f0       	brmi	.+46     	; 0x1088 <__addsf3x+0x9c>
    105a:	91 50       	subi	r25, 0x01	; 1
    105c:	a1 f0       	breq	.+40     	; 0x1086 <__addsf3x+0x9a>
    105e:	ff 0f       	add	r31, r31
    1060:	bb 1f       	adc	r27, r27
    1062:	66 1f       	adc	r22, r22
    1064:	77 1f       	adc	r23, r23
    1066:	88 1f       	adc	r24, r24
    1068:	c2 f7       	brpl	.-16     	; 0x105a <__addsf3x+0x6e>
    106a:	0e c0       	rjmp	.+28     	; 0x1088 <__addsf3x+0x9c>
    106c:	ba 0f       	add	r27, r26
    106e:	62 1f       	adc	r22, r18
    1070:	73 1f       	adc	r23, r19
    1072:	84 1f       	adc	r24, r20
    1074:	48 f4       	brcc	.+18     	; 0x1088 <__addsf3x+0x9c>
    1076:	87 95       	ror	r24
    1078:	77 95       	ror	r23
    107a:	67 95       	ror	r22
    107c:	b7 95       	ror	r27
    107e:	f7 95       	ror	r31
    1080:	9e 3f       	cpi	r25, 0xFE	; 254
    1082:	08 f0       	brcs	.+2      	; 0x1086 <__addsf3x+0x9a>
    1084:	b0 cf       	rjmp	.-160    	; 0xfe6 <__addsf3+0x28>
    1086:	93 95       	inc	r25
    1088:	88 0f       	add	r24, r24
    108a:	08 f0       	brcs	.+2      	; 0x108e <__addsf3x+0xa2>
    108c:	99 27       	eor	r25, r25
    108e:	ee 0f       	add	r30, r30
    1090:	97 95       	ror	r25
    1092:	87 95       	ror	r24
    1094:	08 95       	ret

00001096 <asin>:
    1096:	9f 93       	push	r25
    1098:	9f 77       	andi	r25, 0x7F	; 127
    109a:	ee e3       	ldi	r30, 0x3E	; 62
    109c:	89 37       	cpi	r24, 0x79	; 121
    109e:	9e 07       	cpc	r25, r30
    10a0:	28 f4       	brcc	.+10     	; 0x10ac <asin+0x16>
    10a2:	e4 eb       	ldi	r30, 0xB4	; 180
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	0e 94 c4 09 	call	0x1388	; 0x1388 <__fp_powsodd>
    10aa:	0c c0       	rjmp	.+24     	; 0x10c4 <asin+0x2e>
    10ac:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__fp_arccos>
    10b0:	90 58       	subi	r25, 0x80	; 128
    10b2:	a2 ea       	ldi	r26, 0xA2	; 162
    10b4:	2a ed       	ldi	r18, 0xDA	; 218
    10b6:	3f e0       	ldi	r19, 0x0F	; 15
    10b8:	49 ec       	ldi	r20, 0xC9	; 201
    10ba:	5f e3       	ldi	r21, 0x3F	; 63
    10bc:	0e 94 f6 07 	call	0xfec	; 0xfec <__addsf3x>
    10c0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fp_round>
    10c4:	0f 90       	pop	r0
    10c6:	07 fc       	sbrc	r0, 7
    10c8:	90 58       	subi	r25, 0x80	; 128
    10ca:	08 95       	ret

000010cc <__cmpsf2>:
    10cc:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fp_cmp>
    10d0:	08 f4       	brcc	.+2      	; 0x10d4 <__cmpsf2+0x8>
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	08 95       	ret

000010d6 <__divsf3>:
    10d6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__divsf3x>
    10da:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__fp_round>
    10de:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_pscB>
    10e2:	58 f0       	brcs	.+22     	; 0x10fa <__divsf3+0x24>
    10e4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__fp_pscA>
    10e8:	40 f0       	brcs	.+16     	; 0x10fa <__divsf3+0x24>
    10ea:	29 f4       	brne	.+10     	; 0x10f6 <__divsf3+0x20>
    10ec:	5f 3f       	cpi	r21, 0xFF	; 255
    10ee:	29 f0       	breq	.+10     	; 0x10fa <__divsf3+0x24>
    10f0:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_inf>
    10f4:	51 11       	cpse	r21, r1
    10f6:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_szero>
    10fa:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_nan>

000010fe <__divsf3x>:
    10fe:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fp_split3>
    1102:	68 f3       	brcs	.-38     	; 0x10de <__divsf3+0x8>

00001104 <__divsf3_pse>:
    1104:	99 23       	and	r25, r25
    1106:	b1 f3       	breq	.-20     	; 0x10f4 <__divsf3+0x1e>
    1108:	55 23       	and	r21, r21
    110a:	91 f3       	breq	.-28     	; 0x10f0 <__divsf3+0x1a>
    110c:	95 1b       	sub	r25, r21
    110e:	55 0b       	sbc	r21, r21
    1110:	bb 27       	eor	r27, r27
    1112:	aa 27       	eor	r26, r26
    1114:	62 17       	cp	r22, r18
    1116:	73 07       	cpc	r23, r19
    1118:	84 07       	cpc	r24, r20
    111a:	38 f0       	brcs	.+14     	; 0x112a <__divsf3_pse+0x26>
    111c:	9f 5f       	subi	r25, 0xFF	; 255
    111e:	5f 4f       	sbci	r21, 0xFF	; 255
    1120:	22 0f       	add	r18, r18
    1122:	33 1f       	adc	r19, r19
    1124:	44 1f       	adc	r20, r20
    1126:	aa 1f       	adc	r26, r26
    1128:	a9 f3       	breq	.-22     	; 0x1114 <__divsf3_pse+0x10>
    112a:	35 d0       	rcall	.+106    	; 0x1196 <__divsf3_pse+0x92>
    112c:	0e 2e       	mov	r0, r30
    112e:	3a f0       	brmi	.+14     	; 0x113e <__divsf3_pse+0x3a>
    1130:	e0 e8       	ldi	r30, 0x80	; 128
    1132:	32 d0       	rcall	.+100    	; 0x1198 <__divsf3_pse+0x94>
    1134:	91 50       	subi	r25, 0x01	; 1
    1136:	50 40       	sbci	r21, 0x00	; 0
    1138:	e6 95       	lsr	r30
    113a:	00 1c       	adc	r0, r0
    113c:	ca f7       	brpl	.-14     	; 0x1130 <__divsf3_pse+0x2c>
    113e:	2b d0       	rcall	.+86     	; 0x1196 <__divsf3_pse+0x92>
    1140:	fe 2f       	mov	r31, r30
    1142:	29 d0       	rcall	.+82     	; 0x1196 <__divsf3_pse+0x92>
    1144:	66 0f       	add	r22, r22
    1146:	77 1f       	adc	r23, r23
    1148:	88 1f       	adc	r24, r24
    114a:	bb 1f       	adc	r27, r27
    114c:	26 17       	cp	r18, r22
    114e:	37 07       	cpc	r19, r23
    1150:	48 07       	cpc	r20, r24
    1152:	ab 07       	cpc	r26, r27
    1154:	b0 e8       	ldi	r27, 0x80	; 128
    1156:	09 f0       	breq	.+2      	; 0x115a <__divsf3_pse+0x56>
    1158:	bb 0b       	sbc	r27, r27
    115a:	80 2d       	mov	r24, r0
    115c:	bf 01       	movw	r22, r30
    115e:	ff 27       	eor	r31, r31
    1160:	93 58       	subi	r25, 0x83	; 131
    1162:	5f 4f       	sbci	r21, 0xFF	; 255
    1164:	3a f0       	brmi	.+14     	; 0x1174 <__divsf3_pse+0x70>
    1166:	9e 3f       	cpi	r25, 0xFE	; 254
    1168:	51 05       	cpc	r21, r1
    116a:	78 f0       	brcs	.+30     	; 0x118a <__divsf3_pse+0x86>
    116c:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_inf>
    1170:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_szero>
    1174:	5f 3f       	cpi	r21, 0xFF	; 255
    1176:	e4 f3       	brlt	.-8      	; 0x1170 <__divsf3_pse+0x6c>
    1178:	98 3e       	cpi	r25, 0xE8	; 232
    117a:	d4 f3       	brlt	.-12     	; 0x1170 <__divsf3_pse+0x6c>
    117c:	86 95       	lsr	r24
    117e:	77 95       	ror	r23
    1180:	67 95       	ror	r22
    1182:	b7 95       	ror	r27
    1184:	f7 95       	ror	r31
    1186:	9f 5f       	subi	r25, 0xFF	; 255
    1188:	c9 f7       	brne	.-14     	; 0x117c <__divsf3_pse+0x78>
    118a:	88 0f       	add	r24, r24
    118c:	91 1d       	adc	r25, r1
    118e:	96 95       	lsr	r25
    1190:	87 95       	ror	r24
    1192:	97 f9       	bld	r25, 7
    1194:	08 95       	ret
    1196:	e1 e0       	ldi	r30, 0x01	; 1
    1198:	66 0f       	add	r22, r22
    119a:	77 1f       	adc	r23, r23
    119c:	88 1f       	adc	r24, r24
    119e:	bb 1f       	adc	r27, r27
    11a0:	62 17       	cp	r22, r18
    11a2:	73 07       	cpc	r23, r19
    11a4:	84 07       	cpc	r24, r20
    11a6:	ba 07       	cpc	r27, r26
    11a8:	20 f0       	brcs	.+8      	; 0x11b2 <__divsf3_pse+0xae>
    11aa:	62 1b       	sub	r22, r18
    11ac:	73 0b       	sbc	r23, r19
    11ae:	84 0b       	sbc	r24, r20
    11b0:	ba 0b       	sbc	r27, r26
    11b2:	ee 1f       	adc	r30, r30
    11b4:	88 f7       	brcc	.-30     	; 0x1198 <__divsf3_pse+0x94>
    11b6:	e0 95       	com	r30
    11b8:	08 95       	ret

000011ba <__fixsfsi>:
    11ba:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__fixunssfsi>
    11be:	68 94       	set
    11c0:	b1 11       	cpse	r27, r1
    11c2:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_szero>
    11c6:	08 95       	ret

000011c8 <__fixunssfsi>:
    11c8:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__fp_splitA>
    11cc:	88 f0       	brcs	.+34     	; 0x11f0 <__fixunssfsi+0x28>
    11ce:	9f 57       	subi	r25, 0x7F	; 127
    11d0:	98 f0       	brcs	.+38     	; 0x11f8 <__fixunssfsi+0x30>
    11d2:	b9 2f       	mov	r27, r25
    11d4:	99 27       	eor	r25, r25
    11d6:	b7 51       	subi	r27, 0x17	; 23
    11d8:	b0 f0       	brcs	.+44     	; 0x1206 <__fixunssfsi+0x3e>
    11da:	e1 f0       	breq	.+56     	; 0x1214 <__fixunssfsi+0x4c>
    11dc:	66 0f       	add	r22, r22
    11de:	77 1f       	adc	r23, r23
    11e0:	88 1f       	adc	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	1a f0       	brmi	.+6      	; 0x11ec <__fixunssfsi+0x24>
    11e6:	ba 95       	dec	r27
    11e8:	c9 f7       	brne	.-14     	; 0x11dc <__fixunssfsi+0x14>
    11ea:	14 c0       	rjmp	.+40     	; 0x1214 <__fixunssfsi+0x4c>
    11ec:	b1 30       	cpi	r27, 0x01	; 1
    11ee:	91 f0       	breq	.+36     	; 0x1214 <__fixunssfsi+0x4c>
    11f0:	0e 94 19 0a 	call	0x1432	; 0x1432 <__fp_zero>
    11f4:	b1 e0       	ldi	r27, 0x01	; 1
    11f6:	08 95       	ret
    11f8:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__fp_zero>
    11fc:	67 2f       	mov	r22, r23
    11fe:	78 2f       	mov	r23, r24
    1200:	88 27       	eor	r24, r24
    1202:	b8 5f       	subi	r27, 0xF8	; 248
    1204:	39 f0       	breq	.+14     	; 0x1214 <__fixunssfsi+0x4c>
    1206:	b9 3f       	cpi	r27, 0xF9	; 249
    1208:	cc f3       	brlt	.-14     	; 0x11fc <__fixunssfsi+0x34>
    120a:	86 95       	lsr	r24
    120c:	77 95       	ror	r23
    120e:	67 95       	ror	r22
    1210:	b3 95       	inc	r27
    1212:	d9 f7       	brne	.-10     	; 0x120a <__fixunssfsi+0x42>
    1214:	3e f4       	brtc	.+14     	; 0x1224 <__fixunssfsi+0x5c>
    1216:	90 95       	com	r25
    1218:	80 95       	com	r24
    121a:	70 95       	com	r23
    121c:	61 95       	neg	r22
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	8f 4f       	sbci	r24, 0xFF	; 255
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	08 95       	ret

00001226 <__floatunsisf>:
    1226:	e8 94       	clt
    1228:	09 c0       	rjmp	.+18     	; 0x123c <__floatsisf+0x12>

0000122a <__floatsisf>:
    122a:	97 fb       	bst	r25, 7
    122c:	3e f4       	brtc	.+14     	; 0x123c <__floatsisf+0x12>
    122e:	90 95       	com	r25
    1230:	80 95       	com	r24
    1232:	70 95       	com	r23
    1234:	61 95       	neg	r22
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	8f 4f       	sbci	r24, 0xFF	; 255
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	99 23       	and	r25, r25
    123e:	a9 f0       	breq	.+42     	; 0x126a <__floatsisf+0x40>
    1240:	f9 2f       	mov	r31, r25
    1242:	96 e9       	ldi	r25, 0x96	; 150
    1244:	bb 27       	eor	r27, r27
    1246:	93 95       	inc	r25
    1248:	f6 95       	lsr	r31
    124a:	87 95       	ror	r24
    124c:	77 95       	ror	r23
    124e:	67 95       	ror	r22
    1250:	b7 95       	ror	r27
    1252:	f1 11       	cpse	r31, r1
    1254:	f8 cf       	rjmp	.-16     	; 0x1246 <__floatsisf+0x1c>
    1256:	fa f4       	brpl	.+62     	; 0x1296 <__floatsisf+0x6c>
    1258:	bb 0f       	add	r27, r27
    125a:	11 f4       	brne	.+4      	; 0x1260 <__floatsisf+0x36>
    125c:	60 ff       	sbrs	r22, 0
    125e:	1b c0       	rjmp	.+54     	; 0x1296 <__floatsisf+0x6c>
    1260:	6f 5f       	subi	r22, 0xFF	; 255
    1262:	7f 4f       	sbci	r23, 0xFF	; 255
    1264:	8f 4f       	sbci	r24, 0xFF	; 255
    1266:	9f 4f       	sbci	r25, 0xFF	; 255
    1268:	16 c0       	rjmp	.+44     	; 0x1296 <__floatsisf+0x6c>
    126a:	88 23       	and	r24, r24
    126c:	11 f0       	breq	.+4      	; 0x1272 <__floatsisf+0x48>
    126e:	96 e9       	ldi	r25, 0x96	; 150
    1270:	11 c0       	rjmp	.+34     	; 0x1294 <__floatsisf+0x6a>
    1272:	77 23       	and	r23, r23
    1274:	21 f0       	breq	.+8      	; 0x127e <__floatsisf+0x54>
    1276:	9e e8       	ldi	r25, 0x8E	; 142
    1278:	87 2f       	mov	r24, r23
    127a:	76 2f       	mov	r23, r22
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <__floatsisf+0x5e>
    127e:	66 23       	and	r22, r22
    1280:	71 f0       	breq	.+28     	; 0x129e <__floatsisf+0x74>
    1282:	96 e8       	ldi	r25, 0x86	; 134
    1284:	86 2f       	mov	r24, r22
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	2a f0       	brmi	.+10     	; 0x1296 <__floatsisf+0x6c>
    128c:	9a 95       	dec	r25
    128e:	66 0f       	add	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	88 1f       	adc	r24, r24
    1294:	da f7       	brpl	.-10     	; 0x128c <__floatsisf+0x62>
    1296:	88 0f       	add	r24, r24
    1298:	96 95       	lsr	r25
    129a:	87 95       	ror	r24
    129c:	97 f9       	bld	r25, 7
    129e:	08 95       	ret

000012a0 <__fp_arccos>:
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	1f 93       	push	r17
    12a6:	0f 93       	push	r16
    12a8:	8b 01       	movw	r16, r22
    12aa:	ec 01       	movw	r28, r24
    12ac:	e8 ec       	ldi	r30, 0xC8	; 200
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	0e 94 9d 09 	call	0x133a	; 0x133a <__fp_powser>
    12b4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fp_round>
    12b8:	98 01       	movw	r18, r16
    12ba:	ae 01       	movw	r20, r28
    12bc:	8b 01       	movw	r16, r22
    12be:	ec 01       	movw	r28, r24
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	80 e8       	ldi	r24, 0x80	; 128
    12c6:	9f e3       	ldi	r25, 0x3F	; 63
    12c8:	0e 94 de 07 	call	0xfbc	; 0xfbc <__subsf3>
    12cc:	0e 94 98 0a 	call	0x1530	; 0x1530 <sqrt>
    12d0:	98 01       	movw	r18, r16
    12d2:	ae 01       	movw	r20, r28
    12d4:	0f 91       	pop	r16
    12d6:	1f 91       	pop	r17
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__mulsf3x>

000012e0 <__fp_cmp>:
    12e0:	99 0f       	add	r25, r25
    12e2:	00 08       	sbc	r0, r0
    12e4:	55 0f       	add	r21, r21
    12e6:	aa 0b       	sbc	r26, r26
    12e8:	e0 e8       	ldi	r30, 0x80	; 128
    12ea:	fe ef       	ldi	r31, 0xFE	; 254
    12ec:	16 16       	cp	r1, r22
    12ee:	17 06       	cpc	r1, r23
    12f0:	e8 07       	cpc	r30, r24
    12f2:	f9 07       	cpc	r31, r25
    12f4:	c0 f0       	brcs	.+48     	; 0x1326 <__fp_cmp+0x46>
    12f6:	12 16       	cp	r1, r18
    12f8:	13 06       	cpc	r1, r19
    12fa:	e4 07       	cpc	r30, r20
    12fc:	f5 07       	cpc	r31, r21
    12fe:	98 f0       	brcs	.+38     	; 0x1326 <__fp_cmp+0x46>
    1300:	62 1b       	sub	r22, r18
    1302:	73 0b       	sbc	r23, r19
    1304:	84 0b       	sbc	r24, r20
    1306:	95 0b       	sbc	r25, r21
    1308:	39 f4       	brne	.+14     	; 0x1318 <__fp_cmp+0x38>
    130a:	0a 26       	eor	r0, r26
    130c:	61 f0       	breq	.+24     	; 0x1326 <__fp_cmp+0x46>
    130e:	23 2b       	or	r18, r19
    1310:	24 2b       	or	r18, r20
    1312:	25 2b       	or	r18, r21
    1314:	21 f4       	brne	.+8      	; 0x131e <__fp_cmp+0x3e>
    1316:	08 95       	ret
    1318:	0a 26       	eor	r0, r26
    131a:	09 f4       	brne	.+2      	; 0x131e <__fp_cmp+0x3e>
    131c:	a1 40       	sbci	r26, 0x01	; 1
    131e:	a6 95       	lsr	r26
    1320:	8f ef       	ldi	r24, 0xFF	; 255
    1322:	81 1d       	adc	r24, r1
    1324:	81 1d       	adc	r24, r1
    1326:	08 95       	ret

00001328 <__fp_inf>:
    1328:	97 f9       	bld	r25, 7
    132a:	9f 67       	ori	r25, 0x7F	; 127
    132c:	80 e8       	ldi	r24, 0x80	; 128
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	08 95       	ret

00001334 <__fp_nan>:
    1334:	9f ef       	ldi	r25, 0xFF	; 255
    1336:	80 ec       	ldi	r24, 0xC0	; 192
    1338:	08 95       	ret

0000133a <__fp_powser>:
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	1f 93       	push	r17
    1340:	0f 93       	push	r16
    1342:	ff 92       	push	r15
    1344:	ef 92       	push	r14
    1346:	df 92       	push	r13
    1348:	7b 01       	movw	r14, r22
    134a:	8c 01       	movw	r16, r24
    134c:	68 94       	set
    134e:	06 c0       	rjmp	.+12     	; 0x135c <__fp_powser+0x22>
    1350:	da 2e       	mov	r13, r26
    1352:	ef 01       	movw	r28, r30
    1354:	0e 94 38 0a 	call	0x1470	; 0x1470 <__mulsf3x>
    1358:	fe 01       	movw	r30, r28
    135a:	e8 94       	clt
    135c:	a5 91       	lpm	r26, Z+
    135e:	25 91       	lpm	r18, Z+
    1360:	35 91       	lpm	r19, Z+
    1362:	45 91       	lpm	r20, Z+
    1364:	55 91       	lpm	r21, Z+
    1366:	a6 f3       	brts	.-24     	; 0x1350 <__fp_powser+0x16>
    1368:	ef 01       	movw	r28, r30
    136a:	0e 94 f6 07 	call	0xfec	; 0xfec <__addsf3x>
    136e:	fe 01       	movw	r30, r28
    1370:	97 01       	movw	r18, r14
    1372:	a8 01       	movw	r20, r16
    1374:	da 94       	dec	r13
    1376:	69 f7       	brne	.-38     	; 0x1352 <__fp_powser+0x18>
    1378:	df 90       	pop	r13
    137a:	ef 90       	pop	r14
    137c:	ff 90       	pop	r15
    137e:	0f 91       	pop	r16
    1380:	1f 91       	pop	r17
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <__fp_powsodd>:
    1388:	9f 93       	push	r25
    138a:	8f 93       	push	r24
    138c:	7f 93       	push	r23
    138e:	6f 93       	push	r22
    1390:	ff 93       	push	r31
    1392:	ef 93       	push	r30
    1394:	9b 01       	movw	r18, r22
    1396:	ac 01       	movw	r20, r24
    1398:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3>
    139c:	ef 91       	pop	r30
    139e:	ff 91       	pop	r31
    13a0:	0e 94 9d 09 	call	0x133a	; 0x133a <__fp_powser>
    13a4:	2f 91       	pop	r18
    13a6:	3f 91       	pop	r19
    13a8:	4f 91       	pop	r20
    13aa:	5f 91       	pop	r21
    13ac:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__mulsf3>

000013b0 <__fp_pscA>:
    13b0:	00 24       	eor	r0, r0
    13b2:	0a 94       	dec	r0
    13b4:	16 16       	cp	r1, r22
    13b6:	17 06       	cpc	r1, r23
    13b8:	18 06       	cpc	r1, r24
    13ba:	09 06       	cpc	r0, r25
    13bc:	08 95       	ret

000013be <__fp_pscB>:
    13be:	00 24       	eor	r0, r0
    13c0:	0a 94       	dec	r0
    13c2:	12 16       	cp	r1, r18
    13c4:	13 06       	cpc	r1, r19
    13c6:	14 06       	cpc	r1, r20
    13c8:	05 06       	cpc	r0, r21
    13ca:	08 95       	ret

000013cc <__fp_round>:
    13cc:	09 2e       	mov	r0, r25
    13ce:	03 94       	inc	r0
    13d0:	00 0c       	add	r0, r0
    13d2:	11 f4       	brne	.+4      	; 0x13d8 <__fp_round+0xc>
    13d4:	88 23       	and	r24, r24
    13d6:	52 f0       	brmi	.+20     	; 0x13ec <__fp_round+0x20>
    13d8:	bb 0f       	add	r27, r27
    13da:	40 f4       	brcc	.+16     	; 0x13ec <__fp_round+0x20>
    13dc:	bf 2b       	or	r27, r31
    13de:	11 f4       	brne	.+4      	; 0x13e4 <__fp_round+0x18>
    13e0:	60 ff       	sbrs	r22, 0
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <__fp_round+0x20>
    13e4:	6f 5f       	subi	r22, 0xFF	; 255
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ea:	9f 4f       	sbci	r25, 0xFF	; 255
    13ec:	08 95       	ret

000013ee <__fp_split3>:
    13ee:	57 fd       	sbrc	r21, 7
    13f0:	90 58       	subi	r25, 0x80	; 128
    13f2:	44 0f       	add	r20, r20
    13f4:	55 1f       	adc	r21, r21
    13f6:	59 f0       	breq	.+22     	; 0x140e <__fp_splitA+0x10>
    13f8:	5f 3f       	cpi	r21, 0xFF	; 255
    13fa:	71 f0       	breq	.+28     	; 0x1418 <__fp_splitA+0x1a>
    13fc:	47 95       	ror	r20

000013fe <__fp_splitA>:
    13fe:	88 0f       	add	r24, r24
    1400:	97 fb       	bst	r25, 7
    1402:	99 1f       	adc	r25, r25
    1404:	61 f0       	breq	.+24     	; 0x141e <__fp_splitA+0x20>
    1406:	9f 3f       	cpi	r25, 0xFF	; 255
    1408:	79 f0       	breq	.+30     	; 0x1428 <__fp_splitA+0x2a>
    140a:	87 95       	ror	r24
    140c:	08 95       	ret
    140e:	12 16       	cp	r1, r18
    1410:	13 06       	cpc	r1, r19
    1412:	14 06       	cpc	r1, r20
    1414:	55 1f       	adc	r21, r21
    1416:	f2 cf       	rjmp	.-28     	; 0x13fc <__fp_split3+0xe>
    1418:	46 95       	lsr	r20
    141a:	f1 df       	rcall	.-30     	; 0x13fe <__fp_splitA>
    141c:	08 c0       	rjmp	.+16     	; 0x142e <__fp_splitA+0x30>
    141e:	16 16       	cp	r1, r22
    1420:	17 06       	cpc	r1, r23
    1422:	18 06       	cpc	r1, r24
    1424:	99 1f       	adc	r25, r25
    1426:	f1 cf       	rjmp	.-30     	; 0x140a <__fp_splitA+0xc>
    1428:	86 95       	lsr	r24
    142a:	71 05       	cpc	r23, r1
    142c:	61 05       	cpc	r22, r1
    142e:	08 94       	sec
    1430:	08 95       	ret

00001432 <__fp_zero>:
    1432:	e8 94       	clt

00001434 <__fp_szero>:
    1434:	bb 27       	eor	r27, r27
    1436:	66 27       	eor	r22, r22
    1438:	77 27       	eor	r23, r23
    143a:	cb 01       	movw	r24, r22
    143c:	97 f9       	bld	r25, 7
    143e:	08 95       	ret

00001440 <__gesf2>:
    1440:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fp_cmp>
    1444:	08 f4       	brcc	.+2      	; 0x1448 <__gesf2+0x8>
    1446:	8f ef       	ldi	r24, 0xFF	; 255
    1448:	08 95       	ret

0000144a <__mulsf3>:
    144a:	0e 94 38 0a 	call	0x1470	; 0x1470 <__mulsf3x>
    144e:	0c 94 e6 09 	jmp	0x13cc	; 0x13cc <__fp_round>
    1452:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__fp_pscA>
    1456:	38 f0       	brcs	.+14     	; 0x1466 <__mulsf3+0x1c>
    1458:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_pscB>
    145c:	20 f0       	brcs	.+8      	; 0x1466 <__mulsf3+0x1c>
    145e:	95 23       	and	r25, r21
    1460:	11 f0       	breq	.+4      	; 0x1466 <__mulsf3+0x1c>
    1462:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_inf>
    1466:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_nan>
    146a:	11 24       	eor	r1, r1
    146c:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_szero>

00001470 <__mulsf3x>:
    1470:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__fp_split3>
    1474:	70 f3       	brcs	.-36     	; 0x1452 <__mulsf3+0x8>

00001476 <__mulsf3_pse>:
    1476:	95 9f       	mul	r25, r21
    1478:	c1 f3       	breq	.-16     	; 0x146a <__mulsf3+0x20>
    147a:	95 0f       	add	r25, r21
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	55 1f       	adc	r21, r21
    1480:	62 9f       	mul	r22, r18
    1482:	f0 01       	movw	r30, r0
    1484:	72 9f       	mul	r23, r18
    1486:	bb 27       	eor	r27, r27
    1488:	f0 0d       	add	r31, r0
    148a:	b1 1d       	adc	r27, r1
    148c:	63 9f       	mul	r22, r19
    148e:	aa 27       	eor	r26, r26
    1490:	f0 0d       	add	r31, r0
    1492:	b1 1d       	adc	r27, r1
    1494:	aa 1f       	adc	r26, r26
    1496:	64 9f       	mul	r22, r20
    1498:	66 27       	eor	r22, r22
    149a:	b0 0d       	add	r27, r0
    149c:	a1 1d       	adc	r26, r1
    149e:	66 1f       	adc	r22, r22
    14a0:	82 9f       	mul	r24, r18
    14a2:	22 27       	eor	r18, r18
    14a4:	b0 0d       	add	r27, r0
    14a6:	a1 1d       	adc	r26, r1
    14a8:	62 1f       	adc	r22, r18
    14aa:	73 9f       	mul	r23, r19
    14ac:	b0 0d       	add	r27, r0
    14ae:	a1 1d       	adc	r26, r1
    14b0:	62 1f       	adc	r22, r18
    14b2:	83 9f       	mul	r24, r19
    14b4:	a0 0d       	add	r26, r0
    14b6:	61 1d       	adc	r22, r1
    14b8:	22 1f       	adc	r18, r18
    14ba:	74 9f       	mul	r23, r20
    14bc:	33 27       	eor	r19, r19
    14be:	a0 0d       	add	r26, r0
    14c0:	61 1d       	adc	r22, r1
    14c2:	23 1f       	adc	r18, r19
    14c4:	84 9f       	mul	r24, r20
    14c6:	60 0d       	add	r22, r0
    14c8:	21 1d       	adc	r18, r1
    14ca:	82 2f       	mov	r24, r18
    14cc:	76 2f       	mov	r23, r22
    14ce:	6a 2f       	mov	r22, r26
    14d0:	11 24       	eor	r1, r1
    14d2:	9f 57       	subi	r25, 0x7F	; 127
    14d4:	50 40       	sbci	r21, 0x00	; 0
    14d6:	9a f0       	brmi	.+38     	; 0x14fe <__mulsf3_pse+0x88>
    14d8:	f1 f0       	breq	.+60     	; 0x1516 <__mulsf3_pse+0xa0>
    14da:	88 23       	and	r24, r24
    14dc:	4a f0       	brmi	.+18     	; 0x14f0 <__mulsf3_pse+0x7a>
    14de:	ee 0f       	add	r30, r30
    14e0:	ff 1f       	adc	r31, r31
    14e2:	bb 1f       	adc	r27, r27
    14e4:	66 1f       	adc	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	88 1f       	adc	r24, r24
    14ea:	91 50       	subi	r25, 0x01	; 1
    14ec:	50 40       	sbci	r21, 0x00	; 0
    14ee:	a9 f7       	brne	.-22     	; 0x14da <__mulsf3_pse+0x64>
    14f0:	9e 3f       	cpi	r25, 0xFE	; 254
    14f2:	51 05       	cpc	r21, r1
    14f4:	80 f0       	brcs	.+32     	; 0x1516 <__mulsf3_pse+0xa0>
    14f6:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_inf>
    14fa:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__fp_szero>
    14fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1500:	e4 f3       	brlt	.-8      	; 0x14fa <__mulsf3_pse+0x84>
    1502:	98 3e       	cpi	r25, 0xE8	; 232
    1504:	d4 f3       	brlt	.-12     	; 0x14fa <__mulsf3_pse+0x84>
    1506:	86 95       	lsr	r24
    1508:	77 95       	ror	r23
    150a:	67 95       	ror	r22
    150c:	b7 95       	ror	r27
    150e:	f7 95       	ror	r31
    1510:	e7 95       	ror	r30
    1512:	9f 5f       	subi	r25, 0xFF	; 255
    1514:	c1 f7       	brne	.-16     	; 0x1506 <__mulsf3_pse+0x90>
    1516:	fe 2b       	or	r31, r30
    1518:	88 0f       	add	r24, r24
    151a:	91 1d       	adc	r25, r1
    151c:	96 95       	lsr	r25
    151e:	87 95       	ror	r24
    1520:	97 f9       	bld	r25, 7
    1522:	08 95       	ret
    1524:	19 f4       	brne	.+6      	; 0x152c <__mulsf3_pse+0xb6>
    1526:	16 f4       	brtc	.+4      	; 0x152c <__mulsf3_pse+0xb6>
    1528:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_nan>
    152c:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <__fp_mpack>

00001530 <sqrt>:
    1530:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__fp_splitA>
    1534:	b8 f3       	brcs	.-18     	; 0x1524 <__mulsf3_pse+0xae>
    1536:	99 23       	and	r25, r25
    1538:	c9 f3       	breq	.-14     	; 0x152c <__mulsf3_pse+0xb6>
    153a:	b6 f3       	brts	.-20     	; 0x1528 <__mulsf3_pse+0xb2>
    153c:	9f 57       	subi	r25, 0x7F	; 127
    153e:	55 0b       	sbc	r21, r21
    1540:	87 ff       	sbrs	r24, 7
    1542:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fp_norm2>
    1546:	00 24       	eor	r0, r0
    1548:	a0 e6       	ldi	r26, 0x60	; 96
    154a:	40 ea       	ldi	r20, 0xA0	; 160
    154c:	90 01       	movw	r18, r0
    154e:	80 58       	subi	r24, 0x80	; 128
    1550:	56 95       	lsr	r21
    1552:	97 95       	ror	r25
    1554:	28 f4       	brcc	.+10     	; 0x1560 <sqrt+0x30>
    1556:	80 5c       	subi	r24, 0xC0	; 192
    1558:	66 0f       	add	r22, r22
    155a:	77 1f       	adc	r23, r23
    155c:	88 1f       	adc	r24, r24
    155e:	20 f0       	brcs	.+8      	; 0x1568 <sqrt+0x38>
    1560:	26 17       	cp	r18, r22
    1562:	37 07       	cpc	r19, r23
    1564:	48 07       	cpc	r20, r24
    1566:	30 f4       	brcc	.+12     	; 0x1574 <sqrt+0x44>
    1568:	62 1b       	sub	r22, r18
    156a:	73 0b       	sbc	r23, r19
    156c:	84 0b       	sbc	r24, r20
    156e:	20 29       	or	r18, r0
    1570:	31 29       	or	r19, r1
    1572:	4a 2b       	or	r20, r26
    1574:	a6 95       	lsr	r26
    1576:	17 94       	ror	r1
    1578:	07 94       	ror	r0
    157a:	20 25       	eor	r18, r0
    157c:	31 25       	eor	r19, r1
    157e:	4a 27       	eor	r20, r26
    1580:	58 f7       	brcc	.-42     	; 0x1558 <sqrt+0x28>
    1582:	66 0f       	add	r22, r22
    1584:	77 1f       	adc	r23, r23
    1586:	88 1f       	adc	r24, r24
    1588:	20 f0       	brcs	.+8      	; 0x1592 <sqrt+0x62>
    158a:	26 17       	cp	r18, r22
    158c:	37 07       	cpc	r19, r23
    158e:	48 07       	cpc	r20, r24
    1590:	30 f4       	brcc	.+12     	; 0x159e <sqrt+0x6e>
    1592:	62 0b       	sbc	r22, r18
    1594:	73 0b       	sbc	r23, r19
    1596:	84 0b       	sbc	r24, r20
    1598:	20 0d       	add	r18, r0
    159a:	31 1d       	adc	r19, r1
    159c:	41 1d       	adc	r20, r1
    159e:	a0 95       	com	r26
    15a0:	81 f7       	brne	.-32     	; 0x1582 <sqrt+0x52>
    15a2:	b9 01       	movw	r22, r18
    15a4:	84 2f       	mov	r24, r20
    15a6:	91 58       	subi	r25, 0x81	; 129
    15a8:	88 0f       	add	r24, r24
    15aa:	96 95       	lsr	r25
    15ac:	87 95       	ror	r24
    15ae:	08 95       	ret

000015b0 <square>:
    15b0:	9b 01       	movw	r18, r22
    15b2:	ac 01       	movw	r20, r24
    15b4:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__mulsf3>

000015b8 <__fp_mpack>:
    15b8:	9f 3f       	cpi	r25, 0xFF	; 255
    15ba:	31 f0       	breq	.+12     	; 0x15c8 <__fp_mpack_finite+0xc>

000015bc <__fp_mpack_finite>:
    15bc:	91 50       	subi	r25, 0x01	; 1
    15be:	20 f4       	brcc	.+8      	; 0x15c8 <__fp_mpack_finite+0xc>
    15c0:	87 95       	ror	r24
    15c2:	77 95       	ror	r23
    15c4:	67 95       	ror	r22
    15c6:	b7 95       	ror	r27
    15c8:	88 0f       	add	r24, r24
    15ca:	91 1d       	adc	r25, r1
    15cc:	96 95       	lsr	r25
    15ce:	87 95       	ror	r24
    15d0:	97 f9       	bld	r25, 7
    15d2:	08 95       	ret

000015d4 <__fp_norm2>:
    15d4:	91 50       	subi	r25, 0x01	; 1
    15d6:	50 40       	sbci	r21, 0x00	; 0
    15d8:	66 0f       	add	r22, r22
    15da:	77 1f       	adc	r23, r23
    15dc:	88 1f       	adc	r24, r24
    15de:	d2 f7       	brpl	.-12     	; 0x15d4 <__fp_norm2>
    15e0:	08 95       	ret

000015e2 <_exit>:
    15e2:	f8 94       	cli

000015e4 <__stop_program>:
    15e4:	ff cf       	rjmp	.-2      	; 0x15e4 <__stop_program>
