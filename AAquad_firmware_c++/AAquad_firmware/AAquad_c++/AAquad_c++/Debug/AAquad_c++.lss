
AAquad_c++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b16  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  00000b8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000204b  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec7  00000000  00000000  00002d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009bd  00000000  00000000  00003c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  00004614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a0c  00000000  00000000  00004914  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d0  00000000  00000000  00005320  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000059f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_1>
   8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_2>
   c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_3>
  10:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_4>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 31       	cpi	r26, 0x12	; 18
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 89 05 	jmp	0xb12	; 0xb12 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:
	volatile uint16_t temp_timer_throttle = 0; 

	volatile uint16_t temp0;
	

int main(void){
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	6e 97       	sbiw	r28, 0x1e	; 30
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	cd bf       	out	0x3d, r28	; 61

	initialize::timers();
  f0:	0e 94 16 02 	call	0x42c	; 0x42c <_ZN10initialize6timersEv>
	initialize::interrupts();
  f4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <_ZN10initialize10interruptsEv>
	
	
	I2C_328pb i2c(0xFA); // 
  f8:	6a ef       	ldi	r22, 0xFA	; 250
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	ce 01       	movw	r24, r28
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	0e 94 ba 01 	call	0x374	; 0x374 <_ZN9I2C_328pbC1Ei>
	
	pilot_instructions pilot;
	pilot.set_max_angle(30);
 104:	6e e1       	ldi	r22, 0x1E	; 30
 106:	ce 01       	movw	r24, r28
 108:	02 96       	adiw	r24, 0x02	; 2
 10a:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN18pilot_instructions13set_max_angleEh>
	pilot.set_max_yaw_rate(45);	// this retrieves and holds the pilot's wishes
 10e:	6d e2       	ldi	r22, 0x2D	; 45
 110:	ce 01       	movw	r24, r28
 112:	02 96       	adiw	r24, 0x02	; 2
 114:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN18pilot_instructions16set_max_yaw_rateEh>
	PID pitch_pid;
	pitch_pid.setWeights(0.5,0.5,0.5);
	pitch_pid.setOutputLowerLimit(-30);
	pitch_pid.setOutputUpperLimit(30);
	
*/	I2C_328pb pwm_chip_I2c(0xAA);
 118:	6a ea       	ldi	r22, 0xAA	; 170
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	ce 01       	movw	r24, r28
 11e:	44 96       	adiw	r24, 0x14	; 20
 120:	0e 94 ba 01 	call	0x374	; 0x374 <_ZN9I2C_328pbC1Ei>
	pwm_chip pwm(pwm_chip_I2c, 10);
 124:	4a e0       	ldi	r20, 0x0A	; 10
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	ce 01       	movw	r24, r28
 12a:	45 96       	adiw	r24, 0x15	; 21
 12c:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN8pwm_chipC1E9I2C_328pbh>

	sei();
 130:	78 94       	sei
	
	int motors[4] = {0};
 132:	fe 01       	movw	r30, r28
 134:	77 96       	adiw	r30, 0x17	; 23
 136:	88 e0       	ldi	r24, 0x08	; 8
 138:	df 01       	movw	r26, r30
 13a:	1d 92       	st	X+, r1
 13c:	8a 95       	dec	r24
 13e:	e9 f7       	brne	.-6      	; 0x13a <main+0x5e>
	/*	
		sense.read_acc(sensor_I2C);
		sense.read_gyro(sensor_I2C);	// all sensor data processed
		sense.compute_position();
	*/	
		pilot.compute();	// all pilot data processed
 140:	ce 01       	movw	r24, r28
 142:	02 96       	adiw	r24, 0x02	; 2
 144:	0e 94 28 02 	call	0x450	; 0x450 <_ZN18pilot_instructions7computeEv>
		pitch_pid.setDesiredPoint(pilot.get_pitch_angle());
		
		PID::combine_data(bank_pid.refresh(sense.get_bank()), pitch_pid.refresh(sense.get_pitch), pilot.get_throttle_power());

	*/
		motors[2] = pilot.get_throttle_power();
 148:	ce 01       	movw	r24, r28
 14a:	02 96       	adiw	r24, 0x02	; 2
 14c:	0e 94 22 02 	call	0x444	; 0x444 <_ZNK18pilot_instructions18get_throttle_powerEv>
 150:	0e 94 49 04 	call	0x892	; 0x892 <__fixsfsi>
 154:	7c 8f       	std	Y+28, r23	; 0x1c
 156:	6b 8f       	std	Y+27, r22	; 0x1b
		pwm.pass(pwm_chip_I2c, motors);	
 158:	ae 01       	movw	r20, r28
 15a:	49 5e       	subi	r20, 0xE9	; 233
 15c:	5f 4f       	sbci	r21, 0xFF	; 255
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	ce 01       	movw	r24, r28
 162:	45 96       	adiw	r24, 0x15	; 21
 164:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN8pwm_chip4passE9I2C_328pbPi>
 168:	eb cf       	rjmp	.-42     	; 0x140 <main+0x64>

0000016a <__vector_2>:

}



ISR(INT1_vect){
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
	
		uint16_t temp = TCNT1;
 180:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 184:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

		if ( temp < temp_timer_aileron){	// timer overflow
 188:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <temp_timer_aileron>
 18c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
 190:	82 17       	cp	r24, r18
 192:	93 07       	cpc	r25, r19
 194:	70 f4       	brcc	.+28     	; 0x1b2 <__vector_2+0x48>

			requested_aileron_pos = (0xffff - temp_timer_aileron) + temp ;
 196:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <temp_timer_aileron>
 19a:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
 19e:	9c 01       	movw	r18, r24
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	31 09       	sbc	r19, r1
 1a4:	24 1b       	sub	r18, r20
 1a6:	35 0b       	sbc	r19, r21
 1a8:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <requested_aileron_pos+0x1>
 1ac:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <requested_aileron_pos>
 1b0:	0b c0       	rjmp	.+22     	; 0x1c8 <__vector_2+0x5e>
		}

		else {	// regular case
	
			requested_aileron_pos = temp - temp_timer_aileron;
 1b2:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <temp_timer_aileron>
 1b6:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
 1ba:	ac 01       	movw	r20, r24
 1bc:	42 1b       	sub	r20, r18
 1be:	53 0b       	sbc	r21, r19
 1c0:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <requested_aileron_pos+0x1>
 1c4:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp;
 1c8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <temp_timer_aileron+0x1>
 1cc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <temp_timer_aileron>
		
		
		// here, there is a chance that the value stored in requested aileron is actually (0xffff - actual requested aileron) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
	
}
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	5f 91       	pop	r21
 1d6:	4f 91       	pop	r20
 1d8:	3f 91       	pop	r19
 1da:	2f 91       	pop	r18
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_1>:

ISR(INT0_vect){
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	2f 93       	push	r18
 1f2:	3f 93       	push	r19
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
	
		temp0 = TCNT1;
 1f8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1fc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 200:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 204:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		

		if ( temp0 < temp_timer_throttle){	// timer overflow
 208:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 20c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 210:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp_timer_throttle>
 214:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
 218:	28 17       	cp	r18, r24
 21a:	39 07       	cpc	r19, r25
 21c:	80 f4       	brcc	.+32     	; 0x23e <__vector_1+0x58>

			requested_throttle_pos = (0xffff - temp_timer_throttle) + temp0 ;
 21e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 222:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 226:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_throttle>
 22a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	82 1b       	sub	r24, r18
 232:	93 0b       	sbc	r25, r19
 234:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
 238:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>
 23c:	0e c0       	rjmp	.+28     	; 0x25a <__vector_1+0x74>
		}

		else {	// regular case
	
			requested_throttle_pos = temp0 - temp_timer_throttle;
 23e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 242:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 246:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_throttle>
 24a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
 24e:	82 1b       	sub	r24, r18
 250:	93 0b       	sbc	r25, r19
 252:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
 256:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>
			
		}
	
		
		temp_timer_throttle = temp0;
 25a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 25e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 262:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <temp_timer_throttle+0x1>
 266:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_timer_throttle>
		
		
		// here, there is a chance that the value stored in requested throttle is actually (0xffff - actual requested throttle) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
}
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_3>:




ISR(PCINT0_vect){
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	4f 93       	push	r20
 28c:	5f 93       	push	r21
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25

	uint16_t temp = TCNT1;
 292:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 296:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

	if ( temp < temp_timer_rudder){	// timer overflow
 29a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <temp_timer_rudder>
 29e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
 2a2:	82 17       	cp	r24, r18
 2a4:	93 07       	cpc	r25, r19
 2a6:	70 f4       	brcc	.+28     	; 0x2c4 <__vector_3+0x48>

		requested_rudder_pos = (0xffff - temp_timer_rudder) + temp ;
 2a8:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <temp_timer_rudder>
 2ac:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
 2b0:	9c 01       	movw	r18, r24
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	31 09       	sbc	r19, r1
 2b6:	24 1b       	sub	r18, r20
 2b8:	35 0b       	sbc	r19, r21
 2ba:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <requested_rudder_pos+0x1>
 2be:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <requested_rudder_pos>
 2c2:	0b c0       	rjmp	.+22     	; 0x2da <__vector_3+0x5e>
	}

	else {	// regular case

		requested_rudder_pos = temp - temp_timer_rudder;
 2c4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <temp_timer_rudder>
 2c8:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
 2cc:	ac 01       	movw	r20, r24
 2ce:	42 1b       	sub	r20, r18
 2d0:	53 0b       	sbc	r21, r19
 2d2:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <requested_rudder_pos+0x1>
 2d6:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <requested_rudder_pos>
		
	}

	
	temp_timer_rudder = temp;
 2da:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <temp_timer_rudder+0x1>
 2de:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <temp_timer_rudder>
	
	

}
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	5f 91       	pop	r21
 2e8:	4f 91       	pop	r20
 2ea:	3f 91       	pop	r19
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <__vector_4>:

ISR(PCINT1_vect){
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	2f 93       	push	r18
 304:	3f 93       	push	r19
 306:	4f 93       	push	r20
 308:	5f 93       	push	r21
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25

	uint16_t temp = TCNT1;
 30e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 312:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	

	if ( temp < temp_timer_elevator){	// timer overflow
 316:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temp_timer_elevator>
 31a:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
 31e:	82 17       	cp	r24, r18
 320:	93 07       	cpc	r25, r19
 322:	70 f4       	brcc	.+28     	; 0x340 <__vector_4+0x48>

		requested_elevator_pos = (0xffff - temp_timer_elevator) + temp ;
 324:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_timer_elevator>
 328:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
 32c:	9c 01       	movw	r18, r24
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	31 09       	sbc	r19, r1
 332:	24 1b       	sub	r18, r20
 334:	35 0b       	sbc	r19, r21
 336:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <requested_elevator_pos+0x1>
 33a:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <requested_elevator_pos>
 33e:	0b c0       	rjmp	.+22     	; 0x356 <__vector_4+0x5e>
	}

	else {	// regular case

		requested_elevator_pos = temp - temp_timer_elevator;
 340:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temp_timer_elevator>
 344:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
 348:	ac 01       	movw	r20, r24
 34a:	42 1b       	sub	r20, r18
 34c:	53 0b       	sbc	r21, r19
 34e:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <requested_elevator_pos+0x1>
 352:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <requested_elevator_pos>
		
	}

	
	temp_timer_elevator = temp;
 356:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <temp_timer_elevator+0x1>
 35a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temp_timer_elevator>
	
	

}
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	5f 91       	pop	r21
 364:	4f 91       	pop	r20
 366:	3f 91       	pop	r19
 368:	2f 91       	pop	r18
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <_ZN9I2C_328pbC1Ei>:
	TWCR0 = ( (1 << TWINT) );

	while (! (TWCR0 & (1 << TWINT)) );


}
 374:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 378:	88 b1       	in	r24, 0x08	; 8
 37a:	80 63       	ori	r24, 0x30	; 48
 37c:	88 b9       	out	0x08, r24	; 8
 37e:	08 95       	ret

00000380 <_ZN9I2C_328pb5startEv>:
 380:	84 ea       	ldi	r24, 0xA4	; 164
 382:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 386:	ec eb       	ldi	r30, 0xBC	; 188
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	88 23       	and	r24, r24
 38e:	ec f7       	brge	.-6      	; 0x38a <_ZN9I2C_328pb5startEv+0xa>
 390:	08 95       	ret

00000392 <_ZN9I2C_328pb12repeat_startEv>:
 392:	84 ea       	ldi	r24, 0xA4	; 164
 394:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 398:	ec eb       	ldi	r30, 0xBC	; 188
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	88 23       	and	r24, r24
 3a0:	ec f7       	brge	.-6      	; 0x39c <_ZN9I2C_328pb12repeat_startEv+0xa>
 3a2:	08 95       	ret

000003a4 <_ZN9I2C_328pb10send_slaveEi>:
 3a4:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 3a8:	84 e8       	ldi	r24, 0x84	; 132
 3aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3ae:	ec eb       	ldi	r30, 0xBC	; 188
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	80 81       	ld	r24, Z
 3b4:	88 23       	and	r24, r24
 3b6:	ec f7       	brge	.-6      	; 0x3b2 <_ZN9I2C_328pb10send_slaveEi+0xe>
 3b8:	08 95       	ret

000003ba <_ZN9I2C_328pb8send_regEi>:
 3ba:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 3be:	84 e8       	ldi	r24, 0x84	; 132
 3c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3c4:	ec eb       	ldi	r30, 0xBC	; 188
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	88 23       	and	r24, r24
 3cc:	ec f7       	brge	.-6      	; 0x3c8 <_ZN9I2C_328pb8send_regEi+0xe>
 3ce:	08 95       	ret

000003d0 <_ZN9I2C_328pb4sendEi>:
 3d0:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 3d4:	84 e8       	ldi	r24, 0x84	; 132
 3d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3da:	ec eb       	ldi	r30, 0xBC	; 188
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	88 23       	and	r24, r24
 3e2:	ec f7       	brge	.-6      	; 0x3de <_ZN9I2C_328pb4sendEi+0xe>
 3e4:	08 95       	ret

000003e6 <_ZN9I2C_328pb4stopEv>:

void I2C_328pb::stop(){


	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) ); 
 3e6:	ec eb       	ldi	r30, 0xBC	; 188
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	84 69       	ori	r24, 0x94	; 148
 3ee:	80 83       	st	Z, r24
 3f0:	08 95       	ret

000003f2 <_ZN10initialize10interruptsEv>:


void initialize::interrupts(){

	// external int 0
	EIMSK |= (1 << INT0); // enable the int0 interrupt												
 3f2:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC00);	// will fire at any logical change
 3f4:	e9 e6       	ldi	r30, 0x69	; 105
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	81 60       	ori	r24, 0x01	; 1
 3fc:	80 83       	st	Z, r24

	// external int 1
	EIMSK |= (1 << INT1); // enable the int0 interrupt
 3fe:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= (1 << ISC10);	// will fire at any logical change
 400:	80 81       	ld	r24, Z
 402:	84 60       	ori	r24, 0x04	; 4
 404:	80 83       	st	Z, r24

	// pcint 0 (for pin C3)
	PCICR |= (1 << PCIE0);
 406:	e8 e6       	ldi	r30, 0x68	; 104
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	81 60       	ori	r24, 0x01	; 1
 40e:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);
 410:	ac e6       	ldi	r26, 0x6C	; 108
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	8c 91       	ld	r24, X
 416:	88 60       	ori	r24, 0x08	; 8
 418:	8c 93       	st	X, r24

	//pcint 1 (for pin B1)
	PCICR |= (1 << PCIE1);
 41a:	80 81       	ld	r24, Z
 41c:	82 60       	ori	r24, 0x02	; 2
 41e:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT1);
 420:	eb e6       	ldi	r30, 0x6B	; 107
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	82 60       	ori	r24, 0x02	; 2
 428:	80 83       	st	Z, r24
 42a:	08 95       	ret

0000042c <_ZN10initialize6timersEv>:
}

void initialize::timers(){

	// by default the timer is set to normal mode
	TCCR1B |= ( (1 <<CS11));	// timer will run with 8x prescaler and willoverrun 15 times/second
 42c:	e1 e8       	ldi	r30, 0x81	; 129
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	82 60       	ori	r24, 0x02	; 2
 434:	80 83       	st	Z, r24
 436:	08 95       	ret

00000438 <_ZN18pilot_instructions13set_max_angleEh>:
}

float pilot_instructions::get_yaw_rate() const{

	return yaw_rate;
}
 438:	fc 01       	movw	r30, r24
 43a:	60 83       	st	Z, r22
 43c:	08 95       	ret

0000043e <_ZN18pilot_instructions16set_max_yaw_rateEh>:
 43e:	fc 01       	movw	r30, r24
 440:	61 83       	std	Z+1, r22	; 0x01
 442:	08 95       	ret

00000444 <_ZNK18pilot_instructions18get_throttle_powerEv>:


float pilot_instructions::get_throttle_power() const{

	return throttle_power;
 444:	fc 01       	movw	r30, r24
 446:	66 85       	ldd	r22, Z+14	; 0x0e
 448:	77 85       	ldd	r23, Z+15	; 0x0f
 44a:	80 89       	ldd	r24, Z+16	; 0x10
 44c:	91 89       	ldd	r25, Z+17	; 0x11
}
 44e:	08 95       	ret

00000450 <_ZN18pilot_instructions7computeEv>:



void pilot_instructions::compute(void){
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	ec 01       	movw	r28, r24
	extern volatile uint16_t requested_throttle_pos;


	// 50% of the time the value read is actually the valley of the pwm, that is corrected here 

	if (requested_aileron_pos > 0x7000 ){
 456:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <requested_aileron_pos>
 45a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <requested_aileron_pos+0x1>
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	90 47       	sbci	r25, 0x70	; 112
 462:	50 f0       	brcs	.+20     	; 0x478 <_ZN18pilot_instructions7computeEv+0x28>
			
		requested_aileron_pos = 0xffff - requested_aileron_pos;
 464:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <requested_aileron_pos>
 468:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <requested_aileron_pos+0x1>
 46c:	80 95       	com	r24
 46e:	90 95       	com	r25
 470:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <requested_aileron_pos+0x1>
 474:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <requested_aileron_pos>
	}

	if (requested_elevator_pos > 0x7000 ){
 478:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <requested_elevator_pos>
 47c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <requested_elevator_pos+0x1>
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	90 47       	sbci	r25, 0x70	; 112
 484:	50 f0       	brcs	.+20     	; 0x49a <_ZN18pilot_instructions7computeEv+0x4a>
			
		requested_elevator_pos = 0xffff - requested_elevator_pos;
 486:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <requested_elevator_pos>
 48a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <requested_elevator_pos+0x1>
 48e:	80 95       	com	r24
 490:	90 95       	com	r25
 492:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <requested_elevator_pos+0x1>
 496:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <requested_elevator_pos>
	}

	if (requested_rudder_pos > 0x7000 ){
 49a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <requested_rudder_pos>
 49e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <requested_rudder_pos+0x1>
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	90 47       	sbci	r25, 0x70	; 112
 4a6:	50 f0       	brcs	.+20     	; 0x4bc <_ZN18pilot_instructions7computeEv+0x6c>
			
		requested_rudder_pos = 0xffff - requested_rudder_pos;
 4a8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <requested_rudder_pos>
 4ac:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <requested_rudder_pos+0x1>
 4b0:	80 95       	com	r24
 4b2:	90 95       	com	r25
 4b4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <requested_rudder_pos+0x1>
 4b8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <requested_rudder_pos>
	}

	if (requested_throttle_pos > 0x7000 ){
 4bc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_throttle_pos>
 4c0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	90 47       	sbci	r25, 0x70	; 112
 4c8:	50 f0       	brcs	.+20     	; 0x4de <_ZN18pilot_instructions7computeEv+0x8e>
			
		requested_throttle_pos = 0xffff - requested_throttle_pos;
 4ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_throttle_pos>
 4ce:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
 4d2:	80 95       	com	r24
 4d4:	90 95       	com	r25
 4d6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
 4da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>


	//bank_angle = ( requested_aileron_pos / 6553 ) * max_angle;	// computes the percentage of the max the pilot wants
	//pitch_angle = (requested_elevator_pos / 6553 ) * max_angle;	// computes the percentage of the max the pilot wants
	//yaw_rate = ( requested_rudder_pos / 6553 ) * max_yaw_rate;	// computes the percentage of the max the pilot wants
	throttle_power = (requested_throttle_pos * 100/ 1000 ) ;	// computes the percentage of the max the pilot wants
 4de:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_throttle_pos>
 4e2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_throttle_pos+0x1>
 4e6:	44 e6       	ldi	r20, 0x64	; 100
 4e8:	48 9f       	mul	r20, r24
 4ea:	90 01       	movw	r18, r0
 4ec:	49 9f       	mul	r20, r25
 4ee:	30 0d       	add	r19, r0
 4f0:	11 24       	eor	r1, r1
 4f2:	36 95       	lsr	r19
 4f4:	27 95       	ror	r18
 4f6:	36 95       	lsr	r19
 4f8:	27 95       	ror	r18
 4fa:	36 95       	lsr	r19
 4fc:	27 95       	ror	r18
 4fe:	a5 ec       	ldi	r26, 0xC5	; 197
 500:	b0 e2       	ldi	r27, 0x20	; 32
 502:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__umulhisi3>
 506:	92 95       	swap	r25
 508:	82 95       	swap	r24
 50a:	8f 70       	andi	r24, 0x0F	; 15
 50c:	89 27       	eor	r24, r25
 50e:	9f 70       	andi	r25, 0x0F	; 15
 510:	89 27       	eor	r24, r25
 512:	bc 01       	movw	r22, r24
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__floatunsisf>
 51c:	6e 87       	std	Y+14, r22	; 0x0e
 51e:	7f 87       	std	Y+15, r23	; 0x0f
 520:	88 8b       	std	Y+16, r24	; 0x10
 522:	99 8b       	std	Y+17, r25	; 0x11


 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	08 95       	ret

0000052a <_ZN8pwm_chipC1E9I2C_328pbh>:
#include "pwm_chip.h"



pwm_chip::pwm_chip(I2C_328pb i2c, uint8_t prescaler){
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	1f 92       	push	r1
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	69 83       	std	Y+1, r22	; 0x01
 538:	14 2f       	mov	r17, r20
	
	
	DDRB |= (1 << 2);	// set OE to 0;
 53a:	22 9a       	sbi	0x04, 2	; 4
	//This function sets the auto increment, the prescaler and any other necessary feature required for the pwm chip to run 

	//TWBR0 = (1 << 1); // I'll run the cpu at 1 MHz, this divides the value by 2 for 50 KHZ


	i2c.start();
 53c:	ce 01       	movw	r24, r28
 53e:	01 96       	adiw	r24, 0x01	; 1
 540:	0e 94 c0 01 	call	0x380	; 0x380 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
 544:	6e e9       	ldi	r22, 0x9E	; 158
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	ce 01       	movw	r24, r28
 54a:	01 96       	adiw	r24, 0x01	; 1
 54c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x0); // mode register 1
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	ce 01       	movw	r24, r28
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x21); //clock on, autoincrement enable
 55c:	61 e2       	ldi	r22, 0x21	; 33
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	ce 01       	movw	r24, r28
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
 568:	ce 01       	movw	r24, r28
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0x9E);
 570:	6e e9       	ldi	r22, 0x9E	; 158
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	ce 01       	movw	r24, r28
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0xFE);	//pre scale register
 57c:	6e ef       	ldi	r22, 0xFE	; 254
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	ce 01       	movw	r24, r28
 582:	01 96       	adiw	r24, 0x01	; 1
 584:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN9I2C_328pb8send_regEi>
	i2c.send(prescaler);	//prescaler
 588:	61 2f       	mov	r22, r17
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	ce 01       	movw	r24, r28
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
 594:	ce 01       	movw	r24, r28
 596:	01 96       	adiw	r24, 0x01	; 1
 598:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN9I2C_328pb4stopEv>

}
 59c:	0f 90       	pop	r0
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	1f 91       	pop	r17
 5a4:	08 95       	ret

000005a6 <_ZN8pwm_chip13encode_motorsEhPiPh>:
	i2c.stop();


}

void pwm_chip::encode_motors(uint8_t motor, int* motors, uint8_t*instruction){
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	e9 01       	movw	r28, r18
	
	float temp = motors[motor]*2.05;	// the actualslope of this curve is 2.05, 100 times larger prevents the .05from falling off
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	66 0f       	add	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	fa 01       	movw	r30, r20
 5b4:	e6 0f       	add	r30, r22
 5b6:	f7 1f       	adc	r31, r23
 5b8:	60 81       	ld	r22, Z
 5ba:	71 81       	ldd	r23, Z+1	; 0x01
 5bc:	07 2e       	mov	r0, r23
 5be:	00 0c       	add	r0, r0
 5c0:	88 0b       	sbc	r24, r24
 5c2:	99 0b       	sbc	r25, r25
 5c4:	0e 94 81 04 	call	0x902	; 0x902 <__floatsisf>
 5c8:	23 e3       	ldi	r18, 0x33	; 51
 5ca:	33 e3       	ldi	r19, 0x33	; 51
 5cc:	43 e0       	ldi	r20, 0x03	; 3
 5ce:	50 e4       	ldi	r21, 0x40	; 64
 5d0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__mulsf3>
	
	temp += 205;	// 205 is the value corresponding to 0 for the esc
	
	instruction[0] = ( (uint16_t)temp & 0xff );	// conserves only the low byte
 5d4:	20 e0       	ldi	r18, 0x00	; 0
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	4d e4       	ldi	r20, 0x4D	; 77
 5da:	53 e4       	ldi	r21, 0x43	; 67
 5dc:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__addsf3>
 5e0:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__fixunssfsi>
 5e4:	68 83       	st	Y, r22
	
	instruction[1] = ( (uint16_t)temp >> 8);	// conserves only the high half-byte
 5e6:	79 83       	std	Y+1, r23	; 0x01
	
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	08 95       	ret

000005ee <_ZN8pwm_chip4passE9I2C_328pbPi>:
}




void pwm_chip::pass(I2C_328pb i2c, int* motors){
 5ee:	ef 92       	push	r14
 5f0:	ff 92       	push	r15
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	00 d0       	rcall	.+0      	; 0x5fc <_ZN8pwm_chip4passE9I2C_328pbPi+0xe>
 5fc:	1f 92       	push	r1
 5fe:	cd b7       	in	r28, 0x3d	; 61
 600:	de b7       	in	r29, 0x3e	; 62
 602:	8c 01       	movw	r16, r24
 604:	6b 83       	std	Y+3, r22	; 0x03
 606:	7a 01       	movw	r14, r20

// this function will communicate over I2C to the pwmchip for final controll of the motors

	uint8_t instruction[2];
	
	encode_motors(0, motors, instruction);
 608:	9e 01       	movw	r18, r28
 60a:	2f 5f       	subi	r18, 0xFF	; 255
 60c:	3f 4f       	sbci	r19, 0xFF	; 255
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN8pwm_chip13encode_motorsEhPiPh>

	i2c.start();
 614:	ce 01       	movw	r24, r28
 616:	03 96       	adiw	r24, 0x03	; 3
 618:	0e 94 c0 01 	call	0x380	; 0x380 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
 61c:	6e e9       	ldi	r22, 0x9E	; 158
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	ce 01       	movw	r24, r28
 622:	03 96       	adiw	r24, 0x03	; 3
 624:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x06);		//LED0_ON_L
 628:	66 e0       	ldi	r22, 0x06	; 6
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	ce 01       	movw	r24, r28
 62e:	03 96       	adiw	r24, 0x03	; 3
 630:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	ce 01       	movw	r24, r28
 63a:	03 96       	adiw	r24, 0x03	; 3
 63c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	ce 01       	movw	r24, r28
 646:	03 96       	adiw	r24, 0x03	; 3
 648:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
 64c:	69 81       	ldd	r22, Y+1	; 0x01
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	ce 01       	movw	r24, r28
 652:	03 96       	adiw	r24, 0x03	; 3
 654:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
 658:	6a 81       	ldd	r22, Y+2	; 0x02
 65a:	70 e0       	ldi	r23, 0x00	; 0
 65c:	ce 01       	movw	r24, r28
 65e:	03 96       	adiw	r24, 0x03	; 3
 660:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
 664:	ce 01       	movw	r24, r28
 666:	03 96       	adiw	r24, 0x03	; 3
 668:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN9I2C_328pb4stopEv>


	encode_motors(1, motors, instruction);
 66c:	9e 01       	movw	r18, r28
 66e:	2f 5f       	subi	r18, 0xFF	; 255
 670:	3f 4f       	sbci	r19, 0xFF	; 255
 672:	a7 01       	movw	r20, r14
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	c8 01       	movw	r24, r16
 678:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN8pwm_chip13encode_motorsEhPiPh>
	

	i2c.start();
 67c:	ce 01       	movw	r24, r28
 67e:	03 96       	adiw	r24, 0x03	; 3
 680:	0e 94 c0 01 	call	0x380	; 0x380 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
 684:	6e e9       	ldi	r22, 0x9E	; 158
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	ce 01       	movw	r24, r28
 68a:	03 96       	adiw	r24, 0x03	; 3
 68c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x16);		//LED4_ON_L
 690:	66 e1       	ldi	r22, 0x16	; 22
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	ce 01       	movw	r24, r28
 696:	03 96       	adiw	r24, 0x03	; 3
 698:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	ce 01       	movw	r24, r28
 6a2:	03 96       	adiw	r24, 0x03	; 3
 6a4:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	ce 01       	movw	r24, r28
 6ae:	03 96       	adiw	r24, 0x03	; 3
 6b0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
 6b4:	69 81       	ldd	r22, Y+1	; 0x01
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	ce 01       	movw	r24, r28
 6ba:	03 96       	adiw	r24, 0x03	; 3
 6bc:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
 6c0:	6a 81       	ldd	r22, Y+2	; 0x02
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	ce 01       	movw	r24, r28
 6c6:	03 96       	adiw	r24, 0x03	; 3
 6c8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
 6cc:	ce 01       	movw	r24, r28
 6ce:	03 96       	adiw	r24, 0x03	; 3
 6d0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN9I2C_328pb4stopEv>

	
	encode_motors(2, motors, instruction);
 6d4:	9e 01       	movw	r18, r28
 6d6:	2f 5f       	subi	r18, 0xFF	; 255
 6d8:	3f 4f       	sbci	r19, 0xFF	; 255
 6da:	a7 01       	movw	r20, r14
 6dc:	62 e0       	ldi	r22, 0x02	; 2
 6de:	c8 01       	movw	r24, r16
 6e0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN8pwm_chip13encode_motorsEhPiPh>



	i2c.start();
 6e4:	ce 01       	movw	r24, r28
 6e6:	03 96       	adiw	r24, 0x03	; 3
 6e8:	0e 94 c0 01 	call	0x380	; 0x380 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
 6ec:	6e e9       	ldi	r22, 0x9E	; 158
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	ce 01       	movw	r24, r28
 6f2:	03 96       	adiw	r24, 0x03	; 3
 6f4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x2E);		//LED8_ON_L
 6f8:	6e e2       	ldi	r22, 0x2E	; 46
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	ce 01       	movw	r24, r28
 6fe:	03 96       	adiw	r24, 0x03	; 3
 700:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	ce 01       	movw	r24, r28
 70a:	03 96       	adiw	r24, 0x03	; 3
 70c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
 710:	60 e0       	ldi	r22, 0x00	; 0
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	ce 01       	movw	r24, r28
 716:	03 96       	adiw	r24, 0x03	; 3
 718:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
 71c:	69 81       	ldd	r22, Y+1	; 0x01
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	ce 01       	movw	r24, r28
 722:	03 96       	adiw	r24, 0x03	; 3
 724:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
 728:	6a 81       	ldd	r22, Y+2	; 0x02
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	ce 01       	movw	r24, r28
 72e:	03 96       	adiw	r24, 0x03	; 3
 730:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
 734:	ce 01       	movw	r24, r28
 736:	03 96       	adiw	r24, 0x03	; 3
 738:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN9I2C_328pb4stopEv>



	encode_motors(3, motors, instruction);
 73c:	9e 01       	movw	r18, r28
 73e:	2f 5f       	subi	r18, 0xFF	; 255
 740:	3f 4f       	sbci	r19, 0xFF	; 255
 742:	a7 01       	movw	r20, r14
 744:	63 e0       	ldi	r22, 0x03	; 3
 746:	c8 01       	movw	r24, r16
 748:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN8pwm_chip13encode_motorsEhPiPh>


	i2c.start();
 74c:	ce 01       	movw	r24, r28
 74e:	03 96       	adiw	r24, 0x03	; 3
 750:	0e 94 c0 01 	call	0x380	; 0x380 <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
 754:	6e e9       	ldi	r22, 0x9E	; 158
 756:	70 e0       	ldi	r23, 0x00	; 0
 758:	ce 01       	movw	r24, r28
 75a:	03 96       	adiw	r24, 0x03	; 3
 75c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x42);		//LED8_ON_L
 760:	62 e4       	ldi	r22, 0x42	; 66
 762:	70 e0       	ldi	r23, 0x00	; 0
 764:	ce 01       	movw	r24, r28
 766:	03 96       	adiw	r24, 0x03	; 3
 768:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
 76c:	60 e0       	ldi	r22, 0x00	; 0
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	ce 01       	movw	r24, r28
 772:	03 96       	adiw	r24, 0x03	; 3
 774:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
 778:	60 e0       	ldi	r22, 0x00	; 0
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	ce 01       	movw	r24, r28
 77e:	03 96       	adiw	r24, 0x03	; 3
 780:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
 784:	69 81       	ldd	r22, Y+1	; 0x01
 786:	70 e0       	ldi	r23, 0x00	; 0
 788:	ce 01       	movw	r24, r28
 78a:	03 96       	adiw	r24, 0x03	; 3
 78c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
 790:	6a 81       	ldd	r22, Y+2	; 0x02
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	ce 01       	movw	r24, r28
 796:	03 96       	adiw	r24, 0x03	; 3
 798:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <_ZN9I2C_328pb4sendEi>
	i2c.stop();
 79c:	ce 01       	movw	r24, r28
 79e:	03 96       	adiw	r24, 0x03	; 3
 7a0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN9I2C_328pb4stopEv>


}
 7a4:	0f 90       	pop	r0
 7a6:	0f 90       	pop	r0
 7a8:	0f 90       	pop	r0
 7aa:	df 91       	pop	r29
 7ac:	cf 91       	pop	r28
 7ae:	1f 91       	pop	r17
 7b0:	0f 91       	pop	r16
 7b2:	ff 90       	pop	r15
 7b4:	ef 90       	pop	r14
 7b6:	08 95       	ret

000007b8 <__subsf3>:
 7b8:	50 58       	subi	r21, 0x80	; 128

000007ba <__addsf3>:
 7ba:	bb 27       	eor	r27, r27
 7bc:	aa 27       	eor	r26, r26
 7be:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__addsf3x>
 7c2:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_round>
 7c6:	0e 94 c5 04 	call	0x98a	; 0x98a <__fp_pscA>
 7ca:	38 f0       	brcs	.+14     	; 0x7da <__addsf3+0x20>
 7cc:	0e 94 cc 04 	call	0x998	; 0x998 <__fp_pscB>
 7d0:	20 f0       	brcs	.+8      	; 0x7da <__addsf3+0x20>
 7d2:	39 f4       	brne	.+14     	; 0x7e2 <__addsf3+0x28>
 7d4:	9f 3f       	cpi	r25, 0xFF	; 255
 7d6:	19 f4       	brne	.+6      	; 0x7de <__addsf3+0x24>
 7d8:	26 f4       	brtc	.+8      	; 0x7e2 <__addsf3+0x28>
 7da:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_nan>
 7de:	0e f4       	brtc	.+2      	; 0x7e2 <__addsf3+0x28>
 7e0:	e0 95       	com	r30
 7e2:	e7 fb       	bst	r30, 7
 7e4:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_inf>

000007e8 <__addsf3x>:
 7e8:	e9 2f       	mov	r30, r25
 7ea:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__fp_split3>
 7ee:	58 f3       	brcs	.-42     	; 0x7c6 <__addsf3+0xc>
 7f0:	ba 17       	cp	r27, r26
 7f2:	62 07       	cpc	r22, r18
 7f4:	73 07       	cpc	r23, r19
 7f6:	84 07       	cpc	r24, r20
 7f8:	95 07       	cpc	r25, r21
 7fa:	20 f0       	brcs	.+8      	; 0x804 <__addsf3x+0x1c>
 7fc:	79 f4       	brne	.+30     	; 0x81c <__addsf3x+0x34>
 7fe:	a6 f5       	brtc	.+104    	; 0x868 <__addsf3x+0x80>
 800:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__fp_zero>
 804:	0e f4       	brtc	.+2      	; 0x808 <__addsf3x+0x20>
 806:	e0 95       	com	r30
 808:	0b 2e       	mov	r0, r27
 80a:	ba 2f       	mov	r27, r26
 80c:	a0 2d       	mov	r26, r0
 80e:	0b 01       	movw	r0, r22
 810:	b9 01       	movw	r22, r18
 812:	90 01       	movw	r18, r0
 814:	0c 01       	movw	r0, r24
 816:	ca 01       	movw	r24, r20
 818:	a0 01       	movw	r20, r0
 81a:	11 24       	eor	r1, r1
 81c:	ff 27       	eor	r31, r31
 81e:	59 1b       	sub	r21, r25
 820:	99 f0       	breq	.+38     	; 0x848 <__addsf3x+0x60>
 822:	59 3f       	cpi	r21, 0xF9	; 249
 824:	50 f4       	brcc	.+20     	; 0x83a <__addsf3x+0x52>
 826:	50 3e       	cpi	r21, 0xE0	; 224
 828:	68 f1       	brcs	.+90     	; 0x884 <__addsf3x+0x9c>
 82a:	1a 16       	cp	r1, r26
 82c:	f0 40       	sbci	r31, 0x00	; 0
 82e:	a2 2f       	mov	r26, r18
 830:	23 2f       	mov	r18, r19
 832:	34 2f       	mov	r19, r20
 834:	44 27       	eor	r20, r20
 836:	58 5f       	subi	r21, 0xF8	; 248
 838:	f3 cf       	rjmp	.-26     	; 0x820 <__addsf3x+0x38>
 83a:	46 95       	lsr	r20
 83c:	37 95       	ror	r19
 83e:	27 95       	ror	r18
 840:	a7 95       	ror	r26
 842:	f0 40       	sbci	r31, 0x00	; 0
 844:	53 95       	inc	r21
 846:	c9 f7       	brne	.-14     	; 0x83a <__addsf3x+0x52>
 848:	7e f4       	brtc	.+30     	; 0x868 <__addsf3x+0x80>
 84a:	1f 16       	cp	r1, r31
 84c:	ba 0b       	sbc	r27, r26
 84e:	62 0b       	sbc	r22, r18
 850:	73 0b       	sbc	r23, r19
 852:	84 0b       	sbc	r24, r20
 854:	ba f0       	brmi	.+46     	; 0x884 <__addsf3x+0x9c>
 856:	91 50       	subi	r25, 0x01	; 1
 858:	a1 f0       	breq	.+40     	; 0x882 <__addsf3x+0x9a>
 85a:	ff 0f       	add	r31, r31
 85c:	bb 1f       	adc	r27, r27
 85e:	66 1f       	adc	r22, r22
 860:	77 1f       	adc	r23, r23
 862:	88 1f       	adc	r24, r24
 864:	c2 f7       	brpl	.-16     	; 0x856 <__addsf3x+0x6e>
 866:	0e c0       	rjmp	.+28     	; 0x884 <__addsf3x+0x9c>
 868:	ba 0f       	add	r27, r26
 86a:	62 1f       	adc	r22, r18
 86c:	73 1f       	adc	r23, r19
 86e:	84 1f       	adc	r24, r20
 870:	48 f4       	brcc	.+18     	; 0x884 <__addsf3x+0x9c>
 872:	87 95       	ror	r24
 874:	77 95       	ror	r23
 876:	67 95       	ror	r22
 878:	b7 95       	ror	r27
 87a:	f7 95       	ror	r31
 87c:	9e 3f       	cpi	r25, 0xFE	; 254
 87e:	08 f0       	brcs	.+2      	; 0x882 <__addsf3x+0x9a>
 880:	b0 cf       	rjmp	.-160    	; 0x7e2 <__addsf3+0x28>
 882:	93 95       	inc	r25
 884:	88 0f       	add	r24, r24
 886:	08 f0       	brcs	.+2      	; 0x88a <__addsf3x+0xa2>
 888:	99 27       	eor	r25, r25
 88a:	ee 0f       	add	r30, r30
 88c:	97 95       	ror	r25
 88e:	87 95       	ror	r24
 890:	08 95       	ret

00000892 <__fixsfsi>:
 892:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__fixunssfsi>
 896:	68 94       	set
 898:	b1 11       	cpse	r27, r1
 89a:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_szero>
 89e:	08 95       	ret

000008a0 <__fixunssfsi>:
 8a0:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_splitA>
 8a4:	88 f0       	brcs	.+34     	; 0x8c8 <__fixunssfsi+0x28>
 8a6:	9f 57       	subi	r25, 0x7F	; 127
 8a8:	98 f0       	brcs	.+38     	; 0x8d0 <__fixunssfsi+0x30>
 8aa:	b9 2f       	mov	r27, r25
 8ac:	99 27       	eor	r25, r25
 8ae:	b7 51       	subi	r27, 0x17	; 23
 8b0:	b0 f0       	brcs	.+44     	; 0x8de <__fixunssfsi+0x3e>
 8b2:	e1 f0       	breq	.+56     	; 0x8ec <__fixunssfsi+0x4c>
 8b4:	66 0f       	add	r22, r22
 8b6:	77 1f       	adc	r23, r23
 8b8:	88 1f       	adc	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	1a f0       	brmi	.+6      	; 0x8c4 <__fixunssfsi+0x24>
 8be:	ba 95       	dec	r27
 8c0:	c9 f7       	brne	.-14     	; 0x8b4 <__fixunssfsi+0x14>
 8c2:	14 c0       	rjmp	.+40     	; 0x8ec <__fixunssfsi+0x4c>
 8c4:	b1 30       	cpi	r27, 0x01	; 1
 8c6:	91 f0       	breq	.+36     	; 0x8ec <__fixunssfsi+0x4c>
 8c8:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fp_zero>
 8cc:	b1 e0       	ldi	r27, 0x01	; 1
 8ce:	08 95       	ret
 8d0:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__fp_zero>
 8d4:	67 2f       	mov	r22, r23
 8d6:	78 2f       	mov	r23, r24
 8d8:	88 27       	eor	r24, r24
 8da:	b8 5f       	subi	r27, 0xF8	; 248
 8dc:	39 f0       	breq	.+14     	; 0x8ec <__fixunssfsi+0x4c>
 8de:	b9 3f       	cpi	r27, 0xF9	; 249
 8e0:	cc f3       	brlt	.-14     	; 0x8d4 <__fixunssfsi+0x34>
 8e2:	86 95       	lsr	r24
 8e4:	77 95       	ror	r23
 8e6:	67 95       	ror	r22
 8e8:	b3 95       	inc	r27
 8ea:	d9 f7       	brne	.-10     	; 0x8e2 <__fixunssfsi+0x42>
 8ec:	3e f4       	brtc	.+14     	; 0x8fc <__fixunssfsi+0x5c>
 8ee:	90 95       	com	r25
 8f0:	80 95       	com	r24
 8f2:	70 95       	com	r23
 8f4:	61 95       	neg	r22
 8f6:	7f 4f       	sbci	r23, 0xFF	; 255
 8f8:	8f 4f       	sbci	r24, 0xFF	; 255
 8fa:	9f 4f       	sbci	r25, 0xFF	; 255
 8fc:	08 95       	ret

000008fe <__floatunsisf>:
 8fe:	e8 94       	clt
 900:	09 c0       	rjmp	.+18     	; 0x914 <__floatsisf+0x12>

00000902 <__floatsisf>:
 902:	97 fb       	bst	r25, 7
 904:	3e f4       	brtc	.+14     	; 0x914 <__floatsisf+0x12>
 906:	90 95       	com	r25
 908:	80 95       	com	r24
 90a:	70 95       	com	r23
 90c:	61 95       	neg	r22
 90e:	7f 4f       	sbci	r23, 0xFF	; 255
 910:	8f 4f       	sbci	r24, 0xFF	; 255
 912:	9f 4f       	sbci	r25, 0xFF	; 255
 914:	99 23       	and	r25, r25
 916:	a9 f0       	breq	.+42     	; 0x942 <__floatsisf+0x40>
 918:	f9 2f       	mov	r31, r25
 91a:	96 e9       	ldi	r25, 0x96	; 150
 91c:	bb 27       	eor	r27, r27
 91e:	93 95       	inc	r25
 920:	f6 95       	lsr	r31
 922:	87 95       	ror	r24
 924:	77 95       	ror	r23
 926:	67 95       	ror	r22
 928:	b7 95       	ror	r27
 92a:	f1 11       	cpse	r31, r1
 92c:	f8 cf       	rjmp	.-16     	; 0x91e <__floatsisf+0x1c>
 92e:	fa f4       	brpl	.+62     	; 0x96e <__floatsisf+0x6c>
 930:	bb 0f       	add	r27, r27
 932:	11 f4       	brne	.+4      	; 0x938 <__floatsisf+0x36>
 934:	60 ff       	sbrs	r22, 0
 936:	1b c0       	rjmp	.+54     	; 0x96e <__floatsisf+0x6c>
 938:	6f 5f       	subi	r22, 0xFF	; 255
 93a:	7f 4f       	sbci	r23, 0xFF	; 255
 93c:	8f 4f       	sbci	r24, 0xFF	; 255
 93e:	9f 4f       	sbci	r25, 0xFF	; 255
 940:	16 c0       	rjmp	.+44     	; 0x96e <__floatsisf+0x6c>
 942:	88 23       	and	r24, r24
 944:	11 f0       	breq	.+4      	; 0x94a <__floatsisf+0x48>
 946:	96 e9       	ldi	r25, 0x96	; 150
 948:	11 c0       	rjmp	.+34     	; 0x96c <__floatsisf+0x6a>
 94a:	77 23       	and	r23, r23
 94c:	21 f0       	breq	.+8      	; 0x956 <__floatsisf+0x54>
 94e:	9e e8       	ldi	r25, 0x8E	; 142
 950:	87 2f       	mov	r24, r23
 952:	76 2f       	mov	r23, r22
 954:	05 c0       	rjmp	.+10     	; 0x960 <__floatsisf+0x5e>
 956:	66 23       	and	r22, r22
 958:	71 f0       	breq	.+28     	; 0x976 <__floatsisf+0x74>
 95a:	96 e8       	ldi	r25, 0x86	; 134
 95c:	86 2f       	mov	r24, r22
 95e:	70 e0       	ldi	r23, 0x00	; 0
 960:	60 e0       	ldi	r22, 0x00	; 0
 962:	2a f0       	brmi	.+10     	; 0x96e <__floatsisf+0x6c>
 964:	9a 95       	dec	r25
 966:	66 0f       	add	r22, r22
 968:	77 1f       	adc	r23, r23
 96a:	88 1f       	adc	r24, r24
 96c:	da f7       	brpl	.-10     	; 0x964 <__floatsisf+0x62>
 96e:	88 0f       	add	r24, r24
 970:	96 95       	lsr	r25
 972:	87 95       	ror	r24
 974:	97 f9       	bld	r25, 7
 976:	08 95       	ret

00000978 <__fp_inf>:
 978:	97 f9       	bld	r25, 7
 97a:	9f 67       	ori	r25, 0x7F	; 127
 97c:	80 e8       	ldi	r24, 0x80	; 128
 97e:	70 e0       	ldi	r23, 0x00	; 0
 980:	60 e0       	ldi	r22, 0x00	; 0
 982:	08 95       	ret

00000984 <__fp_nan>:
 984:	9f ef       	ldi	r25, 0xFF	; 255
 986:	80 ec       	ldi	r24, 0xC0	; 192
 988:	08 95       	ret

0000098a <__fp_pscA>:
 98a:	00 24       	eor	r0, r0
 98c:	0a 94       	dec	r0
 98e:	16 16       	cp	r1, r22
 990:	17 06       	cpc	r1, r23
 992:	18 06       	cpc	r1, r24
 994:	09 06       	cpc	r0, r25
 996:	08 95       	ret

00000998 <__fp_pscB>:
 998:	00 24       	eor	r0, r0
 99a:	0a 94       	dec	r0
 99c:	12 16       	cp	r1, r18
 99e:	13 06       	cpc	r1, r19
 9a0:	14 06       	cpc	r1, r20
 9a2:	05 06       	cpc	r0, r21
 9a4:	08 95       	ret

000009a6 <__fp_round>:
 9a6:	09 2e       	mov	r0, r25
 9a8:	03 94       	inc	r0
 9aa:	00 0c       	add	r0, r0
 9ac:	11 f4       	brne	.+4      	; 0x9b2 <__fp_round+0xc>
 9ae:	88 23       	and	r24, r24
 9b0:	52 f0       	brmi	.+20     	; 0x9c6 <__fp_round+0x20>
 9b2:	bb 0f       	add	r27, r27
 9b4:	40 f4       	brcc	.+16     	; 0x9c6 <__fp_round+0x20>
 9b6:	bf 2b       	or	r27, r31
 9b8:	11 f4       	brne	.+4      	; 0x9be <__fp_round+0x18>
 9ba:	60 ff       	sbrs	r22, 0
 9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <__fp_round+0x20>
 9be:	6f 5f       	subi	r22, 0xFF	; 255
 9c0:	7f 4f       	sbci	r23, 0xFF	; 255
 9c2:	8f 4f       	sbci	r24, 0xFF	; 255
 9c4:	9f 4f       	sbci	r25, 0xFF	; 255
 9c6:	08 95       	ret

000009c8 <__fp_split3>:
 9c8:	57 fd       	sbrc	r21, 7
 9ca:	90 58       	subi	r25, 0x80	; 128
 9cc:	44 0f       	add	r20, r20
 9ce:	55 1f       	adc	r21, r21
 9d0:	59 f0       	breq	.+22     	; 0x9e8 <__fp_splitA+0x10>
 9d2:	5f 3f       	cpi	r21, 0xFF	; 255
 9d4:	71 f0       	breq	.+28     	; 0x9f2 <__fp_splitA+0x1a>
 9d6:	47 95       	ror	r20

000009d8 <__fp_splitA>:
 9d8:	88 0f       	add	r24, r24
 9da:	97 fb       	bst	r25, 7
 9dc:	99 1f       	adc	r25, r25
 9de:	61 f0       	breq	.+24     	; 0x9f8 <__fp_splitA+0x20>
 9e0:	9f 3f       	cpi	r25, 0xFF	; 255
 9e2:	79 f0       	breq	.+30     	; 0xa02 <__fp_splitA+0x2a>
 9e4:	87 95       	ror	r24
 9e6:	08 95       	ret
 9e8:	12 16       	cp	r1, r18
 9ea:	13 06       	cpc	r1, r19
 9ec:	14 06       	cpc	r1, r20
 9ee:	55 1f       	adc	r21, r21
 9f0:	f2 cf       	rjmp	.-28     	; 0x9d6 <__fp_split3+0xe>
 9f2:	46 95       	lsr	r20
 9f4:	f1 df       	rcall	.-30     	; 0x9d8 <__fp_splitA>
 9f6:	08 c0       	rjmp	.+16     	; 0xa08 <__fp_splitA+0x30>
 9f8:	16 16       	cp	r1, r22
 9fa:	17 06       	cpc	r1, r23
 9fc:	18 06       	cpc	r1, r24
 9fe:	99 1f       	adc	r25, r25
 a00:	f1 cf       	rjmp	.-30     	; 0x9e4 <__fp_splitA+0xc>
 a02:	86 95       	lsr	r24
 a04:	71 05       	cpc	r23, r1
 a06:	61 05       	cpc	r22, r1
 a08:	08 94       	sec
 a0a:	08 95       	ret

00000a0c <__fp_zero>:
 a0c:	e8 94       	clt

00000a0e <__fp_szero>:
 a0e:	bb 27       	eor	r27, r27
 a10:	66 27       	eor	r22, r22
 a12:	77 27       	eor	r23, r23
 a14:	cb 01       	movw	r24, r22
 a16:	97 f9       	bld	r25, 7
 a18:	08 95       	ret

00000a1a <__mulsf3>:
 a1a:	0e 94 20 05 	call	0xa40	; 0xa40 <__mulsf3x>
 a1e:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_round>
 a22:	0e 94 c5 04 	call	0x98a	; 0x98a <__fp_pscA>
 a26:	38 f0       	brcs	.+14     	; 0xa36 <__mulsf3+0x1c>
 a28:	0e 94 cc 04 	call	0x998	; 0x998 <__fp_pscB>
 a2c:	20 f0       	brcs	.+8      	; 0xa36 <__mulsf3+0x1c>
 a2e:	95 23       	and	r25, r21
 a30:	11 f0       	breq	.+4      	; 0xa36 <__mulsf3+0x1c>
 a32:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_inf>
 a36:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_nan>
 a3a:	11 24       	eor	r1, r1
 a3c:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_szero>

00000a40 <__mulsf3x>:
 a40:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__fp_split3>
 a44:	70 f3       	brcs	.-36     	; 0xa22 <__mulsf3+0x8>

00000a46 <__mulsf3_pse>:
 a46:	95 9f       	mul	r25, r21
 a48:	c1 f3       	breq	.-16     	; 0xa3a <__mulsf3+0x20>
 a4a:	95 0f       	add	r25, r21
 a4c:	50 e0       	ldi	r21, 0x00	; 0
 a4e:	55 1f       	adc	r21, r21
 a50:	62 9f       	mul	r22, r18
 a52:	f0 01       	movw	r30, r0
 a54:	72 9f       	mul	r23, r18
 a56:	bb 27       	eor	r27, r27
 a58:	f0 0d       	add	r31, r0
 a5a:	b1 1d       	adc	r27, r1
 a5c:	63 9f       	mul	r22, r19
 a5e:	aa 27       	eor	r26, r26
 a60:	f0 0d       	add	r31, r0
 a62:	b1 1d       	adc	r27, r1
 a64:	aa 1f       	adc	r26, r26
 a66:	64 9f       	mul	r22, r20
 a68:	66 27       	eor	r22, r22
 a6a:	b0 0d       	add	r27, r0
 a6c:	a1 1d       	adc	r26, r1
 a6e:	66 1f       	adc	r22, r22
 a70:	82 9f       	mul	r24, r18
 a72:	22 27       	eor	r18, r18
 a74:	b0 0d       	add	r27, r0
 a76:	a1 1d       	adc	r26, r1
 a78:	62 1f       	adc	r22, r18
 a7a:	73 9f       	mul	r23, r19
 a7c:	b0 0d       	add	r27, r0
 a7e:	a1 1d       	adc	r26, r1
 a80:	62 1f       	adc	r22, r18
 a82:	83 9f       	mul	r24, r19
 a84:	a0 0d       	add	r26, r0
 a86:	61 1d       	adc	r22, r1
 a88:	22 1f       	adc	r18, r18
 a8a:	74 9f       	mul	r23, r20
 a8c:	33 27       	eor	r19, r19
 a8e:	a0 0d       	add	r26, r0
 a90:	61 1d       	adc	r22, r1
 a92:	23 1f       	adc	r18, r19
 a94:	84 9f       	mul	r24, r20
 a96:	60 0d       	add	r22, r0
 a98:	21 1d       	adc	r18, r1
 a9a:	82 2f       	mov	r24, r18
 a9c:	76 2f       	mov	r23, r22
 a9e:	6a 2f       	mov	r22, r26
 aa0:	11 24       	eor	r1, r1
 aa2:	9f 57       	subi	r25, 0x7F	; 127
 aa4:	50 40       	sbci	r21, 0x00	; 0
 aa6:	9a f0       	brmi	.+38     	; 0xace <__mulsf3_pse+0x88>
 aa8:	f1 f0       	breq	.+60     	; 0xae6 <__mulsf3_pse+0xa0>
 aaa:	88 23       	and	r24, r24
 aac:	4a f0       	brmi	.+18     	; 0xac0 <__mulsf3_pse+0x7a>
 aae:	ee 0f       	add	r30, r30
 ab0:	ff 1f       	adc	r31, r31
 ab2:	bb 1f       	adc	r27, r27
 ab4:	66 1f       	adc	r22, r22
 ab6:	77 1f       	adc	r23, r23
 ab8:	88 1f       	adc	r24, r24
 aba:	91 50       	subi	r25, 0x01	; 1
 abc:	50 40       	sbci	r21, 0x00	; 0
 abe:	a9 f7       	brne	.-22     	; 0xaaa <__mulsf3_pse+0x64>
 ac0:	9e 3f       	cpi	r25, 0xFE	; 254
 ac2:	51 05       	cpc	r21, r1
 ac4:	80 f0       	brcs	.+32     	; 0xae6 <__mulsf3_pse+0xa0>
 ac6:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_inf>
 aca:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_szero>
 ace:	5f 3f       	cpi	r21, 0xFF	; 255
 ad0:	e4 f3       	brlt	.-8      	; 0xaca <__mulsf3_pse+0x84>
 ad2:	98 3e       	cpi	r25, 0xE8	; 232
 ad4:	d4 f3       	brlt	.-12     	; 0xaca <__mulsf3_pse+0x84>
 ad6:	86 95       	lsr	r24
 ad8:	77 95       	ror	r23
 ada:	67 95       	ror	r22
 adc:	b7 95       	ror	r27
 ade:	f7 95       	ror	r31
 ae0:	e7 95       	ror	r30
 ae2:	9f 5f       	subi	r25, 0xFF	; 255
 ae4:	c1 f7       	brne	.-16     	; 0xad6 <__mulsf3_pse+0x90>
 ae6:	fe 2b       	or	r31, r30
 ae8:	88 0f       	add	r24, r24
 aea:	91 1d       	adc	r25, r1
 aec:	96 95       	lsr	r25
 aee:	87 95       	ror	r24
 af0:	97 f9       	bld	r25, 7
 af2:	08 95       	ret

00000af4 <__umulhisi3>:
 af4:	a2 9f       	mul	r26, r18
 af6:	b0 01       	movw	r22, r0
 af8:	b3 9f       	mul	r27, r19
 afa:	c0 01       	movw	r24, r0
 afc:	a3 9f       	mul	r26, r19
 afe:	70 0d       	add	r23, r0
 b00:	81 1d       	adc	r24, r1
 b02:	11 24       	eor	r1, r1
 b04:	91 1d       	adc	r25, r1
 b06:	b2 9f       	mul	r27, r18
 b08:	70 0d       	add	r23, r0
 b0a:	81 1d       	adc	r24, r1
 b0c:	11 24       	eor	r1, r1
 b0e:	91 1d       	adc	r25, r1
 b10:	08 95       	ret

00000b12 <_exit>:
 b12:	f8 94       	cli

00000b14 <__stop_program>:
 b14:	ff cf       	rjmp	.-2      	; 0xb14 <__stop_program>
