
AAquad_c++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800100  00800100  00000718  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ad7  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d79  00000000  00000000  00002357  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000801  00000000  00000000  000030d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  000038d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000849  00000000  00000000  00003b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e1  00000000  00000000  00004381  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004962  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_1>
   8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_2>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_4>
  14:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__vector_5>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	ac 31       	cpi	r26, 0x1C	; 28
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:

	volatile uint16_t temp0;
	
	int cnt = 0;

int main(void){
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0x6>
  e2:	1f 92       	push	r1
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62

	initialize::timers();
  e8:	0e 94 14 02 	call	0x428	; 0x428 <_ZN10initialize6timersEv>
	initialize::interrupts();
  ec:	0e 94 ef 01 	call	0x3de	; 0x3de <_ZN10initialize10interruptsEv>
	
*/



	I2C_328pb pwm_chip_I2c(0x02);
  f0:	62 e0       	ldi	r22, 0x02	; 2
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	ce 01       	movw	r24, r28
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN9I2C_328pbC1Ei>
	pwm_chip pwm(pwm_chip_I2c, 10);
  fc:	4a e0       	ldi	r20, 0x0A	; 10
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	ce 01       	movw	r24, r28
 102:	02 96       	adiw	r24, 0x02	; 2
 104:	0e 94 1a 02 	call	0x434	; 0x434 <_ZN8pwm_chipC1E9I2C_328pbh>

	sei();
 108:	78 94       	sei
	*/


		for (int i = 0; i <4; i++){
		
			motors[i] = cnt;
 10a:	04 e1       	ldi	r16, 0x14	; 20
 10c:	11 e0       	ldi	r17, 0x01	; 1
 10e:	e0 2e       	mov	r14, r16
 110:	f1 2e       	mov	r15, r17
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 11a:	f8 01       	movw	r30, r16
 11c:	91 83       	std	Z+1, r25	; 0x01
 11e:	80 83       	st	Z, r24
 120:	93 83       	std	Z+3, r25	; 0x03
 122:	82 83       	std	Z+2, r24	; 0x02
 124:	95 83       	std	Z+5, r25	; 0x05
 126:	84 83       	std	Z+4, r24	; 0x04
 128:	97 83       	std	Z+7, r25	; 0x07
 12a:	86 83       	std	Z+6, r24	; 0x06
		}
	
		pwm.pass(pwm_chip_I2c, motors);	
 12c:	4e 2d       	mov	r20, r14
 12e:	5f 2d       	mov	r21, r15
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	ce 01       	movw	r24, r28
 134:	02 96       	adiw	r24, 0x02	; 2
 136:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_ZN8pwm_chip4passE9I2C_328pbPi>
		
		cnt ++;
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		if (cnt == 100){
 14c:	84 36       	cpi	r24, 0x64	; 100
 14e:	91 05       	cpc	r25, r1
 150:	01 f7       	brne	.-64     	; 0x112 <main+0x36>
			
			cnt = 0;
 152:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 156:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 15a:	db cf       	rjmp	.-74     	; 0x112 <main+0x36>

0000015c <__vector_1>:

}



ISR(INT0_vect){
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	2f 93       	push	r18
 168:	3f 93       	push	r19
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
	
		uint16_t temp = TCNT1;
 172:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 176:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

		if ( temp < temp_timer_aileron){	// timer overflow
 17a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <temp_timer_aileron>
 17e:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <temp_timer_aileron+0x1>
 182:	82 17       	cp	r24, r18
 184:	93 07       	cpc	r25, r19
 186:	70 f4       	brcc	.+28     	; 0x1a4 <__vector_1+0x48>

			requested_aileron_pos = (0xffff - temp_timer_aileron) + temp ;
 188:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <temp_timer_aileron>
 18c:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <temp_timer_aileron+0x1>
 190:	9c 01       	movw	r18, r24
 192:	21 50       	subi	r18, 0x01	; 1
 194:	31 09       	sbc	r19, r1
 196:	24 1b       	sub	r18, r20
 198:	35 0b       	sbc	r19, r21
 19a:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <requested_aileron_pos+0x1>
 19e:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <requested_aileron_pos>
 1a2:	0b c0       	rjmp	.+22     	; 0x1ba <__vector_1+0x5e>
		}

		else {	// regular case
	
			requested_aileron_pos = temp - temp_timer_aileron;
 1a4:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <temp_timer_aileron>
 1a8:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <temp_timer_aileron+0x1>
 1ac:	ac 01       	movw	r20, r24
 1ae:	42 1b       	sub	r20, r18
 1b0:	53 0b       	sbc	r21, r19
 1b2:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <requested_aileron_pos+0x1>
 1b6:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp;
 1ba:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <temp_timer_aileron+0x1>
 1be:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <temp_timer_aileron>
		
		
		// here, there is a chance that the value stored in requested aileron is actually (0xffff - actual requested aileron) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
	
}
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_2>:

ISR(INT1_vect){
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
	
		temp0 = TCNT1;
 1ea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1f2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <temp0+0x1>
 1f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp0>
		

		if ( temp0 < temp_timer_throttle){	// timer overflow
 1fa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp0>
 1fe:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp0+0x1>
 202:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <temp_timer_throttle>
 206:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <temp_timer_throttle+0x1>
 20a:	28 17       	cp	r18, r24
 20c:	39 07       	cpc	r19, r25
 20e:	80 f4       	brcc	.+32     	; 0x230 <__vector_2+0x58>

			requested_throttle_pos = (0xffff - temp_timer_throttle) + temp0 ;
 210:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp0>
 214:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp0+0x1>
 218:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <temp_timer_throttle>
 21c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <temp_timer_throttle+0x1>
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	82 1b       	sub	r24, r18
 224:	93 0b       	sbc	r25, r19
 226:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <requested_throttle_pos+0x1>
 22a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <requested_throttle_pos>
 22e:	0e c0       	rjmp	.+28     	; 0x24c <__vector_2+0x74>
		}

		else {	// regular case
	
			requested_throttle_pos = temp0 - temp_timer_throttle;
 230:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp0>
 234:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp0+0x1>
 238:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <temp_timer_throttle>
 23c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <temp_timer_throttle+0x1>
 240:	82 1b       	sub	r24, r18
 242:	93 0b       	sbc	r25, r19
 244:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <requested_throttle_pos+0x1>
 248:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <requested_throttle_pos>
			
		}
	
		
		temp_timer_throttle = temp0;
 24c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp0>
 250:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp0+0x1>
 254:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <temp_timer_throttle+0x1>
 258:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_timer_throttle>
		
		
		// here, there is a chance that the value stored in requested throttle is actually (0xffff - actual requested throttle) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
}
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_4>:




ISR(PCINT1_vect){
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25

	uint16_t temp = TCNT1;
 284:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 288:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

	if ( temp < temp_timer_rudder){	// timer overflow
 28c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temp_timer_rudder>
 290:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temp_timer_rudder+0x1>
 294:	82 17       	cp	r24, r18
 296:	93 07       	cpc	r25, r19
 298:	70 f4       	brcc	.+28     	; 0x2b6 <__vector_4+0x48>

		requested_rudder_pos = (0xffff - temp_timer_rudder) + temp ;
 29a:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <temp_timer_rudder>
 29e:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <temp_timer_rudder+0x1>
 2a2:	9c 01       	movw	r18, r24
 2a4:	21 50       	subi	r18, 0x01	; 1
 2a6:	31 09       	sbc	r19, r1
 2a8:	24 1b       	sub	r18, r20
 2aa:	35 0b       	sbc	r19, r21
 2ac:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <requested_rudder_pos+0x1>
 2b0:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <requested_rudder_pos>
 2b4:	0b c0       	rjmp	.+22     	; 0x2cc <__vector_4+0x5e>
	}

	else {	// regular case

		requested_rudder_pos = temp - temp_timer_rudder;
 2b6:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temp_timer_rudder>
 2ba:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temp_timer_rudder+0x1>
 2be:	ac 01       	movw	r20, r24
 2c0:	42 1b       	sub	r20, r18
 2c2:	53 0b       	sbc	r21, r19
 2c4:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <requested_rudder_pos+0x1>
 2c8:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <requested_rudder_pos>
		
	}

	
	temp_timer_rudder = temp;
 2cc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <temp_timer_rudder+0x1>
 2d0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <temp_timer_rudder>
	
	

}
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	5f 91       	pop	r21
 2da:	4f 91       	pop	r20
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <__vector_5>:

ISR(PCINT2_vect){
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	2f 93       	push	r18
 2f6:	3f 93       	push	r19
 2f8:	4f 93       	push	r20
 2fa:	5f 93       	push	r21
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25

	uint16_t temp = TCNT1;
 300:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 304:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	

	if ( temp < temp_timer_elevator){	// timer overflow
 308:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <temp_timer_elevator>
 30c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <temp_timer_elevator+0x1>
 310:	82 17       	cp	r24, r18
 312:	93 07       	cpc	r25, r19
 314:	70 f4       	brcc	.+28     	; 0x332 <__vector_5+0x48>

		requested_elevator_pos = (0xffff - temp_timer_elevator) + temp ;
 316:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <temp_timer_elevator>
 31a:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <temp_timer_elevator+0x1>
 31e:	9c 01       	movw	r18, r24
 320:	21 50       	subi	r18, 0x01	; 1
 322:	31 09       	sbc	r19, r1
 324:	24 1b       	sub	r18, r20
 326:	35 0b       	sbc	r19, r21
 328:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <requested_elevator_pos+0x1>
 32c:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <requested_elevator_pos>
 330:	0b c0       	rjmp	.+22     	; 0x348 <__vector_5+0x5e>
	}

	else {	// regular case

		requested_elevator_pos = temp - temp_timer_elevator;
 332:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <temp_timer_elevator>
 336:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <temp_timer_elevator+0x1>
 33a:	ac 01       	movw	r20, r24
 33c:	42 1b       	sub	r20, r18
 33e:	53 0b       	sbc	r21, r19
 340:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <requested_elevator_pos+0x1>
 344:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <requested_elevator_pos>
		
	}

	
	temp_timer_elevator = temp;
 348:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <temp_timer_elevator+0x1>
 34c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <temp_timer_elevator>
	
	

}
 350:	9f 91       	pop	r25
 352:	8f 91       	pop	r24
 354:	5f 91       	pop	r21
 356:	4f 91       	pop	r20
 358:	3f 91       	pop	r19
 35a:	2f 91       	pop	r18
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <_ZN9I2C_328pbC1Ei>:
	TWCR0 = ( (1 << TWEN) | (1 << TWINT) );

	while (! (TWCR0 & (1 << TWINT)) );


}
 366:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 36a:	08 95       	ret

0000036c <_ZN9I2C_328pb5startEv>:
 36c:	84 ea       	ldi	r24, 0xA4	; 164
 36e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 372:	ec eb       	ldi	r30, 0xBC	; 188
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	88 23       	and	r24, r24
 37a:	ec f7       	brge	.-6      	; 0x376 <_ZN9I2C_328pb5startEv+0xa>
 37c:	08 95       	ret

0000037e <_ZN9I2C_328pb12repeat_startEv>:
 37e:	84 ea       	ldi	r24, 0xA4	; 164
 380:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 384:	ec eb       	ldi	r30, 0xBC	; 188
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	88 23       	and	r24, r24
 38c:	ec f7       	brge	.-6      	; 0x388 <_ZN9I2C_328pb12repeat_startEv+0xa>
 38e:	08 95       	ret

00000390 <_ZN9I2C_328pb10send_slaveEi>:
 390:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 394:	84 e8       	ldi	r24, 0x84	; 132
 396:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 39a:	ec eb       	ldi	r30, 0xBC	; 188
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	88 23       	and	r24, r24
 3a2:	ec f7       	brge	.-6      	; 0x39e <_ZN9I2C_328pb10send_slaveEi+0xe>
 3a4:	08 95       	ret

000003a6 <_ZN9I2C_328pb8send_regEi>:
 3a6:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 3aa:	84 e8       	ldi	r24, 0x84	; 132
 3ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3b0:	ec eb       	ldi	r30, 0xBC	; 188
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	88 23       	and	r24, r24
 3b8:	ec f7       	brge	.-6      	; 0x3b4 <_ZN9I2C_328pb8send_regEi+0xe>
 3ba:	08 95       	ret

000003bc <_ZN9I2C_328pb4sendEi>:
 3bc:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 3c0:	84 e8       	ldi	r24, 0x84	; 132
 3c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3c6:	ec eb       	ldi	r30, 0xBC	; 188
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	88 23       	and	r24, r24
 3ce:	ec f7       	brge	.-6      	; 0x3ca <_ZN9I2C_328pb4sendEi+0xe>
 3d0:	08 95       	ret

000003d2 <_ZN9I2C_328pb4stopEv>:

void I2C_328pb::stop(){


	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) ); 
 3d2:	ec eb       	ldi	r30, 0xBC	; 188
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	84 69       	ori	r24, 0x94	; 148
 3da:	80 83       	st	Z, r24
 3dc:	08 95       	ret

000003de <_ZN10initialize10interruptsEv>:


void initialize::interrupts(){

	// external int 0
	EIMSK |= (1 << INT0); // enable the int0 interrupt												
 3de:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC00);	// will fire at any logical change
 3e0:	e9 e6       	ldi	r30, 0x69	; 105
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	81 60       	ori	r24, 0x01	; 1
 3e8:	80 83       	st	Z, r24

	// external int 1
	EIMSK |= (1 << INT1); // enable the int0 interrupt
 3ea:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= (1 << ISC10);	// will fire at any logical change
 3ec:	80 81       	ld	r24, Z
 3ee:	84 60       	ori	r24, 0x04	; 4
 3f0:	80 83       	st	Z, r24

	// pcint 0 (for pin C3)
	PCICR |= (1 << PCIE1);
 3f2:	e8 e6       	ldi	r30, 0x68	; 104
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	82 60       	ori	r24, 0x02	; 2
 3fa:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);
 3fc:	ac e6       	ldi	r26, 0x6C	; 108
 3fe:	b0 e0       	ldi	r27, 0x00	; 0
 400:	8c 91       	ld	r24, X
 402:	88 60       	ori	r24, 0x08	; 8
 404:	8c 93       	st	X, r24

	//pcint 1 (for pin B1)
	PCICR |= (1 << PCIE2);
 406:	80 81       	ld	r24, Z
 408:	84 60       	ori	r24, 0x04	; 4
 40a:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT17);
 40c:	ed e6       	ldi	r30, 0x6D	; 109
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	82 60       	ori	r24, 0x02	; 2
 414:	80 83       	st	Z, r24
	
	// setting the pullup resistors on everything (will not be necessary once all wires are connected

	DDRD &= ~(1 << 2);
 416:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << 2);
 418:	5a 9a       	sbi	0x0b, 2	; 11
	
	DDRC &= ~(1 << 3);
 41a:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1 << 3);
 41c:	43 9a       	sbi	0x08, 3	; 8
	
	DDRD &= ~(1 << 3);
 41e:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1 << 3);
 420:	5b 9a       	sbi	0x0b, 3	; 11
	
	DDRD &= ~(1 << 4);
 422:	54 98       	cbi	0x0a, 4	; 10
	PORTD |= (1 << 4);
 424:	5c 9a       	sbi	0x0b, 4	; 11
 426:	08 95       	ret

00000428 <_ZN10initialize6timersEv>:
}

void initialize::timers(){

	// by default the timer is set to normal mode
	TCCR1B |= ( (1 << CS10));	// timer will run without prescaler and willoverrun 15 times/second
 428:	e1 e8       	ldi	r30, 0x81	; 129
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	81 60       	ori	r24, 0x01	; 1
 430:	80 83       	st	Z, r24
 432:	08 95       	ret

00000434 <_ZN8pwm_chipC1E9I2C_328pbh>:
#include "pwm_chip.h"



pwm_chip::pwm_chip(I2C_328pb i2c, uint8_t prescaler){
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	1f 92       	push	r1
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
 440:	69 83       	std	Y+1, r22	; 0x01
 442:	14 2f       	mov	r17, r20
	
	
	DDRB |= (1 << 2);	// set OE to 0;
 444:	22 9a       	sbi	0x04, 2	; 4
	
	PORTC |= ( (1 << 4) | (1 << 5) );
 446:	88 b1       	in	r24, 0x08	; 8
 448:	80 63       	ori	r24, 0x30	; 48
 44a:	88 b9       	out	0x08, r24	; 8
	//This function sets the auto increment, the prescaler and any other necessary feature required for the pwm chip to run 

	//TWBR0 = (1 << 1); // I'll run the cpu at 1 MHz, this divides the value by 2 for 50 KHZ


	i2c.start();
 44c:	ce 01       	movw	r24, r28
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
 454:	6e e9       	ldi	r22, 0x9E	; 158
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	ce 01       	movw	r24, r28
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x0); // mode register 1
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	ce 01       	movw	r24, r28
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0x21); //clock on, autoincrement enable
 46c:	61 e2       	ldi	r22, 0x21	; 33
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	ce 01       	movw	r24, r28
 472:	01 96       	adiw	r24, 0x01	; 1
 474:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.repeat_start();
 478:	ce 01       	movw	r24, r28
 47a:	01 96       	adiw	r24, 0x01	; 1
 47c:	0e 94 bf 01 	call	0x37e	; 0x37e <_ZN9I2C_328pb12repeat_startEv>
	i2c.send_slave(0x9E);
 480:	6e e9       	ldi	r22, 0x9E	; 158
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	ce 01       	movw	r24, r28
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0xFE);	//pre scale register
 48c:	6e ef       	ldi	r22, 0xFE	; 254
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	ce 01       	movw	r24, r28
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN9I2C_328pb8send_regEi>
	i2c.send(prescaler);	//prescaler
 498:	61 2f       	mov	r22, r17
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	ce 01       	movw	r24, r28
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.stop();
 4a4:	ce 01       	movw	r24, r28
 4a6:	01 96       	adiw	r24, 0x01	; 1
 4a8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN9I2C_328pb4stopEv>

}
 4ac:	0f 90       	pop	r0
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	08 95       	ret

000004b6 <_ZN8pwm_chip13encode_motorsEhPiPh>:

}

void pwm_chip::encode_motors(uint8_t motor, int* motors, uint8_t* instruction){
	
	uint16_t temp = motors[motor]*2;	// the actualslope of this curve is 2.05
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	66 0f       	add	r22, r22
 4ba:	77 1f       	adc	r23, r23
 4bc:	fa 01       	movw	r30, r20
 4be:	e6 0f       	add	r30, r22
 4c0:	f7 1f       	adc	r31, r23
 4c2:	80 81       	ld	r24, Z
 4c4:	91 81       	ldd	r25, Z+1	; 0x01
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
	
	temp += 205;	// 205 is the value corresponding to 0 for the esc
 4ca:	83 53       	subi	r24, 0x33	; 51
 4cc:	9f 4f       	sbci	r25, 0xFF	; 255
	
	instruction[0] = ( temp & 0xff );	// conserves only the low byte
 4ce:	f9 01       	movw	r30, r18
 4d0:	80 83       	st	Z, r24
	
	instruction[1] = ( temp >> 8);	// conserves only the high half-byte
 4d2:	91 83       	std	Z+1, r25	; 0x01
 4d4:	08 95       	ret

000004d6 <_ZN8pwm_chip4passE9I2C_328pbPi>:
}




void pwm_chip::pass(I2C_328pb i2c, int* motors){
 4d6:	ef 92       	push	r14
 4d8:	ff 92       	push	r15
 4da:	0f 93       	push	r16
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	00 d0       	rcall	.+0      	; 0x4e4 <_ZN8pwm_chip4passE9I2C_328pbPi+0xe>
 4e4:	1f 92       	push	r1
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
 4ea:	8c 01       	movw	r16, r24
 4ec:	6b 83       	std	Y+3, r22	; 0x03
 4ee:	7a 01       	movw	r14, r20

// this function will communicate over I2C to the pwmchip for final controll of the motors

	uint8_t instruction[2];
	
	encode_motors(0, motors, instruction);
 4f0:	9e 01       	movw	r18, r28
 4f2:	2f 5f       	subi	r18, 0xFF	; 255
 4f4:	3f 4f       	sbci	r19, 0xFF	; 255
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN8pwm_chip13encode_motorsEhPiPh>

	i2c.start();
 4fc:	ce 01       	movw	r24, r28
 4fe:	03 96       	adiw	r24, 0x03	; 3
 500:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
 504:	6e e9       	ldi	r22, 0x9E	; 158
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	ce 01       	movw	r24, r28
 50a:	03 96       	adiw	r24, 0x03	; 3
 50c:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x06);		//LED0_ON_L
 510:	66 e0       	ldi	r22, 0x06	; 6
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	ce 01       	movw	r24, r28
 516:	03 96       	adiw	r24, 0x03	; 3
 518:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	ce 01       	movw	r24, r28
 522:	03 96       	adiw	r24, 0x03	; 3
 524:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	ce 01       	movw	r24, r28
 52e:	03 96       	adiw	r24, 0x03	; 3
 530:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
 534:	69 81       	ldd	r22, Y+1	; 0x01
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	ce 01       	movw	r24, r28
 53a:	03 96       	adiw	r24, 0x03	; 3
 53c:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
 540:	6a 81       	ldd	r22, Y+2	; 0x02
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	ce 01       	movw	r24, r28
 546:	03 96       	adiw	r24, 0x03	; 3
 548:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.stop();
 54c:	ce 01       	movw	r24, r28
 54e:	03 96       	adiw	r24, 0x03	; 3
 550:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN9I2C_328pb4stopEv>


	encode_motors(1, motors, instruction);
 554:	9e 01       	movw	r18, r28
 556:	2f 5f       	subi	r18, 0xFF	; 255
 558:	3f 4f       	sbci	r19, 0xFF	; 255
 55a:	a7 01       	movw	r20, r14
 55c:	61 e0       	ldi	r22, 0x01	; 1
 55e:	c8 01       	movw	r24, r16
 560:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN8pwm_chip13encode_motorsEhPiPh>
	

	i2c.start();
 564:	ce 01       	movw	r24, r28
 566:	03 96       	adiw	r24, 0x03	; 3
 568:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
 56c:	6e e9       	ldi	r22, 0x9E	; 158
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	ce 01       	movw	r24, r28
 572:	03 96       	adiw	r24, 0x03	; 3
 574:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x16);		//LED4_ON_L
 578:	66 e1       	ldi	r22, 0x16	; 22
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	ce 01       	movw	r24, r28
 57e:	03 96       	adiw	r24, 0x03	; 3
 580:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	ce 01       	movw	r24, r28
 58a:	03 96       	adiw	r24, 0x03	; 3
 58c:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	ce 01       	movw	r24, r28
 596:	03 96       	adiw	r24, 0x03	; 3
 598:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
 59c:	69 81       	ldd	r22, Y+1	; 0x01
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	ce 01       	movw	r24, r28
 5a2:	03 96       	adiw	r24, 0x03	; 3
 5a4:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
 5a8:	6a 81       	ldd	r22, Y+2	; 0x02
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	ce 01       	movw	r24, r28
 5ae:	03 96       	adiw	r24, 0x03	; 3
 5b0:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.stop();
 5b4:	ce 01       	movw	r24, r28
 5b6:	03 96       	adiw	r24, 0x03	; 3
 5b8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN9I2C_328pb4stopEv>

	
	encode_motors(2, motors, instruction);
 5bc:	9e 01       	movw	r18, r28
 5be:	2f 5f       	subi	r18, 0xFF	; 255
 5c0:	3f 4f       	sbci	r19, 0xFF	; 255
 5c2:	a7 01       	movw	r20, r14
 5c4:	62 e0       	ldi	r22, 0x02	; 2
 5c6:	c8 01       	movw	r24, r16
 5c8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN8pwm_chip13encode_motorsEhPiPh>



	i2c.start();
 5cc:	ce 01       	movw	r24, r28
 5ce:	03 96       	adiw	r24, 0x03	; 3
 5d0:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
 5d4:	6e e9       	ldi	r22, 0x9E	; 158
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	ce 01       	movw	r24, r28
 5da:	03 96       	adiw	r24, 0x03	; 3
 5dc:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x2E);		//LED8_ON_L
 5e0:	6e e2       	ldi	r22, 0x2E	; 46
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	ce 01       	movw	r24, r28
 5e6:	03 96       	adiw	r24, 0x03	; 3
 5e8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	ce 01       	movw	r24, r28
 5f2:	03 96       	adiw	r24, 0x03	; 3
 5f4:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	70 e0       	ldi	r23, 0x00	; 0
 5fc:	ce 01       	movw	r24, r28
 5fe:	03 96       	adiw	r24, 0x03	; 3
 600:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
 604:	69 81       	ldd	r22, Y+1	; 0x01
 606:	70 e0       	ldi	r23, 0x00	; 0
 608:	ce 01       	movw	r24, r28
 60a:	03 96       	adiw	r24, 0x03	; 3
 60c:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
 610:	6a 81       	ldd	r22, Y+2	; 0x02
 612:	70 e0       	ldi	r23, 0x00	; 0
 614:	ce 01       	movw	r24, r28
 616:	03 96       	adiw	r24, 0x03	; 3
 618:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.stop();
 61c:	ce 01       	movw	r24, r28
 61e:	03 96       	adiw	r24, 0x03	; 3
 620:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN9I2C_328pb4stopEv>



	encode_motors(3, motors, instruction);
 624:	9e 01       	movw	r18, r28
 626:	2f 5f       	subi	r18, 0xFF	; 255
 628:	3f 4f       	sbci	r19, 0xFF	; 255
 62a:	a7 01       	movw	r20, r14
 62c:	63 e0       	ldi	r22, 0x03	; 3
 62e:	c8 01       	movw	r24, r16
 630:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN8pwm_chip13encode_motorsEhPiPh>


	i2c.start();
 634:	ce 01       	movw	r24, r28
 636:	03 96       	adiw	r24, 0x03	; 3
 638:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN9I2C_328pb5startEv>
	i2c.send_slave(0x9E);
 63c:	6e e9       	ldi	r22, 0x9E	; 158
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	ce 01       	movw	r24, r28
 642:	03 96       	adiw	r24, 0x03	; 3
 644:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN9I2C_328pb10send_slaveEi>
	i2c.send_reg(0x42);		//LED8_ON_L
 648:	62 e4       	ldi	r22, 0x42	; 66
 64a:	70 e0       	ldi	r23, 0x00	; 0
 64c:	ce 01       	movw	r24, r28
 64e:	03 96       	adiw	r24, 0x03	; 3
 650:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN9I2C_328pb8send_regEi>
	i2c.send(0);
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	ce 01       	movw	r24, r28
 65a:	03 96       	adiw	r24, 0x03	; 3
 65c:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.send(0);
 660:	60 e0       	ldi	r22, 0x00	; 0
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	ce 01       	movw	r24, r28
 666:	03 96       	adiw	r24, 0x03	; 3
 668:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[0]); //ON_L, ON_H, OFF_L, OFF_H
 66c:	69 81       	ldd	r22, Y+1	; 0x01
 66e:	70 e0       	ldi	r23, 0x00	; 0
 670:	ce 01       	movw	r24, r28
 672:	03 96       	adiw	r24, 0x03	; 3
 674:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.send(instruction[1]);
 678:	6a 81       	ldd	r22, Y+2	; 0x02
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	ce 01       	movw	r24, r28
 67e:	03 96       	adiw	r24, 0x03	; 3
 680:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9I2C_328pb4sendEi>
	i2c.stop();
 684:	ce 01       	movw	r24, r28
 686:	03 96       	adiw	r24, 0x03	; 3
 688:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN9I2C_328pb4stopEv>


}
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	ff 90       	pop	r15
 69c:	ef 90       	pop	r14
 69e:	08 95       	ret

000006a0 <_exit>:
 6a0:	f8 94       	cli

000006a2 <__stop_program>:
 6a2:	ff cf       	rjmp	.-2      	; 0x6a2 <__stop_program>
