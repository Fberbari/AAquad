
AAquad_c++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  000003c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba5  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a6  00000000  00000000  0000103d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040d  00000000  00000000  000019e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fb  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024f  00000000  00000000  0000251b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000276a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_1>
   8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_2>
   c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_3>
  10:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_4>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 31       	cpi	r26, 0x12	; 18
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 a4 01 	jmp	0x348	; 0x348 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:
	volatile uint16_t temp0;
	

int main(void){

	initialize::timers();
  dc:	0e 94 9e 01 	call	0x33c	; 0x33c <_ZN10initialize6timersEv>
	initialize::interrupts();
  e0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN10initialize10interruptsEv>
*/
/*
	I2C_328pb pwm_chip_I2c(0xAA);
	pwm_chip pwm(pwm_chip_I2c, 10);
*/
	sei();
  e4:	78 94       	sei
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0xa>

000000e8 <__vector_2>:

}



ISR(INT1_vect){
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	4f 93       	push	r20
  f8:	5f 93       	push	r21
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
	
		uint16_t temp = TCNT1;
  fe:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 102:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

		if ( temp < temp_timer_aileron){	// timer overflow
 106:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <temp_timer_aileron>
 10a:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
 10e:	82 17       	cp	r24, r18
 110:	93 07       	cpc	r25, r19
 112:	70 f4       	brcc	.+28     	; 0x130 <__vector_2+0x48>

			requested_aileron_pos = (0xffff - temp_timer_aileron) + temp ;
 114:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <temp_timer_aileron>
 118:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
 11c:	9c 01       	movw	r18, r24
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	31 09       	sbc	r19, r1
 122:	24 1b       	sub	r18, r20
 124:	35 0b       	sbc	r19, r21
 126:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <requested_aileron_pos+0x1>
 12a:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <requested_aileron_pos>
 12e:	0b c0       	rjmp	.+22     	; 0x146 <__vector_2+0x5e>
		}

		else {	// regular case
	
			requested_aileron_pos = temp - temp_timer_aileron;
 130:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <temp_timer_aileron>
 134:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <temp_timer_aileron+0x1>
 138:	ac 01       	movw	r20, r24
 13a:	42 1b       	sub	r20, r18
 13c:	53 0b       	sbc	r21, r19
 13e:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <requested_aileron_pos+0x1>
 142:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp;
 146:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <temp_timer_aileron+0x1>
 14a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <temp_timer_aileron>
		
		
		// here, there is a chance that the value stored in requested aileron is actually (0xffff - actual requested aileron) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
	
}
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	5f 91       	pop	r21
 154:	4f 91       	pop	r20
 156:	3f 91       	pop	r19
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_1>:

ISR(INT0_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
	
		temp0 = TCNT1;
 176:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 17a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 17e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 182:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		

		if ( temp0 < temp_timer_throttle){	// timer overflow
 186:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 18a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 18e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp_timer_throttle>
 192:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
 196:	28 17       	cp	r18, r24
 198:	39 07       	cpc	r19, r25
 19a:	80 f4       	brcc	.+32     	; 0x1bc <__vector_1+0x58>

			requested_throttle_pos = (0xffff - temp_timer_throttle) + temp0 ;
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1a4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_throttle>
 1a8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	82 1b       	sub	r24, r18
 1b0:	93 0b       	sbc	r25, r19
 1b2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
 1b6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>
 1ba:	0e c0       	rjmp	.+28     	; 0x1d8 <__vector_1+0x74>
		}

		else {	// regular case
	
			requested_throttle_pos = temp0 - temp_timer_throttle;
 1bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1c4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_throttle>
 1c8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_throttle+0x1>
 1cc:	82 1b       	sub	r24, r18
 1ce:	93 0b       	sbc	r25, r19
 1d0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_throttle_pos+0x1>
 1d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_throttle_pos>
			
		}
	
		
		temp_timer_throttle = temp0;
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1e0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <temp_timer_throttle+0x1>
 1e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_timer_throttle>
		
		
		// here, there is a chance that the value stored in requested throttle is actually (0xffff - actual requested throttle) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
}
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_3>:




ISR(PCINT0_vect){
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25

	uint16_t temp = TCNT1;
 210:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 214:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
		

	if ( temp < temp_timer_rudder){	// timer overflow
 218:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <temp_timer_rudder>
 21c:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
 220:	82 17       	cp	r24, r18
 222:	93 07       	cpc	r25, r19
 224:	70 f4       	brcc	.+28     	; 0x242 <__vector_3+0x48>

		requested_rudder_pos = (0xffff - temp_timer_rudder) + temp ;
 226:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <temp_timer_rudder>
 22a:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
 22e:	9c 01       	movw	r18, r24
 230:	21 50       	subi	r18, 0x01	; 1
 232:	31 09       	sbc	r19, r1
 234:	24 1b       	sub	r18, r20
 236:	35 0b       	sbc	r19, r21
 238:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <requested_rudder_pos+0x1>
 23c:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <requested_rudder_pos>
 240:	0b c0       	rjmp	.+22     	; 0x258 <__vector_3+0x5e>
	}

	else {	// regular case

		requested_rudder_pos = temp - temp_timer_rudder;
 242:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <temp_timer_rudder>
 246:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <temp_timer_rudder+0x1>
 24a:	ac 01       	movw	r20, r24
 24c:	42 1b       	sub	r20, r18
 24e:	53 0b       	sbc	r21, r19
 250:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <requested_rudder_pos+0x1>
 254:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <requested_rudder_pos>
		
	}

	
	temp_timer_rudder = temp;
 258:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <temp_timer_rudder+0x1>
 25c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <temp_timer_rudder>
	
	

}
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <__vector_4>:

ISR(PCINT1_vect){
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	2f 93       	push	r18
 282:	3f 93       	push	r19
 284:	4f 93       	push	r20
 286:	5f 93       	push	r21
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25

	uint16_t temp = TCNT1;
 28c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 290:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	

	if ( temp < temp_timer_elevator){	// timer overflow
 294:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temp_timer_elevator>
 298:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
 29c:	82 17       	cp	r24, r18
 29e:	93 07       	cpc	r25, r19
 2a0:	70 f4       	brcc	.+28     	; 0x2be <__vector_4+0x48>

		requested_elevator_pos = (0xffff - temp_timer_elevator) + temp ;
 2a2:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <temp_timer_elevator>
 2a6:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
 2aa:	9c 01       	movw	r18, r24
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	31 09       	sbc	r19, r1
 2b0:	24 1b       	sub	r18, r20
 2b2:	35 0b       	sbc	r19, r21
 2b4:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <requested_elevator_pos+0x1>
 2b8:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <requested_elevator_pos>
 2bc:	0b c0       	rjmp	.+22     	; 0x2d4 <__vector_4+0x5e>
	}

	else {	// regular case

		requested_elevator_pos = temp - temp_timer_elevator;
 2be:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temp_timer_elevator>
 2c2:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temp_timer_elevator+0x1>
 2c6:	ac 01       	movw	r20, r24
 2c8:	42 1b       	sub	r20, r18
 2ca:	53 0b       	sbc	r21, r19
 2cc:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <requested_elevator_pos+0x1>
 2d0:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <requested_elevator_pos>
		
	}

	
	temp_timer_elevator = temp;
 2d4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <temp_timer_elevator+0x1>
 2d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temp_timer_elevator>
	
	

}
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	5f 91       	pop	r21
 2e2:	4f 91       	pop	r20
 2e4:	3f 91       	pop	r19
 2e6:	2f 91       	pop	r18
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <_ZN10initialize10interruptsEv>:


void initialize::interrupts(){

	// external int 0
	EIMSK |= (1 << INT0); // enable the int0 interrupt												
 2f2:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1 << ISC00);	// will fire at any logical change
 2f4:	e9 e6       	ldi	r30, 0x69	; 105
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	81 60       	ori	r24, 0x01	; 1
 2fc:	80 83       	st	Z, r24

	// external int 1
	EIMSK |= (1 << INT1); // enable the int0 interrupt
 2fe:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= (1 << ISC10);	// will fire at any logical change
 300:	80 81       	ld	r24, Z
 302:	84 60       	ori	r24, 0x04	; 4
 304:	80 83       	st	Z, r24

	// pcint 0 (for pin C3)
	PCICR |= (1 << PCIE0);
 306:	e8 e6       	ldi	r30, 0x68	; 104
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	81 60       	ori	r24, 0x01	; 1
 30e:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);
 310:	ac e6       	ldi	r26, 0x6C	; 108
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	8c 91       	ld	r24, X
 316:	88 60       	ori	r24, 0x08	; 8
 318:	8c 93       	st	X, r24

	//pcint 1 (for pin B1)
	PCICR |= (1 << PCIE1);
 31a:	80 81       	ld	r24, Z
 31c:	82 60       	ori	r24, 0x02	; 2
 31e:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT1);
 320:	eb e6       	ldi	r30, 0x6B	; 107
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	82 60       	ori	r24, 0x02	; 2
 328:	80 83       	st	Z, r24
	
	// setting the pullup resistors on everything
	DDRD &= ~(1 << 2);
 32a:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << 2);
 32c:	5a 9a       	sbi	0x0b, 2	; 11
	
	DDRC &= ~(1 << 3);
 32e:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1 << 3);
 330:	43 9a       	sbi	0x08, 3	; 8
	
	DDRD &= ~(1 << 3);
 332:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1 << 3);
 334:	5b 9a       	sbi	0x0b, 3	; 11
	
	DDRD &= ~(1 << 4);
 336:	54 98       	cbi	0x0a, 4	; 10
	PORTD |= (1 << 4);
 338:	5c 9a       	sbi	0x0b, 4	; 11
 33a:	08 95       	ret

0000033c <_ZN10initialize6timersEv>:
}

void initialize::timers(){

	// by default the timer is set to normal mode
	TCCR1B |= ( (1 << CS10));	// timer will run with 8x prescaler and willoverrun 15 times/second
 33c:	e1 e8       	ldi	r30, 0x81	; 129
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	81 60       	ori	r24, 0x01	; 1
 344:	80 83       	st	Z, r24
 346:	08 95       	ret

00000348 <_exit>:
 348:	f8 94       	cli

0000034a <__stop_program>:
 34a:	ff cf       	rjmp	.-2      	; 0x34a <__stop_program>
