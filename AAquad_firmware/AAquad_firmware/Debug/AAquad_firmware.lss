
AAquad_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000005c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001347  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ceb  00000000  00000000  00001aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7a  00000000  00000000  0000278e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00003208  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000652  00000000  00000000  000033f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029f  00000000  00000000  00003a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003ce5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_1>
   8:	0c 94 46 02 	jmp	0x48c	; 0x48c <__vector_2>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a6 30       	cpi	r26, 0x06	; 6
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 18 02 	call	0x430	; 0x430 <main>
  d4:	0c 94 a5 02 	jmp	0x54a	; 0x54a <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <start>:



int start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
  dc:	84 ea       	ldi	r24, 0xA4	; 164
  de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
  e2:	ec eb       	ldi	r30, 0xBC	; 188
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	88 23       	and	r24, r24
  ea:	ec f7       	brge	.-6      	; 0xe6 <start+0xa>

	if ( (TWSR0 & 0xf8) != 0x08){ // comfirms that status is infact start condition has gone through
  ec:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  f0:	98 7f       	andi	r25, 0xF8	; 248
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	98 30       	cpi	r25, 0x08	; 8
  f8:	11 f0       	breq	.+4      	; 0xfe <start+0x22>
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
		return 0; 
	}

	return 1;

}
  fe:	c9 01       	movw	r24, r18
 100:	08 95       	ret

00000102 <repeat_start>:


int repeat_start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
 102:	84 ea       	ldi	r24, 0xA4	; 164
 104:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 108:	ec eb       	ldi	r30, 0xBC	; 188
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	88 23       	and	r24, r24
 110:	ec f7       	brge	.-6      	; 0x10c <repeat_start+0xa>

	if ( (TWSR0 & 0xf8) != 0x10){ // comfirms reapeated start
 112:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 116:	98 7f       	andi	r25, 0xF8	; 248
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	90 31       	cpi	r25, 0x10	; 16
 11e:	11 f0       	breq	.+4      	; 0x124 <repeat_start+0x22>
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
		return 0; 
	}

	return 1;

}
 124:	c9 01       	movw	r24, r18
 126:	08 95       	ret

00000128 <send_slave>:

int send_slave(){

	// send slave address + write bit

	TWDR0 = 0x9E;	// slave address + write (10011110)
 128:	8e e9       	ldi	r24, 0x9E	; 158
 12a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
 12e:	84 e8       	ldi	r24, 0x84	; 132
 130:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 134:	ec eb       	ldi	r30, 0xBC	; 188
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	88 23       	and	r24, r24
 13c:	ec f7       	brge	.-6      	; 0x138 <send_slave+0x10>

	if ( (TWSR0 & 0xf8) != 0x18){ // confirms that slave has received address and sent ACK
 13e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 142:	98 7f       	andi	r25, 0xF8	; 248
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	98 31       	cpi	r25, 0x18	; 24
 14a:	11 f0       	breq	.+4      	; 0x150 <send_slave+0x28>
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
	}

	return 1;


}
 150:	c9 01       	movw	r24, r18
 152:	08 95       	ret

00000154 <send_reg>:

int send_reg(int reg){

	// send  address of register to be written

	TWDR0 = reg; 
 154:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
 158:	84 e8       	ldi	r24, 0x84	; 132
 15a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 15e:	ec eb       	ldi	r30, 0xBC	; 188
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	88 23       	and	r24, r24
 166:	ec f7       	brge	.-6      	; 0x162 <send_reg+0xe>


	if ( ((TWSR0 & 0xf8) != 0x28) ){ // confirms that slave has received address of register and sent ACK
 168:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 16c:	98 7f       	andi	r25, 0xF8	; 248
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	98 32       	cpi	r25, 0x28	; 40
 174:	11 f0       	breq	.+4      	; 0x17a <send_reg+0x26>
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
	}

	return 1;


}
 17a:	c9 01       	movw	r24, r18
 17c:	08 95       	ret

0000017e <send>:


int send(int data){

	TWDR0 = data;
 17e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ((1 << TWINT) | (1 << TWEN));
 182:	84 e8       	ldi	r24, 0x84	; 132
 184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 188:	ec eb       	ldi	r30, 0xBC	; 188
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	88 23       	and	r24, r24
 190:	ec f7       	brge	.-6      	; 0x18c <send+0xe>

	if ( ((TWSR0 & 0xf8) != 0x28) ){ // comfirms that slave has accepted data and sent ACK
 192:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 196:	98 7f       	andi	r25, 0xF8	; 248
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	98 32       	cpi	r25, 0x28	; 40
 19e:	11 f0       	breq	.+4      	; 0x1a4 <send+0x26>
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
	}

	return 1;


}
 1a4:	c9 01       	movw	r24, r18
 1a6:	08 95       	ret

000001a8 <stop>:

void stop(){


	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) ); 
 1a8:	ec eb       	ldi	r30, 0xBC	; 188
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	84 69       	ori	r24, 0x94	; 148
 1b0:	80 83       	st	Z, r24
 1b2:	08 95       	ret

000001b4 <init_free_timer>:
void init_free_timer(){


	// by default the timer is set to normal mode

	TCCR1B |= ( (1 <<CS10));	// timer will run with an 64x prescaler 
 1b4:	e1 e8       	ldi	r30, 0x81	; 129
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	81 60       	ori	r24, 0x01	; 1
 1bc:	80 83       	st	Z, r24
 1be:	08 95       	ret

000001c0 <init_extern_ints>:

void init_extern_ints(){

	// int 0

	EIMSK |= (1 << INT0); // enable the int0 interrupt
 1c0:	e8 9a       	sbi	0x1d, 0	; 29
																	
	EICRA |= (1 << ISC00);	// will fire at any logical change
 1c2:	e9 e6       	ldi	r30, 0x69	; 105
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	80 83       	st	Z, r24

	// int 1

	EIMSK |= (1 << INT1); // enable the int0 interrupt
 1cc:	e9 9a       	sbi	0x1d, 1	; 29

	EICRA |= (1 << ISC10);	// will fire at any logical change
 1ce:	80 81       	ld	r24, Z
 1d0:	84 60       	ori	r24, 0x04	; 4
 1d2:	80 83       	st	Z, r24
 1d4:	08 95       	ret

000001d6 <init_mux_timer>:

// this timer is responsible for providing the pwm that periodically flips the muxes back and forth
// uses the 8 bit timer 0 for this job


	TCCR0B |= ((1 << CS01) | (1 << CS00)); // the timer will run on the internal clock (currently with 64x prescaler)
 1d6:	85 b5       	in	r24, 0x25	; 37
 1d8:	83 60       	ori	r24, 0x03	; 3
 1da:	85 bd       	out	0x25, r24	; 37
 1dc:	08 95       	ret

000001de <decode_motors>:



void decode_motors(uint8_t motor, uint8_t* motors, uint8_t*instruction){
	
	uint16_t temp = motors[motor] * 205;	// the actualslope of this curve is 2.05, 100 times larger prevents the .05from falling off
 1de:	fb 01       	movw	r30, r22
 1e0:	e8 0f       	add	r30, r24
 1e2:	f1 1d       	adc	r31, r1
	
	temp = ( temp / 100 ) + 205;	// 205 is the value corresponding to 0 for the esc
 1e4:	20 81       	ld	r18, Z
 1e6:	8d ec       	ldi	r24, 0xCD	; 205
 1e8:	28 9f       	mul	r18, r24
 1ea:	90 01       	movw	r18, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	36 95       	lsr	r19
 1f0:	27 95       	ror	r18
 1f2:	36 95       	lsr	r19
 1f4:	27 95       	ror	r18
 1f6:	ab e7       	ldi	r26, 0x7B	; 123
 1f8:	b4 e1       	ldi	r27, 0x14	; 20
 1fa:	0e 94 96 02 	call	0x52c	; 0x52c <__umulhisi3>
 1fe:	96 95       	lsr	r25
 200:	87 95       	ror	r24
 202:	83 53       	subi	r24, 0x33	; 51
 204:	9f 4f       	sbci	r25, 0xFF	; 255
	
	instruction[0] = ( temp & 0xff );	// conserves only the low byte
 206:	fa 01       	movw	r30, r20
 208:	80 83       	st	Z, r24
	
	instruction[1] = (temp >> 8);	// conserves only the high half-byte
 20a:	91 83       	std	Z+1, r25	; 0x01
 20c:	08 95       	ret

0000020e <pass_to_pwm_chip>:

void decode_motors(uint8_t motor, uint8_t* motors, uint8_t* instruction);



int pass_to_pwm_chip(uint8_t* motors){
 20e:	ef 92       	push	r14
 210:	ff 92       	push	r15
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	00 d0       	rcall	.+0      	; 0x21c <pass_to_pwm_chip+0xe>
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	7c 01       	movw	r14, r24

	uint8_t instruction[2];	// this array will hold the values that the decodefunction deciphers
	
	
	
	decode_motors(0, motors, instruction);
 222:	ae 01       	movw	r20, r28
 224:	4f 5f       	subi	r20, 0xFF	; 255
 226:	5f 4f       	sbci	r21, 0xFF	; 255
 228:	bc 01       	movw	r22, r24
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 ef 00 	call	0x1de	; 0x1de <decode_motors>

	if (! start() ){
 230:	0e 94 6e 00 	call	0xdc	; 0xdc <start>
 234:	00 97       	sbiw	r24, 0x00	; 0
 236:	09 f4       	brne	.+2      	; 0x23a <pass_to_pwm_chip+0x2c>
 238:	c1 c0       	rjmp	.+386    	; 0x3bc <pass_to_pwm_chip+0x1ae>

		return 0;
	}

	if (! send_slave() ){
 23a:	0e 94 94 00 	call	0x128	; 0x128 <send_slave>
 23e:	00 97       	sbiw	r24, 0x00	; 0
 240:	09 f4       	brne	.+2      	; 0x244 <pass_to_pwm_chip+0x36>
 242:	bc c0       	rjmp	.+376    	; 0x3bc <pass_to_pwm_chip+0x1ae>

		return 0;
	}

	if (! send_reg(0x06) ){	//LED0_ON_L
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 aa 00 	call	0x154	; 0x154 <send_reg>
 24c:	00 97       	sbiw	r24, 0x00	; 0
 24e:	09 f4       	brne	.+2      	; 0x252 <pass_to_pwm_chip+0x44>
 250:	b5 c0       	rjmp	.+362    	; 0x3bc <pass_to_pwm_chip+0x1ae>

		return 0;
	}

	if( (send(0) & send(0) & send(instruction[0]) & send(instruction[1]) ) == 0){ //ON_L, ON_H, OFF_L, OFF_H
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 25a:	8c 01       	movw	r16, r24
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 264:	08 23       	and	r16, r24
 266:	19 23       	and	r17, r25
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 270:	08 23       	and	r16, r24
 272:	19 23       	and	r17, r25
 274:	8a 81       	ldd	r24, Y+2	; 0x02
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 27c:	80 23       	and	r24, r16
 27e:	91 23       	and	r25, r17
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	09 f4       	brne	.+2      	; 0x286 <pass_to_pwm_chip+0x78>
 284:	9b c0       	rjmp	.+310    	; 0x3bc <pass_to_pwm_chip+0x1ae>

		return 0;
	}

	stop();
 286:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <stop>





	decode_motors(1, motors, instruction);
 28a:	ae 01       	movw	r20, r28
 28c:	4f 5f       	subi	r20, 0xFF	; 255
 28e:	5f 4f       	sbci	r21, 0xFF	; 255
 290:	b7 01       	movw	r22, r14
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 ef 00 	call	0x1de	; 0x1de <decode_motors>
	
	if (! start() ){
 298:	0e 94 6e 00 	call	0xdc	; 0xdc <start>
 29c:	00 97       	sbiw	r24, 0x00	; 0
 29e:	09 f4       	brne	.+2      	; 0x2a2 <pass_to_pwm_chip+0x94>
 2a0:	8d c0       	rjmp	.+282    	; 0x3bc <pass_to_pwm_chip+0x1ae>

		return 0;
	}

	if (! send_slave() ){
 2a2:	0e 94 94 00 	call	0x128	; 0x128 <send_slave>
 2a6:	00 97       	sbiw	r24, 0x00	; 0
 2a8:	09 f4       	brne	.+2      	; 0x2ac <pass_to_pwm_chip+0x9e>
 2aa:	88 c0       	rjmp	.+272    	; 0x3bc <pass_to_pwm_chip+0x1ae>

		return 0;
	}

	if (! send_reg(0x16) ){	//LED4_ON_L
 2ac:	86 e1       	ldi	r24, 0x16	; 22
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 aa 00 	call	0x154	; 0x154 <send_reg>
 2b4:	00 97       	sbiw	r24, 0x00	; 0
 2b6:	09 f4       	brne	.+2      	; 0x2ba <pass_to_pwm_chip+0xac>
 2b8:	81 c0       	rjmp	.+258    	; 0x3bc <pass_to_pwm_chip+0x1ae>

		return 0;
	}


	if( (send(0) & send(0) & send(instruction[0]) & send(instruction[1]) ) == 0){ //ON_L, ON_H, OFF_L, OFF_H
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 2c2:	8c 01       	movw	r16, r24
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 2cc:	08 23       	and	r16, r24
 2ce:	19 23       	and	r17, r25
 2d0:	89 81       	ldd	r24, Y+1	; 0x01
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 2d8:	08 23       	and	r16, r24
 2da:	19 23       	and	r17, r25
 2dc:	8a 81       	ldd	r24, Y+2	; 0x02
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 2e4:	80 23       	and	r24, r16
 2e6:	91 23       	and	r25, r17
 2e8:	00 97       	sbiw	r24, 0x00	; 0
 2ea:	09 f4       	brne	.+2      	; 0x2ee <pass_to_pwm_chip+0xe0>
 2ec:	67 c0       	rjmp	.+206    	; 0x3bc <pass_to_pwm_chip+0x1ae>

		return 0;
	}

	stop();
 2ee:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <stop>


	


	decode_motors(2, motors, instruction);
 2f2:	ae 01       	movw	r20, r28
 2f4:	4f 5f       	subi	r20, 0xFF	; 255
 2f6:	5f 4f       	sbci	r21, 0xFF	; 255
 2f8:	b7 01       	movw	r22, r14
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	0e 94 ef 00 	call	0x1de	; 0x1de <decode_motors>

	if (! start() ){
 300:	0e 94 6e 00 	call	0xdc	; 0xdc <start>
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	09 f4       	brne	.+2      	; 0x30a <pass_to_pwm_chip+0xfc>
 308:	59 c0       	rjmp	.+178    	; 0x3bc <pass_to_pwm_chip+0x1ae>

		return 0;
	}

	if (! send_slave() ){
 30a:	0e 94 94 00 	call	0x128	; 0x128 <send_slave>
 30e:	00 97       	sbiw	r24, 0x00	; 0
 310:	09 f4       	brne	.+2      	; 0x314 <pass_to_pwm_chip+0x106>
 312:	54 c0       	rjmp	.+168    	; 0x3bc <pass_to_pwm_chip+0x1ae>

		return 0;
	}

	if (! send_reg(0x2E) ){	//LED15_ON_L
 314:	8e e2       	ldi	r24, 0x2E	; 46
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 aa 00 	call	0x154	; 0x154 <send_reg>
 31c:	00 97       	sbiw	r24, 0x00	; 0
 31e:	09 f4       	brne	.+2      	; 0x322 <pass_to_pwm_chip+0x114>
 320:	4d c0       	rjmp	.+154    	; 0x3bc <pass_to_pwm_chip+0x1ae>

		return 0;
	}


	if( (send(0) & send(0) & send(instruction[0]) & send(instruction[1]) ) == 0){ //ON_L, ON_H, OFF_L, OFF_H
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 32a:	8c 01       	movw	r16, r24
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 334:	08 23       	and	r16, r24
 336:	19 23       	and	r17, r25
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 340:	08 23       	and	r16, r24
 342:	19 23       	and	r17, r25
 344:	8a 81       	ldd	r24, Y+2	; 0x02
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 34c:	80 23       	and	r24, r16
 34e:	91 23       	and	r25, r17
 350:	00 97       	sbiw	r24, 0x00	; 0
 352:	a1 f1       	breq	.+104    	; 0x3bc <pass_to_pwm_chip+0x1ae>

		return 0;
	}

	stop();
 354:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <stop>
	




	decode_motors(3, motors, instruction);
 358:	ae 01       	movw	r20, r28
 35a:	4f 5f       	subi	r20, 0xFF	; 255
 35c:	5f 4f       	sbci	r21, 0xFF	; 255
 35e:	b7 01       	movw	r22, r14
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	0e 94 ef 00 	call	0x1de	; 0x1de <decode_motors>
	
	if (! start() ){
 366:	0e 94 6e 00 	call	0xdc	; 0xdc <start>
 36a:	00 97       	sbiw	r24, 0x00	; 0
 36c:	39 f1       	breq	.+78     	; 0x3bc <pass_to_pwm_chip+0x1ae>

		return 0;
	}

	if (! send_slave() ){
 36e:	0e 94 94 00 	call	0x128	; 0x128 <send_slave>
 372:	00 97       	sbiw	r24, 0x00	; 0
 374:	19 f1       	breq	.+70     	; 0x3bc <pass_to_pwm_chip+0x1ae>

		return 0;
	}

	if (! send_reg(0x42) ){	//LED15_ON_L
 376:	82 e4       	ldi	r24, 0x42	; 66
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 aa 00 	call	0x154	; 0x154 <send_reg>
 37e:	00 97       	sbiw	r24, 0x00	; 0
 380:	e9 f0       	breq	.+58     	; 0x3bc <pass_to_pwm_chip+0x1ae>

		return 0;
	}


	if( (send(0) & send(0) & send(instruction[0]) & send(instruction[1]) ) == 0){ //ON_L, ON_H, OFF_L, OFF_H
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 38a:	8c 01       	movw	r16, r24
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 394:	08 23       	and	r16, r24
 396:	19 23       	and	r17, r25
 398:	89 81       	ldd	r24, Y+1	; 0x01
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 3a0:	08 23       	and	r16, r24
 3a2:	19 23       	and	r17, r25
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 3ac:	80 23       	and	r24, r16
 3ae:	91 23       	and	r25, r17
 3b0:	00 97       	sbiw	r24, 0x00	; 0
 3b2:	21 f0       	breq	.+8      	; 0x3bc <pass_to_pwm_chip+0x1ae>

		return 0;
	}

	stop();
 3b4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <stop>





	return 1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0


}
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	ff 90       	pop	r15
 3ca:	ef 90       	pop	r14
 3cc:	08 95       	ret

000003ce <pwm_chip_init>:


int pwm_chip_init(){
	
	
	DDRB |= (1 << 2);	// set OE to 0;
 3ce:	22 9a       	sbi	0x04, 2	; 4

	//This function sets the auto increment, the prescaler and any other necessary feature required for the pwm chip to run 

	TWBR0 = (1 << 1); // I'll run the cpu at 1 MHz, this divides the value by 2 for 50 KHZ
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>


	if  ( ! start() ){
 3d6:	0e 94 6e 00 	call	0xdc	; 0xdc <start>
 3da:	00 97       	sbiw	r24, 0x00	; 0
 3dc:	41 f1       	breq	.+80     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

		return 0;
	} 

	if ( ! send_slave() ){
 3de:	0e 94 94 00 	call	0x128	; 0x128 <send_slave>
 3e2:	00 97       	sbiw	r24, 0x00	; 0
 3e4:	21 f1       	breq	.+72     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

		return 0;
	} 

	if ( ! send_reg(0x0) ){	// mode register 1
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 aa 00 	call	0x154	; 0x154 <send_reg>
 3ee:	00 97       	sbiw	r24, 0x00	; 0
 3f0:	f1 f0       	breq	.+60     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

		return 0;
	}

	if ( ! send(0x21) ){	// clock on, auto-increment enable
 3f2:	81 e2       	ldi	r24, 0x21	; 33
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 3fa:	00 97       	sbiw	r24, 0x00	; 0
 3fc:	c1 f0       	breq	.+48     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

		return 0;
	}

	if ( ! repeat_start() ){
 3fe:	0e 94 81 00 	call	0x102	; 0x102 <repeat_start>
 402:	00 97       	sbiw	r24, 0x00	; 0
 404:	a1 f0       	breq	.+40     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

		return 0;
	}

	if ( ! send_slave() ){
 406:	0e 94 94 00 	call	0x128	; 0x128 <send_slave>
 40a:	00 97       	sbiw	r24, 0x00	; 0
 40c:	81 f0       	breq	.+32     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

		return 0;
	}

	if ( ! send_reg(0xFE) ){	// pre scale register
 40e:	8e ef       	ldi	r24, 0xFE	; 254
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 aa 00 	call	0x154	; 0x154 <send_reg>
 416:	00 97       	sbiw	r24, 0x00	; 0
 418:	51 f0       	breq	.+20     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

		return 0;
	}


	if ( ! send(122) ){
 41a:	8a e7       	ldi	r24, 0x7A	; 122
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 bf 00 	call	0x17e	; 0x17e <send>
 422:	00 97       	sbiw	r24, 0x00	; 0
 424:	21 f0       	breq	.+8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

		return 0;
	}

	stop();
 426:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <stop>

	return 1;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0




}
 42e:	08 95       	ret

00000430 <main>:

	volatile uint16_t requested_aileron_pos = 0; 
	volatile uint16_t temp_timer_aileron = 0; 
	volatile uint16_t temp = 0;

int main(void){
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	00 d0       	rcall	.+0      	; 0x436 <main+0x6>
 436:	00 d0       	rcall	.+0      	; 0x438 <main+0x8>
 438:	1f 92       	push	r1
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62

PORTC |= ( (1 << 5) | (1 << 4) );
 43e:	88 b1       	in	r24, 0x08	; 8
 440:	80 63       	ori	r24, 0x30	; 48
 442:	88 b9       	out	0x08, r24	; 8

sei();
 444:	78 94       	sei

uint8_t motors[5] = {0};
 446:	8e 01       	movw	r16, r28
 448:	0f 5f       	subi	r16, 0xFF	; 255
 44a:	1f 4f       	sbci	r17, 0xFF	; 255
 44c:	85 e0       	ldi	r24, 0x05	; 5
 44e:	f8 01       	movw	r30, r16
 450:	11 92       	st	Z+, r1
 452:	8a 95       	dec	r24
 454:	e9 f7       	brne	.-6      	; 0x450 <main+0x20>

pwm_chip_init();
 456:	0e 94 e7 01 	call	0x3ce	; 0x3ce <pwm_chip_init>
pass_to_pwm_chip(motors);
 45a:	c8 01       	movw	r24, r16
 45c:	0e 94 07 01 	call	0x20e	; 0x20e <pass_to_pwm_chip>


DDRB |= (1 << 1);
 460:	21 9a       	sbi	0x04, 1	; 4
PORTB |= (1 << 0);
 462:	28 9a       	sbi	0x05, 0	; 5

init_mux_timer();	// a lot of this function is disconnected
 464:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <init_mux_timer>
init_free_timer();
 468:	0e 94 da 00 	call	0x1b4	; 0x1b4 <init_free_timer>
init_extern_ints();	
 46c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <init_extern_ints>
 470:	10 e0       	ldi	r17, 0x00	; 0

uint16_t garbage = 0;

while(1){

motors[0] = garbage;
 472:	19 83       	std	Y+1, r17	; 0x01
pass_to_pwm_chip(motors);
 474:	ce 01       	movw	r24, r28
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	0e 94 07 01 	call	0x20e	; 0x20e <pass_to_pwm_chip>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47c:	8f ec       	ldi	r24, 0xCF	; 207
 47e:	97 e0       	ldi	r25, 0x07	; 7
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <main+0x50>
 484:	00 c0       	rjmp	.+0      	; 0x486 <main+0x56>
 486:	00 00       	nop
 488:	1f 5f       	subi	r17, 0xFF	; 255
 48a:	f3 cf       	rjmp	.-26     	; 0x472 <main+0x42>

0000048c <__vector_2>:


return 0;

}
ISR(INT1_vect){
 48c:	1f 92       	push	r1
 48e:	0f 92       	push	r0
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	0f 92       	push	r0
 494:	11 24       	eor	r1, r1
 496:	2f 93       	push	r18
 498:	3f 93       	push	r19
 49a:	8f 93       	push	r24
 49c:	9f 93       	push	r25
	
		temp = TCNT1;
 49e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 4a2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 4a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 4aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if ( temp < temp_timer_aileron){	// timer overflow

			requested_aileron_pos = 0xff- temp_timer_aileron + temp ;
		}
*/
		if (temp > temp_timer_aileron){
 4ae:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 4b2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 4b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp_timer_aileron>
 4ba:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp_timer_aileron+0x1>
 4be:	82 17       	cp	r24, r18
 4c0:	93 07       	cpc	r25, r19
 4c2:	70 f4       	brcc	.+28     	; 0x4e0 <__vector_2+0x54>
	
			requested_aileron_pos = temp - temp_timer_aileron;
 4c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 4cc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_aileron>
 4d0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_aileron+0x1>
 4d4:	82 1b       	sub	r24, r18
 4d6:	93 0b       	sbc	r25, r19
 4d8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_aileron_pos+0x1>
 4dc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp;
 4e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 4e8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <temp_timer_aileron+0x1>
 4ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_timer_aileron>
		

		
		
			OCR4A = (requested_aileron_pos >> 8);
 4f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_aileron_pos>
 4f4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_aileron_pos+0x1>
 4f8:	89 2f       	mov	r24, r25
 4fa:	99 27       	eor	r25, r25
 4fc:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 500:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>


}
 504:	9f 91       	pop	r25
 506:	8f 91       	pop	r24
 508:	3f 91       	pop	r19
 50a:	2f 91       	pop	r18
 50c:	0f 90       	pop	r0
 50e:	0f be       	out	0x3f, r0	; 63
 510:	0f 90       	pop	r0
 512:	1f 90       	pop	r1
 514:	18 95       	reti

00000516 <__vector_1>:

ISR(INT0_vect){
 516:	1f 92       	push	r1
 518:	0f 92       	push	r0
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	0f 92       	push	r0
 51e:	11 24       	eor	r1, r1
	
	DDRB |= (1 << 7);
 520:	27 9a       	sbi	0x04, 7	; 4

}
 522:	0f 90       	pop	r0
 524:	0f be       	out	0x3f, r0	; 63
 526:	0f 90       	pop	r0
 528:	1f 90       	pop	r1
 52a:	18 95       	reti

0000052c <__umulhisi3>:
 52c:	a2 9f       	mul	r26, r18
 52e:	b0 01       	movw	r22, r0
 530:	b3 9f       	mul	r27, r19
 532:	c0 01       	movw	r24, r0
 534:	a3 9f       	mul	r26, r19
 536:	70 0d       	add	r23, r0
 538:	81 1d       	adc	r24, r1
 53a:	11 24       	eor	r1, r1
 53c:	91 1d       	adc	r25, r1
 53e:	b2 9f       	mul	r27, r18
 540:	70 0d       	add	r23, r0
 542:	81 1d       	adc	r24, r1
 544:	11 24       	eor	r1, r1
 546:	91 1d       	adc	r25, r1
 548:	08 95       	ret

0000054a <_exit>:
 54a:	f8 94       	cli

0000054c <__stop_program>:
 54c:	ff cf       	rjmp	.-2      	; 0x54c <__stop_program>
