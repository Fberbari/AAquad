
AAquad_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000025e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bc6  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a00  00000000  00000000  00000f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000571  00000000  00000000  0000192e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000537  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  000024c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002555  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_1>
   8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_2>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a6 30       	cpi	r26, 0x06	; 6
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 83 00 	call	0x106	; 0x106 <main>
  d4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <init_free_timer>:
void init_free_timer(){


	// by default the timer is set to normal mode

	TCCR1B |= ( (1 <<CS10));	// timer will run with an 64x prescaler 
  dc:	e1 e8       	ldi	r30, 0x81	; 129
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <init_extern_ints>:

void init_extern_ints(){

	// int 0

	EIMSK |= (1 << INT0); // enable the int0 interrupt
  e8:	e8 9a       	sbi	0x1d, 0	; 29
																	
	EICRA |= (1 << ISC00);	// will fire at any logical change
  ea:	e9 e6       	ldi	r30, 0x69	; 105
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	80 83       	st	Z, r24

	// int 1

	EIMSK |= (1 << INT1); // enable the int0 interrupt
  f4:	e9 9a       	sbi	0x1d, 1	; 29

	EICRA |= (1 << ISC10);	// will fire at any logical change
  f6:	80 81       	ld	r24, Z
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <init_mux_timer>:

// this timer is responsible for providing the pwm that periodically flips the muxes back and forth
// uses the 8 bit timer 0 for this job


	TCCR0B |= ((1 << CS01) | (1 << CS00)); // the timer will run on the internal clock (currently with 64x prescaler)
  fe:	85 b5       	in	r24, 0x25	; 37
 100:	83 60       	ori	r24, 0x03	; 3
 102:	85 bd       	out	0x25, r24	; 37
 104:	08 95       	ret

00000106 <main>:
	volatile uint16_t temp = 0;


int main(void){
	
	sei();
 106:	78 94       	sei
DDRD |= (1 << 1);
 108:	51 9a       	sbi	0x0a, 1	; 10


init_mux_timer();	// a lot of this function is disconnected
 10a:	0e 94 7f 00 	call	0xfe	; 0xfe <init_mux_timer>
init_free_timer();
 10e:	0e 94 6e 00 	call	0xdc	; 0xdc <init_free_timer>
init_extern_ints();	
 112:	0e 94 74 00 	call	0xe8	; 0xe8 <init_extern_ints>

DDRC = 0;
 116:	17 b8       	out	0x07, r1	; 7
PORTC = 0xFF;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	88 b9       	out	0x08, r24	; 8

PORTD |= (1 << 3);
 11c:	5b 9a       	sbi	0x0b, 3	; 11


TCCR4B |= ( (1 << WGM13) | (1 << WGM12) | (1 << CS10) );		// selecting fast PWM mode (counts up till selected value then resets)
 11e:	e1 ea       	ldi	r30, 0xA1	; 161
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	89 61       	ori	r24, 0x19	; 25
 126:	80 83       	st	Z, r24

TCCR4A |= ((1 << WGM11)| (1<<COM1A1) | (1<<COM1A0));	// set inverting mode fast pwm
 128:	e0 ea       	ldi	r30, 0xA0	; 160
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	82 6c       	ori	r24, 0xC2	; 194
 130:	80 83       	st	Z, r24


ICR4 = 0xff;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 13a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

PORTB |= (1 << 1);
 13e:	29 9a       	sbi	0x05, 1	; 5



DDRB |= (1 << 1);
 140:	21 9a       	sbi	0x04, 1	; 4
DDRB |= (1 << 0);
 142:	20 9a       	sbi	0x04, 0	; 4
 144:	ff cf       	rjmp	.-2      	; 0x144 <main+0x3e>

00000146 <__vector_2>:


return 0;

}
ISR(INT1_vect){
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
	
		temp = TCNT1;
 158:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 15c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 160:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if ( temp < temp_timer_aileron){	// timer overflow

			requested_aileron_pos = 0xff- temp_timer_aileron + temp ;
		}
*/
		if (temp > temp_timer_aileron){
 168:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 16c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 170:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp_timer_aileron>
 174:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp_timer_aileron+0x1>
 178:	82 17       	cp	r24, r18
 17a:	93 07       	cpc	r25, r19
 17c:	70 f4       	brcc	.+28     	; 0x19a <__vector_2+0x54>
	
			requested_aileron_pos = temp - temp_timer_aileron;
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 182:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 186:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_aileron>
 18a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_aileron+0x1>
 18e:	82 1b       	sub	r24, r18
 190:	93 0b       	sbc	r25, r19
 192:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_aileron_pos+0x1>
 196:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp;
 19a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 19e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1a2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <temp_timer_aileron+0x1>
 1a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_timer_aileron>
		

		
		
			OCR4A = (requested_aileron_pos >> 8);
 1aa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_aileron_pos>
 1ae:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_aileron_pos+0x1>
 1b2:	89 2f       	mov	r24, r25
 1b4:	99 27       	eor	r25, r25
 1b6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 1ba:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>


}
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <__vector_1>:

ISR(INT0_vect){
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
	
	DDRB |= (1 << 7);
 1da:	27 9a       	sbi	0x04, 7	; 4

}
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
