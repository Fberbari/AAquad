
AAquad_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000005c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec9  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b9e  00000000  00000000  00001605  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a6f  00000000  00000000  000021a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002c14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cd  00000000  00000000  00002dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a0  00000000  00000000  00003391  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003531  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_1>
   8:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_2>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a6 30       	cpi	r26, 0x06	; 6
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 17 02 	call	0x42e	; 0x42e <main>
  d4:	0c 94 a5 02 	jmp	0x54a	; 0x54a <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <init_free_timer>:
void init_free_timer(){


	// by default the timer is set to normal mode

	TCCR1B |= ( (1 <<CS10));	// timer will run with an 64x prescaler 
  dc:	e1 e8       	ldi	r30, 0x81	; 129
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <init_extern_ints>:

void init_extern_ints(){

	// int 0

	EIMSK |= (1 << INT0); // enable the int0 interrupt
  e8:	e8 9a       	sbi	0x1d, 0	; 29
																	
	EICRA |= (1 << ISC00);	// will fire at any logical change
  ea:	e9 e6       	ldi	r30, 0x69	; 105
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	80 83       	st	Z, r24

	// int 1

	EIMSK |= (1 << INT1); // enable the int0 interrupt
  f4:	e9 9a       	sbi	0x1d, 1	; 29

	EICRA |= (1 << ISC10);	// will fire at any logical change
  f6:	80 81       	ld	r24, Z
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <init_mux_timer>:

// this timer is responsible for providing the pwm that periodically flips the muxes back and forth
// uses the 8 bit timer 0 for this job


	TCCR0B |= ((1 << CS01) | (1 << CS00)); // the timer will run on the internal clock (currently with 64x prescaler)
  fe:	85 b5       	in	r24, 0x25	; 37
 100:	83 60       	ori	r24, 0x03	; 3
 102:	85 bd       	out	0x25, r24	; 37
 104:	08 95       	ret

00000106 <start>:



int start(){

	TWCR0 |= (1 << TWEN); // The TWI process takes controll of the I/O pins
 106:	ec eb       	ldi	r30, 0xBC	; 188
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	84 60       	ori	r24, 0x04	; 4
 10e:	80 83       	st	Z, r24

	TWCR0 |= ( (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
 110:	80 81       	ld	r24, Z
 112:	80 6a       	ori	r24, 0xA0	; 160
 114:	80 83       	st	Z, r24


	PORTB |= (1 << 1);
 116:	29 9a       	sbi	0x05, 1	; 5


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 118:	80 81       	ld	r24, Z
 11a:	88 23       	and	r24, r24
 11c:	ec f7       	brge	.-6      	; 0x118 <start+0x12>

	if ( (TWSR0 & 0xf8) != 0x08){ // comfirms that status is infact start condition has gone through
 11e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 122:	98 7f       	andi	r25, 0xF8	; 248
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	98 30       	cpi	r25, 0x08	; 8
 12a:	11 f0       	breq	.+4      	; 0x130 <start+0x2a>
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
		return 0; 
	}

	return 1;

}
 130:	c9 01       	movw	r24, r18
 132:	08 95       	ret

00000134 <send_slave>:

int send_slave(){

	// send slave address + write bit

	TWDR0 = 0x9E;	// slave address + write (10011110)
 134:	8e e9       	ldi	r24, 0x9E	; 158
 136:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
 13a:	84 e8       	ldi	r24, 0x84	; 132
 13c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 140:	ec eb       	ldi	r30, 0xBC	; 188
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 23       	and	r24, r24
 148:	ec f7       	brge	.-6      	; 0x144 <send_slave+0x10>

	if ( (TWSR0 & 0xf8) != 0x18){ // confirms that slave has received address and sent ACK
 14a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 14e:	98 7f       	andi	r25, 0xF8	; 248
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	98 31       	cpi	r25, 0x18	; 24
 156:	11 f0       	breq	.+4      	; 0x15c <send_slave+0x28>
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
	}

	return 1;


}
 15c:	c9 01       	movw	r24, r18
 15e:	08 95       	ret

00000160 <send_reg>:

int send_reg(int reg){

	// send  address of register to be written

	TWDR0 = reg; 
 160:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
 164:	84 e8       	ldi	r24, 0x84	; 132
 166:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 16a:	ec eb       	ldi	r30, 0xBC	; 188
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	88 23       	and	r24, r24
 172:	ec f7       	brge	.-6      	; 0x16e <send_reg+0xe>


	if ( ((TWSR0 & 0xf8) != 0x28) ){ // confirms that slave has received address of register and sent ACK
 174:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 178:	98 7f       	andi	r25, 0xF8	; 248
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	98 32       	cpi	r25, 0x28	; 40
 180:	11 f0       	breq	.+4      	; 0x186 <send_reg+0x26>
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
	}

	return 1;


}
 186:	c9 01       	movw	r24, r18
 188:	08 95       	ret

0000018a <send>:



int send(int data){

	TWDR0 = data;
 18a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ((1 << TWINT) | (1 << TWEN));
 18e:	84 e8       	ldi	r24, 0x84	; 132
 190:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 194:	ec eb       	ldi	r30, 0xBC	; 188
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	88 23       	and	r24, r24
 19c:	ec f7       	brge	.-6      	; 0x198 <send+0xe>

	if ( ((TWSR0 & 0xf8) != 0x28) ){ // comfirms that slave has accepted data and sent ACK
 19e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1a2:	98 7f       	andi	r25, 0xF8	; 248
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	98 32       	cpi	r25, 0x28	; 40
 1aa:	11 f0       	breq	.+4      	; 0x1b0 <send+0x26>
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
	}

	return 1;


}
 1b0:	c9 01       	movw	r24, r18
 1b2:	08 95       	ret

000001b4 <stop>:

void stop(){


	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) ); 
 1b4:	ec eb       	ldi	r30, 0xBC	; 188
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	84 69       	ori	r24, 0x94	; 148
 1bc:	80 83       	st	Z, r24
 1be:	08 95       	ret

000001c0 <pass_to_pwm_chip>:
int send_reg(int reg);
int send(int data);
void stop();


int pass_to_pwm_chip(int* motors){
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29





	if (! start() ){
 1c4:	0e 94 83 00 	call	0x106	; 0x106 <start>
 1c8:	00 97       	sbiw	r24, 0x00	; 0
 1ca:	39 f1       	breq	.+78     	; 0x21a <pass_to_pwm_chip+0x5a>

		return 0;
	}

	if (! send_slave() ){
 1cc:	0e 94 9a 00 	call	0x134	; 0x134 <send_slave>
 1d0:	00 97       	sbiw	r24, 0x00	; 0
 1d2:	19 f1       	breq	.+70     	; 0x21a <pass_to_pwm_chip+0x5a>

		return 0;
	}

	if (! send_reg(0x06) ){	//LED0_ON_L
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 b0 00 	call	0x160	; 0x160 <send_reg>
 1dc:	00 97       	sbiw	r24, 0x00	; 0
 1de:	e9 f0       	breq	.+58     	; 0x21a <pass_to_pwm_chip+0x5a>

		return 0;
	}

		if( (send(0x20) & send(0x3) & send(0xB0) & send(0x4)) == 0){ //ON_L, ON_H, OFF_L, OFF_H
 1e0:	80 e2       	ldi	r24, 0x20	; 32
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 c5 00 	call	0x18a	; 0x18a <send>
 1e8:	ec 01       	movw	r28, r24
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 c5 00 	call	0x18a	; 0x18a <send>
 1f2:	c8 23       	and	r28, r24
 1f4:	d9 23       	and	r29, r25
 1f6:	80 eb       	ldi	r24, 0xB0	; 176
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 c5 00 	call	0x18a	; 0x18a <send>
 1fe:	c8 23       	and	r28, r24
 200:	d9 23       	and	r29, r25
 202:	84 e0       	ldi	r24, 0x04	; 4
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 c5 00 	call	0x18a	; 0x18a <send>
 20a:	8c 23       	and	r24, r28
 20c:	9d 23       	and	r25, r29
 20e:	00 97       	sbiw	r24, 0x00	; 0
 210:	21 f0       	breq	.+8      	; 0x21a <pass_to_pwm_chip+0x5a>

		return 0;
	}

	stop();
 212:	0e 94 da 00 	call	0x1b4	; 0x1b4 <stop>


*/


	return 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0


}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <pwm_chip_init>:


int pwm_chip_init(){
	
	
	DDRB |= (1 << 2);	// set OE to 0;
 220:	22 9a       	sbi	0x04, 2	; 4

	//This function sets the auto increment, the prescaler and any other necessary feature required for the pwm chip to run 

	TWBR0 = (1 << 1); // I'll run the cpu at 1 MHz, this divides the value by 2 for 50 KHZ
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when read
 228:	84 ea       	ldi	r24, 0xA4	; 164
 22a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 22e:	ec eb       	ldi	r30, 0xBC	; 188
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	88 23       	and	r24, r24
 236:	ec f7       	brge	.-6      	; 0x232 <pwm_chip_init+0x12>

	if ( (TWSR0 & 0xf8) != 0x08){ // comfirms that status is infact start condition has gone through
 238:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 23c:	88 7f       	andi	r24, 0xF8	; 248
 23e:	88 30       	cpi	r24, 0x08	; 8
 240:	09 f0       	breq	.+2      	; 0x244 <pwm_chip_init+0x24>
 242:	78 c0       	rjmp	.+240    	; 0x334 <pwm_chip_init+0x114>
	}


	// send slave address + write bit
	
	TWDR0 = 0x9E;	// slave address + write (10011110)
 244:	8e e9       	ldi	r24, 0x9E	; 158
 246:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	
	TWCR0 =( (1 << TWEN) | (1 << TWINT) ); // The TWI process takes controll of the I/O pins
 24a:	84 e8       	ldi	r24, 0x84	; 132
 24c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 250:	ec eb       	ldi	r30, 0xBC	; 188
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	88 23       	and	r24, r24
 258:	ec f7       	brge	.-6      	; 0x254 <pwm_chip_init+0x34>

	if ( (TWSR0 & 0xf8) != 0x18){ // confirms that slave has received address and sent ACK
 25a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 25e:	88 7f       	andi	r24, 0xF8	; 248
 260:	88 31       	cpi	r24, 0x18	; 24
 262:	09 f0       	breq	.+2      	; 0x266 <pwm_chip_init+0x46>
 264:	6a c0       	rjmp	.+212    	; 0x33a <pwm_chip_init+0x11a>
		return 0;
	}

	// send address of register to be written

	TWDR0 = 0x0; //  ( Mode register 1)
 266:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
 26a:	84 e8       	ldi	r24, 0x84	; 132
 26c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 270:	ec eb       	ldi	r30, 0xBC	; 188
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	88 23       	and	r24, r24
 278:	ec f7       	brge	.-6      	; 0x274 <pwm_chip_init+0x54>


	if ( ((TWSR0 & 0xf8) != 0x28) ){ // confirms that slave has received address of register and sent ACK
 27a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 27e:	88 7f       	andi	r24, 0xF8	; 248
 280:	88 32       	cpi	r24, 0x28	; 40
 282:	09 f0       	breq	.+2      	; 0x286 <pwm_chip_init+0x66>
 284:	5d c0       	rjmp	.+186    	; 0x340 <pwm_chip_init+0x120>
		return 0; 
	}

	// send databyte

	TWDR0 = 0x21; // (00100000)	auto increment enable, clock on
 286:	81 e2       	ldi	r24, 0x21	; 33
 288:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ((1 << TWINT) | (1 << TWEN));
 28c:	84 e8       	ldi	r24, 0x84	; 132
 28e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 292:	ec eb       	ldi	r30, 0xBC	; 188
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	88 23       	and	r24, r24
 29a:	ec f7       	brge	.-6      	; 0x296 <pwm_chip_init+0x76>

	if ( ((TWSR0 & 0xf8) != 0x28) ){ // comfirms that slave has received address of register and sent ACK
 29c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2a0:	88 7f       	andi	r24, 0xF8	; 248
 2a2:	88 32       	cpi	r24, 0x28	; 40
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <pwm_chip_init+0x88>
 2a6:	4f c0       	rjmp	.+158    	; 0x346 <pwm_chip_init+0x126>
		return 0; 
	}

	// send repeated start

	TWCR0 = ((1 << TWEN) | (1 << TWSTA) | (1 << TWINT));
 2a8:	84 ea       	ldi	r24, 0xA4	; 164
 2aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) );
 2ae:	ec eb       	ldi	r30, 0xBC	; 188
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	88 23       	and	r24, r24
 2b6:	ec f7       	brge	.-6      	; 0x2b2 <pwm_chip_init+0x92>

	if ( (TWSR0 & 0xf8) != 0x10){ 
 2b8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2bc:	88 7f       	andi	r24, 0xF8	; 248
 2be:	80 31       	cpi	r24, 0x10	; 16
 2c0:	09 f0       	breq	.+2      	; 0x2c4 <pwm_chip_init+0xa4>
 2c2:	44 c0       	rjmp	.+136    	; 0x34c <pwm_chip_init+0x12c>
		return 0; 
	}

	// send slave address + write bit

	TWDR0 = 0x9E;	// slave address + write (10011110)
 2c4:	8e e9       	ldi	r24, 0x9E	; 158
 2c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
 2ca:	84 e8       	ldi	r24, 0x84	; 132
 2cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 2d0:	ec eb       	ldi	r30, 0xBC	; 188
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	88 23       	and	r24, r24
 2d8:	ec f7       	brge	.-6      	; 0x2d4 <pwm_chip_init+0xb4>

	if ( (TWSR0 & 0xf8) != 0x18){ // confirms that slave has received address and sent ACK
 2da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2de:	88 7f       	andi	r24, 0xF8	; 248
 2e0:	88 31       	cpi	r24, 0x18	; 24
 2e2:	b9 f5       	brne	.+110    	; 0x352 <pwm_chip_init+0x132>
		return 0;
	}

	// send address of register to be written

	TWDR0 = 0xfe; //  ( prescale register)
 2e4:	8e ef       	ldi	r24, 0xFE	; 254
 2e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
 2ea:	84 e8       	ldi	r24, 0x84	; 132
 2ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 2f0:	ec eb       	ldi	r30, 0xBC	; 188
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	88 23       	and	r24, r24
 2f8:	ec f7       	brge	.-6      	; 0x2f4 <pwm_chip_init+0xd4>


	if ( ((TWSR0 & 0xf8) != 0x28) ){ // confirms that slave has received address of register and sent ACK
 2fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2fe:	88 7f       	andi	r24, 0xF8	; 248
 300:	88 32       	cpi	r24, 0x28	; 40
 302:	51 f5       	brne	.+84     	; 0x358 <pwm_chip_init+0x138>
	}


	// send databyte

	TWDR0 = 122; // 50Hz
 304:	8a e7       	ldi	r24, 0x7A	; 122
 306:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ((1 << TWINT) | (1 << TWEN));
 30a:	84 e8       	ldi	r24, 0x84	; 132
 30c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 310:	ec eb       	ldi	r30, 0xBC	; 188
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	88 23       	and	r24, r24
 318:	ec f7       	brge	.-6      	; 0x314 <pwm_chip_init+0xf4>

	if ( ((TWSR0 & 0xf8) != 0x28) ){ // comfirms that slave has received address of register and sent ACK
 31a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 31e:	88 7f       	andi	r24, 0xF8	; 248
 320:	88 32       	cpi	r24, 0x28	; 40
 322:	e9 f4       	brne	.+58     	; 0x35e <pwm_chip_init+0x13e>
		return 0; 
	}

	// stop

	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) ); 
 324:	ec eb       	ldi	r30, 0xBC	; 188
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	84 69       	ori	r24, 0x94	; 148
 32c:	80 83       	st	Z, r24

	return 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	08 95       	ret

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go

	if ( (TWSR0 & 0xf8) != 0x08){ // comfirms that status is infact start condition has gone through

		return 0; 
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	08 95       	ret

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go

	if ( (TWSR0 & 0xf8) != 0x18){ // confirms that slave has received address and sent ACK

		return 0;
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	08 95       	ret
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go


	if ( ((TWSR0 & 0xf8) != 0x28) ){ // confirms that slave has received address of register and sent ACK

		return 0; 
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	08 95       	ret
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go

	if ( ((TWSR0 & 0xf8) != 0x28) ){ // comfirms that slave has received address of register and sent ACK

		return 0; 
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	08 95       	ret

	while(! (TWCR0 & (1 << TWINT)) );

	if ( (TWSR0 & 0xf8) != 0x10){ 

		return 0; 
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	08 95       	ret

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go

	if ( (TWSR0 & 0xf8) != 0x18){ // confirms that slave has received address and sent ACK

		return 0;
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	08 95       	ret
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go


	if ( ((TWSR0 & 0xf8) != 0x28) ){ // confirms that slave has received address of register and sent ACK

		return 0; 
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	08 95       	ret
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go

	if ( ((TWSR0 & 0xf8) != 0x28) ){ // comfirms that slave has received address of register and sent ACK

		return 0; 
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
	return 1;




}
 362:	08 95       	ret

00000364 <read>:


void read(int reg)
{

	TWCR0 |= ( (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
 364:	ec eb       	ldi	r30, 0xBC	; 188
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	90 81       	ld	r25, Z
 36a:	90 6a       	ori	r25, 0xA0	; 160
 36c:	90 83       	st	Z, r25


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 36e:	90 81       	ld	r25, Z
 370:	99 23       	and	r25, r25
 372:	ec f7       	brge	.-6      	; 0x36e <read+0xa>

	if ( (TWSR0 & 0xf8) != 0x08){ // comfirms that status is infact start condition has gone through
 374:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 378:	98 7f       	andi	r25, 0xF8	; 248
 37a:	98 30       	cpi	r25, 0x08	; 8
 37c:	09 f0       	breq	.+2      	; 0x380 <read+0x1c>
 37e:	56 c0       	rjmp	.+172    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	}


	// send slave address + write bit

	TWDR0 = 0x9e;	// slave address + write (connected to VCC) (11010110)
 380:	9e e9       	ldi	r25, 0x9E	; 158
 382:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
 386:	94 e8       	ldi	r25, 0x84	; 132
 388:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 38c:	ec eb       	ldi	r30, 0xBC	; 188
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	90 81       	ld	r25, Z
 392:	99 23       	and	r25, r25
 394:	ec f7       	brge	.-6      	; 0x390 <read+0x2c>

	if ( (TWSR0 & 0xf8) != 0x18){ // confirms that slave has received address and sent ACK
 396:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 39a:	98 7f       	andi	r25, 0xF8	; 248
 39c:	98 31       	cpi	r25, 0x18	; 24
 39e:	09 f0       	breq	.+2      	; 0x3a2 <read+0x3e>
 3a0:	45 c0       	rjmp	.+138    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>



	// send (bit that determines wether read once or multiple times (1 for multiple)) + address of register to be read

	TWDR0 = reg; // ( only one byte to be read)
 3a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
 3a6:	84 e8       	ldi	r24, 0x84	; 132
 3a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 3ac:	ec eb       	ldi	r30, 0xBC	; 188
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	88 23       	and	r24, r24
 3b4:	ec f7       	brge	.-6      	; 0x3b0 <read+0x4c>


	if ( ((TWSR0 & 0xf8) != 0x28) ){ // comfirms that slave has received address of register and sent ACK
 3b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 3ba:	88 7f       	andi	r24, 0xF8	; 248
 3bc:	88 32       	cpi	r24, 0x28	; 40
 3be:	b1 f5       	brne	.+108    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>

	// send repeat start condition // because we are changing from write to read



	TWCR0 = ((1 << TWEN) | (1 << TWSTA) | (1 << TWINT));
 3c0:	84 ea       	ldi	r24, 0xA4	; 164
 3c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) );
 3c6:	ec eb       	ldi	r30, 0xBC	; 188
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	88 23       	and	r24, r24
 3ce:	ec f7       	brge	.-6      	; 0x3ca <read+0x66>

	if ( (TWSR0 & 0xf8) != 0x10){
 3d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 3d4:	88 7f       	andi	r24, 0xF8	; 248
 3d6:	80 31       	cpi	r24, 0x10	; 16
 3d8:	49 f5       	brne	.+82     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>



	// send slave address + read bit

	TWDR0 = 0x9f;	// slave address + read (connected to ground) (00110001)
 3da:	8f e9       	ldi	r24, 0x9F	; 159
 3dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ((1 << TWEN) | (1 << TWINT)); //  enable and clear the flag
 3e0:	84 e8       	ldi	r24, 0x84	; 132
 3e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 3e6:	ec eb       	ldi	r30, 0xBC	; 188
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	88 23       	and	r24, r24
 3ee:	ec f7       	brge	.-6      	; 0x3ea <read+0x86>

	if ( (TWSR0 & 0xf8) != 0x40){ // comfirms that slave has received address and sent ACK
 3f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 3f4:	88 7f       	andi	r24, 0xF8	; 248
 3f6:	80 34       	cpi	r24, 0x40	; 64
 3f8:	c9 f4       	brne	.+50     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>


	// slave sends data


	TWCR0 |= (1 << TWEN) | (1 << TWINT); //  enable and clear the flag  (also sends NACK) ( FOr ACK, add TWEA);
 3fa:	ec eb       	ldi	r30, 0xBC	; 188
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	84 68       	ori	r24, 0x84	; 132
 402:	80 83       	st	Z, r24


	while(! (TWCR0 & (1 << TWINT)) ); // wait for data transmitted
 404:	80 81       	ld	r24, Z
 406:	88 23       	and	r24, r24
 408:	ec f7       	brge	.-6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>


	if ( (TWSR0 & 0xf8) != 0x58){ // confirms that slave has understood that data has been recived and NACK was sent out
 40a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 40e:	88 7f       	andi	r24, 0xF8	; 248
 410:	88 35       	cpi	r24, 0x58	; 88
 412:	61 f4       	brne	.+24     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>

		return 0;
	}
	
	temp = TWDR0;
 414:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 41e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>


	// send stop condition

	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) );
 422:	ec eb       	ldi	r30, 0xBC	; 188
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	84 69       	ori	r24, 0x94	; 148
 42a:	80 83       	st	Z, r24
 42c:	08 95       	ret

0000042e <main>:





int main(void){
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	2a 97       	sbiw	r28, 0x0a	; 10
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61

PORTC |= ( (1 << 5) | (1 << 4) );
 442:	88 b1       	in	r24, 0x08	; 8
 444:	80 63       	ori	r24, 0x30	; 48
 446:	88 b9       	out	0x08, r24	; 8


int motors[5] = {0};
 448:	8e 01       	movw	r16, r28
 44a:	0f 5f       	subi	r16, 0xFF	; 255
 44c:	1f 4f       	sbci	r17, 0xFF	; 255
 44e:	8a e0       	ldi	r24, 0x0A	; 10
 450:	f8 01       	movw	r30, r16
 452:	11 92       	st	Z+, r1
 454:	8a 95       	dec	r24
 456:	e9 f7       	brne	.-6      	; 0x452 <main+0x24>

pwm_chip_init();
 458:	0e 94 10 01 	call	0x220	; 0x220 <pwm_chip_init>
pass_to_pwm_chip(motors);
 45c:	c8 01       	movw	r24, r16
 45e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <pass_to_pwm_chip>





read(0x07);
 462:	87 e0       	ldi	r24, 0x07	; 7
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 b2 01 	call	0x364	; 0x364 <read>





DDRB |= (1 << 1);
 46a:	21 9a       	sbi	0x04, 1	; 4
PORTB |= (1 << 0);
 46c:	28 9a       	sbi	0x05, 0	; 5


init_mux_timer();	// a lot of this function is disconnected
 46e:	0e 94 7f 00 	call	0xfe	; 0xfe <init_mux_timer>
init_free_timer();
 472:	0e 94 6e 00 	call	0xdc	; 0xdc <init_free_timer>
init_extern_ints();	
 476:	0e 94 74 00 	call	0xe8	; 0xe8 <init_extern_ints>

DDRC = 0;
 47a:	17 b8       	out	0x07, r1	; 7
PORTC = 0xFF;
 47c:	8f ef       	ldi	r24, 0xFF	; 255
 47e:	88 b9       	out	0x08, r24	; 8

PORTD |= (1 << 3);
 480:	5b 9a       	sbi	0x0b, 3	; 11


TCCR4B |= ( (1 << WGM13) | (1 << WGM12) | (1 << CS10) );		// selecting fast PWM mode (counts up till selected value then resets)
 482:	e1 ea       	ldi	r30, 0xA1	; 161
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	89 61       	ori	r24, 0x19	; 25
 48a:	80 83       	st	Z, r24

TCCR4A |= ((1 << WGM11)| (1<<COM1A1) | (1<<COM1A0));	// set inverting mode fast pwm
 48c:	e0 ea       	ldi	r30, 0xA0	; 160
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	82 6c       	ori	r24, 0xC2	; 194
 494:	80 83       	st	Z, r24


ICR4 = 0xff;
 496:	8f ef       	ldi	r24, 0xFF	; 255
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 49e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

PORTB |= (1 << 1);
 4a2:	29 9a       	sbi	0x05, 1	; 5



DDRB |= (1 << 1);
 4a4:	21 9a       	sbi	0x04, 1	; 4
DDRB |= (1 << 0);
 4a6:	20 9a       	sbi	0x04, 0	; 4
 4a8:	ff cf       	rjmp	.-2      	; 0x4a8 <main+0x7a>

000004aa <__vector_2>:


return 0;

}
ISR(INT1_vect){
 4aa:	1f 92       	push	r1
 4ac:	0f 92       	push	r0
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	0f 92       	push	r0
 4b2:	11 24       	eor	r1, r1
 4b4:	2f 93       	push	r18
 4b6:	3f 93       	push	r19
 4b8:	8f 93       	push	r24
 4ba:	9f 93       	push	r25
	
		temp = TCNT1;
 4bc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 4c0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 4c4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 4c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if ( temp < temp_timer_aileron){	// timer overflow

			requested_aileron_pos = 0xff- temp_timer_aileron + temp ;
		}
*/
		if (temp > temp_timer_aileron){
 4cc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 4d0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 4d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp_timer_aileron>
 4d8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp_timer_aileron+0x1>
 4dc:	82 17       	cp	r24, r18
 4de:	93 07       	cpc	r25, r19
 4e0:	70 f4       	brcc	.+28     	; 0x4fe <__vector_2+0x54>
	
			requested_aileron_pos = temp - temp_timer_aileron;
 4e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 4e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 4ea:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_aileron>
 4ee:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_aileron+0x1>
 4f2:	82 1b       	sub	r24, r18
 4f4:	93 0b       	sbc	r25, r19
 4f6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_aileron_pos+0x1>
 4fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp;
 4fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 502:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 506:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <temp_timer_aileron+0x1>
 50a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_timer_aileron>
		

		
		
			OCR4A = (requested_aileron_pos >> 8);
 50e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_aileron_pos>
 512:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_aileron_pos+0x1>
 516:	89 2f       	mov	r24, r25
 518:	99 27       	eor	r25, r25
 51a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 51e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>


}
 522:	9f 91       	pop	r25
 524:	8f 91       	pop	r24
 526:	3f 91       	pop	r19
 528:	2f 91       	pop	r18
 52a:	0f 90       	pop	r0
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	0f 90       	pop	r0
 530:	1f 90       	pop	r1
 532:	18 95       	reti

00000534 <__vector_1>:

ISR(INT0_vect){
 534:	1f 92       	push	r1
 536:	0f 92       	push	r0
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	0f 92       	push	r0
 53c:	11 24       	eor	r1, r1
	
	DDRB |= (1 << 7);
 53e:	27 9a       	sbi	0x04, 7	; 4

}
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <_exit>:
 54a:	f8 94       	cli

0000054c <__stop_program>:
 54c:	ff cf       	rjmp	.-2      	; 0x54c <__stop_program>
