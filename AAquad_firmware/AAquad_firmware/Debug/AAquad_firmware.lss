
AAquad_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000066a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000066a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000066a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010f7  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bce  00000000  00000000  000018db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1e  00000000  00000000  000024a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e1  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000270  00000000  00000000  00003669  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000038d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 df 02 	jmp	0x5be	; 0x5be <__vector_1>
   8:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_2>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a6 30       	cpi	r26, 0x06	; 6
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <main>
  d4:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <init_free_timer>:
void init_free_timer(){


	// by default the timer is set to normal mode

	TCCR1B |= ( (1 <<CS10));	// timer will run with an 64x prescaler 
  dc:	e1 e8       	ldi	r30, 0x81	; 129
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <init_extern_ints>:

void init_extern_ints(){

	// int 0

	EIMSK |= (1 << INT0); // enable the int0 interrupt
  e8:	e8 9a       	sbi	0x1d, 0	; 29
																	
	EICRA |= (1 << ISC00);	// will fire at any logical change
  ea:	e9 e6       	ldi	r30, 0x69	; 105
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	80 83       	st	Z, r24

	// int 1

	EIMSK |= (1 << INT1); // enable the int0 interrupt
  f4:	e9 9a       	sbi	0x1d, 1	; 29

	EICRA |= (1 << ISC10);	// will fire at any logical change
  f6:	80 81       	ld	r24, Z
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <init_mux_timer>:

// this timer is responsible for providing the pwm that periodically flips the muxes back and forth
// uses the 8 bit timer 0 for this job


	TCCR0B |= ((1 << CS01) | (1 << CS00)); // the timer will run on the internal clock (currently with 64x prescaler)
  fe:	85 b5       	in	r24, 0x25	; 37
 100:	83 60       	ori	r24, 0x03	; 3
 102:	85 bd       	out	0x25, r24	; 37
 104:	08 95       	ret

00000106 <decode_motors>:



void decode_motors(uint8_t motor, uint8_t* motors, uint8_t*instruction){
	
	uint16_t temp = motors[motor] * 205;	// the actualslope of this curve is 2.05, 100 times larger prevents the .05from falling off
 106:	fb 01       	movw	r30, r22
 108:	e8 0f       	add	r30, r24
 10a:	f1 1d       	adc	r31, r1
	
	temp = ( temp / 100 ) + 205;	// 205 is the value corresponding to 0 for the esc
 10c:	20 81       	ld	r18, Z
 10e:	8d ec       	ldi	r24, 0xCD	; 205
 110:	28 9f       	mul	r18, r24
 112:	90 01       	movw	r18, r0
 114:	11 24       	eor	r1, r1
 116:	36 95       	lsr	r19
 118:	27 95       	ror	r18
 11a:	36 95       	lsr	r19
 11c:	27 95       	ror	r18
 11e:	ab e7       	ldi	r26, 0x7B	; 123
 120:	b4 e1       	ldi	r27, 0x14	; 20
 122:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__umulhisi3>
 126:	96 95       	lsr	r25
 128:	87 95       	ror	r24
 12a:	83 53       	subi	r24, 0x33	; 51
 12c:	9f 4f       	sbci	r25, 0xFF	; 255
	
	instruction[0] = ( temp & 0xff );	// conserves only the low byte
 12e:	fa 01       	movw	r30, r20
 130:	80 83       	st	Z, r24
	
	instruction[1] = (temp >> 8);	// conserves only the high half-byte
 132:	91 83       	std	Z+1, r25	; 0x01
 134:	08 95       	ret

00000136 <start>:



int start(){

	TWCR0 |= (1 << TWEN); // The TWI process takes controll of the I/O pins
 136:	ec eb       	ldi	r30, 0xBC	; 188
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	80 83       	st	Z, r24

	TWCR0 |= ( (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
 140:	80 81       	ld	r24, Z
 142:	80 6a       	ori	r24, 0xA0	; 160
 144:	80 83       	st	Z, r24


	PORTB |= (1 << 1);
 146:	29 9a       	sbi	0x05, 1	; 5


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 148:	80 81       	ld	r24, Z
 14a:	88 23       	and	r24, r24
 14c:	ec f7       	brge	.-6      	; 0x148 <start+0x12>

	if ( (TWSR0 & 0xf8) != 0x08){ // comfirms that status is infact start condition has gone through
 14e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 152:	98 7f       	andi	r25, 0xF8	; 248
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	98 30       	cpi	r25, 0x08	; 8
 15a:	11 f0       	breq	.+4      	; 0x160 <start+0x2a>
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
		return 0; 
	}

	return 1;

}
 160:	c9 01       	movw	r24, r18
 162:	08 95       	ret

00000164 <send_slave>:

int send_slave(){

	// send slave address + write bit

	TWDR0 = 0x9E;	// slave address + write (10011110)
 164:	8e e9       	ldi	r24, 0x9E	; 158
 166:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
 16a:	84 e8       	ldi	r24, 0x84	; 132
 16c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 170:	ec eb       	ldi	r30, 0xBC	; 188
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 23       	and	r24, r24
 178:	ec f7       	brge	.-6      	; 0x174 <send_slave+0x10>

	if ( (TWSR0 & 0xf8) != 0x18){ // confirms that slave has received address and sent ACK
 17a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 17e:	98 7f       	andi	r25, 0xF8	; 248
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	98 31       	cpi	r25, 0x18	; 24
 186:	11 f0       	breq	.+4      	; 0x18c <send_slave+0x28>
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
	}

	return 1;


}
 18c:	c9 01       	movw	r24, r18
 18e:	08 95       	ret

00000190 <send_reg>:

int send_reg(int reg){

	// send  address of register to be written

	TWDR0 = reg; 
 190:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
 194:	84 e8       	ldi	r24, 0x84	; 132
 196:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 19a:	ec eb       	ldi	r30, 0xBC	; 188
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	88 23       	and	r24, r24
 1a2:	ec f7       	brge	.-6      	; 0x19e <send_reg+0xe>


	if ( ((TWSR0 & 0xf8) != 0x28) ){ // confirms that slave has received address of register and sent ACK
 1a4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1a8:	98 7f       	andi	r25, 0xF8	; 248
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	98 32       	cpi	r25, 0x28	; 40
 1b0:	11 f0       	breq	.+4      	; 0x1b6 <send_reg+0x26>
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
	}

	return 1;


}
 1b6:	c9 01       	movw	r24, r18
 1b8:	08 95       	ret

000001ba <send>:


int send(int data){

	TWDR0 = data;
 1ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ((1 << TWINT) | (1 << TWEN));
 1be:	84 e8       	ldi	r24, 0x84	; 132
 1c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 1c4:	ec eb       	ldi	r30, 0xBC	; 188
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	88 23       	and	r24, r24
 1cc:	ec f7       	brge	.-6      	; 0x1c8 <send+0xe>

	if ( ((TWSR0 & 0xf8) != 0x28) ){ // comfirms that slave has accepted data and sent ACK
 1ce:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1d2:	98 7f       	andi	r25, 0xF8	; 248
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	98 32       	cpi	r25, 0x28	; 40
 1da:	11 f0       	breq	.+4      	; 0x1e0 <send+0x26>
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
	}

	return 1;


}
 1e0:	c9 01       	movw	r24, r18
 1e2:	08 95       	ret

000001e4 <stop>:

void stop(){


	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) ); 
 1e4:	ec eb       	ldi	r30, 0xBC	; 188
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	84 69       	ori	r24, 0x94	; 148
 1ec:	80 83       	st	Z, r24
 1ee:	08 95       	ret

000001f0 <pass_to_pwm_chip>:
int send_reg(int reg);
int send(int data);
void stop();


int pass_to_pwm_chip(uint8_t* motors){
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <pass_to_pwm_chip+0xa>
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
// this function will communicate over I2C to the pwmchip for final controll of the motors


	uint8_t instruction[2];	// this array will hold the values that the decodefunction deciphers
	
	decode_motors(0, motors, instruction);
 1fe:	ae 01       	movw	r20, r28
 200:	4f 5f       	subi	r20, 0xFF	; 255
 202:	5f 4f       	sbci	r21, 0xFF	; 255
 204:	bc 01       	movw	r22, r24
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 83 00 	call	0x106	; 0x106 <decode_motors>



	if (! start() ){
 20c:	0e 94 9b 00 	call	0x136	; 0x136 <start>
 210:	00 97       	sbiw	r24, 0x00	; 0
 212:	09 f4       	brne	.+2      	; 0x216 <pass_to_pwm_chip+0x26>
 214:	ac c0       	rjmp	.+344    	; 0x36e <pass_to_pwm_chip+0x17e>

		return 0;
	}

	if (! send_slave() ){
 216:	0e 94 b2 00 	call	0x164	; 0x164 <send_slave>
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	09 f4       	brne	.+2      	; 0x220 <pass_to_pwm_chip+0x30>
 21e:	a7 c0       	rjmp	.+334    	; 0x36e <pass_to_pwm_chip+0x17e>

		return 0;
	}

	if (! send_reg(0x06) ){	//LED0_ON_L
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 c8 00 	call	0x190	; 0x190 <send_reg>
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	09 f4       	brne	.+2      	; 0x22e <pass_to_pwm_chip+0x3e>
 22c:	a0 c0       	rjmp	.+320    	; 0x36e <pass_to_pwm_chip+0x17e>

		return 0;
	}

		if( (send(0) & send(0) & send(0xB0) & send(0x4)) == 0){ //ON_L, ON_H, OFF_L, OFF_H
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 dd 00 	call	0x1ba	; 0x1ba <send>
 236:	8c 01       	movw	r16, r24
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <send>
 240:	08 23       	and	r16, r24
 242:	19 23       	and	r17, r25
 244:	80 eb       	ldi	r24, 0xB0	; 176
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 dd 00 	call	0x1ba	; 0x1ba <send>
 24c:	08 23       	and	r16, r24
 24e:	19 23       	and	r17, r25
 250:	84 e0       	ldi	r24, 0x04	; 4
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 dd 00 	call	0x1ba	; 0x1ba <send>
 258:	80 23       	and	r24, r16
 25a:	91 23       	and	r25, r17
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	09 f4       	brne	.+2      	; 0x262 <pass_to_pwm_chip+0x72>
 260:	86 c0       	rjmp	.+268    	; 0x36e <pass_to_pwm_chip+0x17e>

		return 0;
	}

	stop();
 262:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <stop>





	if (! start() ){
 266:	0e 94 9b 00 	call	0x136	; 0x136 <start>
 26a:	00 97       	sbiw	r24, 0x00	; 0
 26c:	09 f4       	brne	.+2      	; 0x270 <pass_to_pwm_chip+0x80>
 26e:	7f c0       	rjmp	.+254    	; 0x36e <pass_to_pwm_chip+0x17e>

		return 0;
	}

	if (! send_slave() ){
 270:	0e 94 b2 00 	call	0x164	; 0x164 <send_slave>
 274:	00 97       	sbiw	r24, 0x00	; 0
 276:	09 f4       	brne	.+2      	; 0x27a <pass_to_pwm_chip+0x8a>
 278:	7a c0       	rjmp	.+244    	; 0x36e <pass_to_pwm_chip+0x17e>

		return 0;
	}

	if (! send_reg(0x16) ){	//LED4_ON_L
 27a:	86 e1       	ldi	r24, 0x16	; 22
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 c8 00 	call	0x190	; 0x190 <send_reg>
 282:	00 97       	sbiw	r24, 0x00	; 0
 284:	09 f4       	brne	.+2      	; 0x288 <pass_to_pwm_chip+0x98>
 286:	73 c0       	rjmp	.+230    	; 0x36e <pass_to_pwm_chip+0x17e>

		return 0;
	}


	if( (send(0) & send(0) & send(0xB0) & send(0x4)) == 0){ //ON_L, ON_H, OFF_L, OFF_H
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <send>
 290:	8c 01       	movw	r16, r24
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 dd 00 	call	0x1ba	; 0x1ba <send>
 29a:	08 23       	and	r16, r24
 29c:	19 23       	and	r17, r25
 29e:	80 eb       	ldi	r24, 0xB0	; 176
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <send>
 2a6:	08 23       	and	r16, r24
 2a8:	19 23       	and	r17, r25
 2aa:	84 e0       	ldi	r24, 0x04	; 4
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 dd 00 	call	0x1ba	; 0x1ba <send>
 2b2:	80 23       	and	r24, r16
 2b4:	91 23       	and	r25, r17
 2b6:	00 97       	sbiw	r24, 0x00	; 0
 2b8:	09 f4       	brne	.+2      	; 0x2bc <pass_to_pwm_chip+0xcc>
 2ba:	59 c0       	rjmp	.+178    	; 0x36e <pass_to_pwm_chip+0x17e>

		return 0;
	}

	stop();
 2bc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <stop>
	




	if (! start() ){
 2c0:	0e 94 9b 00 	call	0x136	; 0x136 <start>
 2c4:	00 97       	sbiw	r24, 0x00	; 0
 2c6:	09 f4       	brne	.+2      	; 0x2ca <pass_to_pwm_chip+0xda>
 2c8:	52 c0       	rjmp	.+164    	; 0x36e <pass_to_pwm_chip+0x17e>

		return 0;
	}

	if (! send_slave() ){
 2ca:	0e 94 b2 00 	call	0x164	; 0x164 <send_slave>
 2ce:	00 97       	sbiw	r24, 0x00	; 0
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <pass_to_pwm_chip+0xe4>
 2d2:	4d c0       	rjmp	.+154    	; 0x36e <pass_to_pwm_chip+0x17e>

		return 0;
	}

	if (! send_reg(0x2E) ){	//LED15_ON_L
 2d4:	8e e2       	ldi	r24, 0x2E	; 46
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 c8 00 	call	0x190	; 0x190 <send_reg>
 2dc:	00 97       	sbiw	r24, 0x00	; 0
 2de:	09 f4       	brne	.+2      	; 0x2e2 <pass_to_pwm_chip+0xf2>
 2e0:	46 c0       	rjmp	.+140    	; 0x36e <pass_to_pwm_chip+0x17e>

		return 0;
	}


	if( (send(0) & send(0) & send(0xB0) & send(0x4)) == 0){ //ON_L, ON_H, OFF_L, OFF_H
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <send>
 2ea:	8c 01       	movw	r16, r24
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <send>
 2f4:	08 23       	and	r16, r24
 2f6:	19 23       	and	r17, r25
 2f8:	80 eb       	ldi	r24, 0xB0	; 176
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <send>
 300:	08 23       	and	r16, r24
 302:	19 23       	and	r17, r25
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 dd 00 	call	0x1ba	; 0x1ba <send>
 30c:	80 23       	and	r24, r16
 30e:	91 23       	and	r25, r17
 310:	00 97       	sbiw	r24, 0x00	; 0
 312:	69 f1       	breq	.+90     	; 0x36e <pass_to_pwm_chip+0x17e>

		return 0;
	}

	stop();
 314:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <stop>





	if (! start() ){
 318:	0e 94 9b 00 	call	0x136	; 0x136 <start>
 31c:	00 97       	sbiw	r24, 0x00	; 0
 31e:	39 f1       	breq	.+78     	; 0x36e <pass_to_pwm_chip+0x17e>

		return 0;
	}

	if (! send_slave() ){
 320:	0e 94 b2 00 	call	0x164	; 0x164 <send_slave>
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	19 f1       	breq	.+70     	; 0x36e <pass_to_pwm_chip+0x17e>

		return 0;
	}

	if (! send_reg(0x42) ){	//LED15_ON_L
 328:	82 e4       	ldi	r24, 0x42	; 66
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 c8 00 	call	0x190	; 0x190 <send_reg>
 330:	00 97       	sbiw	r24, 0x00	; 0
 332:	e9 f0       	breq	.+58     	; 0x36e <pass_to_pwm_chip+0x17e>

		return 0;
	}


	if( (send(0) & send(0) & send(0xB0) & send(0x4)) == 0){ //ON_L, ON_H, OFF_L, OFF_H
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 dd 00 	call	0x1ba	; 0x1ba <send>
 33c:	8c 01       	movw	r16, r24
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 dd 00 	call	0x1ba	; 0x1ba <send>
 346:	08 23       	and	r16, r24
 348:	19 23       	and	r17, r25
 34a:	80 eb       	ldi	r24, 0xB0	; 176
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <send>
 352:	08 23       	and	r16, r24
 354:	19 23       	and	r17, r25
 356:	84 e0       	ldi	r24, 0x04	; 4
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <send>
 35e:	80 23       	and	r24, r16
 360:	91 23       	and	r25, r17
 362:	00 97       	sbiw	r24, 0x00	; 0
 364:	21 f0       	breq	.+8      	; 0x36e <pass_to_pwm_chip+0x17e>

		return 0;
	}

	stop();
 366:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <stop>





	return 1;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0


}
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	08 95       	ret

0000037c <pwm_chip_init>:


int pwm_chip_init(){
	
	
	DDRB |= (1 << 2);	// set OE to 0;
 37c:	22 9a       	sbi	0x04, 2	; 4

	//This function sets the auto increment, the prescaler and any other necessary feature required for the pwm chip to run 

	TWBR0 = (1 << 1); // I'll run the cpu at 1 MHz, this divides the value by 2 for 50 KHZ
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when read
 384:	84 ea       	ldi	r24, 0xA4	; 164
 386:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 38a:	ec eb       	ldi	r30, 0xBC	; 188
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	88 23       	and	r24, r24
 392:	ec f7       	brge	.-6      	; 0x38e <pwm_chip_init+0x12>

	if ( (TWSR0 & 0xf8) != 0x08){ // comfirms that status is infact start condition has gone through
 394:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 398:	88 7f       	andi	r24, 0xF8	; 248
 39a:	88 30       	cpi	r24, 0x08	; 8
 39c:	09 f0       	breq	.+2      	; 0x3a0 <pwm_chip_init+0x24>
 39e:	78 c0       	rjmp	.+240    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	}


	// send slave address + write bit
	
	TWDR0 = 0x9E;	// slave address + write (10011110)
 3a0:	8e e9       	ldi	r24, 0x9E	; 158
 3a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	
	TWCR0 =( (1 << TWEN) | (1 << TWINT) ); // The TWI process takes controll of the I/O pins
 3a6:	84 e8       	ldi	r24, 0x84	; 132
 3a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 3ac:	ec eb       	ldi	r30, 0xBC	; 188
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	88 23       	and	r24, r24
 3b4:	ec f7       	brge	.-6      	; 0x3b0 <pwm_chip_init+0x34>

	if ( (TWSR0 & 0xf8) != 0x18){ // confirms that slave has received address and sent ACK
 3b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 3ba:	88 7f       	andi	r24, 0xF8	; 248
 3bc:	88 31       	cpi	r24, 0x18	; 24
 3be:	09 f0       	breq	.+2      	; 0x3c2 <pwm_chip_init+0x46>
 3c0:	6a c0       	rjmp	.+212    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		return 0;
	}

	// send address of register to be written

	TWDR0 = 0x0; //  ( Mode register 1)
 3c2:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
 3c6:	84 e8       	ldi	r24, 0x84	; 132
 3c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 3cc:	ec eb       	ldi	r30, 0xBC	; 188
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	88 23       	and	r24, r24
 3d4:	ec f7       	brge	.-6      	; 0x3d0 <pwm_chip_init+0x54>


	if ( ((TWSR0 & 0xf8) != 0x28) ){ // confirms that slave has received address of register and sent ACK
 3d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 3da:	88 7f       	andi	r24, 0xF8	; 248
 3dc:	88 32       	cpi	r24, 0x28	; 40
 3de:	09 f0       	breq	.+2      	; 0x3e2 <pwm_chip_init+0x66>
 3e0:	5d c0       	rjmp	.+186    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		return 0; 
	}

	// send databyte

	TWDR0 = 0x21; // (00100000)	auto increment enable, clock on
 3e2:	81 e2       	ldi	r24, 0x21	; 33
 3e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ((1 << TWINT) | (1 << TWEN));
 3e8:	84 e8       	ldi	r24, 0x84	; 132
 3ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 3ee:	ec eb       	ldi	r30, 0xBC	; 188
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	88 23       	and	r24, r24
 3f6:	ec f7       	brge	.-6      	; 0x3f2 <pwm_chip_init+0x76>

	if ( ((TWSR0 & 0xf8) != 0x28) ){ // comfirms that slave has received address of register and sent ACK
 3f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 3fc:	88 7f       	andi	r24, 0xF8	; 248
 3fe:	88 32       	cpi	r24, 0x28	; 40
 400:	09 f0       	breq	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	4f c0       	rjmp	.+158    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		return 0; 
	}

	// send repeated start

	TWCR0 = ((1 << TWEN) | (1 << TWSTA) | (1 << TWINT));
 404:	84 ea       	ldi	r24, 0xA4	; 164
 406:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) );
 40a:	ec eb       	ldi	r30, 0xBC	; 188
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	88 23       	and	r24, r24
 412:	ec f7       	brge	.-6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

	if ( (TWSR0 & 0xf8) != 0x10){ 
 414:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 418:	88 7f       	andi	r24, 0xF8	; 248
 41a:	80 31       	cpi	r24, 0x10	; 16
 41c:	09 f0       	breq	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	44 c0       	rjmp	.+136    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		return 0; 
	}

	// send slave address + write bit

	TWDR0 = 0x9E;	// slave address + write (10011110)
 420:	8e e9       	ldi	r24, 0x9E	; 158
 422:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
 426:	84 e8       	ldi	r24, 0x84	; 132
 428:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 42c:	ec eb       	ldi	r30, 0xBC	; 188
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	88 23       	and	r24, r24
 434:	ec f7       	brge	.-6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>

	if ( (TWSR0 & 0xf8) != 0x18){ // confirms that slave has received address and sent ACK
 436:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 43a:	88 7f       	andi	r24, 0xF8	; 248
 43c:	88 31       	cpi	r24, 0x18	; 24
 43e:	b9 f5       	brne	.+110    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
		return 0;
	}

	// send address of register to be written

	TWDR0 = 0xfe; //  ( prescale register)
 440:	8e ef       	ldi	r24, 0xFE	; 254
 442:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
 446:	84 e8       	ldi	r24, 0x84	; 132
 448:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 44c:	ec eb       	ldi	r30, 0xBC	; 188
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	88 23       	and	r24, r24
 454:	ec f7       	brge	.-6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>


	if ( ((TWSR0 & 0xf8) != 0x28) ){ // confirms that slave has received address of register and sent ACK
 456:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 45a:	88 7f       	andi	r24, 0xF8	; 248
 45c:	88 32       	cpi	r24, 0x28	; 40
 45e:	51 f5       	brne	.+84     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
	}


	// send databyte

	TWDR0 = 122; // 50Hz
 460:	8a e7       	ldi	r24, 0x7A	; 122
 462:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ((1 << TWINT) | (1 << TWEN));
 466:	84 e8       	ldi	r24, 0x84	; 132
 468:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 46c:	ec eb       	ldi	r30, 0xBC	; 188
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	88 23       	and	r24, r24
 474:	ec f7       	brge	.-6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>

	if ( ((TWSR0 & 0xf8) != 0x28) ){ // comfirms that slave has received address of register and sent ACK
 476:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 47a:	88 7f       	andi	r24, 0xF8	; 248
 47c:	88 32       	cpi	r24, 0x28	; 40
 47e:	e9 f4       	brne	.+58     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		return 0; 
	}

	// stop

	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) ); 
 480:	ec eb       	ldi	r30, 0xBC	; 188
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	84 69       	ori	r24, 0x94	; 148
 488:	80 83       	st	Z, r24

	return 1;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	08 95       	ret

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go

	if ( (TWSR0 & 0xf8) != 0x08){ // comfirms that status is infact start condition has gone through

		return 0; 
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	08 95       	ret

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go

	if ( (TWSR0 & 0xf8) != 0x18){ // confirms that slave has received address and sent ACK

		return 0;
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	08 95       	ret
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go


	if ( ((TWSR0 & 0xf8) != 0x28) ){ // confirms that slave has received address of register and sent ACK

		return 0; 
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	08 95       	ret
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go

	if ( ((TWSR0 & 0xf8) != 0x28) ){ // comfirms that slave has received address of register and sent ACK

		return 0; 
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	08 95       	ret

	while(! (TWCR0 & (1 << TWINT)) );

	if ( (TWSR0 & 0xf8) != 0x10){ 

		return 0; 
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	08 95       	ret

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go

	if ( (TWSR0 & 0xf8) != 0x18){ // confirms that slave has received address and sent ACK

		return 0;
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	08 95       	ret
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go


	if ( ((TWSR0 & 0xf8) != 0x28) ){ // confirms that slave has received address of register and sent ACK

		return 0; 
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	08 95       	ret
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go

	if ( ((TWSR0 & 0xf8) != 0x28) ){ // comfirms that slave has received address of register and sent ACK

		return 0; 
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
	return 1;




}
 4be:	08 95       	ret

000004c0 <main>:

	volatile uint16_t requested_aileron_pos = 0; 
	volatile uint16_t temp_timer_aileron = 0; 
	volatile uint16_t temp = 0;

int main(void){
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
 4c8:	2a 97       	sbiw	r28, 0x0a	; 10
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	de bf       	out	0x3e, r29	; 62
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	cd bf       	out	0x3d, r28	; 61

PORTC |= ( (1 << 5) | (1 << 4) );
 4d4:	88 b1       	in	r24, 0x08	; 8
 4d6:	80 63       	ori	r24, 0x30	; 48
 4d8:	88 b9       	out	0x08, r24	; 8


int motors[5] = {0};
 4da:	8e 01       	movw	r16, r28
 4dc:	0f 5f       	subi	r16, 0xFF	; 255
 4de:	1f 4f       	sbci	r17, 0xFF	; 255
 4e0:	8a e0       	ldi	r24, 0x0A	; 10
 4e2:	f8 01       	movw	r30, r16
 4e4:	11 92       	st	Z+, r1
 4e6:	8a 95       	dec	r24
 4e8:	e9 f7       	brne	.-6      	; 0x4e4 <main+0x24>

pwm_chip_init();
 4ea:	0e 94 be 01 	call	0x37c	; 0x37c <pwm_chip_init>
pass_to_pwm_chip(motors);
 4ee:	c8 01       	movw	r24, r16
 4f0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <pass_to_pwm_chip>


DDRB |= (1 << 1);
 4f4:	21 9a       	sbi	0x04, 1	; 4
PORTB |= (1 << 0);
 4f6:	28 9a       	sbi	0x05, 0	; 5


init_mux_timer();	// a lot of this function is disconnected
 4f8:	0e 94 7f 00 	call	0xfe	; 0xfe <init_mux_timer>
init_free_timer();
 4fc:	0e 94 6e 00 	call	0xdc	; 0xdc <init_free_timer>
init_extern_ints();	
 500:	0e 94 74 00 	call	0xe8	; 0xe8 <init_extern_ints>

DDRC = 0;
 504:	17 b8       	out	0x07, r1	; 7
PORTC = 0xFF;
 506:	8f ef       	ldi	r24, 0xFF	; 255
 508:	88 b9       	out	0x08, r24	; 8

PORTD |= (1 << 3);
 50a:	5b 9a       	sbi	0x0b, 3	; 11


TCCR4B |= ( (1 << WGM13) | (1 << WGM12) | (1 << CS10) );		// selecting fast PWM mode (counts up till selected value then resets)
 50c:	e1 ea       	ldi	r30, 0xA1	; 161
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	89 61       	ori	r24, 0x19	; 25
 514:	80 83       	st	Z, r24

TCCR4A |= ((1 << WGM11)| (1<<COM1A1) | (1<<COM1A0));	// set inverting mode fast pwm
 516:	e0 ea       	ldi	r30, 0xA0	; 160
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	82 6c       	ori	r24, 0xC2	; 194
 51e:	80 83       	st	Z, r24


ICR4 = 0xff;
 520:	8f ef       	ldi	r24, 0xFF	; 255
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 528:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

PORTB |= (1 << 1);
 52c:	29 9a       	sbi	0x05, 1	; 5



DDRB |= (1 << 1);
 52e:	21 9a       	sbi	0x04, 1	; 4
DDRB |= (1 << 0);
 530:	20 9a       	sbi	0x04, 0	; 4
 532:	ff cf       	rjmp	.-2      	; 0x532 <main+0x72>

00000534 <__vector_2>:


return 0;

}
ISR(INT1_vect){
 534:	1f 92       	push	r1
 536:	0f 92       	push	r0
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	0f 92       	push	r0
 53c:	11 24       	eor	r1, r1
 53e:	2f 93       	push	r18
 540:	3f 93       	push	r19
 542:	8f 93       	push	r24
 544:	9f 93       	push	r25
	
		temp = TCNT1;
 546:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 54a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 54e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 552:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if ( temp < temp_timer_aileron){	// timer overflow

			requested_aileron_pos = 0xff- temp_timer_aileron + temp ;
		}
*/
		if (temp > temp_timer_aileron){
 556:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 55a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 55e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp_timer_aileron>
 562:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp_timer_aileron+0x1>
 566:	82 17       	cp	r24, r18
 568:	93 07       	cpc	r25, r19
 56a:	70 f4       	brcc	.+28     	; 0x588 <__vector_2+0x54>
	
			requested_aileron_pos = temp - temp_timer_aileron;
 56c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 570:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 574:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_timer_aileron>
 578:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <temp_timer_aileron+0x1>
 57c:	82 1b       	sub	r24, r18
 57e:	93 0b       	sbc	r25, r19
 580:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <requested_aileron_pos+0x1>
 584:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp;
 588:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 58c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 590:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <temp_timer_aileron+0x1>
 594:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_timer_aileron>
		

		
		
			OCR4A = (requested_aileron_pos >> 8);
 598:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <requested_aileron_pos>
 59c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <requested_aileron_pos+0x1>
 5a0:	89 2f       	mov	r24, r25
 5a2:	99 27       	eor	r25, r25
 5a4:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 5a8:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>


}
 5ac:	9f 91       	pop	r25
 5ae:	8f 91       	pop	r24
 5b0:	3f 91       	pop	r19
 5b2:	2f 91       	pop	r18
 5b4:	0f 90       	pop	r0
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	0f 90       	pop	r0
 5ba:	1f 90       	pop	r1
 5bc:	18 95       	reti

000005be <__vector_1>:

ISR(INT0_vect){
 5be:	1f 92       	push	r1
 5c0:	0f 92       	push	r0
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	0f 92       	push	r0
 5c6:	11 24       	eor	r1, r1
	
	DDRB |= (1 << 7);
 5c8:	27 9a       	sbi	0x04, 7	; 4

}
 5ca:	0f 90       	pop	r0
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	0f 90       	pop	r0
 5d0:	1f 90       	pop	r1
 5d2:	18 95       	reti

000005d4 <__umulhisi3>:
 5d4:	a2 9f       	mul	r26, r18
 5d6:	b0 01       	movw	r22, r0
 5d8:	b3 9f       	mul	r27, r19
 5da:	c0 01       	movw	r24, r0
 5dc:	a3 9f       	mul	r26, r19
 5de:	70 0d       	add	r23, r0
 5e0:	81 1d       	adc	r24, r1
 5e2:	11 24       	eor	r1, r1
 5e4:	91 1d       	adc	r25, r1
 5e6:	b2 9f       	mul	r27, r18
 5e8:	70 0d       	add	r23, r0
 5ea:	81 1d       	adc	r24, r1
 5ec:	11 24       	eor	r1, r1
 5ee:	91 1d       	adc	r25, r1
 5f0:	08 95       	ret

000005f2 <_exit>:
 5f2:	f8 94       	cli

000005f4 <__stop_program>:
 5f4:	ff cf       	rjmp	.-2      	; 0x5f4 <__stop_program>
