
AAquad_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000079a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000726  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  0000079a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000079a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001168  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c41  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000993  00000000  00000000  000026f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00003088  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000631  00000000  00000000  00003254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000104  00000000  00000000  00003885  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003989  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_1>
   8:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_2>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	ab 30       	cpi	r26, 0x0B	; 11
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 56 01 	call	0x2ac	; 0x2ac <main>
  d4:	0c 94 91 03 	jmp	0x722	; 0x722 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <acc_init>:
#include "acc_init.h"

int acc_init(){


	if  ( ! start() ){
  dc:	0e 94 a4 00 	call	0x148	; 0x148 <start>
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	b1 f0       	breq	.+44     	; 0x110 <acc_init+0x34>

		return 0;
	} 

	if ( ! send_slave(0x32) ){	// slave + w
  e4:	82 e3       	ldi	r24, 0x32	; 50
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 ca 00 	call	0x194	; 0x194 <send_slave>
  ec:	00 97       	sbiw	r24, 0x00	; 0
  ee:	81 f0       	breq	.+32     	; 0x110 <acc_init+0x34>

		return 0;
	} 

	if ( ! send_reg(0x20) ){	// Control register 1
  f0:	80 e2       	ldi	r24, 0x20	; 32
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 df 00 	call	0x1be	; 0x1be <send_reg>
  f8:	00 97       	sbiw	r24, 0x00	; 0
  fa:	51 f0       	breq	.+20     	; 0x110 <acc_init+0x34>

		return 0;
	}

	if ( ! send(0x67) ){	// all axis enable data refresh rate is 200Hz
  fc:	87 e6       	ldi	r24, 0x67	; 103
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <send>
 104:	00 97       	sbiw	r24, 0x00	; 0
 106:	21 f0       	breq	.+8      	; 0x110 <acc_init+0x34>

		return 0;
	}


	stop();
 108:	0e 94 09 01 	call	0x212	; 0x212 <stop>
	
	return 1;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	08 95       	ret

00000112 <gyro_init>:
#include "gyro_init.h"

int gyro_init(){


	if  ( ! start() ){
 112:	0e 94 a4 00 	call	0x148	; 0x148 <start>
 116:	00 97       	sbiw	r24, 0x00	; 0
 118:	b1 f0       	breq	.+44     	; 0x146 <gyro_init+0x34>

		return 0;
	} 

	if ( ! send_slave(0xD6) ){	// slave + w
 11a:	86 ed       	ldi	r24, 0xD6	; 214
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 ca 00 	call	0x194	; 0x194 <send_slave>
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	81 f0       	breq	.+32     	; 0x146 <gyro_init+0x34>

		return 0;
	} 

	if ( ! send_reg(0x20) ){	// Control register 1
 126:	80 e2       	ldi	r24, 0x20	; 32
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 df 00 	call	0x1be	; 0x1be <send_reg>
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	51 f0       	breq	.+20     	; 0x146 <gyro_init+0x34>

		return 0;
	}

	if ( ! send(0x15) ){	// all axis enable data refresh rate is 100Hz (a lot of other params also affected)
 132:	85 e1       	ldi	r24, 0x15	; 21
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <send>
 13a:	00 97       	sbiw	r24, 0x00	; 0
 13c:	21 f0       	breq	.+8      	; 0x146 <gyro_init+0x34>

		return 0;
	}


	stop();
 13e:	0e 94 09 01 	call	0x212	; 0x212 <stop>
	
	return 1;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	08 95       	ret

00000148 <start>:



int start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
 148:	84 ea       	ldi	r24, 0xA4	; 164
 14a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 14e:	ec eb       	ldi	r30, 0xBC	; 188
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	88 23       	and	r24, r24
 156:	ec f7       	brge	.-6      	; 0x152 <start+0xa>

	if ( (TWSR0 & 0xf8) != 0x08){ // comfirms that status is infact start condition has gone through
 158:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 15c:	98 7f       	andi	r25, 0xF8	; 248
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	98 30       	cpi	r25, 0x08	; 8
 164:	11 f0       	breq	.+4      	; 0x16a <start+0x22>
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
		return 0; 
	}

	return 1;

}
 16a:	c9 01       	movw	r24, r18
 16c:	08 95       	ret

0000016e <repeat_start>:


int repeat_start(){

	TWCR0 = ( (1 << TWEN) | (1 << TWSTA ) | (1 << TWINT) ); // writes the start condition on the line  and Hardware will clear this bit when ready
 16e:	84 ea       	ldi	r24, 0xA4	; 164
 170:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 174:	ec eb       	ldi	r30, 0xBC	; 188
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	88 23       	and	r24, r24
 17c:	ec f7       	brge	.-6      	; 0x178 <repeat_start+0xa>

	if ( (TWSR0 & 0xf8) != 0x10){ // comfirms reapeated start
 17e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 182:	98 7f       	andi	r25, 0xF8	; 248
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	90 31       	cpi	r25, 0x10	; 16
 18a:	11 f0       	breq	.+4      	; 0x190 <repeat_start+0x22>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
		return 0; 
	}

	return 1;

}
 190:	c9 01       	movw	r24, r18
 192:	08 95       	ret

00000194 <send_slave>:

int send_slave(int address){

	// send slave address + write bit

	TWDR0 = address;
 194:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
 198:	84 e8       	ldi	r24, 0x84	; 132
 19a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 19e:	ec eb       	ldi	r30, 0xBC	; 188
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	88 23       	and	r24, r24
 1a6:	ec f7       	brge	.-6      	; 0x1a2 <send_slave+0xe>

	if ( (TWSR0 & 0xf8) != 0x18){ // confirms that slave has received address and sent ACK
 1a8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1ac:	98 7f       	andi	r25, 0xF8	; 248
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	98 31       	cpi	r25, 0x18	; 24
 1b4:	11 f0       	breq	.+4      	; 0x1ba <send_slave+0x26>
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
	}

	return 1;


}
 1ba:	c9 01       	movw	r24, r18
 1bc:	08 95       	ret

000001be <send_reg>:

int send_reg(int reg){

	// send  address of register to be written

	TWDR0 = reg; 
 1be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

  	TWCR0 = ( (1 << TWINT) | (1 << TWEN) );
 1c2:	84 e8       	ldi	r24, 0x84	; 132
 1c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 1c8:	ec eb       	ldi	r30, 0xBC	; 188
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	88 23       	and	r24, r24
 1d0:	ec f7       	brge	.-6      	; 0x1cc <send_reg+0xe>


	if ( ((TWSR0 & 0xf8) != 0x28) ){ // confirms that slave has received address of register and sent ACK
 1d2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1d6:	98 7f       	andi	r25, 0xF8	; 248
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	98 32       	cpi	r25, 0x28	; 40
 1de:	11 f0       	breq	.+4      	; 0x1e4 <send_reg+0x26>
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
	}

	return 1;


}
 1e4:	c9 01       	movw	r24, r18
 1e6:	08 95       	ret

000001e8 <send>:


int send(int data){

	TWDR0 = data;
 1e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

	TWCR0 = ((1 << TWINT) | (1 << TWEN));
 1ec:	84 e8       	ldi	r24, 0x84	; 132
 1ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(! (TWCR0 & (1 << TWINT)) ); // Hardware will write this to 0 when ready to go
 1f2:	ec eb       	ldi	r30, 0xBC	; 188
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	88 23       	and	r24, r24
 1fa:	ec f7       	brge	.-6      	; 0x1f6 <send+0xe>

	if ( ((TWSR0 & 0xf8) != 0x28) ){ // comfirms that slave has accepted data and sent ACK
 1fc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 200:	98 7f       	andi	r25, 0xF8	; 248
 202:	21 e0       	ldi	r18, 0x01	; 1
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	98 32       	cpi	r25, 0x28	; 40
 208:	11 f0       	breq	.+4      	; 0x20e <send+0x26>
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
	}

	return 1;


}
 20e:	c9 01       	movw	r24, r18
 210:	08 95       	ret

00000212 <stop>:

void stop(){


	TWCR0 |= ( (1 << TWEN) | (1 << TWINT) | (1 << TWSTO) ); 
 212:	ec eb       	ldi	r30, 0xBC	; 188
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	84 69       	ori	r24, 0x94	; 148
 21a:	80 83       	st	Z, r24
 21c:	08 95       	ret

0000021e <I2C_init>:

// this function does everything required toset up I2C correctly

void I2C_init(){

	TWBR0 = 150;
 21e:	86 e9       	ldi	r24, 0x96	; 150
 220:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 224:	08 95       	ret

00000226 <init_free_timer>:
void init_free_timer(){


	// by default the timer is set to normal mode

	TCCR1B |= ( (1 <<CS10));	// timer will run with an no prescaler 
 226:	e1 e8       	ldi	r30, 0x81	; 129
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	81 60       	ori	r24, 0x01	; 1
 22e:	80 83       	st	Z, r24
 230:	08 95       	ret

00000232 <init_extern_ints>:

void init_extern_ints(){

	// int 0

	EIMSK |= (1 << INT0); // enable the int0 interrupt
 232:	e8 9a       	sbi	0x1d, 0	; 29
																	
	EICRA |= (1 << ISC00);	// will fire at any logical change
 234:	e9 e6       	ldi	r30, 0x69	; 105
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	80 83       	st	Z, r24

	// int 1

	EIMSK |= (1 << INT1); // enable the int0 interrupt
 23e:	e9 9a       	sbi	0x1d, 1	; 29

	EICRA |= (1 << ISC10);	// will fire at any logical change
 240:	80 81       	ld	r24, Z
 242:	84 60       	ori	r24, 0x04	; 4
 244:	80 83       	st	Z, r24
 246:	08 95       	ret

00000248 <pwm_chip_init>:


int pwm_chip_init(){
	
	
	DDRB |= (1 << 2);	// set OE to 0;
 248:	22 9a       	sbi	0x04, 2	; 4
	//This function sets the auto increment, the prescaler and any other necessary feature required for the pwm chip to run 

	//TWBR0 = (1 << 1); // I'll run the cpu at 1 MHz, this divides the value by 2 for 50 KHZ


	if  ( ! start() ){
 24a:	0e 94 a4 00 	call	0x148	; 0x148 <start>
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	61 f1       	breq	.+88     	; 0x2aa <pwm_chip_init+0x62>

		return 0;
	} 

	if ( ! send_slave(0x9E) ){
 252:	8e e9       	ldi	r24, 0x9E	; 158
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 ca 00 	call	0x194	; 0x194 <send_slave>
 25a:	00 97       	sbiw	r24, 0x00	; 0
 25c:	31 f1       	breq	.+76     	; 0x2aa <pwm_chip_init+0x62>

		return 0;
	} 

	if ( ! send_reg(0x0) ){	// mode register 1
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 df 00 	call	0x1be	; 0x1be <send_reg>
 266:	00 97       	sbiw	r24, 0x00	; 0
 268:	01 f1       	breq	.+64     	; 0x2aa <pwm_chip_init+0x62>

		return 0;
	}

	if ( ! send(0x21) ){	// clock on, auto-increment enable
 26a:	81 e2       	ldi	r24, 0x21	; 33
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <send>
 272:	00 97       	sbiw	r24, 0x00	; 0
 274:	d1 f0       	breq	.+52     	; 0x2aa <pwm_chip_init+0x62>

		return 0;
	}

	if ( ! repeat_start() ){
 276:	0e 94 b7 00 	call	0x16e	; 0x16e <repeat_start>
 27a:	00 97       	sbiw	r24, 0x00	; 0
 27c:	b1 f0       	breq	.+44     	; 0x2aa <pwm_chip_init+0x62>

		return 0;
	}

	if ( ! send_slave(0x9E) ){
 27e:	8e e9       	ldi	r24, 0x9E	; 158
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 ca 00 	call	0x194	; 0x194 <send_slave>
 286:	00 97       	sbiw	r24, 0x00	; 0
 288:	81 f0       	breq	.+32     	; 0x2aa <pwm_chip_init+0x62>

		return 0;
	}

	if ( ! send_reg(0xFE) ){	// pre scale register
 28a:	8e ef       	ldi	r24, 0xFE	; 254
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 df 00 	call	0x1be	; 0x1be <send_reg>
 292:	00 97       	sbiw	r24, 0x00	; 0
 294:	51 f0       	breq	.+20     	; 0x2aa <pwm_chip_init+0x62>

		return 0;
	}


	if ( ! send(122) ){
 296:	8a e7       	ldi	r24, 0x7A	; 122
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <send>
 29e:	00 97       	sbiw	r24, 0x00	; 0
 2a0:	21 f0       	breq	.+8      	; 0x2aa <pwm_chip_init+0x62>

		return 0;
	}

	stop();
 2a2:	0e 94 09 01 	call	0x212	; 0x212 <stop>

	return 1;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0




}
 2aa:	08 95       	ret

000002ac <main>:
	volatile uint16_t temp0 = 0;	// used in ISR(ext_int_o)
	volatile bool new_aileron_data_available = false;

int main(void){

PORTC |= ( (1 << 5) | (1 << 4) );	// pulup resistors fix this in hardware!!!!!!
 2ac:	88 b1       	in	r24, 0x08	; 8
 2ae:	80 63       	ori	r24, 0x30	; 48
 2b0:	88 b9       	out	0x08, r24	; 8

init_free_timer();
 2b2:	0e 94 13 01 	call	0x226	; 0x226 <init_free_timer>
init_extern_ints();	
 2b6:	0e 94 19 01 	call	0x232	; 0x232 <init_extern_ints>
I2C_init();
 2ba:	0e 94 0f 01 	call	0x21e	; 0x21e <I2C_init>


if (! pwm_chip_init() ){
 2be:	0e 94 24 01 	call	0x248	; 0x248 <pwm_chip_init>
 2c2:	89 2b       	or	r24, r25
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <main+0x1c>

	PORTB |= (1 << 0);
 2c6:	28 9a       	sbi	0x05, 0	; 5
}




if (! gyro_init() ){
 2c8:	0e 94 89 00 	call	0x112	; 0x112 <gyro_init>
 2cc:	89 2b       	or	r24, r25
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <main+0x26>

	PORTB |= (1 << 1);
 2d0:	29 9a       	sbi	0x05, 1	; 5
}




if (! acc_init() ){
 2d2:	0e 94 6e 00 	call	0xdc	; 0xdc <acc_init>
 2d6:	89 2b       	or	r24, r25
 2d8:	09 f4       	brne	.+2      	; 0x2dc <main+0x30>

	PORTB |= (1 << 1);
 2da:	29 9a       	sbi	0x05, 1	; 5

uint8_t motors[5] = {0};	// carries data transferred to the motors



sei();
 2dc:	78 94       	sei

while(1){
	
	if (new_aileron_data_available){
 2de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2e2:	88 23       	and	r24, r24
 2e4:	e1 f3       	breq	.-8      	; 0x2de <main+0x32>

		if (requested_aileron_pos > 0x7000 ){
 2e6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <requested_aileron_pos>
 2ea:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <requested_aileron_pos+0x1>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	90 47       	sbci	r25, 0x70	; 112
 2f2:	98 f0       	brcs	.+38     	; 0x31a <main+0x6e>
			
			processed_aileron_pos = 0xffff - requested_aileron_pos;
 2f4:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <requested_aileron_pos>
 2f8:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <requested_aileron_pos+0x1>
 2fc:	60 95       	com	r22
 2fe:	70 95       	com	r23
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 96 02 	call	0x52c	; 0x52c <__floatunsisf>
 308:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <processed_aileron_pos>
 30c:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <processed_aileron_pos+0x1>
 310:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <processed_aileron_pos+0x2>
 314:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <processed_aileron_pos+0x3>
 318:	10 c0       	rjmp	.+32     	; 0x33a <main+0x8e>
		}
		
		else{
			
			processed_aileron_pos = requested_aileron_pos;
 31a:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <requested_aileron_pos>
 31e:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <requested_aileron_pos+0x1>
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 96 02 	call	0x52c	; 0x52c <__floatunsisf>
 32a:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <processed_aileron_pos>
 32e:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <processed_aileron_pos+0x1>
 332:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <processed_aileron_pos+0x2>
 336:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <processed_aileron_pos+0x3>
			
		}
		
		
		processed_aileron_pos *= 100;
 33a:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <processed_aileron_pos>
 33e:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <processed_aileron_pos+0x1>
 342:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <processed_aileron_pos+0x2>
 346:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <processed_aileron_pos+0x3>
 34a:	20 e0       	ldi	r18, 0x00	; 0
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	48 ec       	ldi	r20, 0xC8	; 200
 350:	52 e4       	ldi	r21, 0x42	; 66
 352:	0e 94 24 03 	call	0x648	; 0x648 <__mulsf3>
 356:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <processed_aileron_pos>
 35a:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <processed_aileron_pos+0x1>
 35e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <processed_aileron_pos+0x2>
 362:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <processed_aileron_pos+0x3>
		processed_aileron_pos /= 6553;	// 10% of the total value of the 16bit register
 366:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <processed_aileron_pos>
 36a:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <processed_aileron_pos+0x1>
 36e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <processed_aileron_pos+0x2>
 372:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <processed_aileron_pos+0x3>
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	38 ec       	ldi	r19, 0xC8	; 200
 37a:	4c ec       	ldi	r20, 0xCC	; 204
 37c:	55 e4       	ldi	r21, 0x45	; 69
 37e:	0e 94 24 02 	call	0x448	; 0x448 <__divsf3>
 382:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <processed_aileron_pos>
 386:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <processed_aileron_pos+0x1>
 38a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <processed_aileron_pos+0x2>
 38e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <processed_aileron_pos+0x3>

		
		new_aileron_data_available = false;
 392:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 396:	a3 cf       	rjmp	.-186    	; 0x2de <main+0x32>

00000398 <__vector_2>:


return 0;

}
ISR(INT1_vect){
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	2f 93       	push	r18
 3a4:	3f 93       	push	r19
 3a6:	8f 93       	push	r24
 3a8:	9f 93       	push	r25
	
		temp0 = TCNT1;
 3aa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 3ae:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3b2:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <temp0+0x1>
 3b6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <temp0>
		

		if ( temp0 < temp_timer_aileron){	// timer overflow
 3ba:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <temp0>
 3be:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <temp0+0x1>
 3c2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temp_timer_aileron>
 3c6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <temp_timer_aileron+0x1>
 3ca:	28 17       	cp	r18, r24
 3cc:	39 07       	cpc	r19, r25
 3ce:	80 f4       	brcc	.+32     	; 0x3f0 <__vector_2+0x58>

			requested_aileron_pos = (0xffff - temp_timer_aileron) + temp0 ;
 3d0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <temp0>
 3d4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <temp0+0x1>
 3d8:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <temp_timer_aileron>
 3dc:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <temp_timer_aileron+0x1>
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	82 1b       	sub	r24, r18
 3e4:	93 0b       	sbc	r25, r19
 3e6:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <requested_aileron_pos+0x1>
 3ea:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <requested_aileron_pos>
 3ee:	0e c0       	rjmp	.+28     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		}

		else {	// regular case
	
			requested_aileron_pos = temp0 - temp_timer_aileron;
 3f0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <temp0>
 3f4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <temp0+0x1>
 3f8:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <temp_timer_aileron>
 3fc:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <temp_timer_aileron+0x1>
 400:	82 1b       	sub	r24, r18
 402:	93 0b       	sbc	r25, r19
 404:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <requested_aileron_pos+0x1>
 408:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <requested_aileron_pos>
			
		}
	
		
		temp_timer_aileron = temp0;
 40c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <temp0>
 410:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <temp0+0x1>
 414:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <temp_timer_aileron+0x1>
 418:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp_timer_aileron>
		
		
		new_aileron_data_available = true;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		// here, there is a chance that the value stored in requested aileron is actually (0xffff - actual requested aileron) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
	
}
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <__vector_1>:

ISR(INT0_vect){/*
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
		
		// here, there is a chance that the value stored in requested throttle is actually (0xffff - actual requested throttle) this needs to be fixed in the while loop, it has been avoided here to kep the ISR short.
	
	*/

}
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <__divsf3>:
 448:	0e 94 38 02 	call	0x470	; 0x470 <__divsf3x>
 44c:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__fp_round>
 450:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__fp_pscB>
 454:	58 f0       	brcs	.+22     	; 0x46c <__divsf3+0x24>
 456:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__fp_pscA>
 45a:	40 f0       	brcs	.+16     	; 0x46c <__divsf3+0x24>
 45c:	29 f4       	brne	.+10     	; 0x468 <__divsf3+0x20>
 45e:	5f 3f       	cpi	r21, 0xFF	; 255
 460:	29 f0       	breq	.+10     	; 0x46c <__divsf3+0x24>
 462:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_inf>
 466:	51 11       	cpse	r21, r1
 468:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_szero>
 46c:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_nan>

00000470 <__divsf3x>:
 470:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fp_split3>
 474:	68 f3       	brcs	.-38     	; 0x450 <__divsf3+0x8>

00000476 <__divsf3_pse>:
 476:	99 23       	and	r25, r25
 478:	b1 f3       	breq	.-20     	; 0x466 <__divsf3+0x1e>
 47a:	55 23       	and	r21, r21
 47c:	91 f3       	breq	.-28     	; 0x462 <__divsf3+0x1a>
 47e:	95 1b       	sub	r25, r21
 480:	55 0b       	sbc	r21, r21
 482:	bb 27       	eor	r27, r27
 484:	aa 27       	eor	r26, r26
 486:	62 17       	cp	r22, r18
 488:	73 07       	cpc	r23, r19
 48a:	84 07       	cpc	r24, r20
 48c:	38 f0       	brcs	.+14     	; 0x49c <__divsf3_pse+0x26>
 48e:	9f 5f       	subi	r25, 0xFF	; 255
 490:	5f 4f       	sbci	r21, 0xFF	; 255
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	44 1f       	adc	r20, r20
 498:	aa 1f       	adc	r26, r26
 49a:	a9 f3       	breq	.-22     	; 0x486 <__divsf3_pse+0x10>
 49c:	35 d0       	rcall	.+106    	; 0x508 <__divsf3_pse+0x92>
 49e:	0e 2e       	mov	r0, r30
 4a0:	3a f0       	brmi	.+14     	; 0x4b0 <__divsf3_pse+0x3a>
 4a2:	e0 e8       	ldi	r30, 0x80	; 128
 4a4:	32 d0       	rcall	.+100    	; 0x50a <__divsf3_pse+0x94>
 4a6:	91 50       	subi	r25, 0x01	; 1
 4a8:	50 40       	sbci	r21, 0x00	; 0
 4aa:	e6 95       	lsr	r30
 4ac:	00 1c       	adc	r0, r0
 4ae:	ca f7       	brpl	.-14     	; 0x4a2 <__divsf3_pse+0x2c>
 4b0:	2b d0       	rcall	.+86     	; 0x508 <__divsf3_pse+0x92>
 4b2:	fe 2f       	mov	r31, r30
 4b4:	29 d0       	rcall	.+82     	; 0x508 <__divsf3_pse+0x92>
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	88 1f       	adc	r24, r24
 4bc:	bb 1f       	adc	r27, r27
 4be:	26 17       	cp	r18, r22
 4c0:	37 07       	cpc	r19, r23
 4c2:	48 07       	cpc	r20, r24
 4c4:	ab 07       	cpc	r26, r27
 4c6:	b0 e8       	ldi	r27, 0x80	; 128
 4c8:	09 f0       	breq	.+2      	; 0x4cc <__divsf3_pse+0x56>
 4ca:	bb 0b       	sbc	r27, r27
 4cc:	80 2d       	mov	r24, r0
 4ce:	bf 01       	movw	r22, r30
 4d0:	ff 27       	eor	r31, r31
 4d2:	93 58       	subi	r25, 0x83	; 131
 4d4:	5f 4f       	sbci	r21, 0xFF	; 255
 4d6:	3a f0       	brmi	.+14     	; 0x4e6 <__divsf3_pse+0x70>
 4d8:	9e 3f       	cpi	r25, 0xFE	; 254
 4da:	51 05       	cpc	r21, r1
 4dc:	78 f0       	brcs	.+30     	; 0x4fc <__divsf3_pse+0x86>
 4de:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_inf>
 4e2:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_szero>
 4e6:	5f 3f       	cpi	r21, 0xFF	; 255
 4e8:	e4 f3       	brlt	.-8      	; 0x4e2 <__divsf3_pse+0x6c>
 4ea:	98 3e       	cpi	r25, 0xE8	; 232
 4ec:	d4 f3       	brlt	.-12     	; 0x4e2 <__divsf3_pse+0x6c>
 4ee:	86 95       	lsr	r24
 4f0:	77 95       	ror	r23
 4f2:	67 95       	ror	r22
 4f4:	b7 95       	ror	r27
 4f6:	f7 95       	ror	r31
 4f8:	9f 5f       	subi	r25, 0xFF	; 255
 4fa:	c9 f7       	brne	.-14     	; 0x4ee <__divsf3_pse+0x78>
 4fc:	88 0f       	add	r24, r24
 4fe:	91 1d       	adc	r25, r1
 500:	96 95       	lsr	r25
 502:	87 95       	ror	r24
 504:	97 f9       	bld	r25, 7
 506:	08 95       	ret
 508:	e1 e0       	ldi	r30, 0x01	; 1
 50a:	66 0f       	add	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	88 1f       	adc	r24, r24
 510:	bb 1f       	adc	r27, r27
 512:	62 17       	cp	r22, r18
 514:	73 07       	cpc	r23, r19
 516:	84 07       	cpc	r24, r20
 518:	ba 07       	cpc	r27, r26
 51a:	20 f0       	brcs	.+8      	; 0x524 <__divsf3_pse+0xae>
 51c:	62 1b       	sub	r22, r18
 51e:	73 0b       	sbc	r23, r19
 520:	84 0b       	sbc	r24, r20
 522:	ba 0b       	sbc	r27, r26
 524:	ee 1f       	adc	r30, r30
 526:	88 f7       	brcc	.-30     	; 0x50a <__divsf3_pse+0x94>
 528:	e0 95       	com	r30
 52a:	08 95       	ret

0000052c <__floatunsisf>:
 52c:	e8 94       	clt
 52e:	09 c0       	rjmp	.+18     	; 0x542 <__floatsisf+0x12>

00000530 <__floatsisf>:
 530:	97 fb       	bst	r25, 7
 532:	3e f4       	brtc	.+14     	; 0x542 <__floatsisf+0x12>
 534:	90 95       	com	r25
 536:	80 95       	com	r24
 538:	70 95       	com	r23
 53a:	61 95       	neg	r22
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	8f 4f       	sbci	r24, 0xFF	; 255
 540:	9f 4f       	sbci	r25, 0xFF	; 255
 542:	99 23       	and	r25, r25
 544:	a9 f0       	breq	.+42     	; 0x570 <__floatsisf+0x40>
 546:	f9 2f       	mov	r31, r25
 548:	96 e9       	ldi	r25, 0x96	; 150
 54a:	bb 27       	eor	r27, r27
 54c:	93 95       	inc	r25
 54e:	f6 95       	lsr	r31
 550:	87 95       	ror	r24
 552:	77 95       	ror	r23
 554:	67 95       	ror	r22
 556:	b7 95       	ror	r27
 558:	f1 11       	cpse	r31, r1
 55a:	f8 cf       	rjmp	.-16     	; 0x54c <__floatsisf+0x1c>
 55c:	fa f4       	brpl	.+62     	; 0x59c <__floatsisf+0x6c>
 55e:	bb 0f       	add	r27, r27
 560:	11 f4       	brne	.+4      	; 0x566 <__floatsisf+0x36>
 562:	60 ff       	sbrs	r22, 0
 564:	1b c0       	rjmp	.+54     	; 0x59c <__floatsisf+0x6c>
 566:	6f 5f       	subi	r22, 0xFF	; 255
 568:	7f 4f       	sbci	r23, 0xFF	; 255
 56a:	8f 4f       	sbci	r24, 0xFF	; 255
 56c:	9f 4f       	sbci	r25, 0xFF	; 255
 56e:	16 c0       	rjmp	.+44     	; 0x59c <__floatsisf+0x6c>
 570:	88 23       	and	r24, r24
 572:	11 f0       	breq	.+4      	; 0x578 <__floatsisf+0x48>
 574:	96 e9       	ldi	r25, 0x96	; 150
 576:	11 c0       	rjmp	.+34     	; 0x59a <__floatsisf+0x6a>
 578:	77 23       	and	r23, r23
 57a:	21 f0       	breq	.+8      	; 0x584 <__floatsisf+0x54>
 57c:	9e e8       	ldi	r25, 0x8E	; 142
 57e:	87 2f       	mov	r24, r23
 580:	76 2f       	mov	r23, r22
 582:	05 c0       	rjmp	.+10     	; 0x58e <__floatsisf+0x5e>
 584:	66 23       	and	r22, r22
 586:	71 f0       	breq	.+28     	; 0x5a4 <__floatsisf+0x74>
 588:	96 e8       	ldi	r25, 0x86	; 134
 58a:	86 2f       	mov	r24, r22
 58c:	70 e0       	ldi	r23, 0x00	; 0
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	2a f0       	brmi	.+10     	; 0x59c <__floatsisf+0x6c>
 592:	9a 95       	dec	r25
 594:	66 0f       	add	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	88 1f       	adc	r24, r24
 59a:	da f7       	brpl	.-10     	; 0x592 <__floatsisf+0x62>
 59c:	88 0f       	add	r24, r24
 59e:	96 95       	lsr	r25
 5a0:	87 95       	ror	r24
 5a2:	97 f9       	bld	r25, 7
 5a4:	08 95       	ret

000005a6 <__fp_inf>:
 5a6:	97 f9       	bld	r25, 7
 5a8:	9f 67       	ori	r25, 0x7F	; 127
 5aa:	80 e8       	ldi	r24, 0x80	; 128
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	08 95       	ret

000005b2 <__fp_nan>:
 5b2:	9f ef       	ldi	r25, 0xFF	; 255
 5b4:	80 ec       	ldi	r24, 0xC0	; 192
 5b6:	08 95       	ret

000005b8 <__fp_pscA>:
 5b8:	00 24       	eor	r0, r0
 5ba:	0a 94       	dec	r0
 5bc:	16 16       	cp	r1, r22
 5be:	17 06       	cpc	r1, r23
 5c0:	18 06       	cpc	r1, r24
 5c2:	09 06       	cpc	r0, r25
 5c4:	08 95       	ret

000005c6 <__fp_pscB>:
 5c6:	00 24       	eor	r0, r0
 5c8:	0a 94       	dec	r0
 5ca:	12 16       	cp	r1, r18
 5cc:	13 06       	cpc	r1, r19
 5ce:	14 06       	cpc	r1, r20
 5d0:	05 06       	cpc	r0, r21
 5d2:	08 95       	ret

000005d4 <__fp_round>:
 5d4:	09 2e       	mov	r0, r25
 5d6:	03 94       	inc	r0
 5d8:	00 0c       	add	r0, r0
 5da:	11 f4       	brne	.+4      	; 0x5e0 <__fp_round+0xc>
 5dc:	88 23       	and	r24, r24
 5de:	52 f0       	brmi	.+20     	; 0x5f4 <__fp_round+0x20>
 5e0:	bb 0f       	add	r27, r27
 5e2:	40 f4       	brcc	.+16     	; 0x5f4 <__fp_round+0x20>
 5e4:	bf 2b       	or	r27, r31
 5e6:	11 f4       	brne	.+4      	; 0x5ec <__fp_round+0x18>
 5e8:	60 ff       	sbrs	r22, 0
 5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <__fp_round+0x20>
 5ec:	6f 5f       	subi	r22, 0xFF	; 255
 5ee:	7f 4f       	sbci	r23, 0xFF	; 255
 5f0:	8f 4f       	sbci	r24, 0xFF	; 255
 5f2:	9f 4f       	sbci	r25, 0xFF	; 255
 5f4:	08 95       	ret

000005f6 <__fp_split3>:
 5f6:	57 fd       	sbrc	r21, 7
 5f8:	90 58       	subi	r25, 0x80	; 128
 5fa:	44 0f       	add	r20, r20
 5fc:	55 1f       	adc	r21, r21
 5fe:	59 f0       	breq	.+22     	; 0x616 <__fp_splitA+0x10>
 600:	5f 3f       	cpi	r21, 0xFF	; 255
 602:	71 f0       	breq	.+28     	; 0x620 <__fp_splitA+0x1a>
 604:	47 95       	ror	r20

00000606 <__fp_splitA>:
 606:	88 0f       	add	r24, r24
 608:	97 fb       	bst	r25, 7
 60a:	99 1f       	adc	r25, r25
 60c:	61 f0       	breq	.+24     	; 0x626 <__fp_splitA+0x20>
 60e:	9f 3f       	cpi	r25, 0xFF	; 255
 610:	79 f0       	breq	.+30     	; 0x630 <__fp_splitA+0x2a>
 612:	87 95       	ror	r24
 614:	08 95       	ret
 616:	12 16       	cp	r1, r18
 618:	13 06       	cpc	r1, r19
 61a:	14 06       	cpc	r1, r20
 61c:	55 1f       	adc	r21, r21
 61e:	f2 cf       	rjmp	.-28     	; 0x604 <__fp_split3+0xe>
 620:	46 95       	lsr	r20
 622:	f1 df       	rcall	.-30     	; 0x606 <__fp_splitA>
 624:	08 c0       	rjmp	.+16     	; 0x636 <__fp_splitA+0x30>
 626:	16 16       	cp	r1, r22
 628:	17 06       	cpc	r1, r23
 62a:	18 06       	cpc	r1, r24
 62c:	99 1f       	adc	r25, r25
 62e:	f1 cf       	rjmp	.-30     	; 0x612 <__fp_splitA+0xc>
 630:	86 95       	lsr	r24
 632:	71 05       	cpc	r23, r1
 634:	61 05       	cpc	r22, r1
 636:	08 94       	sec
 638:	08 95       	ret

0000063a <__fp_zero>:
 63a:	e8 94       	clt

0000063c <__fp_szero>:
 63c:	bb 27       	eor	r27, r27
 63e:	66 27       	eor	r22, r22
 640:	77 27       	eor	r23, r23
 642:	cb 01       	movw	r24, r22
 644:	97 f9       	bld	r25, 7
 646:	08 95       	ret

00000648 <__mulsf3>:
 648:	0e 94 37 03 	call	0x66e	; 0x66e <__mulsf3x>
 64c:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__fp_round>
 650:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <__fp_pscA>
 654:	38 f0       	brcs	.+14     	; 0x664 <__mulsf3+0x1c>
 656:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__fp_pscB>
 65a:	20 f0       	brcs	.+8      	; 0x664 <__mulsf3+0x1c>
 65c:	95 23       	and	r25, r21
 65e:	11 f0       	breq	.+4      	; 0x664 <__mulsf3+0x1c>
 660:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_inf>
 664:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_nan>
 668:	11 24       	eor	r1, r1
 66a:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_szero>

0000066e <__mulsf3x>:
 66e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fp_split3>
 672:	70 f3       	brcs	.-36     	; 0x650 <__mulsf3+0x8>

00000674 <__mulsf3_pse>:
 674:	95 9f       	mul	r25, r21
 676:	c1 f3       	breq	.-16     	; 0x668 <__mulsf3+0x20>
 678:	95 0f       	add	r25, r21
 67a:	50 e0       	ldi	r21, 0x00	; 0
 67c:	55 1f       	adc	r21, r21
 67e:	62 9f       	mul	r22, r18
 680:	f0 01       	movw	r30, r0
 682:	72 9f       	mul	r23, r18
 684:	bb 27       	eor	r27, r27
 686:	f0 0d       	add	r31, r0
 688:	b1 1d       	adc	r27, r1
 68a:	63 9f       	mul	r22, r19
 68c:	aa 27       	eor	r26, r26
 68e:	f0 0d       	add	r31, r0
 690:	b1 1d       	adc	r27, r1
 692:	aa 1f       	adc	r26, r26
 694:	64 9f       	mul	r22, r20
 696:	66 27       	eor	r22, r22
 698:	b0 0d       	add	r27, r0
 69a:	a1 1d       	adc	r26, r1
 69c:	66 1f       	adc	r22, r22
 69e:	82 9f       	mul	r24, r18
 6a0:	22 27       	eor	r18, r18
 6a2:	b0 0d       	add	r27, r0
 6a4:	a1 1d       	adc	r26, r1
 6a6:	62 1f       	adc	r22, r18
 6a8:	73 9f       	mul	r23, r19
 6aa:	b0 0d       	add	r27, r0
 6ac:	a1 1d       	adc	r26, r1
 6ae:	62 1f       	adc	r22, r18
 6b0:	83 9f       	mul	r24, r19
 6b2:	a0 0d       	add	r26, r0
 6b4:	61 1d       	adc	r22, r1
 6b6:	22 1f       	adc	r18, r18
 6b8:	74 9f       	mul	r23, r20
 6ba:	33 27       	eor	r19, r19
 6bc:	a0 0d       	add	r26, r0
 6be:	61 1d       	adc	r22, r1
 6c0:	23 1f       	adc	r18, r19
 6c2:	84 9f       	mul	r24, r20
 6c4:	60 0d       	add	r22, r0
 6c6:	21 1d       	adc	r18, r1
 6c8:	82 2f       	mov	r24, r18
 6ca:	76 2f       	mov	r23, r22
 6cc:	6a 2f       	mov	r22, r26
 6ce:	11 24       	eor	r1, r1
 6d0:	9f 57       	subi	r25, 0x7F	; 127
 6d2:	50 40       	sbci	r21, 0x00	; 0
 6d4:	9a f0       	brmi	.+38     	; 0x6fc <__mulsf3_pse+0x88>
 6d6:	f1 f0       	breq	.+60     	; 0x714 <__mulsf3_pse+0xa0>
 6d8:	88 23       	and	r24, r24
 6da:	4a f0       	brmi	.+18     	; 0x6ee <__mulsf3_pse+0x7a>
 6dc:	ee 0f       	add	r30, r30
 6de:	ff 1f       	adc	r31, r31
 6e0:	bb 1f       	adc	r27, r27
 6e2:	66 1f       	adc	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	88 1f       	adc	r24, r24
 6e8:	91 50       	subi	r25, 0x01	; 1
 6ea:	50 40       	sbci	r21, 0x00	; 0
 6ec:	a9 f7       	brne	.-22     	; 0x6d8 <__mulsf3_pse+0x64>
 6ee:	9e 3f       	cpi	r25, 0xFE	; 254
 6f0:	51 05       	cpc	r21, r1
 6f2:	80 f0       	brcs	.+32     	; 0x714 <__mulsf3_pse+0xa0>
 6f4:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_inf>
 6f8:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_szero>
 6fc:	5f 3f       	cpi	r21, 0xFF	; 255
 6fe:	e4 f3       	brlt	.-8      	; 0x6f8 <__mulsf3_pse+0x84>
 700:	98 3e       	cpi	r25, 0xE8	; 232
 702:	d4 f3       	brlt	.-12     	; 0x6f8 <__mulsf3_pse+0x84>
 704:	86 95       	lsr	r24
 706:	77 95       	ror	r23
 708:	67 95       	ror	r22
 70a:	b7 95       	ror	r27
 70c:	f7 95       	ror	r31
 70e:	e7 95       	ror	r30
 710:	9f 5f       	subi	r25, 0xFF	; 255
 712:	c1 f7       	brne	.-16     	; 0x704 <__mulsf3_pse+0x90>
 714:	fe 2b       	or	r31, r30
 716:	88 0f       	add	r24, r24
 718:	91 1d       	adc	r25, r1
 71a:	96 95       	lsr	r25
 71c:	87 95       	ror	r24
 71e:	97 f9       	bld	r25, 7
 720:	08 95       	ret

00000722 <_exit>:
 722:	f8 94       	cli

00000724 <__stop_program>:
 724:	ff cf       	rjmp	.-2      	; 0x724 <__stop_program>
