
AAquad_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000022c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000af1  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b1  00000000  00000000  00000df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047d  00000000  00000000  000017a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f2  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000021a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000021ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 b1 00 	jmp	0x162	; 0x162 <__vector_2>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 82 00 	call	0x104	; 0x104 <main>
  d4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <init_free_timer>:
void init_free_timer(){


	// by default the timer is set to normal mode

	TCNT1H |= (1 << CS11);	// timer will run with an x8 prescaler 
  dc:	e5 e8       	ldi	r30, 0x85	; 133
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <init_mux_timer>:

// this timer is responsible for providing the pwm that periodically flips the muxes back and forth
// uses the 8 bit timer 0 for this job


	TCCR0B |= (1 << CS00); // the timer will run on the internal clock (currently with no prescaler)
  e8:	85 b5       	in	r24, 0x25	; 37
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	85 bd       	out	0x25, r24	; 37

	TCCR0A |= (1 << WGM01);	// CTC mode (clear timer on compare match)
  ee:	84 b5       	in	r24, 0x24	; 36
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	84 bd       	out	0x24, r24	; 36

	TIMSK0 |= (1 << OCIE0A);	//  Enable output compare match interrupt
  f4:	ee e6       	ldi	r30, 0x6E	; 110
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	80 83       	st	Z, r24

	OCR0A = 0xFF;	// defines the TOP value the timer counts to.
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	87 bd       	out	0x27, r24	; 39
 102:	08 95       	ret

00000104 <main>:
	volatile uint8_t temp_timer_aileron = 0; 


int main(void){
	
	sei();
 104:	78 94       	sei

DDRC |= (1 << 3);
 106:	3b 9a       	sbi	0x07, 3	; 7
DDRB |= (1 << 0);
 108:	20 9a       	sbi	0x04, 0	; 4
init_mux_timer();
 10a:	0e 94 74 00 	call	0xe8	; 0xe8 <init_mux_timer>
init_free_timer();
 10e:	0e 94 6e 00 	call	0xdc	; 0xdc <init_free_timer>

DDRC = 0;
 112:	17 b8       	out	0x07, r1	; 7
PORTC = 0xFF;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	88 b9       	out	0x08, r24	; 8


DDRD = 0xff;
 118:	8a b9       	out	0x0a, r24	; 10
TCCR4B |= ( (1 << WGM13) | (1 << WGM12) | (1 << CS10) );		// selecting fast PWM mode (counts up till selected value then resets)
 11a:	e1 ea       	ldi	r30, 0xA1	; 161
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	89 61       	ori	r24, 0x19	; 25
 122:	80 83       	st	Z, r24

TCCR4A |= ((1 << WGM11)| (1<<COM1A1) | (1<<COM1A0));	// set inverting mode fast pwm
 124:	e0 ea       	ldi	r30, 0xA0	; 160
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 6c       	ori	r24, 0xC2	; 194
 12c:	80 83       	st	Z, r24


ICR4 = 19999;
 12e:	8f e1       	ldi	r24, 0x1F	; 31
 130:	9e e4       	ldi	r25, 0x4E	; 78
 132:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7e00a7>
 136:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7e00a6>

OCR4A = 16000;
 13a:	80 e8       	ldi	r24, 0x80	; 128
 13c:	9e e3       	ldi	r25, 0x3E	; 62
 13e:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7e00a9>
 142:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7e00a8>

PORTB |= (1 << 0);
 146:	28 9a       	sbi	0x05, 0	; 5

while(1){

	OCR4A = 19999 - (requested_aileron_pos * 100);	// try setting requested aileron to a constant
 148:	3c e9       	ldi	r19, 0x9C	; 156
 14a:	e8 ea       	ldi	r30, 0xA8	; 168
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <requested_aileron_pos>
 152:	32 03       	mulsu	r19, r18
 154:	c0 01       	movw	r24, r0
 156:	11 24       	eor	r1, r1
 158:	81 5e       	subi	r24, 0xE1	; 225
 15a:	91 4b       	sbci	r25, 0xB1	; 177
 15c:	91 83       	std	Z+1, r25	; 0x01
 15e:	80 83       	st	Z, r24
 160:	f6 cf       	rjmp	.-20     	; 0x14e <main+0x4a>

00000162 <__vector_2>:


return 0;

}
ISR(INT1_vect){
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25


		if ( TCNT1H < temp_timer_aileron){	// timer overflow
 170:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 174:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 178:	98 17       	cp	r25, r24
 17a:	48 f4       	brcc	.+18     	; 0x18e <__vector_2+0x2c>

			requested_aileron_pos = 0xff- temp_timer_aileron + TCNT1H ;
 17c:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 180:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 184:	81 50       	subi	r24, 0x01	; 1
 186:	89 1b       	sub	r24, r25
 188:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <requested_aileron_pos>
 18c:	07 c0       	rjmp	.+14     	; 0x19c <__vector_2+0x3a>
		}

		else{
			
			requested_aileron_pos = TCNT1H - temp_timer_aileron;
 18e:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 192:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 196:	89 1b       	sub	r24, r25
 198:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <requested_aileron_pos>
		}
		
		PORTB |= (1 << 0);
 19c:	28 9a       	sbi	0x05, 0	; 5
		
		temp_timer_aileron = TCNT1H;
 19e:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
